var __reflect = (this && this.__reflect) || function (p, c, t) {
    p.__class__ = c, t ? t.push(c) : t = [c], p.__types__ = p.__types__ ? t.concat(p.__types__) : t;
};
var __extends = this && this.__extends || function __extends(t, e) { 
 function r() { 
 this.constructor = t;
}
for (var i in e) e.hasOwnProperty(i) && (t[i] = e[i]);
r.prototype = e.prototype, t.prototype = new r();
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var UnitAction = (function () {
    function UnitAction() {
    }
    /** 攻击 */
    UnitAction.ATTACK = "a";
    /** 施法 */
    UnitAction.CAST = "c";
    /** 待机 */
    UnitAction.STAND = "s";
    /** 奔跑 */
    UnitAction.RUN = "r";
    /** 死亡 */
    UnitAction.DIE = "d";
    /** 受击 */
    UnitAction.HIT = "h";
    return UnitAction;
}());
__reflect(UnitAction.prototype, "UnitAction");
var EffectModel = (function () {
    function EffectModel() {
        this.dir = 4;
        this.team = 4 /* NotAtk */;
    }
    return EffectModel;
}());
__reflect(EffectModel.prototype, "EffectModel");
/**
 * Npc
 */
var NpcModel = (function (_super) {
    __extends(NpcModel, _super);
    function NpcModel() {
        var _this = _super.call(this) || this;
        _this.type = 100 /* CNPC */;
        return _this;
    }
    Object.defineProperty(NpcModel.prototype, "avatarString", {
        get: function () {
            var config = DataCenter.ins().NpcBaseConfig[this.configID];
            return config ? config.avatar : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NpcModel.prototype, "avatarFileName", {
        get: function () {
            var config = this.npcConfig;
            if (config.actType == 1) {
                return "" + PATH_RENWU + RENWU_PREFIX + config.avatar;
            }
            return "" + PATH_GUAIWU + GUAIWU_PREFIX + config.avatar;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NpcModel.prototype, "weaponFileName", {
        get: function () {
            var config = this.npcConfig;
            if (config.weapon) {
                return "" + PATH_WUQI + WUQI_PREFIX + config.weapon;
            }
            return '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NpcModel.prototype, "npcConfig", {
        get: function () {
            return DataCenter.ins().NpcBaseConfig[this.configID];
        },
        enumerable: true,
        configurable: true
    });
    //浅复制
    NpcModel.prototype.clone = function (model) {
        var Cls = egret.getQualifiedClassName(this);
        model = model || ObjectPool.pop(Cls);
        for (var key in this) {
            if (typeof this[key] != 'function') {
                if (key != "__class__" && key != "__types__") {
                    model[key] = this[key];
                }
            }
        }
        return model;
    };
    return NpcModel;
}(EffectModel));
__reflect(NpcModel.prototype, "NpcModel");
/**
 * EuiView基类
 */
var BaseEuiView = (function (_super) {
    __extends(BaseEuiView, _super);
    /**
     * 构造函数
     */
    function BaseEuiView() {
        var _this = _super.call(this) || this;
        /** 是否一级窗口,一级窗口会把部分主界面遮挡 */
        _this.isTopLevel = false;
        /** 可销毁释放 */
        _this.canDestroy = true;
        _this.canVis = false;
        _this.isEasying = false;
        _this.isNotMove = false;
        /** 显示打开日志 */
        _this.isShowLog = true;
        /** 常驻界面 */
        _this.resident = false;
        /** 互斥窗口,类名或者类字符串的数组,打开某些窗口会关闭互斥的窗口*/
        _this.exclusionWins = [];
        /** 层级容器,构造函数中赋值 */
        _this.uilayer = GameLayer.MAIN1;
        //播放动画
        _this.isPlayAnima = true;
        _this._isInit = false;
        _this.percentHeight = 100;
        _this.percentWidth = 100;
        _this.addEvent(eui.UIEvent.COMPLETE, _this, _this.uiCompHandler);
        return _this;
    }
    BaseEuiView.prototype.uiCompHandler = function () {
        this.removeEvent(eui.UIEvent.COMPLETE, this, this.uiCompHandler);
        if (this.uiInitComplete) {
            this.uiInitComplete.call(this);
        }
        else {
            this.uiIsComplete = true;
        }
    };
    /**
     * 添加互斥窗口
     * @classOrName 类名或者类字符串
     */
    BaseEuiView.prototype.addExclusionWin = function (classOrName) {
        if (this.exclusionWins.indexOf(classOrName) == -1) {
            this.exclusionWins.push(classOrName);
        }
    };
    /**
     * 是否已经初始化
     * @returns {boolean}
     */
    BaseEuiView.prototype.isInit = function () {
        return this._isInit;
    };
    /**
     * 面板是否显示
     */
    BaseEuiView.prototype.isShow = function () {
        return this.stage != null && this.visible;
    };
    BaseEuiView.prototype.onChangeTap = function (e) {
        _super.prototype.onChangeTap.call(this, e);
        SoundUtils.ins().playEffect(SoundUtils.VIEW);
    };
    /**
     * 添加到父级
     */
    BaseEuiView.prototype.addToParent = function (parent, index) {
        index != null ? parent.addChildAt(this, index) : parent.addChild(this);
    };
    /**
     * 从父级移除
     */
    BaseEuiView.prototype.removeFromParent = function () {
        DisplayUtils.removeFromParent(this);
        this.destoryView();
    };
    /**
     * 对面板进行显示初始化，用于子类继承
     */
    BaseEuiView.prototype.initUI = function () {
        this._isInit = true;
    };
    /**
     * 对面板数据的初始化，用于子类继承
     */
    BaseEuiView.prototype.initData = function () {
    };
    /**
     * 销毁
     */
    BaseEuiView.prototype.destroy = function () {
    };
    BaseEuiView.prototype.destoryView = function (destroyUI) {
        if (destroyUI === void 0) { destroyUI = true; }
        TimerMgr.ins().removeAll(this);
        if (this.canDestroy) {
            UIMgr.ins().destroy(this.hashCode);
        }
        if (destroyUI) {
            RecycleMgr.ins().destroyWin();
        }
    };
    /**
     * 面板开启执行函数，用于子类继承
     * @param param 参数
     */
    BaseEuiView.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
    };
    /**
     * 面板关闭执行函数，用于子类继承
     * @param param 参数
     */
    BaseEuiView.prototype.close = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
    };
    BaseEuiView.prototype.closePanel = function (index) {
        var viewStack = this["viewStack"];
        if (viewStack && index >= 0 && index < viewStack.numChildren) {
            var panel = viewStack.getChildAt(index);
            if (panel && panel.close) {
                panel.close();
            }
        }
    };
    /**
     * 加载面板所需资源
     */
    BaseEuiView.prototype.loadResource = function (loadComplete, initComplete) {
        loadComplete();
        if (this.skinName == null || this.uiIsComplete) {
            initComplete();
        }
        else {
            this.uiInitComplete = initComplete;
        }
    };
    /**
     * 设置是否隐藏
     * @param value
     */
    BaseEuiView.prototype.setVisible = function (value) {
        this.visible = value;
    };
    BaseEuiView.openCheck = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        return true;
    };
    BaseEuiView.prototype.playAnima = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        if (this.anigroup && this.isPlayAnima) {
            AnimaMgr.play(this.anigroup, AnimaMgr.ANITYPE_IN_SCALE_VER, { time: 200 });
        }
    };
    BaseEuiView.prototype.closeEx = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        var func = param[0];
        var ruleId = param[1];
        if (!ruleId || !this.closeToRuleId(ruleId, func)) {
            if (this.parent == GameLayer.POPUP && this.anigroup) {
                AnimaMgr.play(this.anigroup, AnimaMgr.ANITYPE_OUT_SCALE_VER, { time: 200, func: func, ease: egret.Ease.sineIn });
            }
            else {
                func();
            }
        }
    };
    BaseEuiView.prototype.closeToRuleId = function (ruleId, func) {
        var view = UIMgr.playFun;
        if (view) {
            var rule = view.getRuleById(ruleId);
            if (rule) {
                var tar = rule.tar;
                if (tar && tar.parent) {
                    this.easyToTarget(tar, func);
                    return true;
                }
            }
        }
        return false;
    };
    BaseEuiView.prototype.easyToTarget = function (tar, func) {
        var thisObj = this;
        if (!this.isEasying) {
            this.isEasying = true;
            var x_1 = this.x;
            var y_1 = this.y;
            var anchorOffsetX_1 = this.anchorOffsetX;
            var anchorOffsetY_1 = this.anchorOffsetY;
            var scaleX_1 = this.scaleX;
            var scaleY_1 = this.scaleY;
            var width = this.width;
            var height = this.height;
            this.percentHeight = 0;
            this.percentWidth = 0;
            this.width = width;
            this.height = height;
            this.x = this.anchorOffsetX = this.width / 2;
            this.y = this.anchorOffsetY = this.height / 2;
            var bgShow_1 = false;
            if (this["bgClose"]) {
                bgShow_1 = this["bgClose"].visible;
                this["bgClose"].visible = false;
            }
            var point = tar.parent.localToGlobal(tar.x + tar.width / 2, tar.y + tar.height / 2);
            egret.Tween.get(this).to({
                scaleX: 0,
                scaleY: 0,
                x: point.x,
                y: point.y
            }, 500).call(function () {
                thisObj.x = x_1;
                thisObj.y = y_1;
                thisObj.anchorOffsetX = anchorOffsetX_1;
                thisObj.anchorOffsetY = anchorOffsetY_1;
                thisObj.scaleX = scaleX_1;
                thisObj.scaleY = scaleY_1;
                if (thisObj["bgClose"]) {
                    thisObj["bgClose"].visible = bgShow_1;
                }
                thisObj.percentHeight = 100;
                thisObj.percentWidth = 100;
                thisObj.isEasying = false;
                func && func();
            });
        }
    };
    return BaseEuiView;
}(BasePanel));
__reflect(BaseEuiView.prototype, "BaseEuiView", ["IBaseView"]);
/**
 * PlatformBase
 */
var PlatformBase = (function () {
    function PlatformBase() {
    }
    /**
     * 初始化SDK
     */
    PlatformBase.prototype.SDKInitNative = function () {
        egret.ExternalInterface.call("SDKInitNative", "");
    };
    /**
     * 小游戏提审版本
     */
    PlatformBase.prototype.SDKMiniAuditVer = function () {
        return 0;
    };
    /**
     * SDK需要初始化
     */
    PlatformBase.prototype.SDKIsNeedInit = function () {
    };
    /**
     * SDK需要登陆
     */
    PlatformBase.prototype.SDKIsNeedLoginNative = function () {
    };
    /**
     * SDK自动登陆
     */
    PlatformBase.prototype.SDKAutoLoginNative = function (args) {
        egret.ExternalInterface.call("SDKAutoLoginNative", "");
    };
    /**
     * SDK登陆
     */
    PlatformBase.prototype.SDKLoginNative = function (args) {
        egret.ExternalInterface.call("SDKLoginNative", "");
    };
    /**
     * SDK自定义登陆界面
     */
    PlatformBase.prototype.SDKHasLoginScene = function () {
        return false;
    };
    /**
     * SDK登陆验证参数
     */
    PlatformBase.prototype.GetSDKCheckAccountArgs = function () {
        return null;
    };
    /**
     * SDK创建角色
     */
    PlatformBase.prototype.SDKCreateRoleNative = function (params) {
    };
    /**
     * SDK进入游戏
     */
    PlatformBase.prototype.SDKEnterGameNative = function (params) {
    };
    /**
     * SDK角色升级
     */
    PlatformBase.prototype.SDKUserUpgradeNative = function (params) {
    };
    /**
     * SDK下单参数
     */
    PlatformBase.prototype.GetMakeOrderSdkArgs = function (params) {
        return JSON.stringify({
            paytype: "home"
        });
    };
    /**
     * SDK是否支持支付
     */
    PlatformBase.prototype.CheckSupportRecharge = function () {
        return true;
    };
    /**
     * SDK支付
     */
    PlatformBase.prototype.SDKPayNative = function (params) {
    };
    /**
     * SDK埋点
     */
    PlatformBase.prototype.SDKSetDataNative = function (params) {
    };
    /**
     * 打开平台ICO特定的功能界面
     */
    PlatformBase.prototype.SDKShowImmersiveIconNative = function (params) {
    };
    /**
     * SDK登出
     */
    PlatformBase.prototype.SDKLogoutNative = function () {
        egret.ExternalInterface.call("SDKLogoutNative", "");
    };
    /**
     * SDK退出
     */
    PlatformBase.prototype.SDKExitNative = function () {
        egret.ExternalInterface.call("SDKExitNative", "");
    };
    /**
     * 渠道
     */
    PlatformBase.prototype.nativeCallChannelType = function (channelId) {
        GlobalModel.setUrlParamValue("channelId", channelId);
    };
    /**
     * APP版本号
     */
    PlatformBase.prototype.nativeCallAppVersion = function (appVersion) {
        GlobalModel.setUrlParamValue("appVersion", appVersion);
    };
    /**
     * SDK分享
     */
    PlatformBase.prototype.SDKShowShare = function (params) {
    };
    /**
     * SDK二维码
     */
    PlatformBase.prototype.SDKShowQRCode = function () {
    };
    /**
     * facebook礼包
     */
    PlatformBase.prototype.SDKStartForGift = function () {
    };
    /**
     * 活动
     */
    PlatformBase.prototype.SDKFaceStartGift = function () {
    };
    /**
     * SDK回调(子类实现)
     */
    PlatformBase.prototype.nativeCallback = function (msg) {
        debug.log("SDKCallData:", msg);
        var jsonObj = JSON.parse(msg);
        var callType = jsonObj['callType'];
        if (callType == 'init') {
            //初始回调
        }
        else if (callType == 'pay') {
            //充值回调
        }
    };
    /**
     * 执行tap
     */
    PlatformBase.prototype.SDKTapExecute = function () {
    };
    /**
     * 显示切换账号
     */
    PlatformBase.prototype.SDKShowLogout = function () {
        return false;
    };
    /**
     * 获取状态栏高度
     */
    PlatformBase.prototype.getStatusHeight = function () {
        return 0;
    };
    /**
     * 获取底部安全高度
     */
    PlatformBase.prototype.getBottomSafeHeight = function () {
        return 0;
    };
    /**是否显示超级会员 */
    PlatformBase.prototype.showSuperVip = function () {
        return false;
    };
    /**是否显示小游戏账号互通按钮 */
    PlatformBase.prototype.isShowMiniAccountJumpPortalIcon = function () {
        return false;
    };
    /**小游戏账号互通按钮操作 */
    PlatformBase.prototype.miniAccountJumpPortalIconTap = function () {
    };
    /** 是否不显示任何支付样式 */
    PlatformBase.prototype.isHideRechargeShow = function () {
        return false;
    };
    /** 是否显示分享入口 */
    PlatformBase.prototype.isShowSharePortalIcon = function () {
        return false;
    };
    /**战斗力变化 */
    PlatformBase.prototype.powerChange = function () {
    };
    /** 邀请人数据 */
    PlatformBase.prototype.getInviterInfo = function () {
        return null;
    };
    return PlatformBase;
}());
__reflect(PlatformBase.prototype, "PlatformBase");
/**
 * 简单实体
 */
var UnitEffect = (function (_super) {
    __extends(UnitEffect, _super);
    function UnitEffect() {
        var _this = _super.call(this) || this;
        _this.myHeight = UnitMgr.CHAR_DEFAULT_HEIGHT;
        _this.typeface = UnitMgr.CHAR_DEFAULT_TYPEFACE;
        /** 方向（默认向下） */
        _this._dir = 4;
        /** 状态（默认stand） */
        _this._state = UnitAction.STAND;
        _this._layerWeigth = 0;
        /**
         * 有方向的特效
         */
        _this.hasDir = [1 /* BODY */, 2 /* WEAPON */, 3 /* WING */, 7 /* SOUL */, 8 /* ZHANLING */];
        _this._disOrder = {};
        _this._mcFileName = {};
        _this._bodyContainer = new egret.DisplayObjectContainer();
        _this.addChild(_this._bodyContainer);
        _this._body = ObjectPool.pop("GameMovieClip");
        _this._bodyContainer.addChild(_this._body);
        _this._disOrder[1 /* BODY */] = _this._body;
        _this.titleCantainer = new egret.DisplayObjectContainer;
        _this.titleCantainer.anchorOffsetY = _this.myHeight;
        _this.addChild(_this.titleCantainer);
        return _this;
    }
    UnitEffect.prototype.setBodyScale = function (value) {
        this._bodyContainer.scaleX = this._bodyContainer.scaleY = value;
        this.myHeight = this.myHeight * value;
        this.typeface *= value;
        this.titleCantainer.anchorOffsetY = Math.floor(this.myHeight);
    };
    Object.defineProperty(UnitEffect.prototype, "infoModel", {
        get: function () {
            return this._infoModel;
        },
        set: function (model) {
            this._infoModel = model;
        },
        enumerable: true,
        configurable: true
    });
    UnitEffect.prototype.setConfig = function (avatar) {
        var config = DataCenter.ins().MonstershpConfig[avatar];
        if (config) {
            this.myHeight = config.hp;
            this.typeface = config.hp;
        }
        else {
            this.myHeight = UnitMgr.CHAR_DEFAULT_HEIGHT;
            this.typeface = UnitMgr.CHAR_DEFAULT_TYPEFACE;
        }
        this.titleCantainer.anchorOffsetY = Math.floor(this.myHeight);
    };
    UnitEffect.prototype.updateModel = function () {
    };
    Object.defineProperty(UnitEffect.prototype, "dir", {
        get: function () {
            return this._dir;
        },
        set: function (value) {
            if (this._dir == value)
                return;
            this._dir = value;
            this.loadBody();
        },
        enumerable: true,
        configurable: true
    });
    UnitEffect.prototype.getResDir = function (mcType) {
        var td = 2 * (this._dir - 4);
        if (td < 0)
            td = 0;
        return this._dir - td;
    };
    /**
     * 播放动作
     */
    UnitEffect.prototype.playAction = function (action, callBack) {
        this._state = action;
        this.playComplete = callBack;
        this._body.clearComFun();
        this.loadBody();
    };
    //加载身体模型
    UnitEffect.prototype.loadBody = function () {
        this._body.stop();
        this._body.addEventListener(egret.Event.CHANGE, this.playBody, this);
        if (this.hasDir.indexOf(1 /* BODY */) >= 0) {
            this.loadFile(this._body, this.getFileName(1 /* BODY */), 1 /* BODY */);
        }
        else {
            this.playFile(this._body, this.getFileName(1 /* BODY */));
        }
        this.loadShadow();
    };
    UnitEffect.prototype.loadShadow = function () {
        this.shadow && this.shadow.playFile(this._body.name, this._body.playCount, this._body.scaleX);
    };
    //加载其他模型 如武器羽翼
    UnitEffect.prototype.loadOther = function (mcType) {
        var mc = this.getMc(mcType);
        if (!mc)
            return;
        mc.stop();
        mc.addEventListener(egret.Event.CHANGE, this.syncFrame, this);
        this.loadFile(mc, this.getFileName(mcType), mcType);
    };
    UnitEffect.prototype.loadNoDir = function (mcType) {
        var mc = this.getMc(mcType);
        this.playFile(mc, this.getFileName(mcType));
    };
    UnitEffect.prototype.getFileName = function (mcType) {
        return this._mcFileName[mcType];
    };
    UnitEffect.prototype.playFile = function (mc, fileName) {
        mc.playFile(fileName, -1, null, false);
    };
    UnitEffect.prototype.loadFile = function (mc, fileName, mcType) {
        if (!fileName)
            return;
        if (UnitEffect.ACTION_ODER[mcType] && UnitEffect.ACTION_ODER[mcType].indexOf(this._state) < 0)
            return;
        var dir = this.getResDir(mcType);
        mc.scaleX = this._dir > 4 ? -1 : 1;
        var s = fileName + "_" + dir + this._state;
        mc.playFile(s, this.playCount(), mc == this._body ? this.playComplete : null, false);
    };
    UnitEffect.prototype.playBody = function (e) {
        var firstFrame = 1;
        this._body.gotoAndPlay(firstFrame, this.playCount());
        this.removeBodyEvent(this._body);
        for (var mcType in this._disOrder) {
            var mc = this._disOrder[mcType];
            if (mc != this._body) {
                if (this.hasDir.indexOf(+(mcType)) >= 0 && mc instanceof GameMovieClip) {
                    this.loadOther(+(mcType));
                }
            }
        }
        this.sortEffect();
    };
    UnitEffect.prototype.syncFrame = function (e) {
        this.removeMcEvent(e.currentTarget);
        e.currentTarget.gotoAndPlay(this._body.currentFrame, this.playCount());
    };
    UnitEffect.prototype.removeBodyEvent = function (mc) {
        mc.removeEventListener(egret.Event.CHANGE, this.playBody, this);
    };
    UnitEffect.prototype.removeMcEvent = function (mc) {
        mc.removeEventListener(egret.Event.CHANGE, this.syncFrame, this);
    };
    UnitEffect.prototype.onImgLoaded = function (e) {
        var img = e.currentTarget;
        img.removeEventListener(egret.Event.COMPLETE, this.onImgLoaded, this);
        img.anchorOffsetX = img.width / 2;
        img.anchorOffsetY = img.height / 2;
    };
    UnitEffect.prototype.playCount = function () {
        return -1;
    };
    UnitEffect.prototype.addMc = function (mcType, fileName, disType) {
        if (disType === void 0) { disType = 0; }
        if (this._mcFileName[mcType] == fileName)
            return;
        this._mcFileName[mcType] = fileName;
        var mc = this._disOrder[mcType];
        if (!mc) {
            if (disType == 0) {
                mc = ObjectPool.pop("GameMovieClip");
            }
            else {
                mc = new eui.Image();
            }
            this._bodyContainer.addChild(mc);
            this._disOrder[mcType] = mc;
        }
        if (mc instanceof GameMovieClip) {
            if (this.hasDir.indexOf(mcType) >= 0) {
                if (mc == this._body) {
                    this.loadBody();
                }
                else {
                    this.loadOther(mcType);
                }
            }
            else {
                this.loadNoDir(mcType);
            }
        }
        else {
            mc.addEventListener(egret.Event.COMPLETE, this.onImgLoaded, this);
            mc.source = fileName;
        }
        this.sortEffect();
        return mc;
    };
    UnitEffect.prototype.removeMc = function (mcType) {
        if (mcType == 1 /* BODY */)
            return;
        var mc = this._disOrder[mcType];
        if (mc) {
            if (mc instanceof GameMovieClip) {
                this.removeMcEvent(mc);
                mc.destroy();
            }
            else {
                DisplayUtils.removeFromParent(mc);
            }
            delete this._mcFileName[mcType];
            delete this._disOrder[mcType];
        }
    };
    UnitEffect.prototype.getMc = function (mcType) {
        return this._disOrder[mcType];
    };
    UnitEffect.prototype.removeAll = function () {
        for (var mcType in this._disOrder) {
            var mc = this._disOrder[mcType];
            if (mc != this._body) {
                if (mc instanceof GameMovieClip) {
                    this.removeMcEvent(mc);
                    mc.destroy();
                }
                else {
                    DisplayUtils.removeFromParent(mc);
                }
                delete this._mcFileName[mcType];
                delete this._disOrder[mcType];
            }
        }
        this._body.dispose();
        this.removeBodyEvent(this._body);
        delete this._mcFileName[1 /* BODY */];
    };
    UnitEffect.prototype.addShadow = function () {
        if (!this.shadow) {
            this.shadow = new UnitShadow;
            this.addChildAt(this.shadow, 0);
        }
    };
    UnitEffect.prototype.setShadowType = function (type) {
        this.shadow && this.shadow.setType(type);
    };
    UnitEffect.prototype.removeShadow = function () {
        if (this.shadow) {
            this.shadow.dispose();
            this.shadow = null;
        }
    };
    UnitEffect.prototype.sortEffect = function () {
        var order = UnitEffect.FRAME_ODER[this._dir];
        var len = order.length;
        var childIndex = 0;
        for (var i = 0; i < len; i++) {
            var index = order[i];
            if (this._disOrder[index] && this._disOrder[index].parent) {
                this._bodyContainer.addChildAt(this._disOrder[index], childIndex);
                childIndex += 1;
            }
        }
    };
    Object.defineProperty(UnitEffect.prototype, "weight", {
        //层级优化
        get: function () {
            return this.y;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UnitEffect.prototype, "team", {
        get: function () {
            return this.infoModel.team;
        },
        enumerable: true,
        configurable: true
    });
    UnitEffect.prototype.destroy = function () {
        this.removeAll();
    };
    UnitEffect.prototype.getBody = function () {
        return this._body;
    };
    /**
     * 方向顺序
     */
    UnitEffect.FRAME_ODER = [
        [2 /* WEAPON */, 9 /* WEA_LT */, 7 /* SOUL */, 1 /* BODY */, 10 /* CLO_LT */, 3 /* WING */, 8 /* ZHANLING */],
        [1 /* BODY */, 10 /* CLO_LT */, 2 /* WEAPON */, 9 /* WEA_LT */, 7 /* SOUL */, 3 /* WING */, 8 /* ZHANLING */],
        [3 /* WING */, 1 /* BODY */, 10 /* CLO_LT */, 2 /* WEAPON */, 9 /* WEA_LT */, 7 /* SOUL */, 8 /* ZHANLING */],
        [8 /* ZHANLING */, 3 /* WING */, 1 /* BODY */, 10 /* CLO_LT */, 2 /* WEAPON */, 9 /* WEA_LT */, 7 /* SOUL */],
        [8 /* ZHANLING */, 3 /* WING */, 1 /* BODY */, 10 /* CLO_LT */, 2 /* WEAPON */, 9 /* WEA_LT */, 7 /* SOUL */],
        [8 /* ZHANLING */, 3 /* WING */, 1 /* BODY */, 10 /* CLO_LT */, 2 /* WEAPON */, 9 /* WEA_LT */, 7 /* SOUL */],
        [3 /* WING */, 1 /* BODY */, 10 /* CLO_LT */, 2 /* WEAPON */, 9 /* WEA_LT */, 7 /* SOUL */, 8 /* ZHANLING */],
        [1 /* BODY */, 10 /* CLO_LT */, 2 /* WEAPON */, 9 /* WEA_LT */, 7 /* SOUL */, 3 /* WING */, 8 /* ZHANLING */],
    ];
    UnitEffect.ACTION_ODER = {
        8: [UnitAction.STAND, UnitAction.RUN, UnitAction.ATTACK],
    };
    return UnitEffect;
}(egret.DisplayObjectContainer));
__reflect(UnitEffect.prototype, "UnitEffect");
/**
 * 基础道具显示类
 */
var ItemBase = (function (_super) {
    __extends(ItemBase, _super);
    function ItemBase() {
        var _this = _super.call(this) || this;
        /** 显示特殊详细描述（传世至宝三选一） */
        _this.showSpeicalDetail = true;
        //是否开启选中框
        _this.isOpenSelectImg = false;
        //是否是货币
        _this.isCurrency = false;
        _this.showName = false;
        _this.skinName = 'ItemSkin';
        _this.init();
        return _this;
    }
    ItemBase.prototype.init = function () {
        this.addEventTouchEnd(this, this.onClick);
    };
    ItemBase.prototype.setSoul = function (isSoul) {
        this.itemIcon.setSoul(isSoul);
    };
    ItemBase.prototype.setItemImg = function (str) {
        this.itemIcon.imgIcon.source = str;
    };
    ItemBase.prototype.setItemJob = function (job) {
        this.itemIcon.setJobImg(job);
    };
    ItemBase.prototype.setItemHeirloomBgImg = function (v, path) {
        if (path)
            this.itemIcon.imgheirloom.source = path + "_png";
        this.itemIcon.imgheirloom.visible = v;
    };
    ItemBase.prototype.setDataByConfig = function (config, nText) {
        if (this.itemIcon && typeof this.itemIcon.setData == 'function') {
            this.itemIcon.setData(config);
        }
        var type = ItemUtils.getType(config);
        if (type == 0 /* TYPE_0 */ && config.descIndex != 248 && !this.showName) {
            var nameStr = isNaN(config.zsLevel) ? LangMgr.getValueByKey('numberLevel', (config.level || 1)) : LangMgr.getValueByKey('numberRotation', config.zsLevel);
            this.nameTxt.text = nameStr;
            //首充显示名字为无级别
            if (BackpackControl.fitleEquip.indexOf(config.id) != -1) {
                this.nameTxt.text = LangMgr.getValueByKey('shopNoLevel');
                this.nameTxt.textColor = ItemUtils.getQualityColor(config);
            }
            if (config.lvName) {
                this.nameTxt.text = config.lvName;
                this.nameTxt.textColor = ItemUtils.getQualityColor(config);
            }
            if (config.bagLvName) {
                this.showSpeicalDetail = false;
                var group = this.parent;
                while (group && group.parent) {
                    group = group.parent;
                    if (CommonFun.instanceofByName(group, "BackpackView")) {
                        this.showSpeicalDetail = true;
                        break;
                    }
                }
                if (this.showSpeicalDetail) {
                    this.nameTxt.text = config.bagLvName;
                }
            }
        }
        else {
            this.nameTxt.text = nText ? nText : config.name;
            this.nameTxt.textColor = ItemUtils.getQualityColor(config);
        }
        this.setViewCount(this.num);
        //公会礼包
        if (type == 12 /* TYPE_12 */ && this.redPoint) {
            this.redPoint.visible = this.getGuildGift(config);
        }
        if (type == 33 /* TYPE_33 */ && this.equipLvImg) {
            this.equipLvImg.source = "mequip_lv" + config.level;
            this.equipLvImg.visible = true;
        }
        if (type == 102 /* TYPE_102 */ && this.redPoint) {
            this.redPoint.visible = backpackControl.getTitleUpLvRedPoint(config, this.data.count);
        }
    };
    ItemBase.prototype.dataChanged = function () {
        this.clear();
        if (this.equipLvImg) {
            this.equipLvImg.visible = false;
        }
        var checkRedPoint = false;
        if (this.redPoint) {
            this.redPoint.visible = false;
        }
        this.isDropTag(false);
        this.isDropBig(false);
        if (this.data != undefined) {
            if (isNaN(this.data)) {
                if (this.data instanceof ItemData) {
                    this.itemConfig = this.data.itemConfig;
                    if (!this.itemConfig) {
                        return;
                    }
                    this.setDataByConfig(this.itemConfig);
                    this.setViewCount(this.data.count);
                    checkRedPoint = true;
                }
                else {
                    if (this.data.type == 0) {
                        this.itemIcon.imgIcon.source = Currency.getCurrencyRes(this.data.id);
                        var type = 1;
                        switch (this.data.id) {
                            case 2 /* TYPE_2 */:
                                type = 5;
                                break;
                            case 1 /* TYPE_1 */:
                                type = 0;
                                break;
                            case 4 /* TYPE_4 */:
                            case 15 /* TYPE_15 */:
                                type = 2;
                                break;
                            case 10 /* TYPE_10 */:
                                type = 2;
                                this.itemIcon.imgIcon.source = Currency.getCurrencyRes(this.data.id);
                                break;
                            case 13 /* TYPE_13 */:
                                type = 2;
                                break;
                        }
                        this.isCurrency = true;
                        this.itemIcon.imgBg.source = "quality" + type;
                        this.nameTxt.text = Currency.getCurrencyName(this.data.id);
                        this.nameTxt.textColor = LangMgr.getColor("qualityColor" + type);
                        this.setViewCount(this.data.count);
                    }
                    else if (this.data.type == 1) {
                        this.itemConfig = DataCenter.ins().ItemConfig[this.data.id];
                        if (!this.itemConfig) {
                            return;
                        }
                        this.setDataByConfig(this.itemConfig);
                        this.isDropTag(this.data.isDrop);
                        this.isDropBig(this.data.dropType == 1 /* BIGREWARD */);
                        this.setViewCount(this.data.count);
                    }
                    else if (this.data.type == 6) {
                        this.itemConfig = DataCenter.ins().ItemConfig[this.data.id];
                        this.setDataByConfig(this.itemConfig);
                        this.setViewCount(this.data.count);
                    }
                    else {
                        this.itemConfig = DataCenter.ins().ItemConfig[this.data.id];
                        if (this.itemConfig) {
                            this.setDataByConfig(this.itemConfig);
                            this.setViewCount(this.data.count);
                        }
                    }
                    if (this.redPoint) {
                        this.redPoint.visible = this.data.isRedPoint == 1;
                    }
                    if (this.getImg) {
                        this.getImg.visible = this.data.isRedPoint == 2;
                    }
                    if (this.tagImg) {
                        if (this.data.tagImg) {
                            this.tagImg.visible = true;
                            this.tagImg.source = this.data.tagImg;
                        }
                        else {
                            this.tagImg.visible = false;
                        }
                    }
                }
            }
            else {
                this.itemConfig = DataCenter.ins().ItemConfig[this.data];
                this.setDataByConfig(this.itemConfig, this.runeName);
            }
            if (this.redPoint && !this.redPoint.visible) {
                this.redPoint.visible = this.data.canbeUsed;
            }
            this.showEquipEffect();
            if (checkRedPoint && this.redPoint && this.itemConfig) {
                var itemType = ItemUtils.getType(this.itemConfig);
                var isCanUse = backpackControl.canUse(this.itemConfig.id);
                if (itemType == 8 /* TYPE_8 */) {
                    var boo = true;
                    if (this.itemConfig.id == 200137 /* EXP_ITEM */) {
                        boo = BackpackControl.checkLvDanPoint(this.data);
                    }
                    this.redPoint.visible = this.data && this.data.count > 0 && boo && isCanUse;
                    if (this.itemConfig.id == 200155 /* LEVELUP_ITEM */) {
                        this.redPoint.visible = isCanUse;
                    }
                }
                else if (itemType == 17 /* TYPE_17 */) {
                    this.redPoint.visible = isCanUse;
                }
                else if (itemType == 20 /* TYPE_20 */) {
                    this.redPoint.visible = this.data.canbeUsed && isCanUse;
                }
                else if (itemType == 25 /* TYPE_25 */ || itemType == 26 /* TYPE_26 */) {
                    this.redPoint.visible = isCanUse;
                }
                else if (itemType == 28 /* TYPE_28 */) {
                    this.redPoint.visible = false;
                }
                else if (itemType == 38 /* TYPE_38 */) {
                    this.redPoint.visible = officeControl.checkItemIdCanDestroy(this.itemConfig.id) && isCanUse;
                }
                else if (itemType == 39 /* TYPE_39 */) {
                    this.redPoint.visible = isCanUse;
                }
                else if (this.itemConfig.id == DataCenter.ins().AsTeamCopyBaseConfig.itemId) {
                    this.redPoint.visible = isCanUse;
                }
                else {
                    //可合成
                    var composeConf = DataCenter.ins().ItemComposeConfig[this.itemConfig.id];
                    if (composeConf && composeConf.srcCount <= this.data.count) {
                        this.redPoint.visible = true;
                    }
                }
            }
            this.setSelect(this.selected);
            this.dataChangeHandler();
        }
    };
    ItemBase.prototype.dataChangeHandler = function () {
    };
    ItemBase.prototype.setViewCount = function (count) {
        if (count != undefined && count > 1) {
            this.setCount("" + count);
        }
        else {
            this.setCount("");
        }
    };
    /**
     * 清除格子数据
     */
    ItemBase.prototype.clear = function () {
        this.isCurrency = false;
        this.itemConfig = null;
        if (this.itemIcon && typeof this.itemIcon.setData == 'function') {
            this.itemIcon.setData(null);
        }
        this.count.text = "";
        this.nameTxt.text = "";
        this.nameTxt.textColor = 0xDFD1B5;
        DisplayUtils.removeFromParent(this.equipEffect);
    };
    ItemBase.prototype.destruct = function () {
        this.removeEventTouchEnd(this, this.onClick);
    };
    ItemBase.prototype.isShowJob = function (b) {
        this.itemIcon.imgJob.visible = b;
    };
    ItemBase.prototype.onClick = function () {
        if (this.data && this.data.isRedPoint != 1) {
            this.showDetail();
        }
    };
    ItemBase.prototype.getItemType = function () {
        return this.itemConfig ? ItemUtils.getType(this.itemConfig) : -1;
    };
    /** 货币 */
    ItemBase.prototype.showCurrency = function () {
    };
    /** 非货币 */
    ItemBase.prototype.showDetail = function () {
        ItemBase.showDetail(this);
    };
    ItemBase.prototype.getGuildGift = function (config) {
        var level = 0;
        if (config instanceof ItemData) {
            var cfg = DataCenter.ins().ItemConfig[config.configID];
            level = cfg.level;
        }
        else if (config) {
            level = config.level;
        }
        if (ActorControl.level >= level && unionControl.guildID != 0) {
            return true;
        }
        else {
            return false;
        }
    };
    ItemBase.prototype.setCount = function (str) {
        if (str.length > 4) {
            var wNum = Math.floor(Number(str) / 1000);
            str = LangMgr.getValueByKey('shopWan', wNum / 10);
        }
        this.count.text = str;
    };
    ItemBase.prototype.setCountEx = function (str) {
        this.count.textFlow = TextUtils.generateTextFlow1(str);
    };
    ItemBase.prototype.openEquipsTips = function () {
        var subType = ItemUtils.getSubType(this.itemConfig);
        if (subType >= 9 /* HAT */ && subType <= 12 /* SHIELD */) {
            UIMgr.ins().open("ReincarnationEquipTipsView", this.itemConfig.id);
        }
        else if (this.itemConfig.descIndex == 121 || this.itemConfig.descIndex == 122) {
            this.showSpeicalDetail = false;
            var group = this.parent;
            while (group && group.parent) {
                group = group.parent;
                if (CommonFun.instanceofByName(group, "RoleInfoPanel") || CommonFun.instanceofByName(group, "RankRoleInfoPanel")) {
                    this.showSpeicalDetail = true;
                    break;
                }
            }
            if (this.showSpeicalDetail) {
                UIMgr.ins().open("EquipTipsView", 1, this.data.handle, this.itemConfig.id, this.data);
            }
            else {
                UIMgr.ins().open("ZealEquipTipsView", this.itemConfig.id);
            }
        }
        else {
            UIMgr.ins().open("EquipTipsView", 1, this.data.handle, this.itemConfig.id, this.data);
        }
    };
    ItemBase.prototype.isShowName = function (val) {
        this.nameTxt.visible = val;
    };
    ItemBase.prototype.getItemSoure = function () {
        var str = "";
        if (this.data.type == 0) {
            str = Currency.getCurrencyRes(this.data.id);
        }
        else {
            str = this.itemIcon.config.icon + '_png';
        }
        return str;
    };
    ItemBase.prototype.getText = function () {
        return this.nameTxt.text;
    };
    ItemBase.prototype.getTextColor = function () {
        return this.nameTxt.textColor;
    };
    ItemBase.prototype.showEquipEffect = function () {
        if (!this.tweenGroup)
            return;
        var quality = ItemUtils.getQuality(this.itemConfig);
        var type = ItemUtils.getType(this.itemConfig);
        if (type == 33 /* TYPE_33 */) {
            this.equipEffect = this.equipEffect || new GameMovieClip();
            this.equipEffect.touchEnabled = false;
            this.equipEffect.x = 44;
            this.equipEffect.y = 36;
            this.equipEffect.scaleX = this.equipEffect.scaleY = 1;
            this.equipEffect.playFile("" + PATH_EFF + DataCenter.ins().DominateEquipBaConfig.posEff[ItemUtils.getSubType(this.itemConfig)], -1);
            this.tweenGroup.addChild(this.equipEffect);
            return;
        }
        if ((!this.itemConfig || quality <= 3) && this.data.id != 2 /* TYPE_2 */)
            return;
        var effectName = "";
        this.equipEffect = this.equipEffect || new GameMovieClip();
        this.equipEffect.touchEnabled = false;
        if (this.data.id == 2 /* TYPE_2 */) {
            effectName = "quaeff6";
            this.equipEffect.x = 44;
            this.equipEffect.y = 32;
            this.equipEffect.scaleX = this.equipEffect.scaleY = 1;
        }
        else if (quality == 4) {
            effectName = "quality_05";
            this.equipEffect.x = this.tweenGroup.x;
            this.equipEffect.y = 33;
            this.equipEffect.scaleX = this.equipEffect.scaleY = 1;
        }
        else if (quality == 5) {
            effectName = "chuanqizbeff";
            this.equipEffect.x = 44;
            this.equipEffect.y = 33;
            this.equipEffect.scaleX = this.equipEffect.scaleY = 1;
        }
        this.tweenGroup.addChild(this.equipEffect);
        this.equipEffect.playFile(PATH_EFF + effectName, -1);
    };
    ItemBase.prototype.clearEffect = function () {
        DisplayUtils.removeFromParent(this.equipEffect);
        this.equipEffect = null;
    };
    ItemBase.prototype.HideImgBg = function () {
        this.itemIcon.imgBg.visible = false;
    };
    ItemBase.prototype.showNum = function (isShow) {
        this.count.visible = isShow;
    };
    ItemBase.prototype.setImgBg = function (type) {
        this.itemIcon.imgBg.source = "quality" + type;
    };
    ItemBase.prototype.isDropTag = function (v) {
        if (this.dropTagsGroup) {
            this.dropTagsGroup.visible = v;
        }
    };
    ItemBase.prototype.isDropBig = function (v) {
        if (this.bigDropGroup) {
            this.bigDropGroup.visible = v;
        }
    };
    ItemBase.prototype.getItemIcon = function () {
        return this.itemIcon;
    };
    ItemBase.prototype.setSelect = function (selected) {
        if (this.isOpenSelectImg) {
            this.selectFrame.visible = selected;
        }
    };
    ItemBase.prototype.hideName = function () {
        this.nameTxt.visible = false;
    };
    ItemBase.prototype.setName = function (src) {
        this.nameTxt.textFlow = TextUtils.generateTextFlow1(src);
    };
    ItemBase.prototype.setImgBg1 = function (res) {
        this.itemIcon.setImgBg1(res);
    };
    ItemBase.prototype.setRedPoint = function (v) {
        if (this.redPoint) {
            this.redPoint.visible = v;
        }
    };
    ItemBase.showDetail = function (itemBase) {
        var data = itemBase.data;
        if (itemBase.isCurrency) {
            switch (data.id) {
                case 2 /* TYPE_2 */:
                case 7 /* TYPE_7 */:
                case 13 /* TYPE_13 */:
                    UIMgr.ins().open("CurrencyTipsView", data.id, data.count);
                    break;
            }
        }
        else {
            var itemConfig = itemBase.itemConfig;
            if (itemConfig) {
                //使用鲜花道具
                if (data.handle && itemConfig.id == DataCenter.ins().AsTeamCopyBaseConfig.itemId) {
                    UIMgr.ins().open(FlowerUseView);
                    return;
                }
                //主宰
                if (dominateControl.isTrinketById(itemConfig.id)) {
                    UIMgr.ins().open("DominateTipsView", itemConfig);
                    return;
                }
                switch (ItemUtils.getType(itemConfig)) {
                    case 0 /* TYPE_0 */:
                    case 4 /* TYPE_4 */:
                        itemBase.openEquipsTips();
                        break;
                    case 5 /* TYPE_5 */:
                        UIMgr.ins().open("PunchEquipTipsView", data, false, true);
                        break;
                    case 1 /* TYPE_1 */:
                        var itemComposeConfig = DataCenter.ins().ItemComposeConfig[itemConfig.id];
                        if (itemComposeConfig) {
                            if (data.handle) {
                                UIMgr.ins().open("ItemUseTipsView", data);
                            }
                            else {
                                UIMgr.ins().open(this.getItemDetaileClass(itemConfig), 0, itemConfig.id, data.count, itemBase.par1);
                            }
                        }
                        else if (data.handle && itemConfig.id == DataCenter.ins().BeastConfig.battleCountItem) {
                            UIMgr.ins().open("BeastDanUseView", itemConfig);
                        }
                        else if (data.handle && itemConfig.id == fashionControl.getIdZhuangBanId(itemConfig.id)) {
                            UIMgr.ins().open("FashionTipsView", itemConfig);
                        }
                        else if (heirloomControl.getDressDpById(itemConfig.id)) {
                            UIMgr.ins().open("FashionHeirloomTipsView", itemConfig, !data.handle);
                        }
                        else if (data.handle && heirloomControl.getDressDpById(itemConfig.id)) {
                            UIMgr.ins().open("FashionHeirloomTipsView", itemConfig);
                        }
                        else if (itemConfig.descIndex == 864) {
                            UIMgr.ins().open("AshtarteDrugExtView", data.handle, itemConfig.id);
                        }
                        else if (itemConfig.id == fashionControl.getIdZhuangBanId(itemConfig.id)) {
                            var state_1 = false;
                            var group = itemBase.parent;
                            while (group && group.parent) {
                                group = group.parent;
                                if (CommonFun.instanceofByName(group, "BackpackView")) {
                                    state_1 = true;
                                    break;
                                }
                            }
                            if (state_1) {
                                UIMgr.ins().open("FashionTipsView", itemConfig);
                            }
                            else {
                                UIMgr.ins().open("FashionTipsView", itemConfig, true);
                            }
                        }
                        else {
                            UIMgr.ins().open(this.getItemDetaileClass(itemConfig), 0, itemConfig.id, data.count, itemBase.par1);
                        }
                        break;
                    case 2 /* TYPE_2 */:
                        if (data.handle) {
                            UIMgr.ins().open("ItemUseTipsView", data);
                        }
                        else {
                            if (data.count) {
                                UIMgr.ins().open(this.getItemDetaileClass(itemConfig), 0, itemConfig.id, data.count);
                            }
                            else {
                                UIMgr.ins().open(this.getItemDetaileClass(itemConfig), 0, itemConfig.id);
                            }
                        }
                        break;
                    case 6 /* TYPE_6 */:
                        var state = true;
                        var parentDisplay = itemBase.parent;
                        while (parentDisplay && parentDisplay.parent) {
                            parentDisplay = parentDisplay.parent;
                            if (CommonFun.instanceofByName(parentDisplay, "CopyBabelPanel")) {
                                state = false;
                                break;
                            }
                        }
                        UIMgr.ins().open("RuneTipsView", 0, itemConfig.id, itemBase.desc, itemBase.desc2, state);
                        break;
                    case 9 /* TYPE_9 */:
                        UIMgr.ins().open("BookTipsView", itemConfig.id, 0, data.handle);
                        break;
                    case 10 /* TYPE_10 */:
                        if (data.handle) {
                            UIMgr.ins().open("ItemUseTipsView", data);
                        }
                        else {
                            UIMgr.ins().open("ItemTipsView", 0, itemConfig.id);
                        }
                        break;
                    case 8 /* TYPE_8 */:
                    case 20 /* TYPE_20 */:
                        if (data.type == 1) {
                            UIMgr.ins().open(this.getItemDetaileClass(itemConfig), 0, itemConfig.id, data.count);
                        }
                        else {
                            var count = +itemBase.count.text || data.count || 0;
                            var state_2 = false;
                            var parentDisplay_1 = itemBase.parent;
                            while (parentDisplay_1 && parentDisplay_1.parent) {
                                parentDisplay_1 = parentDisplay_1.parent;
                                if (CommonFun.instanceofByName(parentDisplay_1, "BackpackView")) {
                                    state_2 = true;
                                    break;
                                }
                            }
                            if (state_2) {
                                if (itemConfig.id == 200155 /* LEVELUP_ITEM */) {
                                    backpackControl.hideLvUpRed();
                                    backpackControl.dispatchHasItemCanUse();
                                }
                                UIMgr.ins().open("ItemUseTipsView", { itemConfig: itemConfig, configID: itemConfig.id, count: count });
                            }
                            else {
                                UIMgr.ins().open(this.getItemDetaileClass(itemConfig), 0, itemConfig.id, count);
                            }
                        }
                        break;
                    case 12 /* TYPE_12 */:
                        if (data.itemConfig && itemBase.getGuildGift(data)) {
                            UIMgr.ins().open("ItemUseTipsView", data);
                        }
                        else {
                            UIMgr.ins().open("ItemUseTipsView", { itemConfig: itemConfig, configID: itemConfig.id, count: data.count }, true);
                        }
                        break;
                    case 11 /* TYPE_11 */:
                        for (var k in DataCenter.ins().HeirloomEquipItemConfig) {
                            var hcfg = DataCenter.ins().HeirloomEquipItemConfig[k];
                            if (hcfg && hcfg.item == itemConfig.id) {
                                UIMgr.ins().open("HeirloomEquipTipsView", null, hcfg.pos - 1);
                                break;
                            }
                        }
                        break;
                    case 13 /* TYPE_13 */:
                    case 14 /* TYPE_14 */:
                        if (data.type == 1 /* TYPE_1 */) {
                            UIMgr.ins().open(this.getItemDetaileClass(itemConfig), 0, itemConfig.id, data.count);
                        }
                        else {
                            UIMgr.ins().open("ItemUseTipsView", { itemConfig: itemConfig, configID: itemConfig.id, count: data.count });
                        }
                        break;
                    case 15 /* TYPE_15 */:
                        UIMgr.ins().open(this.getItemDetaileClass(itemConfig), 0, itemConfig.id, data ? data.count : undefined);
                        break;
                    case 16 /* TYPE_16 */:
                        var gwConfig = DataCenter.ins().FeatherItemConfig[itemConfig.id];
                        UIMgr.ins().open("FeatherDeityTipsView", gwConfig);
                        break;
                    case 17 /* TYPE_17 */:
                        if (itemConfig.descIndex == 857) {
                            // UIMgr.ins().open("SpecialChooseTipsWin", itemConfig.id, data.handle || 0);
                        }
                        else if (itemConfig.descIndex == 863) {
                            // UIMgr.ins().open("ZhanlingSpecialTipsWin", itemConfig.id, data.handle || 0);
                        }
                        else {
                            var state_3 = false;
                            var parentDisplay_2 = itemBase.parent;
                            while (parentDisplay_2 && parentDisplay_2.parent) {
                                parentDisplay_2 = parentDisplay_2.parent;
                                if (CommonFun.instanceofByName(parentDisplay_2, "BackpackView")) {
                                    state_3 = true;
                                    break;
                                }
                            }
                            UIMgr.ins().open(state_3 ? "TreasureHuntRareGiftView" : this.getItemDetaileClass(itemConfig), 0, itemConfig.id, data.count);
                        }
                        break;
                    case 19 /* TYPE_19 */:
                        UIMgr.ins().open("UitrasoneEquipTipsView", ItemUtils.getSubType(itemConfig));
                        break;
                    case 21 /* TYPE_21 */:
                        ashtarteControl.ZhanLingItemTips(itemConfig.id);
                        break;
                    case 22 /* TYPE_22 */:
                        UIMgr.ins().open("AshtarteTipsView", itemConfig.id);
                        break;
                    case 23 /* TYPE_23 */:
                        UIMgr.ins().open("BeastEquipTipView", 0, 0, itemConfig.id);
                        break;
                    case 24 /* TYPE_24 */:
                        UIMgr.ins().open("SoulBoneTipsView", false, 0, itemConfig.id);
                        break;
                    case 25 /* TYPE_25 */:
                    case 26 /* TYPE_26 */:
                        if (data instanceof ItemData) {
                            UIMgr.ins().open("ItemUseTipsView", data);
                        }
                        else {
                            UIMgr.ins().open(this.getItemDetaileClass(itemConfig), 0, itemConfig.id);
                        }
                        break;
                    case 27 /* TYPE_27 */:
                        UIMgr.ins().open("ThunderItemTipsView", itemConfig.id);
                        break;
                    case 28 /* TYPE_28 */:
                        UIMgr.ins().open("DarkEquipTipsView", itemConfig.id, itemBase.roleId, true, undefined, undefined, itemBase.notBody);
                        break;
                    case 30 /* TYPE_30 */:
                        UIMgr.ins().open("DragonSoulItemTipsPreviewView", itemConfig.id);
                        break;
                    case 31 /* TYPE_31 */:
                        var openUI = false;
                        var view = itemBase.parent;
                        while (view && view.parent) {
                            view = view.parent;
                            if (CommonFun.instanceofByName(view, "BackpackView")) {
                                openUI = true;
                                break;
                            }
                        }
                        UIMgr.ins().open("CrazybtplayTipView", itemConfig.id, openUI);
                        break;
                    case 33 /* TYPE_33 */:
                        if (data instanceof ItemData) {
                            UIMgr.ins().open("DominateEquipTakeTipsView", data);
                        }
                        else {
                            var itemData = new ItemData;
                            itemData.configID = itemConfig.id;
                            UIMgr.ins().open("DominateEquipTakeTipsView", itemData, true);
                        }
                        break;
                    case 34 /* TYPE_34 */:
                        UIMgr.ins().open('DevourEquipTipsView', itemConfig.id);
                        break;
                    case 37 /* TYPE_37 */:
                        UIMgr.ins().open("ReincarnateStarEquipTipsView", itemConfig.id);
                        break;
                    case 38 /* TYPE_38 */:
                        if (data instanceof ItemData && officeControl.checkItemIdCanDestroy(itemConfig.id)) {
                            UIMgr.ins().open("ItemUseTipsView", data);
                        }
                        else {
                            UIMgr.ins().open(this.getItemDetaileClass(itemConfig), 0, itemConfig.id, undefined, itemBase.par1);
                        }
                        break;
                    case 39 /* TYPE_39 */:
                        var isActivate = false;
                        var tileParent = itemBase.parent;
                        while (tileParent && tileParent.parent) {
                            tileParent = tileParent.parent;
                            if (CommonFun.instanceofByName(tileParent, "BackpackView")) {
                                isActivate = true;
                                break;
                            }
                        }
                        UIMgr.ins().open("TitleTipsView", itemConfig.id, isActivate);
                        break;
                    case 40 /* TYPE_40 */:
                        UIMgr.ins().open("TotembagTipsView", itemConfig.id);
                        break;
                    case 41 /* TYPE_41 */:
                        UIMgr.ins().open("ReincarnateStarSoulTipsView", itemConfig.id);
                        break;
                    case 42 /* TYPE_42 */:
                        UIMgr.ins().open("FakeEquipTipsView", itemConfig.id);
                        break;
                    case 47 /* TYPE_47 */:
                        data instanceof ItemData ? UIMgr.ins().open('ItemUseTipsView', data) :
                            UIMgr.ins().open(this.getItemDetaileClass(itemConfig), 0, itemConfig.id);
                        break;
                    case 97 /* TYPE_97 */:
                        UIMgr.ins().open("CrazyDogTipsView", itemConfig.id);
                        break;
                    case 100 /* TYPE_100 */:
                        UIMgr.ins().open("WarriorActiveItemTipView", itemConfig.id);
                        break;
                    case 101 /* TYPE_101 */:
                        if (itemBase.warriorEquipId) {
                            UIMgr.ins().open("WarriorEquipDetailTipView", itemBase.warriorEquipId, itemConfig.id, false);
                        }
                        else {
                            UIMgr.ins().open("WarriorEquipDetailTipView", null, itemConfig.id, false);
                        }
                        break;
                    case 102 /* TYPE_102 */:
                        var itemState = false;
                        var itemParentDisplay = itemBase.parent;
                        while (itemParentDisplay && itemParentDisplay.parent) {
                            itemParentDisplay = itemParentDisplay.parent;
                            if (CommonFun.instanceofByName(itemParentDisplay, "BackpackView")) {
                                itemState = true;
                                break;
                            }
                        }
                        if (itemState) {
                            UIMgr.ins().open('TitleUpLvTipsView', 0, itemConfig.id, data.count || 0, data);
                        }
                        else {
                            var count = +itemBase.count.text || data.count || 0;
                            UIMgr.ins().open(this.getItemDetaileClass(itemConfig), 0, itemConfig.id, count);
                        }
                        break;
                    default:
                        UIMgr.ins().open(this.getItemDetaileClass(itemConfig), 0, itemConfig.id, +itemBase.count.text || data.count || undefined, itemBase.par1);
                }
            }
        }
    };
    ItemBase.getItemDetaileClass = function (itemConfig) {
        return itemConfig.isWay ? "ItemGainTipsView" : "ItemTipsView";
    };
    ItemBase.ADDITION_RANGE = 15;
    return ItemBase;
}(BaseItemRender));
__reflect(ItemBase.prototype, "ItemBase");
var StartLoading = (function (_super) {
    __extends(StartLoading, _super);
    function StartLoading() {
        var _this = _super.call(this) || this;
        _this.content = null;
        _this.init();
        return _this;
    }
    StartLoading.ins = function () {
        return _super.ins.call(this);
    };
    StartLoading.prototype.init = function () {
        this.content = new egret.Sprite();
        this.content.graphics.beginFill(0x000000, 0.2);
        this.content.graphics.drawRect(0, 0, StageUtils.ins().getWidth(), StageUtils.ins().getHeight());
        this.content.graphics.endFill();
        this.content.touchEnabled = true;
        this.uiImageContainer = new egret.DisplayObjectContainer();
        this.uiImageContainer.x = this.content.width * 0.5;
        this.uiImageContainer.y = this.content.height * 0.5;
        this.content.addChild(this.uiImageContainer);
        this.loadReel();
    };
    StartLoading.prototype.loadReel = function () {
        if (!this.uiImage) {
            this.uiImage = new eui.Image(PATH_RES + "loadLoop.png");
            this.uiImage.x = -(113 >> 1);
            this.uiImage.y = -(119 >> 1);
            this.uiImageContainer.addChild(this.uiImage);
        }
    };
    StartLoading.prototype.showLoading = function () {
        this.loadReel();
        egret.startTick(this.enterFrame, this);
        StageUtils.ins().getStage().addChild(this.content);
    };
    StartLoading.prototype.hideLoading = function () {
        if (this.content && this.content.parent) {
            StageUtils.ins().getStage().removeChild(this.content);
            this.uiImageContainer.rotation = 0;
        }
        egret.stopTick(this.enterFrame, this);
    };
    StartLoading.prototype.enterFrame = function (time) {
        this.uiImageContainer.rotation += 5;
        return false;
    };
    return StartLoading;
}(SingleClass));
__reflect(StartLoading.prototype, "StartLoading");
var RoleItemRenderer = (function (_super) {
    __extends(RoleItemRenderer, _super);
    function RoleItemRenderer() {
        return _super.call(this) || this;
    }
    RoleItemRenderer.prototype.dataChanged = function () {
        if (this.data instanceof RoleModel) {
            this.setRole(this.data);
        }
        else if (this.data instanceof RankSubRoleVo) {
            this.setSubRole(this.data);
        }
        else {
            this.clearRole();
        }
    };
    RoleItemRenderer.prototype.playApproachEff = function (role, callback) {
        var self = this;
        if (role.thirteenEquipLv || role.weaponViewId || role.clothesViewId) {
            return false;
        }
        var canShow = appearanceControl.checkCanShow(role, 2 /* CLOTHES */, 0 /* TYPE0 */);
        if (canShow) {
            return false;
        }
        var approachEffs = fashionControl.getApproachEff(role);
        if (approachEffs) {
            var fun = function (target) {
                if (target) {
                    egret.Tween.get(target).to({
                        alpha: 0
                    }, 1500).call(function () {
                        DisplayUtils.removeFromParent(target);
                    });
                }
                egret.Tween.get(self.groupRole).to({
                    alpha: 1
                }, 1500);
                if (callback) {
                    callback();
                }
            };
            this.groupRole.alpha = 0;
            this.playEffArr(approachEffs.concat(), fun);
            return true;
        }
        return false;
    };
    RoleItemRenderer.prototype.playEffArr = function (approachEffs, fun) {
        var self = this;
        if (0 == approachEffs.length) {
            fun(this.approachEff);
        }
        else {
            this.approachEff = this.approachEff || new GameMovieClip;
            this.approachEff.alpha = 1;
            this.approachEff.dispose();
            this.approachAct.addChild(this.approachEff);
            this.approachEff.playFile(PATH_EFF + approachEffs[0], 1, function () {
                if (1 == approachEffs.length) {
                    if (fun) {
                        fun(self.approachEff);
                    }
                }
                else {
                    approachEffs.shift();
                    self.playEffArr(approachEffs, fun);
                }
            }, false);
        }
    };
    RoleItemRenderer.prototype.removeApproachEff = function () {
        this.groupRole.alpha = 1;
        egret.Tween.removeTweens(this.groupRole);
        if (this.approachEff) {
            this.approachEff.dispose();
        }
        DisplayUtils.removeFromParent(this.approachEff);
    };
    RoleItemRenderer.prototype.setRole = function (role, showTitle, isDress) {
        if (showTitle === void 0) { showTitle = false; }
        if (isDress === void 0) { isDress = false; }
        this.clearRole();
        if (role) {
            if (showTitle)
                this.setNameAndTitle(role);
            this.setBodyWeapon(role);
            if (!isDress)
                this.setSuit(role);
            this.setWing(role);
            if (!isDress)
                this.setDemonCir(role.deCirShowID);
            this.changeLayer(role);
        }
    };
    RoleItemRenderer.prototype.setSubRole = function (subRole) {
        this.clearRole();
        if (subRole) {
            this.setBodyWeapon(subRole);
            this.setSuit(subRole);
            this.setWing(subRole);
            this.setDemonCir(subRole.deCirShowID);
            this.changeLayer(subRole);
        }
    };
    RoleItemRenderer.prototype.clearRole = function () {
        this.title.source = null;
        this.nameLabel.text = "";
        this.bodyImg.source = RENWU_PREFIX + "00_png";
        this.wingImg.source = null;
        this.weaponImg.source = null;
        this.bodyImg.visible = this.weaponImg.visible = this.wingImg.visible = true;
        DisplayUtils.removeFromParent(this.titleMc);
        DisplayUtils.removeFromParent(this.suitEff);
        DisplayUtils.removeFromParent(this.gwEff);
        DisplayUtils.removeFromParent(this.wingEff);
        DisplayUtils.removeFromParent(this.ltWeaponEff);
        DisplayUtils.removeFromParent(this.ltClothesEff);
        DisplayUtils.removeFromParent(this.weaponEff);
        DisplayUtils.removeFromParent(this.clothesEff);
        DisplayUtils.removeFromParent(this.deEff);
    };
    /**
     * 称号
     */
    RoleItemRenderer.prototype.setNameAndTitle = function (role) {
        this.nameLabel.text = role.name;
        this.title.source = null;
        DisplayUtils.removeFromParent(this.titleMc);
        var titleConf = DataCenter.ins().TitleConfig[role.title];
        if (titleConf) {
            if (titleConf.img) {
                this.title.source = titleConf.img;
            }
            if (titleConf.eff) {
                this.titleMc = this.titleMc || new GameMovieClip;
                this.playMc(this.titleMc, PATH_EFF + titleConf.eff, this.titleMcGroup);
            }
        }
    };
    /**
     * 武器衣服
     */
    RoleItemRenderer.prototype.setBodyWeapon = function (role) {
        var isSubRole = role instanceof RankSubRoleVo;
        var weaponSourceUrl = null;
        var bodySourceUrl = null;
        //时装
        var weaponId = appearanceControl.getEquipEffId(role, 0 /* WEAPON */, 1 /* TYPE1 */);
        var bodyId = appearanceControl.getEquipEffId(role, 2 /* CLOTHES */, 1 /* TYPE1 */);
        if (GlobalModel.bodyBindWeapon && weaponId > 0) {
            bodyId = weaponId;
        }
        else if (GlobalModel.weaponBindBody && bodyId > 0) {
            weaponId = bodyId;
        }
        //普装
        var bodyConfId;
        var weaponConfId;
        var isDress = false;
        this.bodyImg.source = this.weaponImg.source = null;
        DisplayUtils.removeFromParent(this.weaponEff);
        DisplayUtils.removeFromParent(this.clothesEff);
        var isEquipDevourWeapon = false, isEquipDevourClothes = false; //是否已经穿了 吞噬武器/衣服
        //吞噬  *武器
        if (role.weaponViewId) {
            var data = DataCenter.ins().DevourEquipLevelConfig[0 /* WEAPON */];
            var zbstr = void 0;
            if (data && data[role.weaponViewId]) {
                zbstr = data[role.weaponViewId].outside || data[role.weaponViewId].inside;
                var equipWithEffConfig = DataCenter.ins().EquipWithEffConfig[zbstr + "_0"];
                this.setBodyWeaponEff("weaponEff", equipWithEffConfig, this.soulEff, "wsef0");
                isEquipDevourWeapon = true;
            }
        }
        //吞噬  *衣服
        if (role.clothesViewId) {
            var data = DataCenter.ins().DevourEquipLevelConfig[2 /* CLOTHES */];
            var zbstr = void 0;
            if (data && data[role.clothesViewId]) {
                zbstr = data[role.clothesViewId].outside || data[role.clothesViewId].inside;
                var equipWithEffConfig = DataCenter.ins().EquipWithEffConfig[zbstr + "_" + role.sex];
                this.setBodyWeaponEff("clothesEff", equipWithEffConfig, this.bodyEff, "bodyEffect" + role.sex);
                isEquipDevourClothes = true;
            }
        }
        //霸主
        if (!isSubRole && role.thirteenEquipLv) {
            if (!isEquipDevourWeapon) {
                var equipWithEffConfig = DataCenter.ins().EquipWithEffConfig[DataCenter.ins().ReincarnateStarStepBsConfig.weaponEff[role.thirteenEquipLv - 1] + "_0"];
                this.setBodyWeaponEff("weaponEff", equipWithEffConfig, this.soulEff, "wsef0");
            }
            if (!isEquipDevourClothes) {
                var equipWithEffConfig = DataCenter.ins().EquipWithEffConfig[DataCenter.ins().ReincarnateStarStepBsConfig.bodyEff[role.thirteenEquipLv - 1] + "_" + role.sex];
                this.setBodyWeaponEff("clothesEff", equipWithEffConfig, this.bodyEff, "bodyEffect" + role.sex);
            }
        }
        else {
            var zhuangbanSuitId = fashionControl.checkActiveSuit(isSubRole ? [role.pos1, role.pos2] : role);
            if (isEquipDevourWeapon)
                zhuangbanSuitId = 0;
            if (!isEquipDevourWeapon) {
                if (appearanceControl.checkCanShow(role, 0 /* WEAPON */, 0 /* TYPE0 */)) {
                    weaponConfId = appearanceControl.getEquipEffId(role, 0 /* WEAPON */, 0 /* TYPE0 */);
                    if (weaponConfId) {
                        var sex = 0;
                        var equipWithEffConfig = DataCenter.ins().EquipWithEffConfig[weaponConfId + "_" + sex];
                        if (equipWithEffConfig && equipWithEffConfig.inShowEff) {
                            this.setBodyWeaponEff("weaponEff", equipWithEffConfig, this.soulEff, "wsef" + sex);
                        }
                        else {
                            var appearance = DataCenter.ins().EquipConfig[weaponConfId].appearance;
                            if (appearance && appearance.indexOf("[job]") > -1) {
                                appearance = appearance.replace("[job]", role.job + "");
                            }
                            weaponSourceUrl = appearance + "_" + sex + "_c_png";
                        }
                    }
                }
                else if (appearanceControl.checkCanShow(role, 0 /* WEAPON */, 1 /* TYPE1 */)
                    || (GlobalModel.weaponBindBody && appearanceControl.checkCanShow(role, 2 /* CLOTHES */, 1 /* TYPE1 */))) {
                    if (weaponId) {
                        var sex = 0;
                        var zbEffId = fashionControl.getZhuangBanEffId(0 /* WEAPON */, sex, isSubRole ? [role.pos1, role.pos2] : role.zhuangbei);
                        if (isSubRole) {
                            if (appearanceControl.checkWeaponHasFamale(role.pos2)) {
                                sex = role.sex;
                            }
                        }
                        else {
                            sex = appearanceControl.getWeaponFashionSex(role);
                        }
                        var equipWithEffConfig = DataCenter.ins().EquipWithEffConfig[zbEffId + "_" + sex];
                        if (equipWithEffConfig && equipWithEffConfig.inShowEff) {
                            this.setBodyWeaponEff("weaponEff", equipWithEffConfig, this.soulEff, "wsef" + sex, zhuangbanSuitId);
                        }
                        else {
                            var appearance = DataCenter.ins().FashionIdConfig[weaponId].res;
                            if (appearance) {
                                isDress = true;
                                weaponSourceUrl = appearance + "_" + sex + "_c_png";
                                if (GlobalModel.weaponBindBody)
                                    weaponSourceUrl = weaponSourceUrl.replace("" + RENWU_PREFIX, "" + WUQI_PREFIX);
                            }
                        }
                    }
                }
            }
            if (!isEquipDevourClothes) {
                if (GlobalModel.bodyBindWeapon)
                    bodyConfId = weaponConfId;
                if (appearanceControl.checkCanShow(role, 2 /* CLOTHES */, 0 /* TYPE0 */)) {
                    bodyConfId = appearanceControl.getEquipEffId(role, 2 /* CLOTHES */, 0 /* TYPE0 */);
                    if (bodyConfId) {
                        var equipWithEffConfig = DataCenter.ins().EquipWithEffConfig[bodyConfId + "_" + role.sex];
                        if (equipWithEffConfig && equipWithEffConfig.inShowEff) {
                            this.setBodyWeaponEff("clothesEff", equipWithEffConfig, this.bodyEff, "bodyEffect" + role.sex);
                        }
                        else {
                            var appearance = DataCenter.ins().EquipConfig[bodyConfId].appearance;
                            if (appearance && appearance.indexOf("[job]") > -1) {
                                appearance = appearance.replace("[job]", role.job + "");
                            }
                            bodySourceUrl = appearance + "_" + role.sex + "_c_png";
                        }
                    }
                    else {
                        bodySourceUrl = RENWU_PREFIX + "000_" + role.sex + "_c_png";
                    }
                    if (GlobalModel.bodyBindWeapon)
                        bodySourceUrl = bodySourceUrl.replace("" + WUQI_PREFIX, "" + RENWU_PREFIX);
                }
                else if (appearanceControl.checkCanShow(role, 2 /* CLOTHES */, 1 /* TYPE1 */) || (GlobalModel.bodyBindWeapon && appearanceControl.checkCanShow(role, 0 /* WEAPON */, 1 /* TYPE1 */))) {
                    if (bodyId) {
                        var zbEffId = fashionControl.getZhuangBanEffId(2 /* CLOTHES */, role.sex, isSubRole ? [role.pos1, role.pos2] : role.zhuangbei);
                        var equipWithEffConfig = DataCenter.ins().EquipWithEffConfig[zbEffId + "_" + role.sex];
                        if (equipWithEffConfig && equipWithEffConfig.inShowEff) {
                            this.setBodyWeaponEff("clothesEff", equipWithEffConfig, this.bodyEff, "bodyEffect" + role.sex, zhuangbanSuitId);
                        }
                        else {
                            var appearance = DataCenter.ins().FashionIdConfig[bodyId].res;
                            if (appearance) {
                                bodySourceUrl = appearance + "_" + role.sex + "_c_png";
                                if (GlobalModel.bodyBindWeapon)
                                    bodySourceUrl = bodySourceUrl.replace("" + WUQI_PREFIX, "" + RENWU_PREFIX);
                            }
                        }
                    }
                }
            }
            //资源处理
            this.weaponImg.source = weaponSourceUrl ? appearanceControl.resJobHandler(weaponSourceUrl, role.job) : null;
            this.bodyImg.source = bodySourceUrl ? appearanceControl.resJobHandler(bodySourceUrl, role.job) : null;
        }
        //状态
        this.currentState = appearanceControl.getJobUIState(role.job, weaponId || weaponConfId, isDress);
    };
    RoleItemRenderer.prototype.setBodyWeaponEff = function (mcName, equipWithEffConfig, parent, pointGroupName, zhuangbanSuitId) {
        if (zhuangbanSuitId === void 0) { zhuangbanSuitId = 0; }
        var mc = this[mcName] = this[mcName] || new GameMovieClip;
        parent.addChild(mc);
        if (zhuangbanSuitId && equipWithEffConfig.specialEff) {
            mc.x = (this[pointGroupName].x + equipWithEffConfig.specialOffX) || 0;
            mc.y = (this[pointGroupName].y + equipWithEffConfig.specialOffY) || 0;
            mc.rotation = this[pointGroupName].rotation;
            mc.scaleX = mc.scaleY = equipWithEffConfig.specialScaling || 1;
            mc.playFile(PATH_EFF + equipWithEffConfig.specialEff, -1);
        }
        else {
            mc.x = this[pointGroupName].x + equipWithEffConfig.offX;
            mc.y = this[pointGroupName].y + equipWithEffConfig.offY;
            mc.rotation = this[pointGroupName].rotation;
            mc.scaleX = mc.scaleY = equipWithEffConfig.scaling || 1;
            mc.playFile(PATH_EFF + equipWithEffConfig.inShowEff, -1);
        }
    };
    /**
     * 传世
     */
    RoleItemRenderer.prototype.setSuit = function (role) {
        var isSubRole = role instanceof RankSubRoleVo;
        DisplayUtils.removeFromParent(this.suitEff);
        var canShow = isSubRole ? role.heirloomLv : appearanceControl.checkCanShow(role, 0 /* WEAPON */, 4 /* TYPE4 */);
        if (canShow) {
            var equipEffId = isSubRole ? role.heirloomLv : appearanceControl.getEquipEffId(role, 0 /* WEAPON */, 4 /* TYPE4 */);
            if (equipEffId) {
                this.suitEff = this.suitEff || new GameMovieClip;
                this.suitEff.x = this.suitImg.x;
                this.suitEff.y = this.suitImg.y;
                this.suitEff.scaleX = this.suitImg.scaleX;
                this.suitEff.scaleY = this.suitImg.scaleY;
                if (!this.suitEff.parent && this.suitImg.parent) {
                    this.suitImg.parent.addChildAt(this.suitEff, this.suitImg.parent.getChildIndex(this.suitImg));
                }
                if (!isSubRole && role.heirloomDressId) {
                    var heirloomillusionConfig = DataCenter.ins().HeirloomillusionConfig[role.heirloomDressId];
                    this.suitEff.playFile(PATH_EFF + heirloomillusionConfig.eff + "n", -1);
                }
                else {
                    var heirloomEquipSetConfig = DataCenter.ins().HeirloomEquipSetConfig[equipEffId];
                    this.suitEff.playFile(PATH_EFF + heirloomEquipSetConfig.neff, -1);
                }
            }
        }
    };
    /**
     * 兵魂
     */
    RoleItemRenderer.prototype.setGwWeapons = function (role) {
        DisplayUtils.removeFromParent(this.gwEff);
        var canShow = appearanceControl.checkCanShow(role, 0 /* WEAPON */, 2 /* TYPE2 */);
        if (canShow) {
            var equipEffId = appearanceControl.getEquipEffId(role, 0 /* WEAPON */, 2 /* TYPE2 */);
            if (equipEffId) {
                var mc = this.gwEff = this.gwEff || new GameMovieClip;
                mc.x = this["sef" + role.job].x;
                mc.y = this["sef" + role.job].y;
                mc.rotation = this["sef" + role.job].rotation;
                if (!mc.parent) {
                    this.soulEff.addChild(mc);
                }
                var weaponSoulConfig = DataCenter.ins().WeaponSoulConfig[equipEffId];
                mc.playFile(PATH_EFF + weaponSoulConfig.inside[role.job - 1], -1);
            }
        }
    };
    /**
     * 羽翼
     */
    RoleItemRenderer.prototype.setWing = function (role) {
        var isSubRole = role instanceof RankSubRoleVo;
        DisplayUtils.removeFromParent(this.wingEff);
        var mc = this.wingEff = this.wingEff || new GameMovieClip;
        this.wingImg.source = null;
        var wingId = isSubRole ? role.pos3 : role.zhuangbei[2];
        if (wingId > 0) {
            var itemId = DataCenter.ins().FashionIdConfig[wingId].cost.itemId;
            var equipWithEffConfig = DataCenter.ins().EquipWithEffConfig[itemId + "_" + role.sex];
            this.wingImg.visible = equipWithEffConfig ? false : true;
            if (equipWithEffConfig) {
                if (!mc.parent) {
                    this.wingEffect.addChild(mc);
                }
                var zhuangbanSuitId = fashionControl.checkActiveSuit(role);
                if (zhuangbanSuitId && equipWithEffConfig.specialEff) {
                    this.wingEff.playFile(PATH_EFF + equipWithEffConfig.specialEff, -1);
                    this.wingEff.scaleX = this.wingEff.scaleY = equipWithEffConfig.specialScaling || 1;
                    this.wingEff.x = equipWithEffConfig.specialOffX || 0;
                    this.wingEff.y = equipWithEffConfig.specialOffY || 0;
                }
                else {
                    this.wingEff.playFile(PATH_EFF + equipWithEffConfig.inShowEff, -1);
                    this.wingEff.scaleX = this.wingEff.scaleY = equipWithEffConfig.scaling || 1;
                    this.wingEff.x = equipWithEffConfig.offX || 0;
                    this.wingEff.y = equipWithEffConfig.offY || 0;
                }
            }
            else {
                this.wingImg.source = DataCenter.ins().FashionIdConfig[wingId].res + "_png";
            }
        }
        else {
            var wingLevelConfig = null;
            if (isSubRole) {
                wingLevelConfig = DataCenter.ins().FeatherLevelConfig[role.wingLevel];
            }
            else {
                var wingData = role.wingsData;
                if (wingData.openStatus) {
                    wingLevelConfig = DataCenter.ins().FeatherLevelConfig[wingData.lv];
                }
            }
            if (wingLevelConfig) {
                this.wingImg.source = wingLevelConfig.appearance + "_png";
                this.wingImg.visible = true;
            }
            else {
                this.wingImg.source = "";
            }
        }
    };
    /**
     * 雷霆
     */
    RoleItemRenderer.prototype.setLeiTingEffect = function (role) {
        DisplayUtils.removeFromParent(this.ltWeaponEff);
        DisplayUtils.removeFromParent(this.ltClothesEff);
        var canShow = appearanceControl.checkCanShow(role, 0 /* WEAPON */, 3 /* TYPE3 */);
        if (canShow) {
            var equipEffId = appearanceControl.getEquipEffId(role, 0 /* WEAPON */, 3 /* TYPE3 */);
            if (equipEffId) {
                var ltEffId = appearanceControl.getLTEquipEffId(role);
                this.ltWeaponEff = this.ltWeaponEff || new GameMovieClip;
                var resName = PATH_EFF + "weaponthundereff" + ltEffId;
                if (ltEffId == 4) {
                    this.playMc(this.ltWeaponEff, resName, this["weaponThunderEffShort" + role.sex]);
                }
                else {
                    this.playMc(this.ltWeaponEff, resName, this["weaponThunderEff" + role.sex]);
                }
            }
        }
        if (canShow = appearanceControl.checkCanShow(role, 2 /* CLOTHES */, 3 /* TYPE3 */)) {
            var equipEffId = appearanceControl.getEquipEffId(role, 2 /* CLOTHES */, 3 /* TYPE3 */);
            if (equipEffId) {
                this.ltClothesEff = this.ltClothesEff || new GameMovieClip;
                this.playMc(this.ltClothesEff, PATH_EFF + "bodythundereff" + role.sex, this["bodyThunderEff" + role.sex]);
            }
        }
    };
    /**
     * 法阵
     */
    RoleItemRenderer.prototype.setDemonCir = function (deCirShowID) {
        DisplayUtils.removeFromParent(this.deEff);
        if (deCirShowID > 0) {
            this.deEff = this.deEff || new GameMovieClip;
            this.playMc(this.deEff, "" + PATH_EFF + DataCenter.ins().MagicCirBaseConfig[deCirShowID].footEff, this.demonCirEff);
        }
    };
    RoleItemRenderer.prototype.playMc = function (mc, resName, parent) {
        mc.playFile(resName, -1);
        parent.addChild(mc);
    };
    /**
     * 层级变换
     */
    RoleItemRenderer.prototype.changeLayer = function (role) {
        var bodyIndex = this.bodyImg.parent.getChildIndex(this.bodyImg);
        var bodyEffIndex = this.bodyEff.parent.getChildIndex(this.bodyEff);
        var bodyThunderEffIndex = this.bodyEff.parent.getChildIndex(this.bodyThunderEff);
        var weaponIndex = this.weaponImg.parent.getChildIndex(this.weaponImg);
        var weaponEffIndex = this.soulEff.parent.getChildIndex(this.soulEff);
        var weaponThunderEffIndex = this.soulEff.parent.getChildIndex(this.weaponThunderEff);
        var isSubRole = role instanceof RankSubRoleVo;
        var zhuangbanSuitId = fashionControl.checkActiveSuit(isSubRole ? [role.pos1, role.pos2] : role);
        if (role.weaponViewId)
            zhuangbanSuitId = 0;
        if (!zhuangbanSuitId && (this.currentState == "nor" || GlobalModel.bodyCoverWeapon(role.job))) {
            if (bodyIndex < weaponIndex) {
                this.weaponThunderEff.parent.addChildAt(this.weaponThunderEff, bodyIndex);
                this.soulEff.parent.addChildAt(this.soulEff, bodyIndex);
                this.weaponImg.parent.addChildAt(this.weaponImg, bodyIndex);
            }
        }
        else {
            if (weaponIndex < bodyIndex) {
                this.bodyThunderEff.parent.addChildAt(this.bodyThunderEff, weaponIndex);
                this.bodyEff.parent.addChildAt(this.bodyEff, weaponIndex);
                this.bodyImg.parent.addChildAt(this.bodyImg, weaponIndex);
            }
        }
    };
    return RoleItemRenderer;
}(BaseItemRender));
__reflect(RoleItemRenderer.prototype, "RoleItemRenderer");
/**
 * 神羽控件专属
 */
var FeatherDeityItemRenderer = (function (_super) {
    __extends(FeatherDeityItemRenderer, _super);
    function FeatherDeityItemRenderer() {
        var _this = _super.call(this) || this;
        _this.skinName = 'FeatherDeityItemRendererSkin';
        return _this;
    }
    FeatherDeityItemRenderer.prototype.setSelect = function (b) {
        this.select.visible = b;
    };
    FeatherDeityItemRenderer.prototype.dataChanged = function () {
        if (!this.data)
            return;
        var data = this.data;
        this.itemId = 0;
        this.itemIcon.imgJob.visible = false;
        this.itemIcon.imgIcon.source = "";
        var config = data;
        if (this.data instanceof ItemData) {
            var itemdata = this.data;
            config = DataCenter.ins().ItemConfig[itemdata.configID];
            this.count.text = itemdata.count + "";
        }
        else {
            if (data.itemId) {
                config = DataCenter.ins().ItemConfig[data.itemId];
            }
        }
        this.itemIcon.imgIcon.source = config.icon ? config.icon + "_png" : "";
        this.nameTxt.text = config.name ? config.name : "";
        this.itemId = config.id;
        this.itemIcon.imgBg.source = 'quality' + ItemUtils.getQuality(config);
        this.nameTxt.textColor = ItemUtils.getQualityColor(config);
        this.itemIcon.imgIcon.visible = this.itemIcon.imgIcon.source ? true : false;
    };
    FeatherDeityItemRenderer.prototype.setCountVisible = function (b) {
        this.count.visible = b;
    };
    FeatherDeityItemRenderer.prototype.setNameVisible = function (b) {
        this.nameTxt.visible = b;
        if (!b)
            this.setQuality("quality0");
    };
    FeatherDeityItemRenderer.prototype.setImgIcon = function (img) {
        this.itemIcon.imgIcon.source = img;
        this.itemIcon.imgJob.visible = false;
        this.itemIcon.imgIcon.visible = this.itemIcon.imgIcon.source ? true : false;
    };
    FeatherDeityItemRenderer.prototype.updateRedPoint = function (b) {
        this.redPoint.visible = b;
    };
    FeatherDeityItemRenderer.prototype.setNameText = function (str) {
        this.nameTxt.text = str;
    };
    FeatherDeityItemRenderer.prototype.setQuality = function (str) {
        this.itemIcon.imgBg.source = str;
    };
    FeatherDeityItemRenderer.prototype.destruct = function () {
    };
    return FeatherDeityItemRenderer;
}(BaseItemRender));
__reflect(FeatherDeityItemRenderer.prototype, "FeatherDeityItemRenderer");
/**
 * 欢迎
 */
var GreetView = (function (_super) {
    __extends(GreetView, _super);
    function GreetView() {
        var _this = _super.call(this) || this;
        _this.skinName = "GreetViewSkin";
        _this.uilayer = GameLayer.POPUP;
        return _this;
    }
    GreetView.prototype.createChildren = function () {
        _super.prototype.createChildren.call(this);
        this.validateNow();
    };
    GreetView.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.addEventTouchTap(this, this.onTap);
        this.playEff();
        if (smeltControl.checkOpenSystem()) {
            this.pic.source = "greet1_png";
        }
    };
    GreetView.prototype.close = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        egret.Tween.removeTweens(this.pic);
    };
    GreetView.prototype.onTap = function (e) {
        this.sureBtn.visible = false;
        var tw = egret.Tween.get(this.pic);
        var view = UIMgr.playFun;
        if (!view || !view.location)
            return;
        var btn = view.location;
        if (btn) {
            var self_1 = this;
            var p = btn.localToGlobal();
            this.sureGroup.globalToLocal(p.x, p.y, p);
            tw.to({ scaleX: 0, scaleY: 0, x: p.x, y: p.y }, 500).call(function () {
                UIMgr.ins().close(self_1);
            });
        }
        if (this.eff) {
            DisplayUtils.removeFromParent(this.eff);
            this.eff = null;
        }
        promptControl.dispatchWelcome();
    };
    GreetView.prototype.playEff = function () {
        if (!this.eff) {
            this.eff = new GameMovieClip;
            this.eff.x = this.sureGroup.width / 2;
            this.eff.y = this.sureGroup.height / 2 - 5;
            this.eff.scaleX = this.effgroup.scaleX;
            this.eff.scaleY = this.effgroup.scaleY;
            this.sureGroup.addChild(this.eff);
        }
        this.eff.playFile(PATH_EFF + 'achieveCom', -1);
    };
    return GreetView;
}(BaseEuiView));
__reflect(GreetView.prototype, "GreetView");
/**
 * Scene基类
 */
var BaseScene = (function () {
    function BaseScene() {
        this._layers = new Array();
    }
    /**
     * 进入Scene调用
     */
    BaseScene.prototype.onEnter = function (showMask) {
        if (showMask === void 0) { showMask = false; }
        this.showMask = showMask;
        this.updateBluntBangs();
    };
    BaseScene.prototype.updateBluntBangs = function () {
        if (this.showMask) {
            if (!this.topMask) {
                this.topMask = new eui.Image(PATH_RES + "bluntBangs.png");
                this.topMask.width = 580;
                this.topMask.height = 100;
            }
            StageUtils.ins().getStage().addChildAt(this.topMask, 9999);
            if (ServerStorage.ins().getBitBool(ClientSetBit.bluntBangs)) {
                this.topMask.y = 60 /* TOP */ - this.topMask.height;
            }
            else if (DeviceUtils.IsBluntBangs) {
                this.topMask.y = SDKManager.ins().getStatusHeight() - this.topMask.height;
            }
            else {
                this.topMask.y = -this.topMask.height;
            }
        }
        for (var i = 0; i < this._layers.length; i++) {
            this._layers[i].setSafeArea();
        }
    };
    /**
     * 退出Scene调用
     */
    BaseScene.prototype.onExit = function () {
        UIMgr.ins().closeAll();
        this.removeAllLayer();
    };
    /**
     * 添加一个层到舞台
     */
    BaseScene.prototype.addLayer = function (layer) {
        if (layer instanceof EuiLayer) {
            StageUtils.ins().getUIStage().addChild(layer);
            this._layers.push(layer);
            if (this.showMask) {
                layer.setSafeArea();
            }
        }
    };
    /**
     * 添加一个层到舞台
     */
    BaseScene.prototype.addLayerAt = function (layer, index) {
        if (layer instanceof EuiLayer) {
            StageUtils.ins().getUIStage().addChildAt(layer, index);
            this._layers.push(layer);
            if (this.showMask) {
                layer.setSafeArea();
            }
        }
    };
    /**
     * 在舞台移除一个层
     */
    BaseScene.prototype.removeLayer = function (layer) {
        if (layer instanceof EuiLayer) {
            StageUtils.ins().getUIStage().removeChild(layer);
            this._layers.splice(this._layers.indexOf(layer), 1);
        }
    };
    /**
     * 层移除所有子对象
     */
    BaseScene.prototype.layerRemoveAllChild = function (layer) {
        if (layer instanceof EuiLayer) {
            layer.removeChildren();
        }
    };
    /**
     * 移除所有层
     */
    BaseScene.prototype.removeAllLayer = function () {
        while (this._layers.length) {
            var layer = this._layers[0];
            this.layerRemoveAllChild(layer);
            this.removeLayer(layer);
        }
        if (this.topMask) {
            StageUtils.ins().getStage().removeChild(this.topMask);
            this.topMask = null;
        }
    };
    return BaseScene;
}());
__reflect(BaseScene.prototype, "BaseScene");
var RambleBaseVo = (function () {
    function RambleBaseVo() {
        this.time = 0;
    }
    RambleBaseVo.prototype.setTime = function (value) {
        if (value) {
            this.time = DateUtils.formatMiniDateTime(value);
        }
        else {
            this.time = 0;
        }
    };
    RambleBaseVo.prototype.setNowTime = function () {
        this.time = GameServer.serverTime;
    };
    return RambleBaseVo;
}());
__reflect(RambleBaseVo.prototype, "RambleBaseVo");
var RambleMainView = (function (_super) {
    __extends(RambleMainView, _super);
    function RambleMainView() {
        var _this = _super.call(this) || this;
        _this.resId = ["xlt_98", "xlt_99"];
        _this.fistOpenGuild = true;
        _this.uilayer = GameLayer.POPUP;
        _this.isShowLog = false;
        _this.resident = true;
        return _this;
    }
    RambleMainView.prototype.initUI = function () {
        _super.prototype.initUI.call(this);
        this.skinName = "RambleMainViewSkin";
        this.touchEnabled = false;
        this.chatList.itemRenderer = RambleListItem2Renderer;
        this.chatList.itemRendererSkinName = "RambleListItem2RendererSkin";
        this.dataList = new eui.ArrayCollection([]);
        this.chatList.dataProvider = this.dataList;
        if (copyControl.isFBChatChannle()) {
            DisplayUtils.removeFromParent(this.guildMessage);
        }
        else {
            this.guildMessage.visible = false;
            this.guildMessage.scaleX = this.guildMessage.scaleY = 0.7;
            egret.Tween.get(this.guildMessage, {
                loop: true
            }).to({
                scaleX: 0.8,
                scaleY: 0.8
            }, 1000).to({
                scaleX: 0.7,
                scaleY: 0.7
            }, 1000);
        }
    };
    RambleMainView.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.addEventTouchTap(this.message, this.onTap);
        this.addEventTouchTap(this.chatList, this.onTap);
        this.addEventTouchTap(this.guildMessage, this.onTap);
        this.addCustomEvent(227 /* RAMBLE_SYS_MSG */, this.getNewNotice);
        this.addCustomEvent(386 /* COPY_CHAT */, this.updataList);
        this.addCustomEvent(226 /* RAMBLE_NEW_MSG */, this.updateNewChatMsg);
        this.addCustomEvent(642 /* UNION_CHAT_RED */, this.updateChatRed);
        this.addCustomEvent(353 /* ENTER_MAP */, this.checkShow);
        this.addCustomEvent(91 /* TASK_TRACE */, this.updateTipShow);
        this.updataList();
        this.updateTipShow();
        this.checkShow();
        this.bottom = param[0] || 0;
    };
    RambleMainView.prototype.close = function () {
        egret.Tween.removeTweens(this.guildMessage);
    };
    RambleMainView.prototype.onTap = function (e) {
        switch (e.currentTarget) {
            case this.message:
            case this.chatList:
                UIMgr.ins().open(RambleView);
                break;
            case this.guildMessage:
                UIMgr.ins().open(RambleView, this.guildMessage.name);
                egret.callLater(this.refTipMsgStatus, this);
                break;
        }
    };
    RambleMainView.prototype.getNewNotice = function (msg) {
        if (msg.type == 7 /* ciChannelAll */) {
            if (!this.rambleTips) {
                this.rambleTips = new RambleTipsView();
                this.rambleTips.y = this.message.y + 12;
                this.rambleTips.x = this.message.x + 50;
            }
            if (!this.rambleTips.parent) {
                this.addChildAt(this.rambleTips, 0);
            }
            this.rambleTips.setData(msg);
        }
        else if (msg.type == 3 /* ciChannelGuild */) {
            this.updataList();
        }
    };
    RambleMainView.prototype.updateNewChatMsg = function () {
        if (this.fistOpenGuild) {
            this.fistOpenGuild = false;
            if (unionControl.guildID) {
                unionControl.getAllGuildMessage();
            }
        }
        this.updataList();
        this.updateChatRed();
    };
    RambleMainView.prototype.updateChatRed = function () {
        this.refTipMsgStatus();
    };
    RambleMainView.prototype.updataList = function () {
        this.dataList.replaceAll(rambleControl.chatListTip2.concat());
    };
    RambleMainView.prototype.checkShow = function () {
        var fbID = MapControl.copyId;
        this.updataLayer(fbID != 0);
        this.updataList();
    };
    /**
     * 更新主界面显示布局
     * @param value    是否在副本中
     */
    RambleMainView.prototype.updataLayer = function (value) {
        if (value) {
            this.chatGroup.y = 616;
        }
        else {
            this.chatGroup.y = 546;
        }
    };
    /** 更新聊天tip显示状态 */
    RambleMainView.prototype.updateTipShow = function () {
        this.refTipMsgStatus();
    };
    RambleMainView.prototype.destoryView = function () {
        _super.prototype.destoryView.call(this, false);
    };
    RambleMainView.prototype.refTipMsgStatus = function () {
        this.guildMessage.visible = unionControl.noReadMsgList.length > 0 || rambleControl.canKfNoReadTip();
        if (this.guildMessage.visible) {
            if (unionControl.noReadMsgList.length > 0 && rambleControl.canKfNoReadTip()) {
                var time = unionControl.noReadMsgList[unionControl.noReadMsgList.length - 1].time;
                var kfTime = rambleControl.kfNoReadMsgList[rambleControl.kfNoReadMsgList.length - 1].time;
                if (time > kfTime) {
                    this.guildMessage.name = "" + 4 /* guild */;
                }
                else {
                    this.guildMessage.name = "" + 2 /* kuafu */;
                }
            }
            else {
                if (unionControl.noReadMsgList.length > 0) {
                    this.guildMessage.name = "" + 4 /* guild */;
                }
                else if (rambleControl.canKfNoReadTip()) {
                    this.guildMessage.name = "" + 2 /* kuafu */;
                }
            }
        }
    };
    return RambleMainView;
}(BaseEuiView));
__reflect(RambleMainView.prototype, "RambleMainView");
var GameLoadingUI = (function (_super) {
    __extends(GameLoadingUI, _super);
    function GameLoadingUI() {
        var _this = _super.call(this) || this;
        _this.maxIndex = 10;
        _this.addEventListener(egret.Event.ADDED_TO_STAGE, _this.OnAddStage, _this);
        return _this;
    }
    GameLoadingUI.GetInstance = function () {
        if (!this.instance) {
            if (GlobalModel.loadingClass) {
                var loadingClass = egret.getDefinitionByName(GlobalModel.loadingClass);
                this.instance = new loadingClass();
            }
            else {
                this.instance = new GameLoadingUI();
            }
        }
        return this.instance;
    };
    GameLoadingUI.prototype.OnAddStage = function () {
        this.initUI();
    };
    GameLoadingUI.prototype.initUI = function () {
        this.bg = new eui.Image;
        var pfData = GlobalModel.pfData;
        var notDFData = GlobalModel.notdifferentiate;
        if (pfData && pfData.startbg) {
            this.bg.source = pfData.startbg;
        }
        else {
            this.bg.source = PATH_ROOT + "loading/loading.png";
        }
        if (notDFData.length > 0) {
            for (var key in notDFData) {
                if (GlobalModel.gameId == notDFData[key]) {
                    var curpfData = GlobalModel.pfArgs[GlobalModel.pf];
                    if (curpfData && curpfData.startbg) {
                        this.bg.source = curpfData.startbg;
                    }
                    break;
                }
            }
        }
        this.addChild(this.bg);
        this.bg.x = (this.stage.stageWidth - 580) / 2;
        this.progressPane = new egret.DisplayObjectContainer;
        this.addChild(this.progressPane);
        var hlight = new eui.Image;
        hlight.source = PATH_ROOT + "loading/hlight.png";
        hlight.x = 0;
        hlight.y = -25;
        this.messageText = new eui.Label;
        this.messageText.width = 360;
        this.messageText.height = 20;
        this.messageText.textAlign = egret.HorizontalAlign.CENTER;
        this.messageText.x = 0;
        this.messageText.y = -20;
        this.messageText.size = 16;
        this.progressPane.addChild(this.messageText);
        this.progressPane.addChild(hlight);
        this.progressBg1 = new eui.Image;
        this.progressBg1.source = PATH_ROOT + "loading/bar4.png";
        this.progressBg1.scaleX = -1;
        this.progressBg1.x = 25.5;
        this.progressBg1.y = 25;
        this.progressPane.addChild(this.progressBg1);
        this.progressBg2 = new eui.Image;
        this.progressBg2.source = PATH_ROOT + "loading/bar2.png";
        this.progressBg2.scale9Grid = new egret.Rectangle(12, 8, 5, 5);
        this.progressBg2.width = 310;
        this.progressBg2.x = 10;
        this.progressBg2.y = this.progressBg1.y + 5;
        this.progressPane.addChild(this.progressBg2);
        this.progressBg3 = new eui.Image;
        this.progressBg3.source = PATH_ROOT + "loading/bar4.png";
        this.progressBg3.x = this.progressBg2.x + this.progressBg2.width;
        this.progressBg3.y = this.progressBg1.y;
        this.progressPane.addChild(this.progressBg3);
        this.progress = new eui.Image;
        this.progress.source = PATH_ROOT + "loading/bar5.png";
        this.progress.scale9Grid = new egret.Rectangle(8, 8, 10, 3);
        this.progress.width = 0;
        this.progress.x = 11;
        this.progress.y = 32;
        this.progressPane.addChild(this.progress);
        this.pgrBg1 = new eui.Image;
        this.pgrBg1.source = PATH_ROOT + "loading/s1.png";
        this.pgrBg1.scaleX = -1;
        this.pgrBg1.x = 22;
        this.pgrBg1.y = 60;
        this.progressPane.addChild(this.pgrBg1);
        this.pgrBg2 = new eui.Image;
        this.pgrBg2.source = PATH_ROOT + "loading/s2.png";
        this.pgrBg2.scale9Grid = new egret.Rectangle(12, 8, 5, 5);
        this.pgrBg2.width = 297;
        this.pgrBg2.x = this.pgrBg1.x + this.pgrBg1.width;
        this.pgrBg2.y = this.pgrBg1.y + 2;
        this.progressPane.addChild(this.pgrBg2);
        this.pgrBg3 = new eui.Image;
        this.pgrBg3.source = PATH_ROOT + "loading/s1.png";
        this.pgrBg3.x = this.pgrBg2.x + this.pgrBg2.width;
        this.pgrBg3.y = this.pgrBg1.y;
        this.progressPane.addChild(this.pgrBg3);
        this.pgress = new eui.Image;
        this.pgress.source = PATH_ROOT + "loading/s0.png";
        this.pgress.scale9Grid = new egret.Rectangle(8, 8, 10, 0);
        this.pgress.width = 0;
        this.pgress.height = 9;
        this.pgress.x = 12;
        this.pgress.y = 64;
        this.progressPane.addChild(this.pgress);
        this.progressText = new eui.Label;
        this.progressText.width = this.messageText.width;
        this.progressText.height = 20;
        this.progressText.textAlign = egret.HorizontalAlign.CENTER;
        this.progressText.x = 0;
        this.progressText.y = 32;
        this.progressText.size = 16;
        this.progressPane.addChild(this.progressText);
        this.progressPane.x = (this.stage.stageWidth - 360) / 2;
        this.progressPane.y = 600;
        this.addLink(LangMgr.getValueByKey("loadingLink"), 720);
        this.setOwnerDes(GlobalModel.ownerDes);
        this.fakePress();
        this.runTips();
    };
    GameLoadingUI.prototype.fakePress = function (end) {
        var _this = this;
        this.pgress.width = 0;
        egret.Tween.removeTweens(this.pgress);
        if (end) {
            this.pgress.width = 318;
            return;
        }
        egret.Tween.get(this.pgress).to({
            width: 318
        }, 1000).call(function () {
            _this.fakePress();
        });
    };
    GameLoadingUI.prototype.runTips = function () {
        if (!this.pgrTipsText) {
            this.pgrTipsText = new eui.Label;
            this.pgrTipsText.size = 14;
            this.pgrTipsText.width = this.stage.stageWidth;
            this.pgrTipsText.height = 40;
            this.pgrTipsText.textAlign = "center";
            this.pgrTipsText.verticalAlign = "middle";
            this.pgrTipsText.lineSpacing = 5;
            this.pgrTipsText.textColor = 0xd8c8b1;
            this.pgrTipsText.anchorOffsetX = this.stage.stageWidth / 2;
            this.pgrTipsText.x = 180;
            this.pgrTipsText.y = 70;
            this.progressPane.addChild(this.pgrTipsText);
        }
    };
    GameLoadingUI.prototype.updeteTips = function () {
        if (this.tipsIndex == undefined) {
            this.tipsIndex = 1;
        }
        this.pgrTipsText.text = LangMgr.getValueByKey("loadingTips" + this.tipsIndex);
        this.tipsIndex++;
        if (this.tipsIndex > this.maxIndex) {
            this.tipsIndex = 1;
        }
    };
    GameLoadingUI.prototype.setOwnerDes = function (content) {
        if (content && content != "") {
            if (!this.ownerDes && this.stage) {
                this.ownerDes = new eui.Label;
                this.ownerDes.size = 12;
                this.ownerDes.width = 520;
                this.ownerDes.textAlign = "center";
                this.ownerDes.verticalAlign = "middle";
                this.ownerDes.textColor = 0xd8c8b1;
                this.ownerDes.lineSpacing = 5;
                this.addChild(this.ownerDes);
            }
            if (this.ownerDes) {
                this.ownerDes.text = content;
                this.ownerDes.x = (this.stage.stageWidth - this.ownerDes.width) / 2;
                this.ownerDes.y = this.stage.stageHeight - this.ownerDes.height - 10;
            }
        }
    };
    GameLoadingUI.prototype.addLink = function (content, posY, color) {
        if (!GlobalModel.isAuditState) {
            this.refreshTips = new eui.Label;
            if (color)
                this.refreshTips.textColor = color;
            this.refreshTips.textFlow = (new egret.HtmlTextParser).parser(content);
            this.refreshTips.touchEnabled = true;
            this.refreshTips.size = 18;
            this.refreshTips.width = 520;
            this.refreshTips.height = 40;
            this.refreshTips.textAlign = "center";
            this.refreshTips.verticalAlign = "middle";
            this.refreshTips.lineSpacing = 5;
            this.refreshTips.x = (this.stage.stageWidth - this.refreshTips.width) / 2;
            this.refreshTips.y = posY;
            this.addChild(this.refreshTips);
            this.refreshTips.addEventListener(egret.TextEvent.LINK, this.onLink, this);
        }
    };
    GameLoadingUI.prototype.onLink = function () {
        window.location.reload();
    };
    GameLoadingUI.prototype.show = function (parent) {
        if (parent === void 0) { parent = Main.ins(); }
        if (!UIMgr.ins().isShow("StartGameView")) {
            this.visible = true;
            parent.addChild(this);
        }
    };
    GameLoadingUI.prototype.setProgress = function (value, tips, duration, barTotalWidth) {
        if (barTotalWidth === void 0) { barTotalWidth = 319; }
        var width = barTotalWidth * value / 100;
        egret.Tween.removeTweens(this.progress);
        if (this.posImage) {
            egret.Tween.removeTweens(this.posImage);
        }
        if (duration && duration > 0) {
            egret.Tween.get(this.progress).to({
                width: width
            }, duration);
            if (this.posImage) {
                egret.Tween.get(this.posImage).to({
                    x: width + 6
                }, duration);
            }
        }
        else {
            this.progress.width = width;
            if (this.posImage) {
                this.posImage.x = width + 6;
            }
        }
        this.progressText.text = Math.floor(value) + "%";
        this.messageText.text = tips;
        if (value == 100) {
            this.fakePress(true);
        }
    };
    GameLoadingUI.prototype.showLogin = function () {
        if (!this.loginImg) {
            this.loginImg = new eui.Image;
            this.loginImg.source = "enter_png";
            this.loginImg.x = (this.stage.stageWidth - 291) / 2;
            this.loginImg.y = this.stage.stageHeight - 128 - 70;
            this.addChild(this.loginImg);
            this.loginImg.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onClick, this);
        }
    };
    GameLoadingUI.prototype.onClick = function (e) {
        switch (e.currentTarget) {
            case this.loginImg:
                SDKManager.ins().SDKLoginNative();
                break;
        }
    };
    GameLoadingUI.prototype.close = function () {
        this.visible = false;
        if (this.parent) {
            this.parent.removeChild(this);
        }
        if (this.progress) {
            egret.Tween.removeTweens(this.progress);
        }
        this.fakePress(true);
        this.hideProgress();
    };
    GameLoadingUI.prototype.showProgress = function () {
        this.showState(true);
        if (this.progressPane) {
            this.refreshTips.visible = true;
            this.progressPane.visible = true;
        }
        TimerMgr.ins().doTimerDelay(0, 2500, 0, this.updeteTips, this);
    };
    GameLoadingUI.prototype.hideProgress = function () {
        if (this.progressPane) {
            this.refreshTips.visible = false;
            this.progressPane.visible = false;
        }
        TimerMgr.ins().remove(this.updeteTips, this);
    };
    GameLoadingUI.prototype.showState = function (state) {
        this.visible = state;
    };
    return GameLoadingUI;
}(egret.Sprite));
__reflect(GameLoadingUI.prototype, "GameLoadingUI");
var BaseSystem = (function (_super) {
    __extends(BaseSystem, _super);
    function BaseSystem() {
        var _this = _super.call(this) || this;
        var thisobj = egret.getDefinitionByName(egret.getQualifiedClassName(_this));
        for (var name_1 in thisobj.prototype) {
            if (name_1.indexOf("down") == 0) {
                var func = thisobj.prototype[name_1];
                if (func instanceof Function && func.messageId != undefined) {
                    SocketConnection.ins().regHandler(_this.protocolsId, func.messageId, func, _this, func.decode);
                }
            }
        }
        _this.addCustomEvent(3 /* LOGIN_INIT */, _this.initLogin);
        _this.addCustomEvent(4 /* ZERO_INIT */, _this.initZero);
        return _this;
    }
    /**
     * 游戏登录初始化
     */
    BaseSystem.prototype.initLogin = function () {
    };
    /**
     * 0点游戏数据请求
     */
    BaseSystem.prototype.initZero = function () {
    };
    BaseSystem.prototype.getBytes = function (messageId) {
        var bytes = SocketConnection.ins().getBytes();
        bytes.writeCmd(this.protocolsId, messageId);
        return bytes;
    };
    BaseSystem.prototype.encodeBytes = function (encodeObj, param, bytes) {
        SocketConnection.ins().encodeParam(encodeObj, param, bytes);
    };
    BaseSystem.prototype.sendToServer = function (bytes) {
        SocketConnection.ins().sendToServer(bytes);
    };
    BaseSystem.prototype.addCustomEvent = function (type, listener) {
        EventMgr.addListener(type, listener, this);
    };
    BaseSystem.prototype.removeCustomEvents = function () {
        EventMgr.ins().removeAll(this);
    };
    BaseSystem.prototype.addCustomEventMany = function (listener) {
        var _this = this;
        var types = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            types[_i - 1] = arguments[_i];
        }
        var isDelayCall = false;
        var callFunc = function () {
            isDelayCall = false;
            listener.call(_this);
        };
        var delayFunc = function () {
            if (!isDelayCall) {
                isDelayCall = true;
                TimerMgr.ins().doTimer(60, 1, callFunc, _this);
            }
        };
        for (var _a = 0, types_1 = types; _a < types_1.length; _a++) {
            var type = types_1[_a];
            this.addCustomEvent(type, delayFunc);
        }
    };
    return BaseSystem;
}(SingleClass));
__reflect(BaseSystem.prototype, "BaseSystem");
/**
 * 小7
 */
var PlatformX7sy = (function (_super) {
    __extends(PlatformX7sy, _super);
    function PlatformX7sy() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * SDK需要登陆
     */
    PlatformX7sy.prototype.SDKIsNeedLoginNative = function () {
        return true;
    };
    /**
     * SDK登陆验证参数
     */
    PlatformX7sy.prototype.GetSDKCheckAccountArgs = function () {
        var jsonObj = {
            pf: GlobalModel.pf,
            gameId: GlobalModel.gameId,
            channelId: GlobalModel.channelId,
            gameVersion: GlobalModel.gameVersion,
            appId: GlobalModel.appid,
            tokenkey: GlobalModel.getUrlParamValue("tokenkey"),
            shellext: GlobalModel.getUrlParamValue("shellext")
        };
        console.log("loginParm:", JSON.stringify(jsonObj));
        return JSON.stringify(jsonObj);
    };
    /**
     * SDK支付
     */
    PlatformX7sy.prototype.SDKPayNative = function (params) {
        egret.ExternalInterface.call("SDKPayNative", JSON.stringify({
            serverName: params.serverName,
            gameRoleName: params.roleName,
            serverId: params.serverId,
            gameRoleID: ActorControl.actorID,
            gameUserBalance: ActorControl.yb,
            vipLevel: vipControl.lv,
            gameUserLevel: ActorControl.level,
            partyName: unionControl.guildName,
            goodsID: params.itemid,
            productName: params.goodsname,
            cpOrderID: params.order,
            count: params.amount,
            amount: params.fee,
            extrasParams: params.order,
            createAccountTime: GlobalModel.createAccountTime,
            createActorTime: GlobalModel.createActorTime,
            gameSign: params.gameSign,
            guid: GlobalModel.openID
        }));
    };
    /**
     * SDK回调
     */
    PlatformX7sy.prototype.nativeCallback = function (msg64) {
        var msg = Base64.base64decode(msg64);
        _super.prototype.nativeCallback.call(this, msg);
        var jsonObj = JSON.parse(msg);
        var callType = jsonObj['callType'];
        if (callType == 'init') {
            debug.log("SDK init suc");
        }
        else if (callType == 'login') {
            if (jsonObj['sdkcode'] == 0) {
                GlobalModel.setUrlParamValue("tokenkey", jsonObj['tokenkey']);
                GlobalModel.setUrlParamValue("os", jsonObj['os']);
                var obj = {
                    tokenkey: jsonObj['tokenkey'],
                    os: jsonObj['os'],
                    gameVersion: GlobalModel.gameVersion
                };
                var args = Md5Utils.obj_md5_args(obj);
                debug.log("get UID parm:" + args);
                PHPConfig.requestPhpData(GlobalModel.sdkDomain + "/" + GlobalModel.pf.toLowerCase() + "/" + GlobalModel.gameId + "/sdkurlcallback", args, function (event) {
                    var responseJson = JSON.parse(event.currentTarget.response);
                    console.log("parm:", event.currentTarget.response);
                    if (responseJson["status"] == 1) {
                        GlobalModel.openID = responseJson["guid"];
                        GlobalModel.setUrlParamValue("shellext", responseJson['shellext']);
                        SceneMgr.ins().runScene(StartGameScene);
                    }
                    else {
                        debug.log("get Account error!!!");
                        SDKManager.ins().NativeCallback(msg64);
                    }
                }, this, function (event) {
                    debug.log("get Account error!!!");
                    SDKManager.ins().NativeCallback(msg64);
                });
            }
            else {
                this.SDKLoginNative();
            }
        }
        else if (callType == 'logout') {
            if (jsonObj['sdkcode'] == 0) {
                window.location.reload();
            }
        }
        else if (callType == 'switchAccount') {
            if (jsonObj['sdkcode'] == 0) {
                window.location.reload();
            }
        }
    };
    return PlatformX7sy;
}(PlatformBase));
__reflect(PlatformX7sy.prototype, "PlatformX7sy");
var PlatformZwH5 = (function (_super) {
    __extends(PlatformZwH5, _super);
    function PlatformZwH5() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.url = "https://tree77.cn/index.php";
        return _this;
    }
    /**
     * 初始化SDK
     */
    PlatformZwH5.prototype.SDKInitNative = function () {
        GlobalModel.openID = GlobalModel.getUrlParamValue("uid");
    };
    /**
     * 是否需要登录
     */
    PlatformZwH5.prototype.SDKIsNeedLoginNative = function () {
        return false;
    };
    /**返回拼接好的数据 */
    PlatformZwH5.prototype.getUrl = function (obj) {
        var cc = '';
        for (var key in obj) {
            cc += key + "=" + obj[key] + "&";
        }
        cc = cc.substring(0, cc.length - 1);
        return cc;
    };
    /**
     * SDK登陆验证参数
     */
    PlatformZwH5.prototype.GetSDKCheckAccountArgs = function () {
        var jsonObj = {
            pf: GlobalModel.pf,
            gameId: GlobalModel.gameId,
            channelId: GlobalModel.channelId,
            gameVersion: GlobalModel.gameVersion,
            appId: GlobalModel.appid,
            token: GlobalModel.getUrlParamValue("token"),
            shellext: GlobalModel.getUrlParamValue("shellext")
        };
        console.log("Ziwan loginParm:", JSON.stringify(jsonObj));
        return JSON.stringify(jsonObj);
    };
    PlatformZwH5.prototype.getUserInfoComplete = function (data) {
        if (data.status == 1001) {
            console.log('get suc:', data.info);
            SDKManager.ins().NativeCallback(JSON.stringify({
                callType: "login",
                sdkcode: 0,
                data: data.userinfo
            }));
        }
        else {
            console.log('get fail', data.info);
        }
    };
    PlatformZwH5.prototype.getUserInfoIOError = function (data) {
        console.log("request failed", data);
    };
    /**
     * SDK创建角色
     */
    PlatformZwH5.prototype.SDKCreateRoleNative = function (params) {
        this.setData(params, true);
    };
    /**
     * SDK进入游戏
     */
    PlatformZwH5.prototype.SDKEnterGameNative = function (params) {
        this.setData(params);
    };
    /**
     * SDK角色升级
     */
    PlatformZwH5.prototype.SDKUserUpgradeNative = function (params) {
        this.setData(params, false, true);
    };
    PlatformZwH5.prototype.setData = function (params, isCreate, isUpLv) {
        if (isCreate === void 0) { isCreate = false; }
        if (isUpLv === void 0) { isUpLv = false; }
        var roletype = "0";
        if (isCreate) {
            roletype = "1";
        }
        if (isUpLv) {
            roletype = "2";
        }
        //转生等级+等级
        var level = ActorControl.level;
        // if (reincarnateControl.lv > 0) {
        //     level += LangMgr.getValueByKey('numberRotation', reincarnateControl.lv);
        // }
        // level += LangMgr.getValueByKey('numberLevel', ActorControl.level);
        var data = {
            userToken: GlobalModel.getUrlParamValue("userToken"),
            channel_id: GlobalModel.getUrlParamValue("channel_id"),
            area: GlobalModel.srvname || "",
            role_name: params.nickName || "",
            new_role: roletype != "1" ? "0" : roletype,
            rank: level,
            money: ActorControl.yb,
        };
        var sign = this.getSign(data);
        var protObj = JSON.parse(JSON.stringify(data));
        protObj['sign'] = sign;
        console.log("Report info:" + this.getUrl(protObj));
        PHPConfig.requestPhpData(this.url, "g=Home&m=GameOauth&a=roles&" + this.getUrl(protObj), this.onGetComplete, this, this.onGetIOError, egret.HttpMethod.GET);
    };
    /**
     * 战斗力变化
     */
    PlatformZwH5.prototype.powerChange = function () {
        if (ActorControl.power < 10000) {
            return;
        }
        var powerObj = {
            channel_id: GlobalModel.getUrlParamValue("channel_id"),
            userToken: GlobalModel.getUrlParamValue("userToken"),
            area: GlobalModel.srvname,
            role_name: ActorControl.myName,
            rank: ActorControl.power,
            price: vipControl.exp / GlobalModel.chargeRate || 0,
        };
        var sign = this.getSign(powerObj);
        var protObj = JSON.parse(JSON.stringify(powerObj));
        protObj['sign'] = sign;
        console.log("powerChange info:" + this.getUrl(protObj));
        PHPConfig.requestPhpData(this.url + '/Home/GameOauth/red_bag', this.getUrl(protObj), this.onPowerChangeComplete, this, this.onPowerChangeIOEroor, egret.HttpMethod.GET);
    };
    PlatformZwH5.prototype.onPowerChangeComplete = function (event) {
        try {
            var responseJson = JSON.parse(event.currentTarget.response);
            console.log('luotuoPowerBack--', 'status:', responseJson.status, 'info:', responseJson.info);
        }
        catch (e) {
            console.log('luotuoPowerError', e);
        }
    };
    PlatformZwH5.prototype.onPowerChangeIOEroor = function (event) {
        console.log('luotuoIOerror:' + event);
    };
    PlatformZwH5.prototype.onGetComplete = function (event, a1, a2, a3) {
        try {
            var responseJson = JSON.parse(event.currentTarget.response);
            if (responseJson.status == 1001) {
                console.log('Report ok');
            }
            else {
                console.log('Report fail' + responseJson.info);
            }
        }
        catch (e) {
            console.log('Report fail' + e);
        }
    };
    PlatformZwH5.prototype.onGetIOError = function (data) {
        console.log('Report fail' + data);
    };
    /**
     * javascript实现PHP字典排序
     */
    PlatformZwH5.prototype.ksort = function (vm, inputArr, sort_flags) {
        var tmp_arr = {}, keys = [], sorter, i, k, that = vm, strictForIn = false, populateArr = {};
        switch (sort_flags) {
            case 'SORT_STRING':
                sorter = function (a, b) {
                    return that.strnatcmp(a, b);
                };
                break;
            case 'SORT_LOCALE_STRING':
                var loc = vm.i18n_loc_get_default();
                sorter = vm.php_js.i18nLocales[loc].sorting;
                break;
            case 'SORT_NUMERIC':
                sorter = function (a, b) {
                    return ((a + 0) - (b + 0));
                };
                break;
            default:
                sorter = function (a, b) {
                    var aFloat = parseFloat(a), bFloat = parseFloat(b), aNumeric = aFloat + '' === a, bNumeric = bFloat + '' === b;
                    if (aNumeric && bNumeric) {
                        return aFloat > bFloat ? 1 : aFloat < bFloat ? -1 : 0;
                    }
                    else if (aNumeric && !bNumeric) {
                        return 1;
                    }
                    else if (!aNumeric && bNumeric) {
                        return -1;
                    }
                    return a > b ? 1 : a < b ? -1 : 0;
                };
                break;
        }
        for (k in inputArr) {
            if (inputArr.hasOwnProperty(k)) {
                keys.push(k);
            }
        }
        keys.sort(sorter);
        vm.php_js = vm.php_js || {};
        vm.php_js.ini = vm.php_js.ini || {};
        strictForIn = vm.php_js.ini['phpjs.strictForIn'] && vm.php_js.ini['phpjs.strictForIn'].local_value && vm.php_js.ini['phpjs.strictForIn'].local_value !== 'off';
        populateArr = strictForIn ? inputArr : populateArr;
        for (i = 0; i < keys.length; i++) {
            k = keys[i];
            tmp_arr[k] = inputArr[k];
            if (strictForIn) {
                delete inputArr[k];
            }
        }
        for (i in tmp_arr) {
            if (tmp_arr.hasOwnProperty(i)) {
                populateArr[i] = tmp_arr[i];
            }
        }
        return strictForIn || populateArr;
    };
    /**
     * 获取加密
     */
    PlatformZwH5.prototype.getSign = function (obj) {
        var obj1 = this.ksort(this, obj);
        var obj2 = this.getUrl(obj1);
        return EncryptMd5.hex_md5(obj2 + SDKConst.ZiwanAppSecret);
    };
    /**
     * SDK支付
     */
    PlatformZwH5.prototype.SDKPayNative = function (params) {
        var data = {
            userToken: GlobalModel.getUrlParamValue("userToken"),
            channel_id: GlobalModel.getUrlParamValue("channel_id"),
            item_id: params.itemid,
            orderid: params.order,
            price: params.fee,
            other: "",
        };
        var sign = this.getSign(data);
        var protObj = JSON.parse(JSON.stringify(data));
        protObj['sign'] = sign;
        console.log("pay parm：" + this.getUrl(protObj));
        PHPConfig.requestPhpData(this.url, "g=Home&m=GameOauth&a=pay_info&" + this.getUrl(protObj), this.payOnComplete, this, this.payIOError, egret.HttpMethod.GET);
    };
    PlatformZwH5.prototype.payOnComplete = function (event) {
        try {
            var responseJson = JSON.parse(event.currentTarget.response);
            if (responseJson.status == 1001) {
                console.log('pay info get ok');
                window.parent.postMessage(responseJson.data, '*');
            }
            else {
                console.log('pay info get fail' + responseJson.info);
            }
        }
        catch (e) {
            console.log('pay fail', e);
        }
    };
    PlatformZwH5.prototype.payIOError = function (data) {
        console.log('pay data error' + data);
    };
    /**显示超级会员 */
    PlatformZwH5.prototype.showSuperVip = function () {
        return true;
    };
    /**
     * SDK回调
     */
    PlatformZwH5.prototype.nativeCallback = function (msg) {
        _super.prototype.nativeCallback.call(this, msg);
        var jsonObj = JSON.parse(msg);
        var callType = jsonObj['callType'];
        if (callType == 'init') {
            debug.log("SDK init ok");
        }
        else if (callType == 'login') {
            if (jsonObj['sdkcode'] == 0) {
                var data = jsonObj['data'];
                GlobalModel.openID = data.uid;
                GlobalModel.nickName = data.username;
                GlobalModel.setUrlParamValue("token", GlobalModel.getUrlParamValue("userToken"));
                GlobalModel.setUrlParamValue("isLogin", data.isLogin);
                //原始渠道ID
                var rawChannelId = GlobalModel.getUrlParamValue("channel_id");
                GlobalModel.setUrlParamValue("rawChannelId", rawChannelId);
                //自定义渠道ID(账号互通)
                var channelId = rawChannelId;
                GlobalModel.setUrlParamValue("channelId", channelId);
                SceneMgr.ins().runScene(StartGameScene);
            }
            else {
                this.SDKLoginNative();
            }
        }
        else if (callType == 'logout') {
            if (jsonObj['sdkcode'] == 0) {
                //zzzz暂时关闭
                window.location.reload();
            }
        }
        else if (callType == 'switchAccount') {
            if (jsonObj['sdkcode'] == 0) {
                window.location.reload();
            }
        }
    };
    return PlatformZwH5;
}(PlatformBase));
__reflect(PlatformZwH5.prototype, "PlatformZwH5");
/**
 * 游戏层级类
 */
var EuiLayer = (function (_super) {
    __extends(EuiLayer, _super);
    function EuiLayer() {
        return _super.call(this) || this;
    }
    EuiLayer.prototype.setSafeArea = function () {
        //刘海屏设置
        if (ServerStorage.ins().getBitBool(ClientSetBit.bluntBangs)) {
            this.top = 60 /* TOP */;
            this.bottom = 0 /* BOTTOM */;
        }
        else if (DeviceUtils.IsBluntBangs) {
            this.top = SDKManager.ins().getStatusHeight();
            this.bottom = SDKManager.ins().getBottomSafeHeight();
        }
        else {
            this.top = this.bottom = 0;
        }
    };
    return EuiLayer;
}(BaseLayer));
__reflect(EuiLayer.prototype, "EuiLayer");
var UnitModel = (function (_super) {
    __extends(UnitModel, _super);
    function UnitModel() {
        var _this = _super.call(this) || this;
        _this.isElite = false;
        /** 属性集 */
        _this.attributeData = [];
        _this.attributeExData = [];
        _this.killNum = 0;
        _this.isMy = false;
        /** 当前兵魂id */
        _this.weaponsId = 0;
        /** 是否主动怪 */
        _this.isWander = false;
        /** 烈焰印记等级 */
        _this.lyMarkLv = 0;
        /** 烈焰印记技能 */
        _this.lyMarkSkills = [];
        _this.fixSkills = [];
        _this.type = 2 /* MONSTER */;
        return _this;
    }
    UnitModel.prototype.init = function (datas) {
        this.initBase(datas.slice(0, 6));
        if (this.type != 5 /* COLLECTIONMONST */) {
            this.initAtt(datas[6]);
            //烈焰印记数据
            this.lyMarkLv = datas[8];
            this.lyMarkSkills = [];
            this.lyMarkSkills.length = datas[9].length;
            for (var i = 0; i < datas[9].length; i++) {
                this.lyMarkSkills[i] = datas[9][i];
            }
        }
    };
    UnitModel.prototype.initBase = function (datas) {
        this.type = datas[0];
        this.handle = datas[1];
        this.configID = datas[2];
        this.masterHandle = datas[3];
        this.x = datas[4];
        this.y = datas[5];
        this.isMy = this.checkHandleIsMy(this.masterHandle);
    };
    UnitModel.prototype.initAtt = function (datas, showTip) {
        if (showTip === void 0) { showTip = false; }
        if (showTip) {
            for (var i = 0; i < datas.length; i++) {
                var oldValue = this.attributeData[i];
                this.attributeData[i] = datas[i];
                var changeValue = this.attributeData[i] - oldValue;
                if (oldValue != this.attributeData[i] && AttributeData.FILTER_BASE_DATA_ID.lastIndexOf(i) == -1) {
                    if (changeValue <= 0)
                        continue;
                    if (i < 2 || i > 6) {
                        var color = changeValue > 0 ? "35e62d" : "f3311e";
                        var td = new AttributeData(i, changeValue);
                        if (!AttributeData.getAttrStrByType(td.type))
                            continue;
                        var str1 = "|C:0x" + color + "&T:" + AttributeData.getAttStrByType(td, 0) + "|";
                        if (!godWeaponControl.gwshowTips)
                            tipsControl.showTips(str1);
                        continue;
                    }
                    tipsControl.showAttrTips(i, changeValue);
                }
            }
        }
        else {
            for (var i = 0; i < datas.length; i++) {
                this.attributeData[i] = datas[i];
            }
        }
    };
    UnitModel.prototype.initExtAtt = function (datas, showTip) {
        if (showTip === void 0) { showTip = false; }
        if (showTip) {
            for (var i = 0; i < datas.length; i++) {
                var oldValue = this.attributeExData[i];
                this.attributeExData[i] = datas[i];
                if (oldValue != this.attributeExData[i] && AttributeData.FILTER_EXTDATA_ID.lastIndexOf(i) == -1) {
                    var changeValue = this.attributeExData[i] - oldValue;
                    if (changeValue <= 0)
                        continue;
                    var color = changeValue > 0 ? "35e62d" : "f3311e";
                    var str = changeValue > 0 ? "+" : "";
                    var td = new AttributeData(i, changeValue);
                    var str1 = "|C:0x" + color + "&T:" + AttributeData.getExtAttStrByType(td, 0) + "|";
                    tipsControl.showTips(str1);
                }
            }
        }
        else {
            for (var i = 0; i < datas.length; i++) {
                this.attributeExData[i] = datas[i];
            }
        }
    };
    /**
     * 是否显示护盾
     */
    UnitModel.prototype.showHuDun = function () {
        var time = this.huDunEndTime - this.huDunTime;
        var curTime = DateUtils.formatMiniDateTime(this.huDunTime);
        return Math.floor((GameServer.serverTime - curTime) / DateUtils.MS_PER_SECOND) < time ? true : false;
    };
    UnitModel.prototype.checkHandleIsMy = function (handle) {
        if (handle == ActorControl.handle) {
            return true;
        }
        var roles = heroControl.roles;
        for (var _i = 0, roles_1 = roles; _i < roles_1.length; _i++) {
            var role = roles_1[_i];
            if (role.handle == handle) {
                return true;
            }
        }
        return false;
    };
    UnitModel.prototype.parserHeirloom = function () {
    };
    UnitModel.prototype.getAtt = function (attType) {
        return this.attributeData[attType] || 0;
    };
    UnitModel.prototype.setAtt = function (attType, value) {
        this.attributeData[attType] = value;
    };
    UnitModel.prototype.getExAtt = function (attType) {
        return this.attributeExData[attType] || 0;
    };
    Object.defineProperty(UnitModel.prototype, "avatarFileName", {
        get: function () {
            return GUAIWU_PREFIX + this.avatar;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UnitModel.prototype, "weaponFileName", {
        get: function () {
            return '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UnitModel.prototype, "avatar", {
        get: function () {
            return this._avatar || DataCenter.ins().MonstersConfig[this.configID].avatar;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UnitModel.prototype, "name", {
        get: function () {
            return this._name || DataCenter.ins().MonstersConfig[this.configID].headName || DataCenter.ins().MonstersConfig[this.configID].name;
        },
        set: function (value) {
            this._name = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UnitModel.prototype, "weapon", {
        get: function () {
            return DataCenter.ins().MonstersConfig[this.configID] ? DataCenter.ins().MonstersConfig[this.configID].weapon : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UnitModel.prototype, "wing", {
        get: function () {
            return DataCenter.ins().MonstersConfig[this.configID] ? DataCenter.ins().MonstersConfig[this.configID].wing : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UnitModel.prototype, "body", {
        get: function () {
            return DataCenter.ins().MonstersConfig[this.configID] ? DataCenter.ins().MonstersConfig[this.configID].body : null;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 跨服名称
     */
    UnitModel.prototype.getNameWithServer = function () {
        return this._servId && crossFieldControl.isCross ? this.name + ("S" + this._servId) : this.name;
    };
    Object.defineProperty(UnitModel.prototype, "serverID", {
        get: function () {
            return this._servId;
        },
        enumerable: true,
        configurable: true
    });
    UnitModel.prototype.getDir = function () {
        var config = DataCenter.ins().MonstersConfig[this.configID];
        if (!config)
            return -1;
        var dir = DataCenter.ins().MonstersConfig[this.configID].dir;
        if (isNaN(dir))
            return -1;
        return dir;
    };
    Object.defineProperty(UnitModel.prototype, "dirNum", {
        get: function () {
            var config = DataCenter.ins().MonstersConfig[this.configID];
            if (config) {
                this._dirNum = NaN;
                if (config.dirNum) {
                    return config.dirNum;
                }
            }
            if (this._dirNum) {
                return this._dirNum;
            }
            return 2;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UnitModel.prototype, "avatarScale", {
        get: function () {
            var s = this._scale || DataCenter.ins().MonstersConfig[this.configID].scale;
            if (s)
                return s / 100;
            return 1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UnitModel.prototype, "avatarEffect", {
        get: function () {
            if (DataCenter.ins().MonstersConfig[this.configID] &&
                DataCenter.ins().MonstersConfig[this.configID].effect) {
                return DataCenter.ins().EffectConfig[DataCenter.ins().MonstersConfig[this.configID].effect].fileName;
            }
            return "";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UnitModel.prototype, "attRange", {
        get: function () {
            if (DataCenter.ins().MonstersConfig[this.configID].attrange) {
                return DataCenter.ins().MonstersConfig[this.configID].attrange;
            }
            return 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UnitModel.prototype, "movePara", {
        get: function () {
            if (DataCenter.ins().YouDangConfig[this.wandertime] && this.wanderrange) {
                return [this.wanderrange, DataCenter.ins().YouDangConfig[this.wandertime].fileName];
            }
            return null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UnitModel.prototype, "lv", {
        get: function () {
            return DataCenter.ins().MonstersConfig[this.configID].level;
        },
        set: function (value) {
            this._lv = value;
        },
        enumerable: true,
        configurable: true
    });
    UnitModel.prototype.setPos = function (x, y) {
        this.x = x;
        this.y = y;
    };
    Object.defineProperty(UnitModel.prototype, "isRoleMonster", {
        get: function () {
            return !!this.body;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UnitModel.prototype, "isHideBlood", {
        get: function () {
            var monstersConfig = DataCenter.ins().MonstersConfig[this.configID];
            return monstersConfig && monstersConfig.isHideBlood;
        },
        enumerable: true,
        configurable: true
    });
    UnitModel.getBodyDir = function (type) {
        if (type === void 0) { type = 0; }
        return 0;
    };
    UnitModel.getSceneDir = function () {
        var scenesConfig = DataCenter.ins().ScenesConfig[MapControl.mapID];
        return scenesConfig.bodyDir || 0;
    };
    UnitModel.OtherAttrType = [
        0 /* atHp */,
        1 /* atMp */,
        2 /* atMaxHp */,
        3 /* atMaxMp */,
        9 /* atMoveSpeed */,
        25 /* cruNeiGong */,
        26 /* maxNeiGong */
    ];
    return UnitModel;
}(NpcModel));
__reflect(UnitModel.prototype, "UnitModel");
/**
 * 怪物
 */
var UnitMonster = (function (_super) {
    __extends(UnitMonster, _super);
    function UnitMonster() {
        var _this = _super.call(this) || this;
        _this.AI_STATE = 0 /* Stand */;
        //滤镜效果
        _this.filterDic = {};
        _this.publicCD = 0;
        _this.serverEffList = {};
        /**下一次巡逻时间 */
        _this.nextPatrolTick = 0;
        _this.myKill = false;
        _this.isShowBody = true;
        _this.canMove = false;
        _this.moveRange = -1;
        _this.moveLimTime = -1;
        _this.moveMaxTime = -1;
        _this.touchEnabled = true;
        _this.touchChildren = false;
        _this.buffList = {};
        _this.buffEff = {};
        _this.warnDisplay = {};
        _this.statusEffList = {};
        _this.extHurmBuff = {};
        _this.damageOverTimeList = {};
        _this.createTweenObj();
        _this.effs = {};
        _this.addShadow();
        _this.setShadowType(0 /* image */);
        _this._hpBar = new eui.ProgressBar();
        _this._hpBar.skinName = "bloodBarSkin";
        _this._hpBar.anchorOffsetY = 0;
        _this._hpBar.labelDisplay.size = 14;
        _this._hpBar.visible = false;
        _this._hpBar.labelDisplay.visible = false;
        _this._hpBar.labelFunction = function () { return ''; };
        _this.titleCantainer.addChild(_this._hpBar);
        _this._hpBar.anchorOffsetX = (_this._hpBar.width >> 1);
        _this._nameGroup = new eui.Group();
        _this._nameGroup.touchEnabled = false;
        _this._nameGroup.height = 30;
        _this._nameGroup.width = 260;
        _this._nameGroup.anchorOffsetY = Math.floor(_this._nameGroup.height + 2);
        _this._nameGroup.anchorOffsetX = Math.floor(_this._nameGroup.width >> 1);
        _this.titleCantainer.addChild(_this._nameGroup);
        _this._nameTxt = new eui.Label;
        _this._nameTxt.textAlign = 'center';
        _this._nameTxt.size = 14;
        _this._nameTxt.stroke = 1;
        _this._nameTxt.strokeColor = 0x000000;
        _this._nameTxt.textColor = 0xeddea9;
        _this._nameTxt.bottom = 0;
        _this._nameTxt.horizontalCenter = 0;
        _this._nameGroup.addChild(_this._nameTxt);
        _this._nameGroup.visible = false;
        return _this;
    }
    UnitMonster.prototype.createTweenObj = function () {
        var self = this;
        this.dieTweenObj = {
            set alpha(al) {
                self.alpha = al;
            },
            get alpha() {
                return self.alpha;
            }
        };
        this.moveTweenObj = {
            set x(x) {
                self.x = x >> 0;
            },
            set y(y) {
                self.y = y >> 0;
            },
            get x() {
                return self.x;
            },
            get y() {
                return self.y;
            }
        };
    };
    Object.defineProperty(UnitMonster.prototype, "infoModel", {
        get: function () {
            return this._infoModel;
        },
        set: function (model) {
            this._infoModel = model;
            //烈焰戒指需要添加印记
            if (DataCenter.ins().FlameMarkConfig.monsterId.indexOf(model.configID) != -1) {
                if (!this._lyMark) {
                    this._lyMark = new FlameMarkEffect(this._body, model);
                }
            }
            else if (this._lyMark) {
                this.clearLyMark();
            }
        },
        enumerable: true,
        configurable: true
    });
    UnitMonster.prototype.$onAddToStage = function (stage, nestLevel) {
        _super.prototype.$onAddToStage.call(this, stage, nestLevel);
        if (this.infoModel) {
            RecycleMgr.ins().reloadContainer(this, true);
        }
    };
    UnitMonster.prototype.setCharName = function (str) {
        this._nameTxt.textFlow = TextUtils.generateTextFlow(str);
    };
    UnitMonster.prototype.setNameTxtColor = function (value) {
        this._nameTxt.textColor = value;
    };
    /**
     * 使用了烈焰印记技能
     */
    UnitMonster.prototype.usedLyMarkSkill = function () {
        if (this._lyMark) {
            this._lyMark.usedLyMarkSkill();
        }
    };
    /**
     * 播放动作
     */
    UnitMonster.prototype.playAction = function (action, callBack) {
        if (this._state == action && !this.isAtkAction()) {
            return;
        }
        if ((this.hasMaBi || this.isHardStraight) && action != UnitAction.DIE) {
            return;
        }
        if (action == UnitAction.HIT || action == UnitAction.DIE) {
            if (this.infoModel.type == 2 /* MONSTER */ &&
                DataCenter.ins().MonstersConfig[this.infoModel.configID] &&
                (DataCenter.ins().MonstersConfig[this.infoModel.configID].type == 4 || DataCenter.ins().MonstersConfig[this.infoModel.configID].type == 10 /* Warrior */)) {
                //烈焰戒指无受击与死亡特效  战将无受击与死亡特效
                return;
            }
        }
        _super.prototype.playAction.call(this, action, callBack);
    };
    UnitMonster.prototype.stopMove = function () {
        //停止移动 坐标取整，解决血条变暗问题
        this.x = Math.floor(this.x);
        this.y = Math.floor(this.y);
        this.canMove = false;
        egret.Tween.removeTweens(this.moveTweenObj);
    };
    Object.defineProperty(UnitMonster.prototype, "dir", {
        get: function () {
            if (this.infoModel) {
                var d = this.infoModel.getDir();
                return d < 0 ? this._dir : d;
            }
            return this._dir;
        },
        set: function (value) {
            if (this._dir == value || this.hasMaBi)
                return;
            if (this._state == UnitAction.DIE) {
                return;
            }
            this._dir = value;
            this.loadBody();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UnitMonster.prototype, "action", {
        get: function () {
            return this._state;
        },
        set: function (value) {
            if (this._state != UnitAction.DIE) {
                this._state = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    //怪物只有两个方向
    UnitMonster.prototype.getResDir = function (mcType) {
        var td = 2 * (this._dir - 4);
        if (td < 0) {
            td = 0;
        }
        var dir = this._dir - td;
        if (this.infoModel && this.infoModel.dirNum != 2) {
            return dir;
        }
        var bodyDir = UnitModel.getBodyDir(1);
        return bodyDir == 5 ? dir : 2 > dir ? 1 : 3;
    };
    Object.defineProperty(UnitMonster.prototype, "moveSpeed", {
        get: function () {
            if (!this.infoModel) {
                return 0;
            }
            return this.infoModel.getAtt(9 /* atMoveSpeed */) / 1000 * MapControl.CELL_SIZE;
        },
        enumerable: true,
        configurable: true
    });
    UnitMonster.prototype.hram = function (value) {
        this._hpBar.value = Math.min(this._hpBar.value - value, this.infoModel.getAtt(2 /* atMaxHp */));
    };
    UnitMonster.prototype.getHP = function () {
        return this._hpBar.value;
    };
    UnitMonster.prototype.getRealHp = function () {
        return this.infoModel.getAtt(0 /* atHp */);
    };
    UnitMonster.prototype.reset = function () {
        this._state = UnitAction.STAND;
        this.AI_STATE = 0 /* Stand */;
        this.dir = 4;
        this._hpBar.slideDuration = 500;
        this.myKill = false;
        this.removeAllFilters();
    };
    UnitMonster.prototype.destruct = function () {
        this.destroy();
        ObjectPool.push(this);
    };
    UnitMonster.prototype.destroy = function () {
        _super.prototype.destroy.call(this);
        this.deadDelay();
        this.alpha = 1;
        this.AI_STATE = 0 /* Stand */;
        this._nameTxt.textColor = LangMgr.getColor('color41');
        //烈焰印记
        this.clearLyMark();
        this.removeAllEffect();
        this.removeAllFilters();
        TimerMgr.ins().removeAll(this);
        this.stopMove();
        DisplayUtils.removeFromParent(this);
    };
    UnitMonster.prototype.deadDelay = function () {
        this._hpBar.slideDuration = 0;
        this._hpBar.value = 0;
        this.removeHardStraight();
        for (var i in this.damageOverTimeList) {
            var element = this.damageOverTimeList[i];
            this.deleteDamageOverTimer(element);
        }
        this.removeAllBuff();
        this.atking = false;
        if (this.haloMc) {
            DisplayUtils.removeFromParent(this.haloMc);
        }
    };
    /**
     * 清理烈焰印记
     */
    UnitMonster.prototype.clearLyMark = function () {
        if (this._lyMark) {
            this._lyMark.destruct();
            this._lyMark = null;
        }
    };
    /**
     * 设置硬直时间
     */
    UnitMonster.prototype.addHardStraight = function (time) {
        this.isHardStraight = true;
        this.setMcFilterPlayOrStop(false);
        TimerMgr.ins().doTimer(time, 1, this.removeHardStraight, this);
    };
    UnitMonster.prototype.removeHardStraight = function () {
        this.isHardStraight = false;
        this.setMcFilterPlayOrStop(true);
    };
    UnitMonster.prototype.updateWarnDisplayPos = function () {
        var displays = this.warnDisplay;
        for (var key in displays) {
            displays[key].x = this.x;
            displays[key].y = this.y;
        }
    };
    /**
     * 设置主体动画
     */
    UnitMonster.prototype.initBody = function (fileName) {
        this.addMc(1 /* BODY */, fileName);
        RecycleMgr.ins().reloadContainer(this.shadow);
    };
    Object.defineProperty(UnitMonster.prototype, "isPlaying", {
        get: function () {
            return this._body.isPlaying;
        },
        enumerable: true,
        configurable: true
    });
    UnitMonster.prototype.isAtkAction = function () {
        return this._state == UnitAction.ATTACK || this._state == UnitAction.CAST;
    };
    UnitMonster.prototype.playBody = function (e) {
        _super.prototype.playBody.call(this, e);
    };
    UnitMonster.prototype.loadBody = function () {
        if (this.isShowBody) {
            _super.prototype.loadBody.call(this);
        }
    };
    UnitMonster.prototype.loadOther = function (mcType) {
        if (this.isShowBody) {
            if (this.action == UnitAction.DIE) {
                if (mcType != 1 /* BODY */ && mcType != 2 /* WEAPON */) {
                    var dieMc = this.getMc(mcType);
                    if (dieMc) {
                        dieMc.visible = false;
                    }
                    return;
                }
            }
            else {
                var otherMc = this.getMc(mcType);
                if (otherMc) {
                    otherMc.visible = true;
                }
            }
            _super.prototype.loadOther.call(this, mcType);
        }
    };
    UnitMonster.prototype.loadNoDir = function (mcType) {
        if (this.isShowBody) {
            _super.prototype.loadNoDir.call(this, mcType);
        }
    };
    UnitMonster.prototype.showBodyContainer = function () {
        if (!this.isShowBody) {
            this.isShowBody = true;
            this.addChildAt(this._bodyContainer, 1);
            this.loadBody();
            for (var mcType in this._disOrder) {
                var oldType = +mcType;
                if (this._disOrder[mcType] instanceof GameMovieClip && this.hasDir.indexOf(oldType) < 0) {
                    this.loadNoDir(oldType);
                }
            }
            this.updateTitle();
            if (this._lyMark) {
                this._lyMark.showBall();
            }
        }
    };
    UnitMonster.prototype.hideBodyContainer = function () {
        if (this.isShowBody) {
            this.isShowBody = false;
            this.removeChild(this._bodyContainer);
            if (this.infoModel) {
                this.updateTitle();
            }
            if (this._lyMark) {
                this._lyMark.hideBall();
            }
        }
    };
    UnitMonster.prototype.showTitleCantainer = function () {
        this.titleCantainer.visible = true;
    };
    UnitMonster.prototype.hideTitleCantainer = function () {
        this.titleCantainer.visible = false;
    };
    UnitMonster.prototype.showShadowCantainer = function () {
        this.shadow.visible = true;
    };
    UnitMonster.prototype.hideShadowCantainer = function () {
        this.shadow.visible = false;
    };
    UnitMonster.prototype.getIsShowBody = function () {
        return this.isShowBody;
    };
    UnitMonster.prototype.resetStand = function () {
        if (this.isAtkAction()) {
            this.playAction(UnitAction.STAND);
        }
    };
    UnitMonster.prototype.hasEffById = function (id) {
        if (this.effs && this.effs[id]) {
            return true;
        }
        return false;
    };
    /**
     * 更新数据显示
     */
    UnitMonster.prototype.updateBlood = function (force) {
        if (force === void 0) { force = false; }
        if (this.infoModel) {
            this._hpBar.maximum = this.infoModel.getAtt(2 /* atMaxHp */);
            if (force || !(UnitMgr.ins().getTeamCount(2 /* WillEntity */) > 0 && MapControl.copyId == 0)) {
                this._hpBar.value = this.infoModel.getAtt(0 /* atHp */);
            }
        }
    };
    /**
     * 人形怪称号
     */
    UnitMonster.prototype.updateTitle = function () {
        var model = this.infoModel;
        var config = DataCenter.ins().MonstersConfig[model.configID];
        var title = config && config['titleId'];
        this.removeTitle();
        if (config && config.type == 6 /* SummonLead */) {
            this.showName(true);
        }
        if (this.getIsShowBody() && title && title > 0) {
            var config_1 = DataCenter.ins().TitleMonsterConfig[title];
            if (config_1) {
                if (config_1.img) {
                    if (this._title == null) {
                        this._title = new eui.Image;
                        this._title.anchorOffsetX = 115;
                        this._title.addEventListener(egret.Event.COMPLETE, this.onTitleLoaded, this);
                        this.titleCantainer.addChild(this._title);
                    }
                    if (config_1.anchorOffsetY) {
                        this._title.anchorOffsetY = config_1.anchorOffsetY;
                    }
                    else {
                        this._title.anchorOffsetY = 100;
                    }
                    this._title.source = config_1.img;
                }
                else if (config_1.eff) {
                    if (this._titleMc == null) {
                        this._titleMc = ObjectPool.pop("GameMovieClip");
                        this._titleMc.anchorOffsetX = 0;
                        this.titleCantainer.addChild(this._titleMc);
                    }
                    var eff = PATH_EFF + config_1.eff;
                    this.playFile(this._titleMc, eff);
                    if (config_1.anchorOffsetY) {
                        this._titleMc.anchorOffsetY = config_1.anchorOffsetY;
                    }
                    else {
                        this._titleMc.anchorOffsetY = 80;
                    }
                }
            }
        }
    };
    UnitMonster.prototype.onTitleLoaded = function (e) {
        e.currentTarget.anchorOffsetX = e.currentTarget.width / 2;
    };
    UnitMonster.prototype.removeTitle = function () {
        if (this._title) {
            this._title.source = '';
        }
        if (this._titleMc) {
            this._titleMc.destroy();
            this._titleMc = null;
        }
    };
    /**
     * 死亡处理
     */
    UnitMonster.prototype.onDead = function (callBack) {
        this.stopMove();
        this.showBlood(false);
        this.showName(false);
        this.removeTitle();
        if (this.infoModel.type != 5 /* COLLECTIONMONST */) {
            this.playAction(UnitAction.DIE);
        }
        if (callBack) {
            TimerMgr.ins().doTimer(300, 1, callBack, this);
        }
    };
    Object.defineProperty(UnitMonster.prototype, "isCanAddBlood", {
        get: function () {
            return this._hpBar.value / this._hpBar.maximum < 0.8;
        },
        enumerable: true,
        configurable: true
    });
    /** 持续伤害 */
    UnitMonster.prototype.damageOverTime = function (e) {
        var timer = e instanceof egret.Timer ? e : e.currentTarget;
        if (timer.currentCount == timer.repeatCount) {
            this.deleteDamageOverTimer(timer);
        }
    };
    UnitMonster.prototype.deleteDamageOverTimer = function (timer) {
        for (var i in this.damageOverTimeList) {
            if (this.damageOverTimeList[i] == timer) {
                delete this.damageOverTimeList[i];
                timer.stop();
                timer.removeEventListener(egret.TimerEvent.TIMER, this.damageOverTime, this);
            }
        }
    };
    UnitMonster.prototype.addServerEff = function (id, type, value) {
        this.serverEffList[id] = {
            type: type,
            value: value
        };
        this.addEffect(id, type, value);
    };
    UnitMonster.prototype.removeServerEff = function (id) {
        delete this.serverEffList[id];
        this.removeEffect(id);
    };
    UnitMonster.prototype.addEffect = function (effID, type, num) {
        this.statusEffList[effID] = {
            type: type,
            value: num
        };
        this.updateFilter();
        if (type == 11 /* StatusType_ActExDam */) {
            this.initSkillBall(num);
            return;
        }
        var config = DataCenter.ins().EffectConfig[effID];
        if (!config)
            return;
        if (config.type == 0) {
            var image_1 = new eui.Image();
            image_1.source = config.fileName;
            this.addChild(image_1);
            var tween = egret.Tween.get(image_1);
            image_1.x = image_1.x - 23;
            tween.to({ y: -100 }, 2000).call(function () {
                DisplayUtils.removeFromParent(image_1);
            });
            return;
        }
        var mc = this.effs[effID] || ObjectPool.pop("GameMovieClip");
        var effName = PATH_SKILLEFF + config.fileName;
        this.playFile(mc, effName);
        this.addChild(mc);
        this.effs[effID] = mc;
    };
    UnitMonster.prototype.addHalo = function (str) {
        this.haloMc = this.haloMc ? this.haloMc : ObjectPool.pop("GameMovieClip");
        this.playFile(this.haloMc, PATH_EFF + str);
        this.addChildAt(this.haloMc, 0);
    };
    UnitMonster.prototype.removeEffect = function (effID) {
        if (this.statusEffList[effID]) {
            var statusEff = this.statusEffList[effID];
            delete this.statusEffList[effID];
            if (statusEff.type == 11 /* StatusType_ActExDam */) {
                this.playSkillBall();
                delete this.extHurmBuff[11 /* StatusType_ActExDam */];
            }
            this.updateFilter();
        }
        var effectConfig = DataCenter.ins().EffectConfig[effID];
        if (effectConfig && effectConfig.type != 0) {
            var mc = this.effs[effID];
            if (mc) {
                if (mc instanceof GameMovieClip) {
                    mc.destroy();
                }
                delete this.effs[effID];
            }
        }
    };
    UnitMonster.prototype.removeAllEffect = function () {
        this.serverEffList = {};
        for (var key in this.statusEffList) {
            this.removeEffect(+key);
        }
        this.statusEffList = {};
        for (var effId in this.effs) {
            var mc = this.effs[effId];
            if (mc && mc instanceof GameMovieClip) {
                mc.destroy();
            }
        }
        this.effs = {};
    };
    UnitMonster.prototype.hasBuff = function (groupID) {
        return !!this.buffList[groupID];
    };
    UnitMonster.prototype.addBuff = function (buff) {
        var config = buff.effConfig;
        var groupID = config.group;
        var oldBuff = this.buffList[groupID];
        if (oldBuff) {
            //叠加倍率
            if (oldBuff.effConfig.overlayType == 2) {
                var multRate = oldBuff.multRate + 1;
                if (multRate > oldBuff.effConfig.overMaxCount) {
                    multRate = oldBuff.effConfig.overMaxCount;
                }
                buff.multRate = multRate;
            }
            this.removeBuff(oldBuff);
        }
        this.buffList[groupID] = buff;
        if (config.effName) {
            var mc = this.buffEff[groupID] || ObjectPool.pop("GameMovieClip");
            var s = PATH_SKILLEFF + config.effName;
            this.playFile(mc, s);
            if (config.effType == 1) {
                mc.y = -20;
                this.titleCantainer.addChild(mc);
            }
            else if (config.effType == 2) {
                this.addChildAt(mc, 0);
            }
            else {
                this.addChild(mc);
            }
            this.buffEff[groupID] = mc;
        }
        if (config.effID) {
            if (config.args) {
                this.addEffect(config.effID, config.args.i, config.args.d);
                if (config.args.i == 11 /* StatusType_ActExDam */) {
                    this.extHurmBuff[11 /* StatusType_ActExDam */] = config.args;
                }
            }
            else {
                this.addEffect(config.effID);
            }
        }
        if (config.skillEffId) {
            SkillEffPlayDisplay.play(config.skillEffId, this, [this]);
        }
        if (buff.effConfig.actionType) {
            this.playAction(buff.effConfig.actionType);
        }
        if (buff.effConfig.type == 4 /* AdditionalState */) {
            if (buff.effConfig.args && buff.effConfig.args.i == 9) {
                var holdTime = buff.effConfig.duration;
                this.addHardStraight(holdTime);
            }
        }
        this.addGroup(groupID);
    };
    UnitMonster.prototype.removeBuff = function (buff) {
        var config = buff.effConfig;
        var groupID = config.group;
        if (this.buffList[groupID] == buff) {
            buff.dispose();
            ObjectPool.push(this.buffList[groupID]);
            delete this.buffList[groupID];
            if (this.buffEff[groupID]) {
                DisplayUtils.removeFromParent(this.buffEff[groupID]);
                delete this.buffEff[groupID];
            }
            if (config.effID && config.effID != 7) {
                this.removeEffect(config.effID);
            }
            //移除联合buff
            if (config.unionBuff) {
                var union = this.buffList[config.unionBuff];
                if (union)
                    this.removeBuff(union);
            }
        }
        this.removeGroup(groupID);
    };
    UnitMonster.prototype.removeAllBuff = function () {
        for (var i in this.buffList) {
            this.removeBuff(this.buffList[i]);
        }
    };
    UnitMonster.prototype.addBubble = function (id) {
        if (!this.bubbleDisplay) {
            this.bubbleDisplay = new BubblePanel();
            this.addChildAt(this.bubbleDisplay, 100);
            this.bubbleDisplay.open();
        }
        this.bubbleDisplay.anchorOffsetY = 170;
        this.bubbleDisplay.anchorOffsetX = 100;
        var job = this.infoModel.job;
        this.bubbleDisplay.setSpeak(id, job);
    };
    Object.defineProperty(UnitMonster.prototype, "team", {
        get: function () {
            return this._infoModel.team;
        },
        enumerable: true,
        configurable: true
    });
    UnitMonster.prototype.startPatrol = function () {
        if (TimerMgr.ins().getCurrTime() > this.nextPatrolTick) {
            var movePoint = this.getPointCanMove();
            if (movePoint) {
                MapControl.moveEntity(this, movePoint.x, movePoint.y);
                this.nextPatrolTick = TimerMgr.ins().getCurrTime() + MathUtils.limit(this.moveLimTime, this.moveMaxTime);
            }
        }
    };
    UnitMonster.prototype.setMoveAtt = function (para) {
        this.moveRange = para[0];
        this.moveLimTime = para[1][0];
        this.moveMaxTime = para[1][1];
    };
    UnitMonster.prototype.getPointCanMove = function () {
        var count = 0;
        var X = 0;
        var Y = 0;
        var range = this.moveRange;
        var movePoint;
        while (count < 100) {
            var X_1 = MathUtils.limit((this.x - range) >> 0, (this.x + range) >> 0);
            var Y_1 = MathUtils.limit((this.y - range) >> 0, (this.y + range) >> 0);
            if (MapControl.checkWalkableByPixel(X_1, Y_1)) {
                movePoint = new egret.Point;
                movePoint.x = X_1;
                movePoint.y = Y_1;
                break;
            }
            count++;
        }
        return movePoint;
    };
    UnitMonster.prototype.playCount = function () {
        return this._state == UnitAction.RUN || this._state == UnitAction.STAND ? -1 : 1;
    };
    UnitMonster.prototype.shakeIt = function () {
        var _this = this;
        if (this.action == UnitAction.STAND || this.action == UnitAction.HIT) {
            DisplayUtils.shakeItEntity(this, 3, 200, 1);
            if (this.moveSpeed) {
                this.playAction(UnitAction.HIT, function () {
                    _this.playAction(UnitAction.STAND);
                });
            }
        }
    };
    UnitMonster.prototype.showName = function (val) {
        this._nameGroup.visible = val;
    };
    UnitMonster.prototype.showBlood = function (val) {
        //神兽不显示血条
        if (val && this.infoModel && this.infoModel.name == LangMgr.getValueByKey('charMonsterSS')) {
            return;
        }
        if (val && this.infoModel && this.infoModel.isHideBlood) {
            return;
        }
        this._hpBar.visible = val;
    };
    Object.defineProperty(UnitMonster.prototype, "isMy", {
        get: function () {
            return this.infoModel.isMy;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UnitMonster.prototype, "weight", {
        //层级优化
        get: function () {
            if (this._infoModel && this.team == 0 /* My */ && this instanceof UnitRole) {
                return this.y + 32;
            }
            return this.y;
        },
        enumerable: true,
        configurable: true
    });
    UnitMonster.prototype.updateModel = function () {
        this.removeAll();
        this.parseModel();
    };
    UnitMonster.prototype.parseModel = function () {
        var monster = this;
        var model = this.infoModel;
        if (model.team != 0 /* My */) {
            monster.updateBlood(true);
        }
        monster.setCharName(model.name);
        if (model.body) {
            monster.initBody(PATH_RENWU + model.body);
        }
        else {
            monster.initBody(PATH_GUAIWU + model.avatarFileName);
        }
        monster.setConfig(model.avatar + "");
        monster.updateTitle();
        if (model.avatarEffect && model.avatarEffect != "") {
            monster.addHalo(model.avatarEffect);
        }
        if (model.movePara) {
            monster.setMoveAtt(model.movePara);
        }
        monster.setBodyScale(model.avatarScale);
        if (model.weapon) {
            monster.addMc(2 /* WEAPON */, PATH_WUQI + model.weapon);
        }
        else {
            monster.removeMc(2 /* WEAPON */);
        }
        if (model.wing) {
            monster.addMc(3 /* WING */, PATH_CHIBANG + model.wing);
        }
        else {
            monster.removeMc(3 /* WING */);
        }
    };
    UnitMonster.prototype.addGroup = function (groupId) {
        var filter = UnitFilterUtils.getUnitFilter(groupId);
        if (filter) {
            this.filterDic[filter] = this.filterDic[filter] || [];
            var index = this.filterDic[filter].indexOf(groupId);
            if (index == -1) {
                this.filterDic[filter].push(groupId);
                this.updateFilter();
            }
        }
    };
    UnitMonster.prototype.removeGroup = function (groupId) {
        var filterId = UnitFilterUtils.getUnitFilter(groupId);
        if (filterId) {
            var filters = this.filterDic[filterId];
            if (!filters)
                return;
            var index = filters.indexOf(groupId);
            if (index >= 0) {
                filters.splice(index, 1);
                this.updateFilter();
            }
        }
    };
    UnitMonster.prototype.updateFilter = function () {
        var filter = 0 /* no */;
        if (this.hasMaBi) {
            filter = 1 /* hard */;
        }
        else if (this.hasFilter(2 /* poison */)) {
            filter = 2 /* poison */;
        }
        if (this.curFilter != filter) {
            this.setFilter(filter);
        }
    };
    UnitMonster.prototype.hasFilter = function (filter) {
        return !!(this.filterDic[filter] && this.filterDic[filter].length);
    };
    Object.defineProperty(UnitMonster.prototype, "hasMaBi", {
        get: function () {
            return MapControl.sceneInHook() ? this.hasFilter(1 /* hard */) : BuffModel.hasMabi(this);
        },
        enumerable: true,
        configurable: true
    });
    UnitMonster.prototype.setFilter = function (filter) {
        this.curFilter = filter;
        if (filter) {
            this.setMcFilter(filter);
            if (filter == 1 /* hard */) {
                this.setMcFilterPlayOrStop(false);
            }
            else {
                this.setMcFilterPlayOrStop(true);
            }
        }
        else {
            this.setMcFilter(filter);
            this.setMcFilterPlayOrStop(true);
        }
    };
    UnitMonster.prototype.setMcFilter = function (filter) {
        if (egret.Capabilities.renderMode == 'webgl') {
            for (var mcType in this._disOrder) {
                if (+(mcType) != 8 /* ZHANLING */) {
                    var mc = this._disOrder[mcType];
                    mc.filters = filter ? UnitFilterUtils.getBuffFilter(filter) : null;
                }
            }
        }
    };
    UnitMonster.prototype.setMcFilterPlayOrStop = function (play) {
        for (var _i = 0, _a = this.hasDir; _i < _a.length; _i++) {
            var mcType = _a[_i];
            if (mcType != 8 /* ZHANLING */) {
                var mc = this.getMc(mcType);
                if (mc) {
                    play ? mc.play() : mc.stop();
                }
            }
        }
    };
    UnitMonster.prototype.removeAllFilters = function () {
        this.filterDic = {};
        this.curFilter = 0 /* no */;
        for (var mcType in this._disOrder) {
            var mc = this._disOrder[mcType];
            mc.filters = null;
        }
    };
    UnitMonster.prototype.setExtTitle = function (res, offsetX, offsetY) {
        if (offsetX === void 0) { offsetX = 115; }
        if (this._title == null) {
            this._title = new eui.Image;
            this.titleCantainer.addChild(this._title);
            this._title.addEventListener(egret.Event.COMPLETE, this.onTitleLoaded, this);
        }
        this._title.anchorOffsetX = offsetX;
        if (offsetY) {
            this._title.anchorOffsetY = offsetY;
        }
        else {
            this._title.anchorOffsetY = 130;
        }
        this._title.source = res;
    };
    UnitMonster.prototype.addScore = function (score, camp) {
        if (score === void 0) { score = 1; }
        if (camp === void 0) { camp = 1; }
        var offsetY = -this._title.anchorOffsetY - 10;
        this.addScoreTween(score, camp, offsetY);
    };
    UnitMonster.prototype.addScoreTween = function (score, camp, offsetY) {
        if (score === void 0) { score = 1; }
        if (camp === void 0) { camp = 1; }
        var group = new eui.Group;
        group.y = offsetY;
        this.titleCantainer.addChild(group);
        var img = new eui.Image;
        img.x = img.y = 0;
        group.addChild(img);
        var bitmapLabel = new eui.BitmapLabel;
        bitmapLabel.x = 55;
        bitmapLabel.y = -2;
        bitmapLabel.scaleX = bitmapLabel.scaleY = 0.6;
        group.addChild(bitmapLabel);
        if (camp == 1) {
            img.source = "cgb_friend_add";
            bitmapLabel.font = "num_score_blue_fnt";
        }
        else {
            img.source = "cgb_enemy_add";
            bitmapLabel.font = "num_score_red_fnt";
        }
        bitmapLabel.text = score + "";
        group.anchorOffsetX = group.width >> 1;
        egret.Tween.get(group).to({
            scaleX: 1.5,
            scaleY: 1.5
        }, 200, egret.Ease.backOut).to({
            scaleX: 1,
            scaleY: 1
        }, 100).wait(400).to({
            y: offsetY - 40,
            alpha: 0
        }, 800).call(function (e) {
            DisplayUtils.removeFromParent(e);
        }, this, [group]);
    };
    UnitMonster.prototype.addTalk = function (tips, delay) {
        if (delay === void 0) { delay = 5000; }
        if (!this.talkDisplay) {
            this.talkDisplay = new TalkPanel;
            this.talkDisplay.setDefSkin();
            this.addChildAt(this.talkDisplay, 100);
            this.talkDisplay.open();
        }
        this.talkDisplay.anchorOffsetY = 170;
        this.talkDisplay.anchorOffsetX = 100;
        this.talkDisplay.setSpeak(tips, delay);
        this.talkDisplay.setScale(this.dir > 4 ? -1 : 1);
    };
    UnitMonster.prototype.initSkillBall = function (num) {
        if (!this.ballMax || this.ballMax < num) {
            this.ballMax = num;
        }
        if (this.skillBall) {
            if (this.ballMax <= num) {
                this.skillBall.reset(num);
            }
            else {
                this.skillBallAct(num);
            }
        }
        else {
            this.skillBall = new SkillBallMgt(this, this.ballMax);
            this.skillBall.startRun();
        }
    };
    UnitMonster.prototype.hasSkillBall = function () {
        return this.skillBall ? this.skillBall.getBallNum() : 0;
    };
    UnitMonster.prototype.skillBallReady = function () {
        return this.skillBall && this.skillBall.isReady();
    };
    UnitMonster.prototype.playSkillBall = function () {
        if (this.skillBall) {
            this.removeSkillBall();
            this.skillBall.starAddBall(20000);
        }
    };
    UnitMonster.prototype.removeSkillBall = function () {
        if (this.skillBall) {
            this.skillBall.remove();
        }
    };
    UnitMonster.prototype.skillBallAct = function (num) {
        if (this.skillBall) {
            this.skillBall.attackT(null, num);
        }
    };
    return UnitMonster;
}(UnitEffect));
__reflect(UnitMonster.prototype, "UnitMonster");
var UnitNpc = (function (_super) {
    __extends(UnitNpc, _super);
    function UnitNpc() {
        var _this = _super.call(this) || this;
        _this.npcHead = new UnitNpcHead();
        _this.npcHead.anchorOffsetY = 90;
        _this.npcHead.anchorOffsetX = 100;
        _this.npcHead.currentState = _this.npcHead.states[0];
        _this.titleCantainer.addChild(_this.npcHead);
        _this.touchEnabled = true;
        _this.touchChildren = false;
        return _this;
    }
    Object.defineProperty(UnitNpc.prototype, "infoModel", {
        get: function () {
            return this._infoModel;
        },
        set: function (model) {
            this._infoModel = model;
        },
        enumerable: true,
        configurable: true
    });
    UnitNpc.prototype.playCount = function () {
        return (this._state == UnitAction.RUN || this._state == UnitAction.STAND) ? -1 : 1;
    };
    UnitNpc.prototype.updateModel = function () {
        var config = this.infoModel.npcConfig;
        this.npcHead.nameTxt.text = config.name;
        this.npcHead.updateModel(this.infoModel);
        this.x = this.infoModel.x;
        this.y = this.infoModel.y;
        this.setConfig(this.infoModel.avatarString);
        this.dir = this.infoModel.dir;
        this.playAction(config.action || UnitAction.STAND);
        this.addMc(1 /* BODY */, this.infoModel.avatarFileName);
        if (this.infoModel.weaponFileName) {
            this.addMc(2 /* WEAPON */, this.infoModel.weaponFileName);
        }
    };
    return UnitNpc;
}(UnitEffect));
__reflect(UnitNpc.prototype, "UnitNpc");
var ByteConst = (function () {
    function ByteConst() {
    }
    ByteConst.RewardVos = [3 /* Int */, 3 /* Int */, 3 /* Int */];
    ByteConst.ItemDatas = [10 /* Double */, 3 /* Int */, 3 /* Int */, [3 /* Int */, 3 /* Int */], [3 /* Int */, 3 /* Int */]];
    ByteConst.StoreEquipVos = [3 /* Int */, 3 /* Int */, 3 /* Int */, 3 /* Int */].concat(ByteConst.ItemDatas);
    ByteConst.EquipVos = [3 /* Int */, 3 /* Int */, 3 /* Int */].concat(ByteConst.ItemDatas, [3 /* Int */, 3 /* Int */, 3 /* Int */, 3 /* Int */]);
    ByteConst.FeatherVos = [3 /* Int */, 6 /* UInt */, 3 /* Int */, 6 /* UInt */, 2 /* Short */, 2 /* Short */];
    ByteConst.EmailBaseVos = [3 /* Int */, 8 /* String */, 3 /* Int */, 3 /* Int */, 3 /* Int */];
    ByteConst.EmailDataVos = ByteConst.EmailBaseVos.concat([8 /* String */, ByteConst.RewardVos]);
    ByteConst.LimitTaskVos = [3 /* Int */, 1 /* Byte */];
    ByteConst.WorldBossItemVos = [3 /* Int */, 8 /* String */, 8 /* String */, 3 /* Int */, 2 /* Short */, 1 /* Byte */, 2 /* Short */, 1 /* Byte */];
    ByteConst.WorldBossRankItemVos = [3 /* Int */, 8 /* String */, 10 /* Double */];
    ByteConst.MeridiansVos = [3 /* Int */, 3 /* Int */];
    ByteConst.DragonSoulDataVos = [3 /* Int */, 3 /* Int */, 3 /* Int */, 1 /* Byte */];
    ByteConst.HeirloomVos = [[3 /* Int */]];
    ByteConst.MythForgeVos = [[3 /* Int */]];
    ByteConst.WarriorVos = [2 /* Short */, 2 /* Short */, 2 /* Short */, 2 /* Short */, 2 /* Short */, 3 /* Int */];
    ByteConst.WarriorEquipVos = [1 /* Byte */, 3 /* Int */, 2 /* Short */];
    ByteConst.StoreHadBuyVos = [3 /* Int */, 3 /* Int */];
    ByteConst.StoreFeatsVos = [[3 /* Int */, 3 /* Int */]];
    ByteConst.HatredVos = [3 /* Int */, 11 /* Break */, 3 /* Int */, 3 /* Int */, 3 /* Int */, 8 /* String */, 3 /* Int */, 8 /* String */, 8 /* String */, 3 /* Int */, 3 /* Int */, 8 /* String */, 3 /* Int */, 3 /* Int */, 3 /* Int */];
    ByteConst.HatredMessageVos = [3 /* Int */, 3 /* Int */, 3 /* Int */, 3 /* Int */, 8 /* String */, 3 /* Int */];
    ByteConst.CrazyDogVos = [3 /* Int */, 2 /* Short */, 3 /* Int */, 2 /* Short */];
    ByteConst.BargainVos = [1 /* Byte */, 3 /* Int */, 3 /* Int */, 3 /* Int */, 3 /* Int */, 1 /* Byte */, 1 /* Byte */, 1 /* Byte */];
    ByteConst.BargainKfVos = [3 /* Int */, 3 /* Int */, 3 /* Int */, 3 /* Int */, 4 /* UByte */];
    ByteConst.BargainRecordVo = [3 /* Int */, 8 /* String */, 1 /* Byte */, 3 /* Int */, 3 /* Int */];
    ByteConst.BargainRecordKfVo = [3 /* Int */, 3 /* Int */, 8 /* String */, 1 /* Byte */, 3 /* Int */, 3 /* Int */];
    ByteConst.SpecialRingDataVos = [2 /* Short */, 2 /* Short */, 3 /* Int */, 1 /* Byte */, 1 /* Byte */];
    ByteConst.RankSubRoleVos = [1 /* Byte */, 1 /* Byte */, 3 /* Int */, 3 /* Int */, 3 /* Int */, 3 /* Int */, 3 /* Int */, 3 /* Int */, 3 /* Int */, 3 /* Int */, 1 /* Byte */, 1 /* Byte */, 3 /* Int */, 1 /* Byte */, 3 /* Int */];
    ByteConst.RankPraiseVos = [3 /* Int */, 8 /* String */, 10 /* Double */, 2 /* Short */, 2 /* Short */, 2 /* Short */, ByteConst.RankSubRoleVos];
    ByteConst.StrideServerDataVos = [3 /* Int */, 3 /* Int */, 3 /* Int */, 3 /* Int */, 8 /* String */, 3 /* Int */, 3 /* Int */];
    ByteConst.RedEnvelopes = [5 /* UShort */, 3 /* Int */];
    ByteConst.RedPacketVos = [3 /* Int */, 3 /* Int */, 3 /* Int */, 8 /* String */, 8 /* String */, 1 /* Byte */, 1 /* Byte */];
    ByteConst.PayVos = [2 /* Short */, 3 /* Int */, 3 /* Int */, 3 /* Int */];
    ByteConst.RambleKfBlackVos = [6 /* UInt */, 3 /* Int */, 8 /* String */, 1 /* Byte */, 1 /* Byte */, 1 /* Byte */, 2 /* Short */, 6 /* UInt */];
    ByteConst.RambleInfoVos = [1 /* Byte */, 6 /* UInt */, 3 /* Int */, 8 /* String */, 1 /* Byte */, 1 /* Byte */, 1 /* Byte */, 1 /* Byte */, 1 /* Byte */, 1 /* Byte */, 4 /* UByte */, 2 /* Short */, 8 /* String */, 6 /* UInt */, 8 /* String */, 3 /* Int */];
    ByteConst.DevildomGuildVos = [3 /* Int */, 8 /* String */, 1 /* Byte */, 3 /* Int */];
    ByteConst.DominateVos = [1 /* Byte */, [3 /* Int */]];
    ByteConst.UnionMessageInfoVos = [4 /* UByte */, 8 /* String */, 6 /* UInt */, 11 /* Break */, 3 /* Int */, 8 /* String */, 4 /* UByte */, 4 /* UByte */, 3 /* Int */, 4 /* UByte */, 4 /* UByte */, 4 /* UByte */, 2 /* Short */, 8 /* String */];
    ByteConst.RankGuildInfos = [8 /* String */, 8 /* String */, 3 /* Int */];
    ByteConst.GuildRedRobInfos = [3 /* Int */, 8 /* String */, 3 /* Int */];
    ByteConst.MyRankGuildInfos = [3 /* Int */, 8 /* String */, 8 /* String */, 3 /* Int */, 3 /* Int */, 3 /* Int */, 3 /* Int */, 3 /* Int */];
    ByteConst.WinGuildInfos = [3 /* Int */, 8 /* String */, 8 /* String */, 3 /* Int */, 1 /* Byte */, 1 /* Byte */, 3 /* Int */, 3 /* Int */, 3 /* Int */, 3 /* Int */];
    ByteConst.WarRankInfos = [8 /* String */, 3 /* Int */];
    ByteConst.PointRewarddInfos = [0 /* Boolean */, 3 /* Int */, 3 /* Int */];
    ByteConst.PartnerVos = [6 /* UInt */, 8 /* String */, 8 /* String */, 4 /* UByte */, 4 /* UByte */, 4 /* UByte */, 4 /* UByte */, 4 /* UByte */, 4 /* UByte */, 4 /* UByte */, 4 /* UByte */, 4 /* UByte */, 3 /* Int */, 3 /* Int */];
    ByteConst.SoulBoneVos = [1 /* Byte */, [3 /* Int */, [3 /* Int */]]];
    ByteConst.BeastVos = [1 /* Byte */, [3 /* Int */], 1 /* Byte */];
    ByteConst.CrossBossInfoVos = [2 /* Short */, 2 /* Short */, 3 /* Int */, 3 /* Int */];
    ByteConst.JadeDataNewVos = [2 /* Short */, 2 /* Short */, [3 /* Int */, 2 /* Short */]];
    ByteConst.HeatMethodVo = [2 /* Short */, 2 /* Short */, 1 /* Byte */, [3 /* Int */]];
    ByteConst.PeakedKonckReportVos = [3 /* Int */, 8 /* String */, 1 /* Byte */];
    ByteConst.PeakedKonckReportKfVos = [3 /* Int */, 8 /* String */, 3 /* Int */, 1 /* Byte */];
    ByteConst.PeakedPlayerDataVos = [3 /* Int */, [3 /* Int */]];
    ByteConst.PeakedPlayerInfoVos = [3 /* Int */, 8 /* String */, 1 /* Byte */, 1 /* Byte */, 1 /* Byte */];
    ByteConst.PeakedPlayerInfoKfVos = [3 /* Int */, 3 /* Int */, 8 /* String */, 1 /* Byte */, 1 /* Byte */, 1 /* Byte */];
    ByteConst.PeakedPlayerBaseDataVos = [ByteConst.PeakedPlayerInfoVos, 3 /* Int */, [3 /* Int */]];
    ByteConst.PeakedPlayerBaseDataKfVos = [ByteConst.PeakedPlayerInfoKfVos, 3 /* Int */, [3 /* Int */]];
    ByteConst.PeakedTopRankVos = [3 /* Int */, 8 /* String */, 3 /* Int */, 3 /* Int */];
    ByteConst.PeakedBetVos = [1 /* Byte */, 3 /* Int */, 3 /* Int */];
    ByteConst.MineModels = [1 /* Byte */, 3 /* Int */, 8 /* String */, 3 /* Int */, 8 /* String */, 4 /* UByte */, 3 /* Int */, 3 /* Int */, 0 /* Boolean */, [3 /* Int */]];
    ByteConst.MineVos = [2 /* Short */, 2 /* Short */, 2 /* Short */, ByteConst.MineModels];
    ByteConst.MineHelpVos = [3 /* Int */, 3 /* Int */, 8 /* String */, 3 /* Int */, 3 /* Int */, 3 /* Int */, 3 /* Int */, 8 /* String */, 3 /* Int */];
    ByteConst.MineRecordVos = [2 /* Short */, 1 /* Byte */, 3 /* Int */, 1 /* Byte */, 3 /* Int */, 8 /* String */, 1 /* Byte */, 11 /* Break */, 1 /* Byte */, 1 /* Byte */, 1 /* Byte */, 3 /* Int */];
    ByteConst.CalcForceVos = [3 /* Int */, 3 /* Int */, 3 /* Int */];
    ByteConst.MagicCircleVos = [1 /* Byte */, 3 /* Int */, 3 /* Int */, 1 /* Byte */, [[1 /* Byte */, 3 /* Int */, 3 /* Int */]], 3 /* Int */, 3 /* Int */];
    ByteConst.MagicCircleRoleVos = [1 /* Byte */, ByteConst.MagicCircleVos, 1 /* Byte */];
    ByteConst.HeirloomDressVos = [1 /* Byte */, 1 /* Byte */, 3 /* Int */];
    ByteConst.ReincarnateStarEquipVos = [4 /* UByte */, [4 /* UByte */, 3 /* Int */, 4 /* UByte */, [4 /* UByte */, 2 /* Short */]]];
    ByteConst.CrossArenaMarkVos = [3 /* Int */, 3 /* Int */, 3 /* Int */];
    ByteConst.CrossArenaRoleVos = [3 /* Int */, 3 /* Int */, 3 /* Int */, 3 /* Int */, 3 /* Int */].concat(ByteConst.CrossArenaMarkVos, ByteConst.CrossArenaMarkVos, [3 /* Int */, 3 /* Int */, 8 /* String */, 1 /* Byte */, 1 /* Byte */, 3 /* Int */, 3 /* Int */, 3 /* Int */, 1 /* Byte */, 3 /* Int */, 3 /* Int */, 3 /* Int */, 3 /* Int */, 3 /* Int */, 1 /* Byte */, 1 /* Byte */, 3 /* Int */, 1 /* Byte */, 3 /* Int */]);
    ByteConst.CrossArenaInviteVos = [3 /* Int */, 8 /* String */, 3 /* Int */, 3 /* Int */, 3 /* Int */];
    ByteConst.UnionMemberInfoVos = [3 /* Int */, 3 /* Int */, 3 /* Int */, 1 /* Byte */, 1 /* Byte */, 8 /* String */, 3 /* Int */, 3 /* Int */, 3 /* Int */, 4 /* UByte */, 4 /* UByte */];
    ByteConst.CrossArenaBaseVos = [3 /* Int */, 1 /* Byte */, 3 /* Int */, 8 /* String */, 2 /* Short */, 2 /* Short */, 2 /* Short */, 2 /* Short */, 2 /* Short */, 2 /* Short */, 2 /* Short */, 0 /* Boolean */, 0 /* Boolean */, 0 /* Boolean */, 0 /* Boolean */, 0 /* Boolean */];
    ByteConst.CrossArenaVos = [3 /* Int */, 1 /* Byte */, 3 /* Int */, 8 /* String */, 2 /* Short */, 2 /* Short */, 2 /* Short */, 2 /* Short */, 2 /* Short */];
    ByteConst.CrossArenaRankVos = [3 /* Int */, 3 /* Int */, 3 /* Int */, 3 /* Int */, 8 /* String */, 3 /* Int */, 3 /* Int */];
    ByteConst.ReincarnationVos = [3 /* Int */, 3 /* Int */, 2 /* Short */, 2 /* Short */, 2 /* Short */];
    ByteConst.BlisterRankVos = [2 /* Short */, 8 /* String */, 8 /* String */, 3 /* Int */, 3 /* Int */];
    ByteConst.CampWarRankVos = [2 /* Short */, 2 /* Short */, 8 /* String */, 8 /* String */, 3 /* Int */];
    ByteConst.GodWeaponVos = [3 /* Int */, 3 /* Int */, 3 /* Int */, 3 /* Int */, [3 /* Int */, 3 /* Int */], [3 /* Int */, 3 /* Int */]];
    ByteConst.GodWeaponDunVos = [3 /* Int */, 3 /* Int */, 3 /* Int */, 3 /* Int */, [3 /* Int */, 3 /* Int */]];
    ByteConst.GodWeaponRankInfoVos = [3 /* Int */, 8 /* String */, 3 /* Int */];
    ByteConst.GodWeaponTaskVos = [3 /* Int */, 3 /* Int */, 3 /* Int */, 3 /* Int */, 3 /* Int */];
    ByteConst.RedPacketRecordVos = [3 /* Int */, 3 /* Int */, 3 /* Int */, 8 /* String */, 1 /* Byte */, 3 /* Int */, 3 /* Int */, 1 /* Byte */];
    ByteConst.RankDataCommons = [2 /* Short */, 3 /* Int */, 8 /* String */, 2 /* Short */, 2 /* Short */, 2 /* Short */, 2 /* Short */, [10 /* Double */]];
    ByteConst.RankDataSkirmishVos = [2 /* Short */, 3 /* Int */, 8 /* String */, 1 /* Byte */, 1 /* Byte */, 2 /* Short */, 2 /* Short */, 2 /* Short */, 3 /* Int */, 2 /* Short */];
    ByteConst.RankDataPassVos = [2 /* Short */, 3 /* Int */, 8 /* String */, 10 /* Double */, 2 /* Short */, 3 /* Int */, 2 /* Short */];
    ByteConst.RankDataLevelVos = [2 /* Short */, 3 /* Int */, 8 /* String */, 2 /* Short */, 2 /* Short */, 2 /* Short */, 2 /* Short */];
    ByteConst.RankDataLadderVos = [3 /* Int */, 8 /* String */, 3 /* Int */, 3 /* Int */, 3 /* Int */, 1 /* Byte */, 1 /* Byte */];
    ByteConst.RankDataXiaYiVos = [2 /* Short */, 3 /* Int */, 8 /* String */, 2 /* Short */, 3 /* Int */];
    ByteConst.FashionIds = [3 /* Int */, 3 /* Int */, 3 /* Int */];
    ByteConst.RoleModels = [
        3 /* Int */,
        3 /* Int */,
        3 /* Int */,
        3 /* Int */,
        10 /* Double */,
        [3 /* Int */],
        ByteConst.EquipVos,
        [3 /* Int */]
    ].concat(ByteConst.FeatherVos, ByteConst.MeridiansVos, ByteConst.DragonSoulDataVos, [
        ByteConst.ItemDatas
    ], ByteConst.HeirloomVos, [
        3 /* Int */,
        [[2 /* Short */]],
        [3 /* Int */],
        ByteConst.ItemDatas,
        [10 /* Double */],
        [3 /* Int */],
        3 /* Int */,
        2 /* Short */
    ], ByteConst.FashionIds, ByteConst.MythForgeVos, [
        [3 /* Int */],
        1 /* Byte */,
        1 /* Byte */,
        3 /* Int */,
        1 /* Byte */,
        3 /* Int */,
        1 /* Byte */,
        3 /* Int */
    ]);
    ByteConst.OtherFireRingDataVos = [3 /* Int */, 11 /* Break */, [2 /* Short */, 2 /* Short */, 2 /* Short */], [2 /* Short */, 2 /* Short */], 2 /* Short */, [2 /* Short */]];
    ByteConst.ConfrontModelVos = [3 /* Int */, 2 /* Short */, 2 /* Short */, 8 /* String */, ByteConst.RoleModels, ByteConst.OtherFireRingDataVos, 1 /* Byte */, 3 /* Int */, 3 /* Int */];
    ByteConst.WildPlayers = [3 /* Int */, 2 /* Short */, 2 /* Short */, 2 /* Short */, 2 /* Short */, 1 /* Byte */, 1 /* Byte */, 3 /* Int */, 2 /* Short */, 2 /* Short */, 8 /* String */, ByteConst.RoleModels, ByteConst.OtherFireRingDataVos];
    ByteConst.TotemVos = [1 /* Byte */, 2 /* Short */, [1 /* Byte */, 3 /* Int */, 2 /* Short */]];
    ByteConst.OtherPlayerDatas = [
        3 /* Int */,
        3 /* Int */,
        8 /* String */,
        2 /* Short */,
        2 /* Short */,
        2 /* Short */,
        3 /* Int */,
        10 /* Double */,
        3 /* Int */,
        8 /* String */,
        3 /* Int */,
        3 /* Int */,
        ByteConst.RoleModels,
        [4 /* UByte */, 2 /* Short */, 2 /* Short */, [4 /* UByte */, 2 /* Short */, 3 /* Int */]],
        [4 /* UByte */, 4 /* UByte */, ByteConst.TotemVos],
        2 /* Short */,
        3 /* Int */,
        [2 /* Short */],
        [2 /* Short */, 2 /* Short */, 2 /* Short */, 2 /* Short */, 2 /* Short */, 3 /* Int */],
        [2 /* Short */, [1 /* Byte */, 3 /* Int */, 2 /* Short */]],
        [[3 /* Int */, 3 /* Int */, 2 /* Short */]],
        [[1 /* Byte */, 1 /* Byte */]]
    ];
    ByteConst.UnitModelBases = [2 /* Short */, 10 /* Double */, 3 /* Int */, 10 /* Double */, 3 /* Int */, 3 /* Int */];
    ByteConst.UnitOtherRoles = [[10 /* Double */], [3 /* Int */], 8 /* String */, 3 /* Int */, 1 /* Byte */, 1 /* Byte */, 3 /* Int */, 3 /* Int */, 3 /* Int */, 3 /* Int */, 3 /* Int */, 3 /* Int */, 3 /* Int */, 8 /* String */].concat(ByteConst.FashionIds, [3 /* Int */, 2 /* Short */], ByteConst.HeirloomVos, [2 /* Short */, 1 /* Byte */, 3 /* Int */, 1 /* Byte */, 3 /* Int */]);
    ByteConst.UnitActors = ByteConst.UnitModelBases.slice();
    ByteConst.UnitRoles = ByteConst.UnitModelBases.concat(ByteConst.UnitOtherRoles);
    ByteConst.UnitMonsters = ByteConst.UnitModelBases.concat([[10 /* Double */], [3 /* Int */], 2 /* Short */, [2 /* Short */]]);
    ByteConst.UnitDropItems = ByteConst.UnitModelBases.concat(ByteConst.RewardVos, [4 /* UByte */]);
    ByteConst.CrossDropRecordVos = [2 /* Short */, 1 /* Byte */, 3 /* Int */, 3 /* Int */, 3 /* Int */, 8 /* String */, 8 /* String */, 8 /* String */, 3 /* Int */, 8 /* String */, 3 /* Int */];
    ByteConst.AmusementCoverFives = [[], [], [], [], []];
    ByteConst.AmusementCoverTens = ByteConst.AmusementCoverFives.concat(ByteConst.AmusementCoverFives);
    ByteConst.AmusementCoverTwentys = ByteConst.AmusementCoverTens.concat(ByteConst.AmusementCoverTens);
    ByteConst.AmusementCovers = ByteConst.AmusementCoverTwentys.concat(ByteConst.AmusementCoverTwentys, ByteConst.AmusementCoverTwentys, ByteConst.AmusementCoverTens, [[], [], []]);
    ByteConst.AmusementTypeInitBases = [3 /* Int */, 3 /* Int */, 3 /* Int */, 2 /* Short */, 3 /* Int */];
    ByteConst.AmusementTypeUpdateBases = [0 /* Boolean */, 3 /* Int */];
    ByteConst.AmusementType1Inits = ByteConst.AmusementTypeInitBases.concat([3 /* Int */, 3 /* Int */, [2 /* Short */]]);
    ByteConst.AmusementType2Inits = ByteConst.AmusementTypeInitBases.concat([[2 /* Short */, 2 /* Short */, 3 /* Int */, 3 /* Int */], 3 /* Int */]);
    ByteConst.AmusementType3Inits = ByteConst.AmusementTypeInitBases.concat([[2 /* Short */], 3 /* Int */, 3 /* Int */, 3 /* Int */]);
    ByteConst.AmusementType4Inits = ByteConst.AmusementTypeInitBases.slice();
    ByteConst.AmusementType5Inits = ByteConst.AmusementTypeInitBases.concat([3 /* Int */]);
    ByteConst.AmusementType6Inits = ByteConst.AmusementTypeInitBases.concat([3 /* Int */, [2 /* Short */]]);
    ByteConst.AmusementType7Inits = ByteConst.AmusementTypeInitBases.concat([[2 /* Short */, 2 /* Short */, 2 /* Short */], 3 /* Int */]);
    ByteConst.AmusementType8Inits = ByteConst.AmusementTypeInitBases.concat([3 /* Int */]);
    ByteConst.AmusementType9Inits = ByteConst.AmusementTypeInitBases.concat([3 /* Int */, 3 /* Int */, [1 /* Byte */], [8 /* String */, 1 /* Byte */]]);
    ByteConst.AmusementType10Inits = ByteConst.AmusementTypeInitBases.concat([3 /* Int */, 3 /* Int */, 3 /* Int */, 1 /* Byte */, [8 /* String */, 10 /* Double */, 3 /* Int */]]);
    ByteConst.AmusementType11Inits = ByteConst.AmusementTypeInitBases.concat([3 /* Int */, [2 /* Short */, 3 /* Int */, 1 /* Byte */]]);
    ByteConst.AmusementType12Inits = ByteConst.AmusementTypeInitBases.concat([3 /* Int */, [2 /* Short */, 8 /* String */, 3 /* Int */]]);
    ByteConst.AmusementType13Inits = ByteConst.AmusementTypeInitBases.concat([3 /* Int */, [2 /* Short */, 2 /* Short */, 0 /* Boolean */], [8 /* String */, 2 /* Short */, 2 /* Short */]]);
    ByteConst.AmusementType16Inits = ByteConst.AmusementTypeInitBases.concat([0 /* Boolean */, 2 /* Short */, 0 /* Boolean */]);
    ByteConst.AmusementType18Inits = ByteConst.AmusementTypeInitBases.concat([3 /* Int */, 3 /* Int */, [8 /* String */, 3 /* Int */], [8 /* String */, 3 /* Int */]]);
    ByteConst.AmusementType19Inits = ByteConst.AmusementTypeInitBases.slice();
    ByteConst.AmusementType20Inits = ByteConst.AmusementTypeInitBases.concat([3 /* Int */, 3 /* Int */, 1 /* Byte */]);
    ByteConst.AmusementType21Inits = ByteConst.AmusementTypeInitBases.slice();
    ByteConst.AmusementType22Inits = ByteConst.AmusementTypeInitBases.concat([3 /* Int */, 1 /* Byte */, 3 /* Int */, [3 /* Int */, 3 /* Int */, 2 /* Short */, 3 /* Int */, 1 /* Byte */, 1 /* Byte */], [3 /* Int */, 3 /* Int */, 2 /* Short */, 3 /* Int */]]);
    ByteConst.AmusementType25Inits = ByteConst.AmusementTypeInitBases.concat([3 /* Int */]);
    ByteConst.AmusementType26Inits = ByteConst.AmusementTypeInitBases.concat([[2 /* Short */, 2 /* Short */, 0 /* Boolean */]]);
    ByteConst.AmusementType100Inits = ByteConst.AmusementTypeInitBases.slice();
    ByteConst.AmusementType102Inits = ByteConst.AmusementTypeInitBases.concat([3 /* Int */]);
    ByteConst.AmusementType103Inits = ByteConst.AmusementTypeInitBases.concat([[1 /* Byte */, 2 /* Short */]]);
    ByteConst.AmusementType1Updates = ByteConst.AmusementTypeUpdateBases.concat([2 /* Short */, 3 /* Int */]);
    ByteConst.AmusementType2Updates = ByteConst.AmusementTypeUpdateBases.concat([2 /* Short */, 3 /* Int */, 3 /* Int */, 3 /* Int */, 3 /* Int */]);
    ByteConst.AmusementType3Updates = ByteConst.AmusementTypeUpdateBases.concat([2 /* Short */, 3 /* Int */]);
    ByteConst.AmusementType4Updates = ByteConst.AmusementTypeUpdateBases.slice();
    ByteConst.AmusementType5Updates = ByteConst.AmusementTypeUpdateBases.concat([2 /* Short */, 3 /* Int */]);
    ByteConst.AmusementType6Updates = ByteConst.AmusementTypeUpdateBases.concat([2 /* Short */, 3 /* Int */]);
    ByteConst.AmusementType7Updates = ByteConst.AmusementTypeUpdateBases.concat([2 /* Short */, 2 /* Short */, 2 /* Short */, 2 /* Short */]);
    ByteConst.AmusementType8Updates = ByteConst.AmusementTypeUpdateBases.concat([3 /* Int */]);
    ByteConst.AmusementType9Updates = ByteConst.AmusementTypeUpdateBases.concat([3 /* Int */, 3 /* Int */, [1 /* Byte */], [8 /* String */, 1 /* Byte */]]);
    ByteConst.AmusementType10Updates = ByteConst.AmusementTypeUpdateBases.concat([3 /* Int */, 3 /* Int */, 3 /* Int */, 1 /* Byte */, [8 /* String */, 10 /* Double */, 3 /* Int */]]);
    ByteConst.AmusementType11Updates = ByteConst.AmusementTypeUpdateBases.concat([3 /* Int */, [2 /* Short */, 3 /* Int */, 1 /* Byte */]]);
    ByteConst.AmusementType12Updates = ByteConst.AmusementTypeUpdateBases.concat([5 /* UShort */, 3 /* Int */, 3 /* Int */, [2 /* Short */, 2 /* Short */, 8 /* String */, 3 /* Int */]]);
    ByteConst.AmusementType13Updates = ByteConst.AmusementTypeUpdateBases.concat([3 /* Int */, [2 /* Short */, 2 /* Short */, 0 /* Boolean */], [8 /* String */, 2 /* Short */, 2 /* Short */]]);
    ByteConst.AmusementType16Updates = ByteConst.AmusementTypeUpdateBases.concat([0 /* Boolean */, 2 /* Short */, 0 /* Boolean */]);
    ByteConst.AmusementType18Updates = ByteConst.AmusementTypeUpdateBases.concat([2 /* Short */, 3 /* Int */, 3 /* Int */, [3 /* Int */, 2 /* Short */]]);
    ByteConst.AmusementType19Updates = ByteConst.AmusementTypeUpdateBases.slice();
    ByteConst.AmusementType20Updates = ByteConst.AmusementTypeUpdateBases.concat([3 /* Int */, 3 /* Int */]);
    ByteConst.AmusementType21Updates = ByteConst.AmusementTypeUpdateBases.slice();
    ByteConst.AmusementType22Updates = ByteConst.AmusementTypeUpdateBases.concat([3 /* Int */, 1 /* Byte */, 3 /* Int */, [3 /* Int */, 3 /* Int */, 2 /* Short */, 3 /* Int */, 1 /* Byte */, 1 /* Byte */], [3 /* Int */, 3 /* Int */, 2 /* Short */, 3 /* Int */]]);
    ByteConst.AmusementType25Updates = ByteConst.AmusementTypeUpdateBases.concat([2 /* Short */, 3 /* Int */]);
    ByteConst.AmusementType26Updates = ByteConst.AmusementTypeUpdateBases.concat([[2 /* Short */, 2 /* Short */, 0 /* Boolean */]]);
    ByteConst.AmusementType100Updates = ByteConst.AmusementTypeUpdateBases.slice();
    ByteConst.AmusementType102Updates = ByteConst.AmusementTypeUpdateBases.slice();
    ByteConst.AmusementType103Updates = ByteConst.AmusementTypeUpdateBases.slice();
    ByteConst.PAmusementCovers = ByteConst.AmusementCoverFives.slice();
    ByteConst.PAmusementTypeInitBases = ByteConst.AmusementTypeInitBases.slice();
    ByteConst.PAmusementTypeUpdateBases = ByteConst.AmusementTypeUpdateBases.slice();
    ByteConst.PAmusementType1Inits = ByteConst.PAmusementTypeInitBases.concat([3 /* Int */, 3 /* Int */, [2 /* Short */]]);
    ByteConst.PAmusementType2Inits = ByteConst.PAmusementTypeInitBases.concat([[2 /* Short */, 2 /* Short */], 3 /* Int */]);
    ByteConst.PAmusementType3Inits = ByteConst.PAmusementTypeInitBases.concat([[2 /* Short */], 3 /* Int */, 3 /* Int */, 3 /* Int */]);
    ByteConst.PAmusementType9Inits = ByteConst.PAmusementTypeInitBases.concat([3 /* Int */, 3 /* Int */, [1 /* Byte */], [8 /* String */, 1 /* Byte */]]);
    ByteConst.PAmusementType1Updates = ByteConst.PAmusementTypeUpdateBases.concat([2 /* Short */, 3 /* Int */]);
    ByteConst.PAmusementType2Updates = ByteConst.PAmusementTypeUpdateBases.concat([2 /* Short */, 3 /* Int */, 3 /* Int */]);
    ByteConst.PAmusementType3Updates = ByteConst.PAmusementTypeUpdateBases.concat([2 /* Short */, 3 /* Int */]);
    ByteConst.PAmusementType9Updates = ByteConst.PAmusementTypeUpdateBases.concat([3 /* Int */, 3 /* Int */, [1 /* Byte */], [8 /* String */, 1 /* Byte */]]);
    return ByteConst;
}());
__reflect(ByteConst.prototype, "ByteConst");
var GuideViewBase = (function (_super) {
    __extends(GuideViewBase, _super);
    function GuideViewBase() {
        var _this = _super.call(this) || this;
        _this.clickCD = true;
        _this.otherMc = [];
        _this.rect = new egret.Rectangle(1, 1, 1, 1);
        _this.infoGroup = new eui.Group;
        _this.infoGroup.touchEnabled = false;
        _this.infoGroup.touchChildren = false;
        _this.addChild(_this.infoGroup);
        return _this;
    }
    GuideViewBase.prototype.drawMask = function () {
        if (!this.shapeMasks) {
            this.shapeMasks = [];
            for (var i = 0; i < 8; i++) {
                this.shapeMasks[i] = new egret.Shape();
                this.shapeMasks[i].touchEnabled = true;
            }
        }
        var rect = this.rect;
        var w1 = rect.x;
        var w2 = rect.width;
        var w3 = StageUtils.ins().getWidth() - rect.right;
        var h1 = rect.y;
        var h2 = rect.height;
        var h3 = StageUtils.ins().getHeight() - rect.bottom;
        this.drawShape(this.shapeMasks[0], new egret.Rectangle(0, 0, w1, h1));
        this.drawShape(this.shapeMasks[1], new egret.Rectangle(rect.x, 0, w2, h1));
        this.drawShape(this.shapeMasks[2], new egret.Rectangle(rect.right, 0, w3, h1));
        this.drawShape(this.shapeMasks[3], new egret.Rectangle(0, rect.topLeft.y, w1, h2));
        this.drawShape(this.shapeMasks[4], new egret.Rectangle(rect.bottomRight.x, rect.topLeft.y, w3, h2));
        this.drawShape(this.shapeMasks[5], new egret.Rectangle(0, rect.bottomRight.y, w1, h3));
        this.drawShape(this.shapeMasks[6], new egret.Rectangle(rect.x, rect.bottomRight.y, w2, h3));
        this.drawShape(this.shapeMasks[7], new egret.Rectangle(rect.right, rect.bottomRight.y, w3, h3));
    };
    GuideViewBase.prototype.drawShape = function (shape, rect) {
        shape.graphics.clear();
        shape.graphics.beginFill(ColorUtils.BLACK, 0);
        shape.graphics.drawRect(rect.x, rect.y, rect.width, rect.height);
        shape.graphics.endFill();
        this.addChild(shape);
    };
    GuideViewBase.prototype.onResize = function () {
        if (this.target) {
            var p = this.target.localToGlobal();
            if (this.rect.x != p.x || this.rect.y != p.y || this.rect.width != this.target.width || this.rect.height != this.target.height) {
                this.refurbish();
                this.drawMask();
            }
            return false;
        }
    };
    GuideViewBase.prototype.onClick = function (e) {
        var _this = this;
        if (this.rect.contains(e.stageX, e.stageY)) {
            if (this.clickCD) {
                this.clickCD = false;
                TimerMgr.ins().doNext(function () {
                    _this.dispatchEventWith(egret.Event.CHANGE);
                }, this);
            }
            for (var i = 0; i < this.otherMc.length; i++) {
                egret.Tween.removeTweens(this.otherMc[i]);
                DisplayUtils.removeFromParent(this.otherMc[i]);
            }
            this.clicking = false;
        }
        else {
            guideControl.clickOut();
            if (this.clicking)
                return;
            this.clicking = true;
            this.otherMc.length = 2;
            var _loop_1 = function (i) {
                if (!this_1.otherMc[i]) {
                    this_1.otherMc[i] = new GameMovieClip();
                }
                if (!this_1.otherMc[i].parent) {
                    this_1.addChild(this_1.otherMc[i]);
                }
                this_1.otherMc[i].scaleX = 3.3;
                this_1.otherMc[i].scaleY = 3.3;
                this_1.otherMc[i].x = this_1.infoGroup.x;
                this_1.otherMc[i].y = this_1.infoGroup.y;
                var tw = egret.Tween.get(this_1.otherMc[i]);
                var self_2 = this_1;
                tw.wait(i * 240).call(function () {
                    self_2.otherMc[i].playFile(PATH_EFF + "forceguildeff", 1, function () {
                        egret.Tween.removeTweens(self_2.otherMc[i]);
                        DisplayUtils.removeFromParent(self_2.otherMc[i]);
                        if (i == self_2.otherMc.length - 1)
                            self_2.clicking = false;
                    });
                });
            };
            var this_1 = this;
            for (var i = 0; i < this.otherMc.length; i++) {
                _loop_1(i);
            }
        }
    };
    /**
     * 刷新
     */
    GuideViewBase.prototype.refurbish = function () {
        this.show(this.target);
    };
    /**
     * 设置显示数据
     * @param obj
     * @param data
     */
    GuideViewBase.prototype.show = function (target) {
        if (target == null) {
            return;
        }
        this.target = target;
        var p = target.localToGlobal();
        this.rect.x = p.x;
        this.rect.y = p.y;
        this.rect.width = target.width ? target.width : 60;
        this.rect.height = target.height ? target.height : 60;
        this.drawMask();
        this.addChild(this.infoGroup);
        this.infoGroup.x = p.x + (this.rect.width >> 1);
        this.infoGroup.y = p.y + (this.rect.height >> 1);
        var st = StageUtils.ins().getStage();
        st.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onClick, this, true, 0);
        egret.stopTick(this.onResize, this);
        egret.startTick(this.onResize, this);
    };
    GuideViewBase.prototype.close = function () {
        this.target = null;
        this.rect.x = this.rect.y = this.rect.width = this.rect.height = 1;
        var st = StageUtils.ins().getStage();
        st.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onClick, this, true);
        egret.stopTick(this.onResize, this);
    };
    return GuideViewBase;
}(egret.DisplayObjectContainer));
__reflect(GuideViewBase.prototype, "GuideViewBase");
var RegressionConfig = (function () {
    function RegressionConfig() {
    }
    return RegressionConfig;
}());
__reflect(RegressionConfig.prototype, "RegressionConfig");
/**
 * 英雄数据
 */
var HeroControl = (function (_super) {
    __extends(HeroControl, _super);
    function HeroControl() {
        var _this = _super.call(this) || this;
        _this.roles = [];
        _this.jobDic = [];
        _this.isFirstSetAttr = true;
        _this.isFirstSetExAttr = true;
        _this.addCustomEvent(12 /* UNION_QUIT */, _this.setGuildName);
        _this.addCustomEvent(14 /* UNION_INFO */, _this.setGuildName);
        _this.addCustomEvent(32 /* EXPERIENCE_DATA */, _this.updateName);
        return _this;
    }
    HeroControl.ins = function () {
        return _super.ins.call(this);
    };
    /**
     * 英雄列表
     * 255-2
     */
    HeroControl.prototype.downSubRole = function (datas) {
        var roleLen = this.subRolesLen;
        for (var i = 0; i < datas.length; i++) {
            var model = this.roles[i];
            if (!model) {
                model = new RoleModel();
            }
            model.init(datas[i]);
            if (!this.roles[i]) {
                this.roles.push(model);
            }
            if (!this.jobDic[model.job]) {
                this.jobDic[model.job] = model;
            }
        }
        if (roleLen && roleLen < this.roles.length) {
            tipsControl.showTips(LangMgr.getValueByKey('subOpenNewRole'));
        }
        EventMgr.ins().dispatch(352 /* SUB_ROLE_CHANGE */);
    };
    /**
     * 属性变化
     * 255-8
     */
    HeroControl.prototype.downSubRoleAtt = function (roleID, roleAtts, onePower) {
        var power = 0;
        var len = this.roles.length;
        for (var i = 0; i < len; i++) {
            var model = this.getSubRoleByIndex(i);
            if (model.index == roleID) {
                model.initAtt(roleAtts, !this.isFirstSetAttr);
                model.power = onePower;
            }
            power += model.power;
        }
        this.isFirstSetAttr = false;
        actorControl.dispatchPowerChange(power);
        if (godWeaponControl.gwshowTips) {
            if (godWeaponControl.roleshowTips) {
                godWeaponControl.roleshowTips--;
            }
            if (godWeaponControl.roleshowTips <= 0) {
                godWeaponControl.roleshowTips = 0;
                godWeaponControl.gwshowTips = false;
            }
        }
    };
    /**
     * 处理扩展属性变化
     * 255-27
     */
    HeroControl.prototype.downSubRoleExtAtt = function (roleID, attrs) {
        var len = this.roles.length;
        for (var i = 0; i < len; i++) {
            var model = this.getSubRoleByIndex(i);
            if (model.index == roleID) {
                model.initExtAtt(attrs, !this.isFirstSetExAttr);
            }
        }
        this.isFirstSetExAttr = false;
    };
    HeroControl.prototype.getSubRoleByIndex = function (index) {
        return this.roles[index];
    };
    HeroControl.prototype.getSubRoleByJob = function (jobId) {
        var len = this.roles.length;
        for (var i = 0; i < len; i++) {
            var model = this.getSubRoleByIndex(i);
            if (model.job == jobId) {
                return this.roles[i];
            }
        }
        return null;
    };
    Object.defineProperty(HeroControl.prototype, "subRolesLen", {
        get: function () {
            return this.roles.length;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 更新所有角色的名字
     */
    HeroControl.prototype.updateName = function () {
        var len = this.subRolesLen;
        for (var i = 0; i < len; i++) {
            var entity = UnitMgr.ins().getMainRole(i);
            if (entity) {
                var model = this.getSubRoleByIndex(i);
                entity.setCharName(model.guildAndName);
                entity.setLilian(model.lilianUrl);
            }
        }
    };
    HeroControl.prototype.setGuildName = function (arr) {
        var id = arr[0], name = arr[1];
        var len = this.subRolesLen;
        for (var i = 0; i < len; i++) {
            this.roles[i].guildName = name;
            this.roles[i].guildID = id;
        }
        this.updateName();
    };
    /**
     * 是否是自己的英雄
     */
    HeroControl.prototype.getIsMyPlayer = function (han) {
        for (var k in this.roles) {
            if (this.roles[k].handle == han) {
                return true;
            }
        }
        return false;
    };
    /**
     * 是否有可解锁英雄
     */
    HeroControl.prototype.isLockRole = function () {
        var len = GlobalModel.roleNum;
        for (var i = 0; i < len; i++) {
            var role = this.getSubRoleByIndex(i);
            if (!role) {
                var config = DataCenter.ins().RoleNewConfig[i];
                if (!config)
                    continue;
                if (config.zsLevel) {
                    if (reincarnateControl.lv >= config.zsLevel) {
                        return true;
                    }
                }
                else {
                    if (ActorControl.level >= config.level) {
                        return true;
                    }
                }
                if (config.vip && vipControl.lv >= config.vip) {
                    return true;
                }
            }
        }
        return false;
    };
    HeroControl.prototype.getBaseAttrs = function (role, slot) {
        var itemBaseAttrs = [];
        var attributeTypes = {
            hp: 2 /* atMaxHp */,
            atk: 4 /* atAttack */,
            def: 5 /* atDef */,
            res: 6 /* atRes */
        };
        for (var pos = 0 /* WEAPON */; pos < 13 /* MAX */; pos++) {
            if (isNaN(slot) || pos == slot) {
                var equipVo = role.getEquipByIndex(pos);
                if (equipVo && equipVo.item && equipVo.item.configID) {
                    var equipConfig = DataCenter.ins().EquipConfig[equipVo.item.configID];
                    var equipBaseAttrs = [];
                    for (var key in attributeTypes) {
                        if (equipConfig[key]) {
                            equipBaseAttrs.push(new AttributeData(attributeTypes[key], equipConfig[key]));
                        }
                    }
                    if (equipVo.item.att) {
                        (equipBaseAttrs = AttributeData.AttrAddition(equipBaseAttrs, equipVo.item.att));
                    }
                    itemBaseAttrs = AttributeData.AttrAddition(itemBaseAttrs, equipBaseAttrs);
                }
            }
        }
        return itemBaseAttrs;
    };
    HeroControl.prototype.getBaseAttrPercent = function (attrs, value, boo) {
        if (boo === void 0) { boo = true; }
        var result = [];
        for (var i = 0; i < attrs.length; i++) {
            if (attrs[i].type == 2 /* atMaxHp */ ||
                attrs[i].type == 4 /* atAttack */ ||
                attrs[i].type == 5 /* atDef */ ||
                attrs[i].type == 6 /* atRes */) {
                result.push(new AttributeData(attrs[i].type, attrs[i].value));
            }
        }
        for (var i = 0; i < result.length; i++) {
            boo ? result[i].value *= 1 + value : result[i].value *= value;
            result[i].value = Math.floor(result[i].value);
        }
        return result;
    };
    __decorate([
        down(2, [ByteConst.RoleModels])
    ], HeroControl.prototype, "downSubRole", null);
    __decorate([
        down(8, [3 /* Int */, [10 /* Double */], 10 /* Double */])
    ], HeroControl.prototype, "downSubRoleAtt", null);
    __decorate([
        down(27, [3 /* Int */, [3 /* Int */]])
    ], HeroControl.prototype, "downSubRoleExtAtt", null);
    HeroControl = __decorate([
        protocolsId(255 /* MAXVALUE */)
    ], HeroControl);
    return HeroControl;
}(BaseSystem));
__reflect(HeroControl.prototype, "HeroControl");
var DataCenter = (function (_super) {
    __extends(DataCenter, _super);
    function DataCenter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DataCenter.ins = function () {
        return _super.ins.call(this);
    };
    DataCenter.awaitLoad = function () {
        return new Promise(function (resolve) {
            if (DataCenter.loadDone) {
                resolve();
            }
            else {
                DataCenter.awaitLoadResolve = resolve;
            }
        });
    };
    DataCenter.addData = function (data) {
        return __awaiter(this, void 0, void 0, function () {
            var _loop_2, this_2, key;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        //目前只考虑web,以后有小游戏再补充代码
                        if (!true && GlobalModel.isMangleCfgWeb) {
                            DataCenter.hasMangle = true;
                            RES.getResByUrl(PATH_ROOT + "mangleCfgResult_Web.json", function (data) {
                                if (data) {
                                    DataCenter.mangleCfg = data;
                                    DataCenter.loadDone = true;
                                    DataCenter.awaitLoadResolve && DataCenter.awaitLoadResolve();
                                }
                            }, this, RES.ResourceItem.TYPE_JSON);
                        }
                        if (!(DataCenter.hasMangle && !DataCenter.loadDone)) return [3 /*break*/, 2];
                        return [4 /*yield*/, DataCenter.awaitLoad()];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        if (!this.cfgData) {
                            this.cfgData = data;
                        }
                        _loop_2 = function (key) {
                            var toKey = DataCenter.mangleCfg && DataCenter.mangleCfg[key] ? DataCenter.mangleCfg[key] : key;
                            if (!this_2.cfgData[toKey]) {
                                this_2.cfgData[toKey] = data[key];
                            }
                            Object.defineProperty(this_2.ins(), toKey, {
                                get: function () {
                                    var value = DataCenter.cfgData[toKey];
                                    if (typeof value == "string") {
                                        try {
                                            value = JSON.parse(value);
                                            DataCenter.cfgData[toKey] = value;
                                        }
                                        catch (error) {
                                            ReportData.getIns().reportClientErrorLog("JsonError", toKey);
                                        }
                                    }
                                    return value;
                                }
                            });
                        };
                        this_2 = this;
                        for (key in data) {
                            _loop_2(key);
                        }
                        return [2 /*return*/, new Promise(function (resolve) {
                                resolve();
                            })];
                }
            });
        });
    };
    DataCenter.hasMangle = false;
    DataCenter.loadDone = false;
    return DataCenter;
}(SingleClass));
__reflect(DataCenter.prototype, "DataCenter");
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//	 * Redistributions of source code must retain the above copyright
//	   notice, this list of conditions and the following disclaimer.
//	 * Redistributions in binary form must reproduce the above copyright
//	   notice, this list of conditions and the following disclaimer in the
//	   documentation and/or other materials provided with the distribution.
//	 * Neither the name of the Egret nor the
//	   names of its contributors may be used to endorse or promote products
//	   derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var AssetAdapter = (function () {
    function AssetAdapter() {
    }
    /**
     * 解析素材
     * @param source 待解析的新素材标识符
     * @param compFunc 解析完成回调函数，示例：callBack(content:any,source:string):void;
     * @param thisObject callBack的 this 引用
     */
    AssetAdapter.prototype.getAsset = function (source, compFunc, thisObject) {
        function onGetRes(data) {
            compFunc.call(thisObject, data, source);
        }
        if (RES.hasRes(source)) {
            var data = RES.getRes(source);
            if (data) {
                onGetRes(data);
            }
            else {
                RES.getResAsync(source, onGetRes, this);
            }
        }
        else {
            RES.getResByUrl(source, onGetRes, this, RES.ResourceItem.TYPE_IMAGE);
        }
    };
    return AssetAdapter;
}());
__reflect(AssetAdapter.prototype, "AssetAdapter", ["eui.IAssetAdapter"]);
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//	 * Redistributions of source code must retain the above copyright
//	   notice, this list of conditions and the following disclaimer.
//	 * Redistributions in binary form must reproduce the above copyright
//	   notice, this list of conditions and the following disclaimer in the
//	   documentation and/or other materials provided with the distribution.
//	 * Neither the name of the Egret nor the
//	   names of its contributors may be used to endorse or promote products
//	   derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var ThemeAdapter = (function () {
    function ThemeAdapter() {
    }
    /**
     * 解析主题
     * @param url 待解析的主题url
     * @param compFunc 解析完成回调函数，示例：compFunc(e:egret.Event):void;
     * @param errorFunc 解析失败回调函数，示例：errorFunc():void;
     * @param thisObject 回调的this引用
     */
    ThemeAdapter.prototype.getTheme = function (url, compFunc, errorFunc, thisObject) {
        var _this = this;
        var load_count = 0;
        var self = this;
        function onGetRes(e) {
            compFunc.call(thisObject, e);
        }
        function onError(e) {
            if (e.resItem.url == url) {
                load_count += 1;
                Assert(false, "Load default.thm.json fail!!!Count\uFF1A" + load_count + ".");
                if (load_count < 3) {
                    RES.getResByUrl(url, onGetRes, self, RES.ResourceItem.TYPE_TEXT);
                    return;
                }
                RES.removeEventListener(RES.ResourceEvent.ITEM_LOAD_ERROR, onError, null);
                alert("Skins load fail\uFF0CPlease check the network login again");
            }
        }
        if (typeof generateEUI2 !== 'undefined') {
            var euiPath = "";
            if (DeviceUtils.IsWxMiniGame) {
                var miniResVersion = SDKManager.ins().SDKMiniAuditVer();
                var dir = "";
                var wxMiniName = window["wxMiniName"];
                if (wxMiniName != null && wxMiniName != "") {
                    dir = "wx_" + wxMiniName + "_" + miniResVersion;
                }
                else {
                    dir = "wx_" + miniResVersion;
                }
                if (true) {
                    euiPath = "resource/" + dir + "/gameEui_wxgame_debug.json";
                }
                else {
                    euiPath = "resource/" + dir + "/gameEui_wxgame.json";
                }
            }
            RES.getResByUrl(euiPath, function (data, url) {
                window["JSONParseClass"]["setData"](data);
                egret.callLater(function () {
                    compFunc.call(thisObject, generateEUI2);
                }, _this);
            }, this, RES.ResourceItem.TYPE_JSON);
        }
        else {
            RES.addEventListener(RES.ResourceEvent.ITEM_LOAD_ERROR, onError, null);
            RES.getResByUrl(url, onGetRes, this, RES.ResourceItem.TYPE_TEXT);
        }
    };
    return ThemeAdapter;
}());
__reflect(ThemeAdapter.prototype, "ThemeAdapter", ["eui.IThemeAdapter"]);
var Currency = (function () {
    function Currency() {
    }
    Currency.getCurrencyName = function (index) {
        return LangMgr.getValueByKey("currency" + index);
    };
    Currency.getCurrencyRes = function (index) {
        return Currency.args[index];
    };
    Currency.args = {
        "0": "ZSexp",
        "1": "ZSgold",
        "2": "ZScoin",
        "3": "ZSshengwang",
        "4": "ZSlingpo",
        "5": "ZSguildgx",
        "6": "ZSguildfund",
        "7": "ZSchengjiu",
        "8": "ZShonor",
        "9": "500007_png",
        "10": "500008_png",
        "11": "hejisuipian",
        "12": "hejisuipian1",
        "13": "ZSexp",
        "14": "ZSprestige",
        "15": "ZSchip",
        "16": "SSExp",
    };
    return Currency;
}());
__reflect(Currency.prototype, "Currency");
var ActorControl = (function (_super) {
    __extends(ActorControl, _super);
    function ActorControl() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /** 等级 */
        _this._level = 0;
        /** 战斗力 */
        _this._power = 0;
        /** 金钱 */
        _this._gold = 0;
        /** 元宝 */
        _this._yb = 0;
        /** 功勋值 */
        _this._feats = 0;
        /** 低级合击装备碎片 */
        _this._togeatter1 = -1;
        /** 高级合击装备碎片 */
        _this._togeatter2 = -1;
        /** 威望 */
        _this._prestigeValue = 0;
        /** 筹码 */
        _this._chip = 0;
        return _this;
    }
    ActorControl_1 = ActorControl;
    ActorControl.ins = function () {
        return _super.ins.call(this);
    };
    /**
     * 角色信息
     * 255-1
     */
    ActorControl.prototype.downActorInit = function (handle, actorId, srvid, name, level, exp, power, gold, yb, vipLv, soul, bagNum, feats, runeShatter, runeEx, togeatter1, togeatter2, prestige, job, reincarnateLv) {
        ActorControl_1.handle = handle;
        ActorControl_1.actorID = actorId;
        GlobalModel.srvid = srvid;
        this.dispatchNameChange(name);
        this._level = level;
        this._exp = exp;
        this.dispatchGoldChange(gold);
        this.dispatchYbChange(yb);
        vipControl.lv = vipLv;
        this.dispatchSoulChange(soul);
        backpackControl.bagNum = bagNum;
        this.dispatchFeatsChange(feats);
        ActorControl_1.runeShatter = runeShatter;
        ActorControl_1.runeExchange = runeEx;
        this.dispatchUpdateTogeatter(togeatter1, 1);
        this.dispatchUpdateTogeatter(togeatter2, 2);
        this.dispatchWeiWang(prestige);
        this._job = job;
        reincarnateControl.lv = reincarnateLv;
        ClientStorage.ins().init();
        if (ServerStorage.ins().isInit) {
            ServerStorage.ins().initSetting();
        }
        SDKManager.ins().SDKEnterGameNative({
            serverId: GlobalModel.srvid,
            serverName: GlobalModel.srvname,
            job: ActorControl_1.job,
            nickName: ActorControl_1.myName,
            zsLevel: reincarnateControl.lv,
            level: ActorControl_1.level,
            vip: vipControl.lv,
            power: power //战力
        });
        EventMgr.ins().dispatch(454 /* ACTOR_INIT */);
    };
    /**
     * 处理经验变化
     * 255-7
     */
    ActorControl.prototype.downActorExp = function (level, exp1, exp) {
        var lastLV = this._level;
        this._level = level;
        this._exp = exp1;
        if (lastLV < this._level) {
            this.dispatchLevelChange();
            UnitMgr.ins().updateRoleTitleState(true);
            var char = UnitMgr.ins().getNoDieRole();
            if (char) {
                var mc = new GameMovieClip;
                mc.playFile(PATH_EFF + "levelUpEffect", 1);
                char.addChild(mc);
                SDKManager.ins().SDKUserUpgradeNative({
                    serverId: GlobalModel.srvid,
                    serverName: GlobalModel.srvname,
                    job: ActorControl_1.job,
                    nickName: ActorControl_1.myName,
                    zsLevel: reincarnateControl.lv,
                    level: ActorControl_1.level,
                    vip: vipControl.lv,
                });
            }
        }
        EventMgr.ins().dispatch(453 /* ACTOR_EXP */, exp);
    };
    /**
     * 名称
     */
    ActorControl.prototype.dispatchNameChange = function (value) {
        if (this._myName != value) {
            this._myName = value;
        }
        EventMgr.ins().dispatch(455 /* ACTOR_NAME_CHANGE */);
    };
    /**
     * 金币
     */
    ActorControl.prototype.dispatchGoldChange = function (value) {
        if (this._gold != value) {
            if (this._gold > 0) {
                var addGold = value - this._gold;
                if (addGold > 0) {
                    var str = LangMgr.getValueByKey('actorAddMoney', addGold);
                    tipsControl.showTips(str);
                }
            }
            this._gold = value;
        }
        EventMgr.ins().dispatch(456 /* ACTOR_GOLD_CHANGE */);
    };
    /**
     * 元宝
     */
    ActorControl.prototype.dispatchYbChange = function (value) {
        if (this._yb != value) {
            if (this._yb > 0) {
                var addYB = value - this._yb;
                if (addYB > 0) {
                    var str = LangMgr.getValueByKey('actorAddYB', addYB);
                    tipsControl.showTips(str);
                }
            }
            this._yb = value;
        }
        EventMgr.ins().dispatch(457 /* ACTOR_YB_CHANGE */);
    };
    /**
     * 功勋
     */
    ActorControl.prototype.dispatchFeatsChange = function (value) {
        if (this._feats != value) {
            if (this._feats > 0) {
                var u64 = value - this._feats;
                var addFeats = parseInt(u64.toString());
                if (addFeats > 0) {
                    var str = LangMgr.getValueByKey('actorGetGX', addFeats);
                    tipsControl.showTips(str);
                }
            }
            this._feats = value;
        }
        EventMgr.ins().dispatch(458 /* ACTOR_FEATS_CHANGE */);
    };
    /**
     * 修为
     */
    ActorControl.prototype.dispatchZsExpChange = function (value) {
        var str = LangMgr.getValueByKey('actorChangeExp', value);
        tipsControl.showTips(str);
        EventMgr.ins().dispatch(459 /* ACTOR_ZSEXP_CHANGE */);
    };
    /**
     * 符文碎片
     */
    ActorControl.prototype.dispatchUpdateTogeatter = function (value, type) {
        var oldValue = 0;
        if (type == 1) {
            oldValue = this._togeatter1;
        }
        else {
            oldValue = this._togeatter2;
        }
        if (oldValue != value) {
            if (oldValue != -1) {
                var addValue = value - oldValue;
                if (addValue > 0) {
                    var name_2 = type == 1 ? Currency.getCurrencyName(11 /* TYPE_11 */) : Currency.getCurrencyName(12 /* TYPE_12 */);
                    var str = LangMgr.getValueByKey('actorGetInfo', addValue, name_2);
                    tipsControl.showTips(str);
                }
            }
            oldValue = value;
        }
        if (type == 1) {
            this._togeatter1 = oldValue;
        }
        else {
            this._togeatter2 = oldValue;
        }
        EventMgr.ins().dispatch(460 /* ACTOR_TOGEATTER */, { value: value, type: type });
    };
    /**
     * 等级
     */
    ActorControl.prototype.dispatchLevelChange = function () {
        EventMgr.ins().dispatch(461 /* ACTOR_LEVEL_CHANGE */);
    };
    /**
     * 精炼石
     */
    ActorControl.prototype.dispatchSoulChange = function (value) {
        if (this._soul > 0) {
            var addSoul = value - this._soul;
            if (addSoul > 0) {
                var str = LangMgr.getValueByKey('actorGetStone', addSoul);
                tipsControl.showTips(str);
            }
        }
        this._soul = value;
        EventMgr.ins().dispatch(462 /* ACTOR_SOUL_CHANGE */);
    };
    /**
     * 战力
     */
    ActorControl.prototype.dispatchPowerChange = function (value) {
        if (this._power != value) {
            if (this._power < value && this._power > 0) {
                tipsControl.showPowerPromote(this._power);
            }
            this._power = value;
        }
        EventMgr.ins().dispatch(463 /* ACTOR_POWER_CHANGE */);
    };
    /**
     * 威望
     */
    ActorControl.prototype.dispatchWeiWang = function (value) {
        if (this._prestigeValue > 0 && value - this._prestigeValue > 0) {
            tipsControl.showTips(LangMgr.getValueByKey('actorGetInfo', value - this._prestigeValue, Currency.getCurrencyName(14 /* TYPE_14 */)));
        }
        this._prestigeValue = value;
        EventMgr.ins().dispatch(464 /* ACTOR_PRESTIGE */);
    };
    /**
     * 筹码
     */
    ActorControl.prototype.dispatchChip = function (value) {
        if (this._chip > 0 && value - this._chip > 0) {
            tipsControl.showTips(LangMgr.getValueByKey('actorGetInfo', value - this._chip, Currency.getCurrencyName(15 /* TYPE_15 */)));
        }
        this._chip = value;
        EventMgr.ins().dispatch(465 /* ACTOR_CHIP */);
    };
    Object.defineProperty(ActorControl, "level", {
        get: function () {
            return this.ins()._level;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActorControl, "job", {
        get: function () {
            return this.ins()._job;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActorControl, "exp", {
        get: function () {
            return this.ins()._exp;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActorControl, "power", {
        get: function () {
            return this.ins()._power;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActorControl, "myName", {
        get: function () {
            return this.ins()._myName;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActorControl, "gold", {
        get: function () {
            return this.ins()._gold;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActorControl, "yb", {
        get: function () {
            return this.ins()._yb;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActorControl, "soul", {
        get: function () {
            return this.ins()._soul;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActorControl, "feats", {
        get: function () {
            return this.ins()._feats;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActorControl, "togeatter1", {
        get: function () {
            return this.ins()._togeatter1 < 0 ? 0 : this.ins()._togeatter1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActorControl, "togeatter2", {
        get: function () {
            return this.ins()._togeatter2 < 0 ? 0 : this.ins()._togeatter2;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActorControl, "samsaraLv", {
        get: function () {
            var data = reincarnationControl.samsaraInfo;
            return data ? data.lv : 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActorControl, "prestige", {
        get: function () {
            return this.ins()._prestigeValue;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActorControl, "chip", {
        get: function () {
            return this.ins()._chip;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActorControl, "camp", {
        get: function () {
            var role = heroControl.getSubRoleByIndex(0);
            return role.camp;
        },
        enumerable: true,
        configurable: true
    });
    /** 个人id */
    ActorControl.actorID = 0;
    /** 战纹精华 */
    ActorControl.runeShatter = 0;
    /** 战纹兑换的数值 */
    ActorControl.runeExchange = 0;
    __decorate([
        down(1, [10 /* Double */, 3 /* Int */, 3 /* Int */, 8 /* String */, 3 /* Int */, 3 /* Int */, 10 /* Double */, 7 /* UInt64 */,
            7 /* UInt64 */, 3 /* Int */, 7 /* UInt64 */, 3 /* Int */, 7 /* UInt64 */, 7 /* UInt64 */, 7 /* UInt64 */, 7 /* UInt64 */,
            7 /* UInt64 */, 3 /* Int */, 3 /* Int */, 3 /* Int */])
    ], ActorControl.prototype, "downActorInit", null);
    __decorate([
        down(7, [3 /* Int */, 3 /* Int */, 3 /* Int */])
    ], ActorControl.prototype, "downActorExp", null);
    ActorControl = ActorControl_1 = __decorate([
        protocolsId(255 /* MAXVALUE */)
    ], ActorControl);
    return ActorControl;
    var ActorControl_1;
}(BaseSystem));
__reflect(ActorControl.prototype, "ActorControl");
var GameConst = (function () {
    function GameConst() {
    }
    //火焰戒指ID
    GameConst.FIRE_RING_ID = 7;
    GameConst.FORGE_MAX = 8;
    //开启自动闯关等级
    GameConst.AUTO_GUANQIA = 11;
    return GameConst;
}());
__reflect(GameConst.prototype, "GameConst");
var IntensifyConst;
(function (IntensifyConst) {
    /** 锻造索引 */
    IntensifyConst.FORGE_EQUIP = [
        0 /* WEAPON */,
        1 /* HEAD */,
        2 /* CLOTHES */,
        3 /* NECKLACE */,
        4 /* WRIST */,
        5 /* BRACELET */,
        6 /* RING */,
        7 /* SHOE */,
    ];
    /** 装备索引 */
    IntensifyConst.EQUIP_POS = [
        0 /* WEAPON */,
        1 /* HEAD */,
        2 /* CLOTHES */,
        3 /* NECKLACE */,
        4 /* WRIST */,
        5 /* BRACELET */,
        6 /* RING */,
        7 /* SHOE */,
        8 /* DZI */,
        9 /* HAT */,
        10 /* VIZARD */,
        11 /* CLOAK */,
        12 /* SHIELD */,
    ];
})(IntensifyConst || (IntensifyConst = {}));
var PATH_ROOT = "resource/";
var PATH_MAP = "resource/map/";
var PATH_RES = "resource/res/";
var PATH_EFF = "resource/res/texiao/eff/";
var PATH_WUQI = "resource/res/model/wuqi/";
var PATH_RENWU = "resource/res/model/renwu/";
var PATH_CHIBANG = "resource/res/model/chibang/";
var PATH_GUAIWU = "resource/res/model/guaiwu/";
var PATH_SKILLEFF = "resource/res/texiao/skilleff/";
var PATH_SKILLJSON = "resource/res/texiao/skill/";
var PATH_PUBLIC = "tupian/public/";
var WUQI_PREFIX = "wuqi";
var RENWU_PREFIX = "renwu";
var CHIBANG_PREFIX = "chibang";
var GUAIWU_PREFIX = "guaiwu";
var SkillConst = (function () {
    function SkillConst() {
    }
    SkillConst.EFF_SKY_BALL = 53001; //官印技能
    SkillConst.BASE_SKILL_INDEX = [11, 21, 31];
    return SkillConst;
}());
__reflect(SkillConst.prototype, "SkillConst");
/**
 * 伤害显示控制类
 */
var DamageControl = (function (_super) {
    __extends(DamageControl, _super);
    function DamageControl() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.containers = [];
        _this.imgs = [];
        _this.urlDic = {
            256: "wydEffectIcon",
            512: ["j0z", "j4z", "j5z"],
            1024: ["j0m_png", "j4m_png", "j5m_png"]
        };
        return _this;
    }
    DamageControl.ins = function () {
        return _super.ins.call(this);
    };
    DamageControl.prototype.createDamageObj = function (dtype, num, type, offset, offsetY, job, isMy) {
        if (offset === void 0) { offset = 0; }
        if (offsetY === void 0) { offsetY = 0; }
        if (job === void 0) { job = 1; }
        if (isMy === void 0) { isMy = false; }
        var damage = this.getContainer();
        damage.createDamageObj(dtype, num, type, offset, offsetY, job, isMy);
        return damage;
    };
    DamageControl.prototype.getTypeUrl = function (_type, job) {
        if (job === void 0) { job = 1; }
        var url = this.urlDic[_type];
        if (url) {
            if (typeof url != "string") {
                return url[job - 1];
            }
            return url;
        }
    };
    DamageControl.prototype.getImage = function () {
        return this.imgs.pop() || new eui.Image();
    };
    DamageControl.prototype.getContainer = function () {
        return this.containers.pop() || new DamageContainer();
    };
    DamageControl.prototype.pushImage = function (img) {
        if (img && this.imgs.indexOf(img) == -1) {
            this.imgs.push(img);
        }
    };
    DamageControl.prototype.pushContainer = function (container) {
        if (container && this.containers.indexOf(container) == -1) {
            this.containers.push(container);
        }
    };
    return DamageControl;
}(SingleClass));
__reflect(DamageControl.prototype, "DamageControl");
var DamageContainer = (function (_super) {
    __extends(DamageContainer, _super);
    function DamageContainer() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.offset = 3;
        return _this;
    }
    DamageContainer.prototype.createDamageObj = function (dtype, num, type, offset, offsetY, job, isMy) {
        if (offset === void 0) { offset = 0; }
        if (offsetY === void 0) { offsetY = 0; }
        if (job === void 0) { job = 1; }
        if (isMy === void 0) { isMy = false; }
        if ((dtype & 256 /* TYPE256 */) == 256 /* TYPE256 */) {
            this.addImage(256 /* TYPE256 */, job);
        }
        if ((dtype & 1024 /* TYPE1024 */) != 1024 /* TYPE1024 */) {
            if ((dtype & 512 /* TYPE512 */) == 512 /* TYPE512 */) {
                this.addImage(512 /* TYPE512 */, job);
            }
        }
        else if (isMy && (dtype & 2 /* TYPE2 */) != 2 /* TYPE2 */ && (dtype & 512 /* TYPE512 */) != 512 /* TYPE512 */) {
            this.addImage(1024 /* TYPE1024 */, job);
        }
        this.addBmpNumber(num, type, offset, offsetY);
        this.resetPosition();
    };
    DamageContainer.prototype.addImage = function (dtype, job) {
        if (job === void 0) { job = 1; }
        var url = DamageControl.ins().getTypeUrl(dtype, job);
        if (!url) {
            debug.log("Damage types:" + dtype + "No resources set");
            return;
        }
        var img = DamageControl.ins().getImage();
        img.addEventListener(egret.Event.COMPLETE, this.onLoaded, this);
        img.width = NaN;
        img.height = NaN;
        img.source = url;
        this.addChild(img);
    };
    DamageContainer.prototype.addBmpNumber = function (num, type, offset, offsetY) {
        if (offset === void 0) { offset = 0; }
        if (offsetY === void 0) { offsetY = 0; }
        if (this.bmpContainer) {
            BitmapNumber.ins().changeNum(this.bmpContainer, num, type, offset, offsetY);
        }
        else {
            this.bmpContainer = BitmapNumber.ins().createNumPic(num, type, offset, offsetY);
        }
        this.addChild(this.bmpContainer);
    };
    DamageContainer.prototype.onLoaded = function (e) {
        var img = e.currentTarget;
        img.removeEventListener(egret.Event.COMPLETE, this.onLoaded, this);
        this.resetPosition();
    };
    DamageContainer.prototype.resetPosition = function () {
        var width = 0;
        var height = 0;
        var num = this.numChildren;
        for (var i = 0; i < num; i++) {
            var child = this.getChildAt(i);
            child.x = width;
            width += child.width + this.offset;
            height = Math.max(height, child.height);
        }
        for (var i = 0; i < num; i++) {
            var child = this.getChildAt(i);
            child.y = (height - child.height) / 2;
        }
        this.width = width - this.offset;
        this.height = height;
    };
    DamageContainer.prototype.destroy = function () {
        while (this.numChildren) {
            var child = this.removeChildAt(this.numChildren - 1);
            if (child instanceof eui.Image) {
                child.removeEventListener(egret.Event.COMPLETE, this.onLoaded, this);
                DamageControl.ins().pushImage(child);
            }
            else if (child instanceof egret.DisplayObjectContainer) {
                BitmapNumber.ins().desstroyNumPic(child);
            }
        }
        this.bmpContainer = null;
        DamageControl.ins().pushContainer(this);
    };
    return DamageContainer;
}(egret.DisplayObjectContainer));
__reflect(DamageContainer.prototype, "DamageContainer");
/**
 * 伤害显示
 */
var DamageDisplay = (function (_super) {
    __extends(DamageDisplay, _super);
    function DamageDisplay() {
        var _this = _super.call(this) || this;
        _this.offY = 0;
        _this.offsetY = 0;
        _this._lastType = 0;
        _this.damageNum = 50;
        _this.tempdamageViews = [];
        _this.tick = 0;
        _this.delayCount = 0;
        _this.ignoreLeak = true;
        EventMgr.addListener(472 /* ENTITY_HP_CHANGE */, _this.showDamage, _this);
        egret.startTick(function () {
            _this.tick++;
            return false;
        }, _this);
        TimerMgr.ins().doTimer(1000, 0, function () {
            var tick = _this.tick;
            _this.tick = 0;
            if (_this.delayCount <= 0) {
                _this.delayCount--;
                return;
            }
            if (tick >= 25) {
                _this.damageNum = 50;
            }
            else if (tick >= 15) {
                _this.damageNum = 10;
            }
            else if (tick >= 10) {
                _this.damageNum = 5;
            }
            else
                _this.damageNum = 0;
            if (tick < 25) {
                _this.delayCount = 5;
            }
        }, _this);
        return _this;
    }
    /**
     * 飘血显示
     * @param target    飘血目标
     * @param source    伤害源
     * @param type      DamageTypes
     * @param value     伤害值
     */
    DamageDisplay.prototype.showDamage = function (_a) {
        var target = _a[0], source = _a[1], type = _a[2], value = _a[3];
        if (this.tempdamageViews.length >= this.damageNum) {
            var damage_1 = this.tempdamageViews[0];
            if (damage_1) {
                egret.Tween.removeTweens(damage_1);
                DisplayUtils.removeFromParent(damage_1);
                this.destroyDamageObj(damage_1);
            }
        }
        if (!target || !source) {
            return;
        }
        if (target.team != 0 /* My */ && source.team != 0 /* My */) {
            return;
        }
        if (target.team == 0 /* My */) {
            type = 1;
        }
        var isDeter = type & 64 /* TYPE64 */ && source.isMy;
        var isCrit = type & 2 /* TYPE2 */ && !isDeter;
        var isLucky = type & 8 /* TYPE8 */;
        var isPunch = type & 16 /* TYPE16 */;
        var isMiss = type & 4 /* TYPE4 */;
        var isFujia = type & 32 /* TYPE32 */;
        var isLianji = type & 128 /* TYPE128 */;
        var isFatal = type & 512 /* TYPE512 */;
        var isMaster = type & 1024 /* TYPE1024 */ && source.isMy;
        var isTogetherCrit = type & 2048 /* TYPE2048 */;
        var isDevour = type & 4096 /* TYPE4096 */;
        var isDevourTogether = type & 8192 /* TYPE8192 */;
        if (isMaster) {
            if (isCrit || isFatal) {
                isCrit = false;
            }
            else {
                isMaster = false;
            }
        }
        //致命就不显示暴击
        if (isFatal) {
            isCrit = false;
        }
        this.offY = UnitMgr.CHAR_DEFAULT_TYPEFACE - target.typeface;
        if (this._lastType != type) {
            this.offsetY = 0;
        }
        this._lastType = type;
        if (value == 0 && !isMiss) {
            return;
        }
        var chartype = "";
        if (source instanceof UnitRole) {
            switch (source.infoModel.job) {
                case 1 /* ZhanShi */:
                    chartype = "j" + (isCrit || isDeter || isMaster || isDevour ? 0 : 1);
                    break;
                case 2 /* FaShi */:
                    chartype = "j" + (isCrit || isDeter || isMaster || isDevour ? 4 : 2);
                    break;
                case 3 /* DaoShi */:
                    chartype = "j" + (isCrit || isDeter || isMaster || isDevour ? 5 : 3);
                    break;
            }
        }
        else if (source instanceof UnitMonster) {
            var monsterCfg = DataCenter.ins().MonstersConfig[source.infoModel.configID];
            if (monsterCfg && monsterCfg.type == 6 /* SummonLead */) {
                chartype = "j2";
            }
            else {
                chartype = "j3";
                isCrit = false;
                if (monsterCfg && monsterCfg.type == 4 /* Ring */) {
                    chartype = "j9";
                    isCrit = true;
                }
            }
        }
        if (isPunch || isLucky) {
            chartype = "j0";
        }
        if (isTogetherCrit) {
            chartype = "punch";
            isPunch = 0;
        }
        if (isDevourTogether) {
            chartype = "j0";
            isPunch = 0;
        }
        //2为角色掉血，其它为伤害
        var numType = target.team == 0 /* My */ ? "2" : chartype;
        if (isMiss) {
            numType = "j0";
        }
        var sv = "";
        if (isMiss) {
            sv = "s";
        }
        else if (isPunch) {
            sv = value < 0 ? "+" + Math.abs(value) : "h" + (value >> 0) + "";
        }
        else {
            sv = value < 0 ? "+" + Math.abs(value) : (isTogetherCrit ? "j" : isCrit ? "b" : isDeter ? "d" : isDevour ? "t" : isDevourTogether ? "u" : isLucky ? "b" : isMaster ? "m" : "") + (value >> 0);
        }
        var st = value < 0 ? "g3" : numType;
        var offsetX = 3.5;
        if (isFujia || isLianji) {
            this.offsetY += 25;
        }
        else {
            this.offsetY = 0;
        }
        var offsety = this.offsetY;
        var damage = DamageControl.ins().createDamageObj(type, sv, st, offsetX, offsety, source.infoModel.job || 1, source.isMy);
        damage.touchChildren = false;
        if (isPunch) {
            this.addChildAt(damage, 1000);
        }
        else {
            this.addChild(damage);
        }
        damage.x = target.x - damage.width / 2;
        damage.y = target.y - 50 - offsety;
        var isAddDamage = value < 0;
        if (chartype == "6") {
            isAddDamage = true;
        }
        this.floatImg(damage, type, target, source, isAddDamage);
        this.tempdamageViews.push(damage);
    };
    DamageDisplay.prototype.removeFloatTarget = function (floatTarger) {
        DisplayUtils.removeFromParent(floatTarger);
        this.destroyDamageObj(floatTarger);
    };
    /**
     * 主角受击 - 暴击和幸运一击效果
     * @param {egret.DisplayObject} floatTarger
     * @param {egret.Tween} tween
     */
    DamageDisplay.prototype.injuredCritLucky = function (floatTarger, tween) {
        floatTarger.scaleX = floatTarger.scaleY = 1.5 /* sc_s0 */;
        var posY1 = floatTarger.y - (UnitMgr.CHAR_DEFAULT_TYPEFACE - 80) / 2;
        var posY2 = floatTarger.y - (UnitMgr.CHAR_DEFAULT_TYPEFACE - 30);
        floatTarger.y = posY1;
        tween.to({
            "y": posY2,
            'scaleX': 1.5 /* sc_s1 */,
            'scaleY': 1.5 /* sc_s1 */
        }, 600 /* sc_sp1 */).wait(200 /* sc_sp2 */).to({
            alpha: 0,
            'scaleX': 1.5 /* sc_s2 */,
            'scaleY': 1.5 /* sc_s2 */
        }, 200 /* sc_sp3 */).call(this.removeFloatTarget, this, [floatTarger]);
    };
    /**
     * 主角受击 - 飘血效果
     * @param {egret.DisplayObject} floatTarger
     * @param {egret.Tween} tween
     */
    DamageDisplay.prototype.injured = function (floatTarger, tween) {
        floatTarger.scaleX = floatTarger.scaleY = 1.3 /* sn_s0 */;
        var posY1 = floatTarger.y - (UnitMgr.CHAR_DEFAULT_TYPEFACE - 80) / 2;
        var posY2 = floatTarger.y - (UnitMgr.CHAR_DEFAULT_TYPEFACE - 30);
        floatTarger.y = posY1;
        tween.to({
            "y": posY2,
            'scaleX': 1.3 /* sn_s1 */,
            'scaleY': 1.3 /* sn_s1 */
        }, 600 /* sn_sp1 */).wait(200 /* sn_sp2 */).to({
            alpha: 0,
            'scaleX': 1.3 /* sn_s2 */,
            'scaleY': 1.3 /* sn_s2 */
        }, 200 /* sn_sp3 */).call(this.removeFloatTarget, this, [floatTarger]);
    };
    /**
     * 主角攻击 - 暴击或幸运一击效果
     * @param {egret.DisplayObject} floatTarger
     * @param {egret.Tween} tween
     */
    DamageDisplay.prototype.atkCritLucky = function (floatTarger, tween) {
        var posX = 0;
        var posX2 = 0;
        floatTarger.x += 0 /* c_posX1 */;
        posX = floatTarger.x + 100 /* c_posX2 */;
        posX2 = floatTarger.x + 120 /* c_posX3 */;
        floatTarger.scaleX = floatTarger.scaleY = 0.1 /* c_s0 */;
        floatTarger.y = floatTarger.y - 120 /* c_posY1 */ + this.offY;
        floatTarger.alpha = 1 /* c_alpha0 */;
        var endY = floatTarger.y - 10 /* c_posY2 */;
        tween.to({
            "x": posX,
            "y": endY,
            scaleX: 0.8 /* c_s1 */,
            scaleY: 0.8 /* c_s1 */,
            alpha: 1 /* c_alpha1 */
        }, 80 /* c_sp1 */, egret.Ease.circInOut).to({
            scaleX: 0.8 /* c_s2 */,
            scaleY: 0.8 /* c_s2 */,
            alpha: 1 /* c_alpha2 */
        }, 200 /* c_sp2 */, egret.Ease.circInOut).to({
            scaleX: 0.8 /* c_s3 */,
            scaleY: 0.8 /* c_s3 */,
            alpha: 0.6 /* c_alpha3 */
        }, 200 /* c_sp3 */, egret.Ease.sineIn).wait(100).to({
            alpha: 0 /* c_alpha4 */,
            y: floatTarger.y + 10 /* c_posY3 */,
            x: posX2,
            scaleX: 0.6 /* c_s4 */,
            scaleY: 0.6 /* c_s4 */
        }, 1000 /* c_sp4 */).to({
            alpha: 0 /* c_alpha5 */,
            y: floatTarger.y + 10 /* c_posY4 */,
            scaleX: 0.1 /* c_s5 */,
            scaleY: 0.1 /* c_s5 */
        }, 1200 /* c_sp5 */, egret.Ease.sineIn).call(this.removeFloatTarget, this, [floatTarger]);
    };
    /**
     * 主角攻击 - 合击飘血效果
     * @param {egret.DisplayObject} floatTarger
     * @param {egret.Tween} tween
     */
    DamageDisplay.prototype.atkHeJi = function (floatTarger, tween) {
        var posX = 0;
        var posX2 = 0;
        var map = UIMgr.gameScene.map;
        var point = this.localToGlobal();
        point.x = StageUtils.ins().getWidth() / 2;
        map.globalToLocal(point.x, point.y, point);
        var ranX = Math.random() * 100 - 50;
        var ranY = Math.random() * 200 - 100;
        floatTarger.x = point.x - 100 - floatTarger.width / 2 + ranX;
        floatTarger.x += 0 /* h_posX1 */;
        posX = floatTarger.x + 100 /* h_posX2 */;
        posX2 = floatTarger.x + 120 /* h_posX3 */;
        floatTarger.scaleX = floatTarger.scaleY = 0.1 /* h_s0 */;
        floatTarger.y = floatTarger.y - 150 /* h_posY1 */ + this.offY + ranY;
        floatTarger.alpha = 1 /* h_alpha0 */;
        var endY = floatTarger.y - 10 /* h_posY2 */;
        tween.to({
            "x": posX,
            "y": endY,
            scaleX: 1.2 /* h_s1 */,
            scaleY: 1.2 /* h_s1 */,
            alpha: 1 /* h_alpha1 */
        }, 80 /* h_sp1 */, egret.Ease.circInOut).to({
            scaleX: 1.2 /* h_s2 */,
            scaleY: 1.2 /* h_s2 */,
            alpha: 1 /* h_alpha2 */
        }, 300 /* h_sp2 */, egret.Ease.circInOut).to({
            scaleX: 1.2 /* h_s3 */,
            scaleY: 1.2 /* h_s3 */,
            alpha: 0.6 /* h_alpha3 */
        }, 200 /* h_sp3 */, egret.Ease.sineIn).wait(100).to({
            alpha: 0 /* h_alpha4 */,
            y: floatTarger.y + -30 /* h_posY3 */,
            x: posX2,
            scaleX: 1.2 /* h_s4 */,
            scaleY: 1.2 /* h_s4 */
        }, 1000 /* h_sp4 */).to({
            alpha: 0 /* h_alpha5 */,
            y: floatTarger.y + -30 /* h_posY4 */,
            scaleX: 1.2 /* h_s5 */,
            scaleY: 1.2 /* h_s5 */
        }, 1200 /* h_sp5 */, egret.Ease.sineIn).call(this.removeFloatTarget, this, [floatTarger]);
    };
    /**
     * 主角攻击 - 普通飘血效果
     * @param {egret.DisplayObject} floatTarger
     * @param {egret.Tween} tween
     */
    DamageDisplay.prototype.atk = function (floatTarger, tween) {
        var posX = 0;
        var posX2 = 0;
        floatTarger.x += 90 /* posX1 */;
        posX = floatTarger.x + 0 /* posX2 */;
        posX2 = floatTarger.x + 0 /* posX3 */;
        floatTarger.scaleX = floatTarger.scaleY = 1.2 /* s0 */;
        floatTarger.y = floatTarger.y - 100 /* posY1 */ + this.offY;
        floatTarger.alpha = 1 /* alpha0 */;
        var endY = floatTarger.y - 0 /* posY2 */;
        tween.to({
            "x": posX, "y": endY, scaleX: 0.4 /* s1 */, scaleY: 0.4 /* s1 */, alpha: 1 /* alpha1 */
        }, 60 /* sp1 */, egret.Ease.circInOut).to({
            scaleX: 0.75 /* s2 */,
            scaleY: 0.75 /* s2 */,
            alpha: 1 /* alpha2 */
        }, 80 /* sp2 */, egret.Ease.circInOut).to({
            scaleX: 0.6 /* s3 */,
            scaleY: 0.6 /* s3 */,
            alpha: 0.9 /* alpha3 */
        }, 80 /* sp3 */, egret.Ease.sineIn).wait(100).to({
            alpha: 0.6 /* alpha6 */,
            y: floatTarger.y + 10 /* posY6 */,
            x: floatTarger.x + -18 /* posX6 */,
            scaleX: 0.6 /* s6 */,
            scaleY: 0.6 /* s6 */
        }, 600 /* sp6 */).to({
            alpha: 0.5 /* alpha7 */,
            y: floatTarger.y + 13 /* posY7 */,
            x: floatTarger.x + -20 /* posX7 */,
            scaleX: 0.6 /* s7 */,
            scaleY: 0.6 /* s7 */
        }, 200 /* sp7 */).to({
            alpha: 0.4 /* alpha8 */,
            y: floatTarger.y + 16 /* posY8 */,
            x: floatTarger.x + -23 /* posX8 */,
            scaleX: 0.6 /* s8 */,
            scaleY: 0.6 /* s8 */
        }, 400 /* sp8 */).to({
            alpha: 0 /* alpha9 */,
            y: floatTarger.y + 20 /* posY9 */,
            x: floatTarger.x + -30 /* posX9 */,
            scaleX: 0.6 /* s9 */,
            scaleY: 0.6 /* s9 */
        }, 400 /* sp9 */).to({
            alpha: 0 /* alpha5 */,
            y: floatTarger.y + 10 /* posY4 */,
            scaleX: 0.6 /* s5 */,
            scaleY: 0.6 /* s5 */
        }, 720 /* sp5 */, egret.Ease.sineIn).call(this.removeFloatTarget, this, [floatTarger]);
    };
    /**
     * 漂浮
     * @param floatTarger  漂浮对象池
     * @param type 漂浮对象
     * @param target    飘血目标
     * @param source    伤害源
     * @param isAddDamage  伤害源
     */
    DamageDisplay.prototype.floatImg = function (floatTarger, type, target, source, isAddDamage) {
        var tween = egret.Tween.get(floatTarger);
        if (source == null || target['team'] == 0 /* My */) {
            //主角是受击者
            if ((type & 2 /* TYPE2 */) == 2 /* TYPE2 */ || (type & 8 /* TYPE8 */) == 8 /* TYPE8 */) {
                this.injuredCritLucky(floatTarger, tween);
            }
            else {
                this.injured(floatTarger, tween);
            }
        }
        else {
            var isDeter = (type & 64 /* TYPE64 */) == 64 /* TYPE64 */ && source && source.isMy; //威慑
            var showBigDater = isDeter && (type & 2 /* TYPE2 */) == 2 /* TYPE2 */; //显示威慑(大字)
            var isMaster = (type & 1024 /* TYPE1024 */) == 1024 /* TYPE1024 */ && source && source.isMy; //主宰
            var state = isMaster && ((type & 2 /* TYPE2 */) == 2 /* TYPE2 */ || (type & 512 /* TYPE512 */) == 512 /* TYPE512 */);
            if (state || showBigDater || (type & 2 /* TYPE2 */) == 2 /* TYPE2 */ || (type & 8 /* TYPE8 */) == 8 /* TYPE8 */) {
                this.atkCritLucky(floatTarger, tween);
            }
            else if ((type & 16 /* TYPE16 */) == 16 /* TYPE16 */ || (type & 2048 /* TYPE2048 */) == 2048 /* TYPE2048 */) {
                this.atkHeJi(floatTarger, tween);
            }
            else {
                this.atk(floatTarger, tween);
            }
        }
    };
    DamageDisplay.prototype.destroyDamageObj = function (damage) {
        damage.x = 0;
        damage.y = 0;
        damage.alpha = 1;
        damage.scaleX = damage.scaleY = 1;
        damage.touchChildren = true;
        if (damage instanceof DamageContainer) {
            damage.destroy();
        }
        else {
            BitmapNumber.ins().desstroyNumPic(damage);
        }
        var index = this.tempdamageViews.indexOf(damage);
        if (index != -1) {
            this.tempdamageViews.splice(index, 1);
        }
    };
    return DamageDisplay;
}(BaseLeakDisplay));
__reflect(DamageDisplay.prototype, "DamageDisplay");
/**
 * 地图网格
 */
var MapControl = (function () {
    function MapControl() {
    }
    /**
     * 初始化
     */
    MapControl.init = function (data) {
        this.aStar = this.aStar || new AStar;
        this.mapDatas = data;
    };
    /**
     * 移动实体
     * @param entity
     * @param endX
     * @param endY
     */
    MapControl.moveEntity = function (entity, endX, endY, isStraightLine) {
        if (isStraightLine === void 0) { isStraightLine = false; }
        var path;
        var size = MapControl.CELL_SIZE;
        var sx = Math.floor(entity.x / size);
        var sy = Math.floor(entity.y / size);
        var tx = Math.floor(endX / size);
        var ty = Math.floor(endY / size);
        if (isStraightLine) {
            path = [new AStarNode(endX, endY, DirUtils.get8DirBy2Point({ x: entity.x, y: entity.y }, {
                    x: endX,
                    y: endY
                }))];
        }
        else if (sx == tx && sy == ty) {
            path = [new AStarNode(tx, ty, DirUtils.get8DirBy2Point({ x: entity.x, y: entity.y }, {
                    x: endX,
                    y: endY
                }))];
        }
        else {
            path = this.aStar.findPatch(sx, sy, tx, ty);
            if (!path) {
                var desc = "Pathfinding error,mapId:" + MapControl.mapID + ",mapName:" + MapControl.getFileName() + ",sx:" + sx + ",sy:" + sy + ",tx:" + tx + ",ty:" + ty;
                debug.log(desc);
                // ReportData.getIns().reportClientErrorLog("MapError", desc);
                return;
            }
        }
        gameControl.dispatchMoveEntity(entity, path, !isStraightLine);
    };
    /**
     * 获取一个路径参数为网格坐标
     * @param fromX
     * @param fromY
     * @param targetX
     * @param targetY
     */
    MapControl.getPatch = function (fromX, fromY, targetX, targetY) {
        return this.aStar.findPatch(fromX, fromY, targetX, targetY);
        ;
    };
    /**
     * 全体人员去到某个点
     * @param tx
     * @param ty
     * @param fun
     * @param funThis
     */
    MapControl.myMoveTo = function (tx, ty, fun, funThis) {
        var _this = this;
        var len = heroControl.subRolesLen;
        var char;
        for (var i = 0; i < len; i++) {
            char = UnitMgr.ins().getMainRole(i);
            if (char)
                this.moveEntity(char, tx, ty);
        }
        var tempFunc = function () {
            var isCom = true;
            for (var i = 0; i < len; i++) {
                char = UnitMgr.ins().getMainRole(i);
                if (char && char.action == UnitAction.RUN) {
                    if (MathUtils.getDistance(char.x, char.y, tx, ty) < 100) {
                        char.stopMove();
                        char.playAction(UnitAction.STAND);
                    }
                    isCom = false;
                }
            }
            if (isCom) {
                TimerMgr.ins().remove(tempFunc, _this);
                fun && fun.call(funThis);
            }
        };
        TimerMgr.ins().doTimer(500, 0, tempFunc, this);
    };
    //最后一个点是随机坐标
    MapControl.moveTo = function (endX, endY) {
        var size = MapControl.CELL_SIZE;
        var tx = Math.floor(endX / size);
        var ty = Math.floor(endY / size);
        ClientStorage.ins().setValue("mapClickTx", tx);
        ClientStorage.ins().setValue("mapClickTy", ty);
        if (!this.aStar.isWalkable(tx, ty)) {
            return false;
        }
        var role = UnitMgr.ins().getNoDieRole();
        if (!role) {
            return false;
        }
        //如果被麻痹，也不可移动
        if (role.hasFilter(1 /* hard */)) {
            tipsControl.showTips(LangMgr.getValueByKey('mapNoMove'));
            return false;
        }
        var sx = Math.floor(role.x / size);
        var sy = Math.floor(role.y / size);
        var path = this.aStar.findPatch(sx, sy, tx, ty);
        if (!path || path.length == 0) {
            return false;
        }
        var lastNode = path[0];
        lastNode.x = endX;
        lastNode.y = endY;
        gameControl.upFindPathToServer(role.infoModel.handle, path, false);
        return true;
    };
    MapControl.parser = function (copyId, mapId, mapX, mapY, copyType, copyName, copyDesc) {
        this.lastCopyId = this.copyId;
        this.copyId = copyId;
        this.mapID = mapId;
        this.mapX = mapX;
        this.mapY = mapY;
        this.lastCopyTyp = this.copyType;
        this.copyType = copyType;
        this.copyName = copyName;
        this.copyDesc = copyDesc;
        var mapName = this.getFileName();
        debug.log("MapId:", this.mapID, "CopyId:", this.copyId, "CopyType:", this.copyType, "MapName:", mapName);
        var mapkey = mapName.substr(3);
        var mapData = this.mapDatas[mapkey];
        if (typeof mapData == "string") {
            try {
                mapData = JSON.parse(mapData);
                this.mapDatas[mapkey] = mapData;
            }
            catch (error) {
                ReportData.getIns().reportClientErrorLog("JsonError", mapName);
            }
        }
        this.CELL_SIZE = mapData.titleSize;
        this.MAX_WIDTH = mapData.mapWidth;
        this.MAX_HEIGHT = mapData.mapHeight;
        this.COL = mapData.mapCol;
        this.ROW = mapData.mapRow;
        this.aStar.init(mapData, MapControl.getTurn());
        this.initArea();
    };
    MapControl.initArea = function () {
        this.safetyZone = {};
        this.areaData = {};
        this.areaValue = {};
        var scenesConfig = DataCenter.ins().ScenesConfig[this.mapID];
        for (var i = 0; scenesConfig.area && i < scenesConfig.area.length; i++) {
            var areaCfg = scenesConfig.area[i];
            var areaAttr = areaCfg.attr;
            for (var j = 0; j < areaAttr.length; j++) {
                switch (areaAttr[j].type) {
                    case 0 /* Safe */:
                        this.safetyZone[i] = {};
                        this.areaStore(this.safetyZone[i], areaCfg, 0 /* Safe */);
                        break;
                    case 3 /* KFGuildBoss */:
                    case 5 /* TutengBoss */:
                        var iparm = areaAttr[j].iparm;
                        for (var k = 0; k < iparm.length; k++) {
                            this.areaData[iparm[k]] = {};
                            this.areaStore(this.areaData[iparm[k]], areaCfg, iparm[k]);
                        }
                        break;
                }
            }
        }
    };
    MapControl.areaStore = function (areaData, area, areaType) {
        var grids = area.grids;
        var left = Number.MAX_VALUE;
        var top = Number.MAX_VALUE;
        var right = Number.MIN_VALUE;
        var bottom = Number.MIN_VALUE;
        areaData.grids = {};
        for (var i = 0; i < grids.length; i++) {
            var point1 = grids[i];
            var point2 = grids.length == i + 1 ? grids[0] : grids[i + 1];
            var points = Bresenham.lineGrids(point1.x, point1.y, point2.x, point2.y);
            for (var j = 0; j < points.length; j += 2) {
                var x = points[j];
                var y = points[j + 1];
                areaData.grids[y * MapControl.CELL_SIZE + x] = {
                    x: x,
                    y: y,
                    iparm: area.iparm
                };
            }
            left = Math.min(point1.x, left);
            right = Math.max(point1.x, right);
            top = Math.min(point1.y, top);
            bottom = Math.max(point1.y, bottom);
        }
        areaData.left = left;
        areaData.right = right;
        areaData.top = top;
        areaData.bottom = bottom;
    };
    /***
     * 检查是否在安全区
     */
    MapControl.checkSafety = function (point) {
        for (var key in this.safetyZone) {
            if (this.checkAreaById(point, +key, this.safetyZone)) {
                return true;
            }
        }
        return false;
    };
    MapControl.checkAreaById = function (point, id, safetyZone) {
        if (!safetyZone) {
            safetyZone = this.areaData;
        }
        if (!safetyZone[id]) {
            return false;
        }
        var key = point.y * MapControl.CELL_SIZE + point.x + "_" + id;
        if (this.areaValue[key] != undefined) {
            return this.areaValue[key];
        }
        var left = safetyZone[id].left;
        var right = safetyZone[id].right;
        var top = safetyZone[id].top;
        var bottom = safetyZone[id].bottom;
        if (point.x < left || point.x > right || point.y < top || point.y > bottom) {
            return false;
        }
        var grids = safetyZone[id].grids;
        if (point.y == top || point.y == bottom) {
            this.areaValue[key] = !!grids[point.y * MapControl.CELL_SIZE + point.x];
            return this.areaValue[key];
        }
        var state = false;
        for (var i = point.x; right >= i; i++) {
            if (grids[point.y * MapControl.CELL_SIZE + i]) {
                for (var j = 0; right - i + 2 >= j; j++) {
                    if (!grids[point.y * MapControl.CELL_SIZE + i + j] && j > 0) {
                        i += j;
                        break;
                    }
                }
                state = !state;
            }
        }
        this.areaValue[key] = state || !!grids[point.y * MapControl.CELL_SIZE + point.x];
        return this.areaValue[key];
    };
    Object.defineProperty(MapControl, "copyId", {
        get: function () {
            return this._copyId;
        },
        set: function (value) {
            this._copyId = value;
            if (value > 0) {
                gameControl.dispatchHookStateChange(GameControl.HOOK_STATE_HOOK);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 挂机场景
     */
    MapControl.sceneInHook = function () {
        return MapControl.copyType == 0 && MapControl.copyId == 0;
    };
    MapControl.getFileName = function () {
        var scenesConfig = DataCenter.ins().ScenesConfig[this.mapID];
        if (scenesConfig.filename) {
            var days = [];
            for (var day in scenesConfig.filename) {
                days.push(+day);
            }
            days.sort(function (t, e) {
                return e >= t ? 0 : 1;
            });
            var serverDay = GameServer.serverOpenDay + 1;
            for (var i = 0; i < days.length; i++) {
                if (serverDay >= days[i] && (undefined == days[i + 1] || days[i + 1] > serverDay)) {
                    return scenesConfig.filename[days[i]];
                }
            }
        }
        return DataCenter.ins().ScenesConfig[this.mapID].mapfilename;
    };
    /**
     * 是否反转
     */
    MapControl.getTurn = function () {
        return DataCenter.ins().ScenesConfig[this.mapID].turn;
    };
    /**
     * 是否自动合击
     */
    MapControl.autoPunch = function () {
        return DataCenter.ins().ScenesConfig[this.mapID].autoPunch == 1;
    };
    /**
     * 是否可以协助
     */
    MapControl.canHelp = function () {
        return DataCenter.ins().ScenesConfig[this.mapID].helpBtn == 1 && MapControl.copyType != 59 /* HATRED */;
    };
    /** 获取相对于目标的坐标矩形 */
    MapControl.getRectangle = function (target, x, y) {
        var _x = target.x + (x - 0.5) * MapControl.CELL_SIZE;
        var _y = target.y + (y - 0.5) * MapControl.CELL_SIZE;
        return new egret.Rectangle(_x, _y, MapControl.CELL_SIZE, MapControl.CELL_SIZE);
    };
    /**
     * 获取坐标内的怪物列表
     */
    MapControl.getIncludeElement = function (target, points, charList) {
        var list = [];
        for (var k in points) {
            var re = MapControl.getRectangle(target, points[k].x, points[k].y);
            for (var p in charList) {
                var char = charList[p];
                if (char.x >= re.x && char.y >= re.y && char.x < re.x + re.width && char.y < re.y + re.height) {
                    list.push(char);
                }
            }
        }
        return list;
    };
    /**
     * 通过下标及长宽获取相对坐标
     * @param index
     * @param w
     * @param h
     * @returns {egret.Point}
     */
    MapControl.getPoint = function (index, w, h) {
        var y = Math.floor(index / w) - Math.floor(h / 2);
        var x = Math.floor(index % w) - Math.floor(w / 2);
        return new egret.Point(x, y);
    };
    /**
     * 获取目标的下标
     * @param sour
     * @param target
     * @param width
     * @param height
     * @returns {number}
     */
    MapControl.getTargetIndex = function (sour, target, width, height) {
        var aX = target.x - sour.x + MapControl.CELL_SIZE * (width / 2);
        var aY = target.y - sour.y + MapControl.CELL_SIZE * (height / 2);
        var x = Math.floor(aX / MapControl.CELL_SIZE);
        var y = Math.floor(aY / MapControl.CELL_SIZE);
        return width * y + x;
    };
    /**
     * 检查移动
     */
    MapControl.checkWalkableByPixel = function (x, y) {
        var mapX = Math.floor(x / MapControl.CELL_SIZE);
        var mapY = Math.floor(y / MapControl.CELL_SIZE);
        return MapControl.aStar.isWalkable(mapX, mapY);
    };
    /**
     * 返回随机一个在>=range范围的格子
     * @param px 格子x
     * @param py 格子y
     * @param range 多少格子范围外的
     * @returns {any}
     */
    MapControl.getPosRange = function (px, py, range) {
        var _x = MathUtils.limitInteger(-range, +range);
        var _y = MathUtils.limitInteger(-range, +range);
        if (+_x != +range) {
            _y = Math.random() < 0.5 ? -range : range;
        }
        var count = 0;
        var i = _x, j = _y;
        while (true) {
            var walk = MapControl.aStar.isWalkable(px + i, py + j);
            if (walk) {
                return [px + i, py + j];
            }
            //格子顺时针检查
            if (i == range && j < range) {
                j += 1;
            }
            else if (j == range && i > -range) {
                i -= 1;
            }
            else if (i == -range && j > -range) {
                j -= 1;
            }
            else if (j == -range && i < range) {
                i += 1;
            }
            if (i == _x && j == _y) {
                if (_x == range) {
                    i = _x = range + 1;
                }
                if (_x == -range) {
                    i = _x = -range - 1;
                }
                if (_y == range) {
                    j = _y = range + 1;
                }
                if (_y == -range) {
                    j = _y = -range - 1;
                }
                range += 1;
            }
            count += 1;
            if (count > 100) {
                break;
            }
        }
        return [px, py];
    };
    //获取当前方向（dir）距离（px,py） （range）个格子的 格子
    MapControl.getPosRangeByDir = function (px, py, dir, range) {
        var _px = px, _py = py;
        if ((dir >= 0 && dir <= 1) || dir == 7) {
            _py -= range;
        }
        if (dir >= 3 && dir <= 5) {
            _py += range;
        }
        if (dir >= 1 && dir <= 3) {
            _px += range;
        }
        if (dir >= 5 && dir <= 7) {
            _px -= range;
        }
        return [_px, _py, MapControl.aStar.isWalkable(_px, _py)];
    };
    /**
     * 获取目标点到方向格子的格子
     * @param x 目标点
     * @param y 目标点
     * @param dir 目标点（x,y)到当前点（需要求的）的方向
     * @returns {any[]}
     */
    MapControl.getPosRangeRandom = function (x, y, dir, range) {
        if (range === void 0) { range = 1; }
        var px = MapControl.point2Grip(x);
        var py = MapControl.point2Grip(y);
        var arr = [dir];
        var random = Math.random();
        if (random > 0.66) {
            dir = dir - 1 < 0 ? 7 : dir - 1;
            arr.unshift(dir);
            if (random > 0.8) {
                arr.push((dir + 2) % 8);
            }
            else {
                arr.splice(1, 0, (dir + 2) % 8);
            }
        }
        else if (random > 0.33) {
            dir = dir + 1 > 7 ? 0 : dir + 1;
            arr.unshift(dir);
            if (random > 0.5) {
                arr.push((dir - 2 + 8) % 8);
            }
            else {
                arr.splice(1, 0, (dir - 2 + 8) % 8);
            }
        }
        var isGetPoint = false;
        var pos;
        for (var i = 0; i < arr.length; i++) {
            pos = MapControl.getPosRangeByDir(px, py, arr[i], range);
            if (pos[2]) {
                isGetPoint = true;
                break;
            }
        }
        if (!isGetPoint) {
            pos = MapControl.getPosRange(px, py, range);
        }
        return pos;
    };
    MapControl.point2Grip = function (x) {
        return Math.floor(x / MapControl.CELL_SIZE);
    };
    MapControl.grip2Point = function (px) {
        return px * MapControl.CELL_SIZE + (MapControl.CELL_SIZE >> 1);
    };
    /** 副本类型 */
    MapControl.copyType = 0;
    MapControl.lastCopyTyp = 0;
    MapControl.lastCopyId = 0;
    return MapControl;
}());
__reflect(MapControl.prototype, "MapControl");
/**
 * 地图渲染
 */
var MapDisplay = (function (_super) {
    __extends(MapDisplay, _super);
    function MapDisplay() {
        var _this = _super.call(this) || this;
        _this.sceneEff = {};
        _this.moveObjDic = {};
        _this.ignoreLeak = true;
        _this.touchEnabled = true;
        _this.touchChildren = true;
        _this.addEventListener(egret.TouchEvent.TOUCH_TAP, _this.onGridClick, _this);
        egret.startTick(_this.onEnterFrame, _this);
        return _this;
    }
    MapDisplay.prototype.initMap = function () {
        var _this = this;
        this._stepIndex = {};
        this._mapTile = new MapTile();
        this.addChild(this._mapTile);
        this._dropItemDisplay = new egret.DisplayObjectContainer;
        this.addChild(this._dropItemDisplay);
        this._skillBackDisplay = new egret.DisplayObjectContainer;
        this.addChild(this._skillBackDisplay);
        this._entityDisplay = new egret.DisplayObjectContainer;
        this.addChild(this._entityDisplay);
        this._dropItemNameDisplay = new egret.DisplayObjectContainer;
        this.addChild(this._dropItemNameDisplay);
        this._skillTopDisplay = new egret.DisplayObjectContainer;
        this.addChild(this._skillTopDisplay);
        this._damageDisplay = new DamageDisplay;
        this.addChild(this._damageDisplay);
        SkillEffPlayDisplay.bottomLayer = this._skillBackDisplay;
        SkillEffPlayDisplay.topLayer = this._skillTopDisplay;
        SkillEffPlayDisplay.setTimeout = function (time, fun, funThis) {
            TimerMgr.ins().doTimer(time, 1, fun, funThis);
        };
        SkillEffPlayDisplay.shake = function (e, range, time, count, probability) {
            probability = probability || 1;
            if (e == UnitMgr.ins().getMainRole(0) && (Math.random() < probability)) {
                DisplayUtils.shakeIt(_this._mapTile, range, time, count);
            }
        };
        //初始化掉落物品相关结构
        DropControl.init(this._dropItemDisplay, this._dropItemNameDisplay);
        //定时排序实体层
        TimerMgr.ins().doTimer(500, 0, this.sortEntity, this);
    };
    MapDisplay.prototype.sortEntity = function () {
        this._entityDisplay.$children.sort(this.sortF);
    };
    MapDisplay.prototype.sortF = function (d1, d2) {
        if (d1.weight > d2.weight) {
            return 1;
        }
        else if (d1.weight < d2.weight) {
            return -1;
        }
        else {
            return 0;
        }
    };
    MapDisplay.prototype.addEntity = function (entity) {
        this._entityDisplay.addChild(entity);
    };
    MapDisplay.prototype.removeEntity = function (entity) {
        if (entity && entity.parent) {
            this._entityDisplay.removeChild(entity);
        }
    };
    /**
     * 移动实体
     */
    MapDisplay.prototype.moveEntity = function (param) {
        var entity = param[0];
        var path = param[1];
        var isGrip = param[2] == undefined ? true : !!param[2];
        if (path && path.length) {
            this._stepIndex[entity.hashCode] = path.length - 1;
            this.moveNextStep(entity, path, isGrip);
        }
        else {
            entity.playAction(UnitAction.STAND);
        }
    };
    MapDisplay.moveComplete = function (unit) {
        EventMgr.ins().dispatch(6 /* MAP_MOVE_COMPLETE */, unit);
    };
    MapDisplay.prototype.moveNextStep = function (entity, path, isGrid) {
        if (isGrid === void 0) { isGrid = true; }
        entity.stopMove();
        if (entity.action == UnitAction.DIE)
            return;
        if (this._stepIndex[entity.hashCode] < 0) {
            delete this._stepIndex[entity.hashCode];
            entity.playAction(UnitAction.STAND);
            MapDisplay.moveComplete(entity);
            return;
        }
        var node = path[this._stepIndex[entity.hashCode]];
        if (node) {
            var nextPoint = { x: 0, y: 0 };
            var dir = node.dir;
            if (isGrid) {
                nextPoint.x = MapControl.grip2Point(node.x);
                nextPoint.y = MapControl.grip2Point(node.y);
            }
            else {
                nextPoint.x = node.x;
                nextPoint.y = node.y;
            }
            if (entity instanceof UnitRole || (entity.infoModel.dirNum != 2)) {
                dir = DirUtils.get8DirBy2Point(entity, nextPoint);
            }
            else {
                dir = DirUtils.get4DirBy2Point(entity, nextPoint);
            }
            entity.dir = dir;
            entity.playAction(UnitAction.RUN);
            this.moveToPoint(entity, nextPoint, path, isGrid);
        }
    };
    MapDisplay.prototype.moveToPoint = function (entity, nextPoint, path, isGrid) {
        var isMainRole = entity == UnitMgr.ins().getNoDieRole();
        var curTime = egret.getTimer();
        var obj = this.moveObjDic[entity.hashCode];
        var timeGap = 0;
        if (obj && curTime > obj.total) {
            timeGap = obj.total - curTime;
        }
        entity.canMove = true;
        var vec = {
            x: nextPoint.x - entity.x,
            y: nextPoint.y - entity.y
        };
        //每秒200像素的移动速度
        var moveSpeed = entity.moveSpeed / 1000;
        var xb = Math.sqrt(vec.x * vec.x + vec.y * vec.y);
        var total = xb / moveSpeed;
        //每毫秒跑的速度
        vec.x = vec.x / total;
        vec.y = vec.y / total;
        var newObj = {
            entity: entity,
            endPoint: nextPoint,
            vec: vec,
            path: path,
            isGrid: isGrid,
            time: curTime + timeGap,
            total: curTime + total + timeGap,
            isMainRole: isMainRole
        };
        this.moveObjDic[entity.hashCode] = newObj;
        if (timeGap < 0) {
            this.moveObj(newObj, curTime);
        }
        if (isMainRole) {
            SoundUtils.ins().playRun();
        }
    };
    MapDisplay.prototype.onEnterFrame = function (dt) {
        for (var hashCode in this.moveObjDic) {
            var obj = this.moveObjDic[hashCode];
            if (!obj.entity.canMove) {
                delete this.moveObjDic[hashCode];
            }
            else {
                this.moveObj(this.moveObjDic[hashCode], egret.getTimer());
            }
        }
        return false;
    };
    MapDisplay.prototype.moveObj = function (obj, curTime) {
        var entity = obj.entity;
        if (curTime >= obj.total) {
            entity.x = obj.endPoint.x;
            entity.y = obj.endPoint.y;
            this.onChange(obj);
            this.onComplete(obj);
        }
        else {
            var time = curTime - obj.time;
            var addX = obj.vec.x * time;
            var addY = obj.vec.y * time;
            obj.time = curTime;
            entity.x += addX;
            entity.y += addY;
            this.onChange(obj);
        }
    };
    MapDisplay.prototype.onChange = function (obj) {
        var entity = obj.entity;
        var sx = MapControl.point2Grip(entity.x);
        var sy = MapControl.point2Grip(entity.y);
        entity.alpha = MapControl.aStar.isAlpha(sx, sy) ? 0.7 : 1;
        if (obj.isMainRole) {
            this.lookAt(entity.x, entity.y);
        }
    };
    MapDisplay.prototype.onComplete = function (obj) {
        var hashCode = obj.entity.hashCode;
        this._stepIndex[hashCode]--;
        if (this._stepIndex[hashCode] < 0) {
            delete this.moveObjDic[hashCode];
        }
        this.moveNextStep(obj.entity, obj.path, obj.isGrid);
    };
    MapDisplay.prototype.onGridClick = function (e) {
        EventMgr.ins().dispatch(7 /* MAP_GRID_CLICK */, { target: e.target, x: e.stageX - e.currentTarget.x, y: e.stageY - e.currentTarget.y });
    };
    /**
     * 移动镜头
     * @param x 镜头中心X
     * @param y 镜头中心Y
     * @param force 是否强制执行
     */
    MapDisplay.prototype.lookAt = function (x, y, force) {
        if (force === void 0) { force = false; }
        var sw = StageUtils.ins().getWidth();
        var sh = StageUtils.ins().getHeight();
        var fun = this.minValue;
        this.x = fun(x * this.scaleX, sw, MapControl.MAX_WIDTH);
        this.y = fun(y * this.scaleY, sh, MapControl.MAX_HEIGHT, 60);
        this._mapTile.updateHDMap({
            x: fun(x, sw / this.scaleX, MapControl.MAX_WIDTH),
            y: fun(y, sh / this.scaleY, MapControl.MAX_HEIGHT, 60)
        }, force);
    };
    MapDisplay.prototype.minValue = function (tx, stw, mv, offset) {
        if (offset === void 0) { offset = 0; }
        return -Math.min(Math.max(tx - offset - (stw >> 1), 0), mv - stw);
    };
    /**
     * 切换地图会清除场景上的所有显示
     */
    MapDisplay.prototype.changeMap = function () {
        if (MapDisplay.DRAW_GRID) {
            this.drawGrid();
        }
        else if (this._shapeContainer && this._shapeContainer.parent) {
            this.removeChild(this._shapeContainer);
        }
        egret.Tween.removeTweens(this);
        egret.Tween.removeTweens(this._mapTile);
        this._mapTile.initThumbnail(MapControl.MAX_WIDTH, MapControl.MAX_HEIGHT, MapControl.getFileName(), MapControl.getTurn());
        var sc = DataCenter.ins().ScenesConfig[MapControl.mapID];
        for (var i = 0; sc.effPos && i < sc.effPos.length; i++) {
            var effPos = sc.effPos[i];
            effPos.type = effPos.type ? effPos.type : 0;
            this.sceneEff[effPos.type] = [];
            var len = effPos.pos.length;
            for (var j = 0; j < len; j++) {
                var ep = effPos.pos[j];
                var mc = ObjectPool.pop("GameMovieClip");
                mc.playFile(PATH_EFF + effPos.eff, -1);
                mc.x = ep.x;
                mc.y = ep.y;
                this._skillBackDisplay.addChild(mc);
                this.sceneEff[effPos.type].push(mc);
            }
        }
        this.createNpc();
        this.addEvents();
        this.lookAt(MapControl.mapX, MapControl.mapY, true);
    };
    MapDisplay.prototype.addEvents = function () {
        var _this = this;
        EventMgr.ins().removeAll(this);
        EventMgr.addListener(367 /* MOVE_ENTITY */, this.moveEntity, this);
        EventMgr.addListener(357 /* MOVE_CAMERA */, function (_a) {
            var x = _a[0], y = _a[1], mapId = _a[2], fbId = _a[3];
            if (mapId == MapControl.mapID && fbId == MapControl.copyId) {
                _this.lookAt(x, y);
            }
        }, this);
        EventMgr.addListener(471 /* ADJUST_MAP_POS */, this.adjustMapPos, this);
    };
    /**
     * 调整地图坐标
     */
    MapDisplay.prototype.adjustMapPos = function () {
        this.x = this.x >> 0;
        this.y = this.y >> 0;
    };
    MapDisplay.prototype.createNpc = function () {
        var scenesConfig = DataCenter.ins().ScenesConfig[MapControl.mapID];
        var npcBaseConfigs = DataCenter.ins().NpcBaseConfig;
        var spokesOpen = spokesPersonControl.checkNpcOpen();
        if (scenesConfig.npc) {
            for (var i = 0; i < scenesConfig.npc.length; i++) {
                if (spokesOpen && scenesConfig.insteadNpc && scenesConfig.insteadNpc[scenesConfig.npc[i].id]) {
                    UnitMgr.ins().createNpc(scenesConfig.insteadNpc[scenesConfig.npc[i].id]);
                }
                else if (!npcBaseConfigs[scenesConfig.npc[i].id] || 1 != npcBaseConfigs[scenesConfig.npc[i].id].isLoopTask) {
                    UnitMgr.ins().createNpc(scenesConfig.npc[i]);
                }
            }
        }
        if (spokesOpen) {
            var npcs = spokesPersonControl.getNpcs();
            if (npcs) {
                for (var i = 0; i < npcs.length; i++) {
                    UnitMgr.ins().createNpc(npcs[i]);
                }
            }
        }
    };
    MapDisplay.prototype.drawGrid = function () {
        var rect = this._shape || new egret.Shape();
        this._shapeContainer = this._shapeContainer || new egret.DisplayObjectContainer();
        this._shapeContainer.cacheAsBitmap = true;
        this._shapeContainer.touchEnabled = false;
        this._shapeContainer.touchChildren = false;
        rect.graphics.clear();
        rect.graphics.lineStyle(0.1);
        var maxX = MapControl.COL;
        var maxY = MapControl.ROW;
        for (var i = 0; i < maxX; i++) {
            for (var j = 0; j < maxY; j++) {
                if (MapControl.aStar.isAlpha(i, j)) {
                    rect.graphics.beginFill(ColorUtils.GREEN, 0.3);
                }
                else if (MapControl.aStar.isWalkable(i, j)) {
                    rect.graphics.beginFill(LangMgr.getColor('color47'), 0.3);
                }
                else {
                    rect.graphics.beginFill(ColorUtils.RED, 0.3);
                }
                rect.graphics.drawRect(i * MapControl.CELL_SIZE, j * MapControl.CELL_SIZE, MapControl.CELL_SIZE, MapControl.CELL_SIZE);
                rect.graphics.endFill();
                var text = new eui.Label();
                text.size = 12;
                text.text = i + "," + j;
                text.x = i * MapControl.CELL_SIZE;
                text.y = j * MapControl.CELL_SIZE;
                this._shapeContainer.addChild(text);
            }
        }
        this._shapeContainer.addChild(rect);
        this.addChild(this._shapeContainer);
        this._shape = rect;
    };
    MapDisplay.prototype.clearAllLayer = function () {
        this._skillBackDisplay.removeChildren();
        this._skillTopDisplay.removeChildren();
        this._damageDisplay.removeChildren();
        this._entityDisplay.removeChildren();
    };
    MapDisplay.DRAW_GRID = false;
    return MapDisplay;
}(BaseLeakDisplay));
__reflect(MapDisplay.prototype, "MapDisplay");
/**
 * 地图块
 */
var MapTile = (function (_super) {
    __extends(MapTile, _super);
    function MapTile() {
        var _this = _super.call(this) || this;
        _this.lastUpdateX = 0;
        _this.lastUpdateY = 0;
        _this.turn = 0;
        _this.touchChildren = false;
        _this.touchEnabled = false;
        _this._imageList = [];
        _this.showImages = [];
        _this._poolImages = [];
        _this._fileDic = {};
        var thumbnail = new eui.Image();
        _this.addChild(thumbnail);
        _this.thumbnail = thumbnail;
        _this.thumbnail.addEventListener(egret.Event.COMPLETE, _this.onThumbnailComplete, _this);
        return _this;
    }
    MapTile.prototype.destructor = function () {
        this.thumbnail.removeEventListener(egret.Event.COMPLETE, this.onThumbnailComplete, this);
        this.removeChildren();
        this._imageList.length = 0;
    };
    MapTile.prototype.onThumbnailComplete = function (e) {
        this.isThumbnailComplete = true;
        if (e.target && e.target.name == this.mapName) {
            this.updateHDMap({ x: this.lastUpdateX, y: this.lastUpdateY }, true);
        }
    };
    MapTile.prototype.initThumbnail = function (w, h, fName, turn) {
        if (this.mapName != fName) {
            this.isThumbnailComplete = false;
        }
        if (this.mapName != fName || this.turn != turn) {
            this.clearHDMap();
        }
        if (this.mapName != fName) {
            this.destroyFile();
        }
        this.mapName = fName;
        this.turn = turn;
        this.thumbnail.width = w;
        this.thumbnail.height = h;
        var thumbnailSmallPath = "" + PATH_MAP + this.mapName + "/small.jpg";
        this.thumbnail.source = thumbnailSmallPath;
        this.thumbnail.scaleX = turn ? -1 : 1;
        this.thumbnail.x = turn ? w : 0;
        this.thumbnail.name = this.mapName;
        if (RES.hasRes(thumbnailSmallPath)) {
            this.isThumbnailComplete = true;
        }
        var imgSize = 256;
        this.maxImagX = Math.floor(w / imgSize);
        this.maxImagY = Math.floor(h / imgSize);
        this.updateHDMap({ x: this.lastUpdateX, y: this.lastUpdateY }, true);
    };
    MapTile.prototype.clearHDMap = function () {
        this._imageList = [];
        this.showImages = [];
        this.removeChildren();
        this.addChild(this.thumbnail);
    };
    MapTile.prototype.destroyFile = function () {
        RecycleMgr.ins().destroyMapFile(this._fileDic);
        this._fileDic = {};
    };
    MapTile.prototype.getImage = function () {
        return this._poolImages.pop() || new eui.Image();
    };
    MapTile.prototype.updateHDMap = function (p, force) {
        if (force === void 0) { force = false; }
        var imgSize = 256;
        if (force || Math.abs(this.lastUpdateX - p.x) > imgSize / 4 || Math.abs(this.lastUpdateY - p.y) > imgSize / 4 || this.lastUpdateX == 0) {
            this.lastUpdateX = p.x;
            this.lastUpdateY = p.y;
            if (!this.isThumbnailComplete) {
                return;
            }
            var shows = [];
            var ww = StageUtils.ins().getWidth();
            var hh = StageUtils.ins().getHeight();
            var imgX = Math.max(Math.floor(-p.x / imgSize - 0.5), 0);
            var imgY = Math.max(Math.floor(-p.y / imgSize - 0.5), 0);
            var imgXCount = imgX + Math.ceil(ww / imgSize + 0.5);
            var imgYCount = imgY + Math.ceil(hh / imgSize + 0.5);
            if (this.turn) {
                for (var i = imgX; i <= imgXCount && i < this.maxImagX; i++) {
                    var index = this.maxImagX - i > 0 ? this.maxImagX - i - 1 : 0;
                    for (var j = imgY; j <= imgYCount && j < this.maxImagY; j++) {
                        this._imageList[j] = this._imageList[j] || [];
                        if (!this._imageList[j][index]) {
                            var sourceName = "" + PATH_MAP + this.mapName + "/image/" + j + "_" + index + ".jpg";
                            this._fileDic[sourceName] = 1;
                            var img = this.getImage();
                            img.source = sourceName;
                            img.name = sourceName;
                            img.scaleX = -1;
                            img.x = (i + 1) * imgSize;
                            img.y = j * imgSize;
                            this.addChild(img);
                            this._imageList[j][index] = img;
                        }
                        else {
                            if (!this._imageList[j][index].parent) {
                                this.addChild(this._imageList[j][index]);
                            }
                        }
                        shows.push(this._imageList[j][index]);
                    }
                }
            }
            else {
                for (var i = imgX; i <= imgXCount && i < this.maxImagX; i++) {
                    for (var j = imgY; j <= imgYCount && j < this.maxImagY; j++) {
                        this._imageList[j] = this._imageList[j] || [];
                        if (!this._imageList[j][i]) {
                            var sourceName = "" + PATH_MAP + this.mapName + "/image/" + j + "_" + i + ".jpg";
                            this._fileDic[sourceName] = 1;
                            var img = this.getImage();
                            img.source = sourceName;
                            img.name = sourceName;
                            img.x = i * imgSize;
                            img.y = j * imgSize;
                            this.addChild(img);
                            this._imageList[j][i] = img;
                        }
                        else {
                            if (!this._imageList[j][i].parent) {
                                this.addChild(this._imageList[j][i]);
                            }
                        }
                        shows.push(this._imageList[j][i]);
                    }
                }
            }
            var len = this.showImages.length;
            for (var i = len - 1; i >= 0; i--) {
                if (shows.indexOf(this.showImages[i]) >= 0) {
                    continue;
                }
                DisplayUtils.removeFromParent(this.showImages[i]);
            }
            this.showImages = shows;
        }
    };
    return MapTile;
}(egret.DisplayObjectContainer));
__reflect(MapTile.prototype, "MapTile");
var AnimaMgr = (function () {
    function AnimaMgr() {
    }
    AnimaMgr.play = function (eobj, aniType, others) {
        if (!AnimaMgr.checkObj(eobj)) {
            if (others && typeof (others.func) == "function")
                others.func();
            return;
        }
        var obj;
        var className = egret.getQualifiedClassName(eobj);
        switch (className) {
            case "eui.Button":
                obj = eobj;
                break;
            case "eui.ToggleButton":
                obj = eobj;
                break;
            case "eui.Image":
                obj = eobj;
                break;
            case "eui.Group":
                obj = eobj;
                break;
            case "eui.Rect":
                obj = eobj;
                break;
            case "BaseComponent":
                obj = eobj;
                break;
            case "eui.TabBar":
                obj = eobj;
                break;
            default:
                obj = eobj;
                break;
        }
        if (!obj)
            return;
        egret.Tween.removeTweens(obj);
        //起点x:
        var sx = NaN;
        var sxleft = NaN;
        var sxhro = NaN; //x轴
        var sxright = NaN;
        var sxscaleX = NaN;
        //终点x:
        var ex = NaN;
        var exleft = NaN;
        var exhro = NaN; //x轴
        var exright = NaN;
        var exscaleX = NaN;
        //起点y:
        var sy = NaN;
        var sytop = NaN;
        var syver = NaN; //y轴
        var sybot = NaN;
        var syscaleY = NaN;
        //终点y:
        var ey = NaN;
        var eytop = NaN;
        var eyver = NaN; //y轴
        var eybot = NaN;
        var eyscaleY = NaN;
        //透明度
        var salpha = NaN;
        var ealpha = NaN;
        switch (aniType) {
            case AnimaMgr.ANITYPE_FADEIN_LEFT_HOR:
                if (!isNaN(obj.left)) {
                    sxleft = obj.left - AnimaMgr.diff;
                    exleft = obj.left;
                }
                if (!isNaN(obj.horizontalCenter)) {
                    sxhro = obj.horizontalCenter - AnimaMgr.diff;
                    exhro = obj.horizontalCenter;
                }
                if (!isNaN(obj.right)) {
                    sxright = obj.right + AnimaMgr.diff;
                    exright = obj.right;
                }
                if (!isNaN(obj.alpha)) {
                    salpha = 0;
                    ealpha = obj.alpha;
                }
                if (!isNaN(obj.x)) {
                    sx = obj.x - AnimaMgr.diff;
                    ex = obj.x;
                }
                if (!isNaN(obj.scaleX)) {
                    sxscaleX = obj.scaleX;
                    exscaleX = obj.scaleX;
                }
                if (!isNaN(obj.scaleY)) {
                    syscaleY = obj.scaleY;
                    eyscaleY = obj.scaleY;
                }
                break;
            case AnimaMgr.ANITYPE_FADEIN_RIGHT_HOR:
                if (!isNaN(obj.left)) {
                    sxleft = obj.left + AnimaMgr.diff;
                    exleft = obj.left;
                }
                if (!isNaN(obj.horizontalCenter)) {
                    sxhro = obj.horizontalCenter + AnimaMgr.diff;
                    exhro = obj.horizontalCenter;
                }
                if (!isNaN(obj.right)) {
                    sxright = obj.right - AnimaMgr.diff;
                    exright = obj.right;
                }
                if (!isNaN(obj.alpha)) {
                    salpha = 0;
                    ealpha = obj.alpha;
                }
                if (!isNaN(obj.x)) {
                    sx = obj.x + AnimaMgr.diff;
                    ex = obj.x;
                }
                if (!isNaN(obj.scaleX)) {
                    sxscaleX = obj.scaleX;
                    exscaleX = obj.scaleX;
                }
                if (!isNaN(obj.scaleY)) {
                    syscaleY = obj.scaleY;
                    eyscaleY = obj.scaleY;
                }
                break;
            case AnimaMgr.ANITYPE_FADEIN_UP_VER:
                if (!isNaN(obj.top)) {
                    sytop = obj.top - AnimaMgr.diff;
                    eytop = obj.top;
                }
                if (!isNaN(obj.verticalCenter)) {
                    syver = obj.verticalCenter - AnimaMgr.diff;
                    eyver = obj.verticalCenter;
                }
                if (!isNaN(obj.bottom)) {
                    sybot = obj.bottom + AnimaMgr.diff;
                    eybot = obj.bottom;
                }
                if (!isNaN(obj.alpha)) {
                    salpha = 0;
                    ealpha = obj.alpha;
                }
                if (!isNaN(obj.y)) {
                    sy = obj.y - AnimaMgr.diff;
                    ey = obj.y;
                }
                if (!isNaN(obj.scaleX)) {
                    sxscaleX = obj.scaleX;
                    exscaleX = obj.scaleX;
                }
                if (!isNaN(obj.scaleY)) {
                    syscaleY = obj.scaleY;
                    eyscaleY = obj.scaleY;
                }
                break;
            case AnimaMgr.ANITYPE_FADEIN_DOWN_VER:
                if (!isNaN(obj.top)) {
                    sytop = obj.top + AnimaMgr.diff;
                    eytop = obj.top;
                }
                if (!isNaN(obj.verticalCenter)) {
                    syver = obj.verticalCenter + AnimaMgr.diff;
                    eyver = obj.verticalCenter;
                }
                if (!isNaN(obj.bottom)) {
                    sybot = obj.bottom - AnimaMgr.diff;
                    eybot = obj.bottom;
                }
                if (!isNaN(obj.alpha)) {
                    salpha = 0;
                    ealpha = obj.alpha;
                }
                if (!isNaN(obj.y)) {
                    sy = obj.y + AnimaMgr.diff;
                    ey = obj.y;
                }
                if (!isNaN(obj.scaleX)) {
                    sxscaleX = obj.scaleX;
                    exscaleX = obj.scaleX;
                }
                if (!isNaN(obj.scaleY)) {
                    syscaleY = obj.scaleY;
                    eyscaleY = obj.scaleY;
                }
                break;
            case AnimaMgr.ANITYPE_IN_LEFT_HOR:
                if (!isNaN(obj.left)) {
                    sxleft = obj.left - obj.width;
                    exleft = obj.left;
                }
                if (!isNaN(obj.horizontalCenter)) {
                    sxhro = obj.horizontalCenter - obj.width;
                    exhro = obj.horizontalCenter;
                }
                if (!isNaN(obj.right)) {
                    sxright = obj.right + obj.width;
                    exright = obj.right;
                }
                if (!isNaN(obj.alpha)) {
                    salpha = 0;
                    ealpha = obj.alpha;
                }
                if (!isNaN(obj.x)) {
                    sx = obj.x - obj.width;
                    ex = obj.x;
                }
                if (!isNaN(obj.scaleX)) {
                    sxscaleX = obj.scaleX;
                    exscaleX = obj.scaleX;
                }
                if (!isNaN(obj.scaleY)) {
                    syscaleY = obj.scaleY;
                    eyscaleY = obj.scaleY;
                }
                break;
            case AnimaMgr.ANITYPE_IN_RIGHT_HOR:
                if (!isNaN(obj.left)) {
                    sxleft = obj.left + obj.width;
                    exleft = obj.left;
                }
                if (!isNaN(obj.horizontalCenter)) {
                    sxhro = obj.horizontalCenter + obj.width * AnimaMgr.hroWidh;
                    exhro = obj.horizontalCenter;
                }
                if (!isNaN(obj.right)) {
                    sxright = obj.right - obj.width * AnimaMgr.hroWidh;
                    exright = obj.right;
                }
                if (!isNaN(obj.alpha)) {
                    salpha = 0;
                    ealpha = obj.alpha;
                }
                if (!isNaN(obj.x)) {
                    sx = obj.x + obj.width * AnimaMgr.hroWidh;
                    ex = obj.x;
                }
                if (!isNaN(obj.scaleX)) {
                    sxscaleX = obj.scaleX;
                    exscaleX = obj.scaleX;
                }
                if (!isNaN(obj.scaleY)) {
                    syscaleY = obj.scaleY;
                    eyscaleY = obj.scaleY;
                }
                break;
            case AnimaMgr.ANITYPE_IN_UP_VER:
                if (!isNaN(obj.top)) {
                    sytop = obj.top - obj.height;
                    eytop = obj.top;
                }
                if (!isNaN(obj.verticalCenter)) {
                    syver = obj.verticalCenter - obj.height;
                    eyver = obj.verticalCenter;
                }
                if (!isNaN(obj.bottom)) {
                    sybot = obj.bottom + obj.height;
                    eybot = obj.bottom;
                }
                if (!isNaN(obj.alpha)) {
                    salpha = 0;
                    ealpha = obj.alpha;
                }
                if (!isNaN(obj.y)) {
                    sy = obj.y - obj.height;
                    ey = obj.y;
                }
                if (!isNaN(obj.scaleX)) {
                    sxscaleX = obj.scaleX;
                    exscaleX = obj.scaleX;
                }
                if (!isNaN(obj.scaleY)) {
                    syscaleY = obj.scaleY;
                    eyscaleY = obj.scaleY;
                }
                break;
            case AnimaMgr.ANITYPE_IN_DOWN_VER:
                if (!isNaN(obj.top)) {
                    sytop = obj.top + obj.height;
                    eytop = obj.top;
                }
                if (!isNaN(obj.verticalCenter)) {
                    syver = obj.verticalCenter + obj.height;
                    eyver = obj.verticalCenter;
                }
                if (!isNaN(obj.bottom)) {
                    sybot = obj.bottom - obj.height;
                    eybot = obj.bottom;
                }
                if (!isNaN(obj.alpha)) {
                    salpha = 0;
                    ealpha = obj.alpha;
                }
                if (!isNaN(obj.y)) {
                    sy = obj.y + obj.height;
                    ey = obj.y;
                }
                if (!isNaN(obj.scaleX)) {
                    sxscaleX = obj.scaleX;
                    exscaleX = obj.scaleX;
                }
                if (!isNaN(obj.scaleY)) {
                    syscaleY = obj.scaleY;
                    eyscaleY = obj.scaleY;
                }
                break;
            case AnimaMgr.ANITYPE_OUT_LEFT_HOR:
                if (!isNaN(obj.left)) {
                    sxleft = obj.left;
                    exleft = obj.left - obj.width;
                }
                if (!isNaN(obj.horizontalCenter)) {
                    sxhro = obj.horizontalCenter;
                    exhro = obj.horizontalCenter - obj.width;
                }
                if (!isNaN(obj.right)) {
                    sxright = obj.right;
                    exright = obj.right + obj.width;
                }
                if (!isNaN(obj.alpha)) {
                    salpha = obj.alpha;
                    ealpha = 0;
                }
                if (!isNaN(obj.x)) {
                    sx = obj.x;
                    ex = obj.x - obj.width;
                }
                if (!isNaN(obj.scaleX)) {
                    sxscaleX = obj.scaleX;
                    exscaleX = obj.scaleX;
                }
                if (!isNaN(obj.scaleY)) {
                    syscaleY = obj.scaleY;
                    eyscaleY = obj.scaleY;
                }
                break;
            case AnimaMgr.ANITYPE_OUT_RIGHT_HOR:
                if (!isNaN(obj.left)) {
                    sxleft = obj.left + obj.width;
                    exleft = obj.left;
                }
                if (!isNaN(obj.horizontalCenter)) {
                    sxhro = obj.horizontalCenter;
                    exhro = obj.horizontalCenter + obj.width * AnimaMgr.hroWidh;
                }
                if (!isNaN(obj.right)) {
                    sxright = obj.right;
                    exright = obj.right - obj.width * AnimaMgr.hroWidh;
                }
                if (!isNaN(obj.alpha)) {
                    salpha = obj.alpha;
                    ealpha = 0;
                }
                if (!isNaN(obj.x)) {
                    sx = obj.x;
                    ex = obj.x + obj.width * AnimaMgr.hroWidh;
                }
                if (!isNaN(obj.scaleX)) {
                    sxscaleX = obj.scaleX;
                    exscaleX = obj.scaleX;
                }
                if (!isNaN(obj.scaleY)) {
                    syscaleY = obj.scaleY;
                    eyscaleY = obj.scaleY;
                }
                break;
            case AnimaMgr.ANITYPE_OUT_UP_VER:
                if (!isNaN(obj.top)) {
                    sytop = obj.top;
                    eytop = obj.top - obj.height;
                }
                if (!isNaN(obj.verticalCenter)) {
                    syver = obj.verticalCenter;
                    eyver = obj.verticalCenter - obj.height;
                }
                if (!isNaN(obj.bottom)) {
                    sybot = obj.bottom;
                    eybot = obj.bottom + obj.height;
                }
                if (!isNaN(obj.alpha)) {
                    salpha = obj.alpha;
                    ealpha = 0;
                }
                if (!isNaN(obj.y)) {
                    sy = obj.y;
                    ey = obj.y - obj.height;
                }
                if (!isNaN(obj.scaleX)) {
                    sxscaleX = obj.scaleX;
                    exscaleX = obj.scaleX;
                }
                if (!isNaN(obj.scaleY)) {
                    syscaleY = obj.scaleY;
                    eyscaleY = obj.scaleY;
                }
                break;
            case AnimaMgr.ANITYPE_OUT_DOWN_VER:
                if (!isNaN(obj.top)) {
                    sytop = obj.top;
                    eytop = obj.top + obj.height;
                }
                if (!isNaN(obj.verticalCenter)) {
                    syver = obj.verticalCenter;
                    eyver = obj.verticalCenter + obj.height;
                }
                if (!isNaN(obj.bottom)) {
                    sybot = obj.bottom;
                    eybot = obj.bottom - obj.height;
                }
                if (!isNaN(obj.alpha)) {
                    salpha = obj.alpha;
                    ealpha = 0;
                }
                if (!isNaN(obj.y)) {
                    sy = obj.y;
                    ey = obj.y + obj.height;
                }
                if (!isNaN(obj.scaleX)) {
                    sxscaleX = obj.scaleX;
                    exscaleX = obj.scaleX;
                }
                if (!isNaN(obj.scaleY)) {
                    syscaleY = obj.scaleY;
                    eyscaleY = obj.scaleY;
                }
                break;
            case AnimaMgr.ANITYPE_IN_SCALE_VER:
                if (!isNaN(obj.scaleX)) {
                    sxscaleX = 0.5;
                    exscaleX = obj.scaleX;
                }
                if (!isNaN(obj.scaleY)) {
                    syscaleY = 0.5;
                    eyscaleY = obj.scaleY;
                }
                break;
            case AnimaMgr.ANITYPE_OUT_SCALE_VER:
                if (!isNaN(obj.scaleX)) {
                    sxscaleX = obj.scaleX;
                    exscaleX = 0;
                }
                if (!isNaN(obj.scaleY)) {
                    syscaleY = obj.scaleY;
                    eyscaleY = 0;
                }
                break;
        }
        sx = sx ? sx : obj.x;
        sxleft = sxleft ? sxleft : obj.left;
        sxhro = sxhro ? sxhro : obj.horizontalCenter; //x轴
        sxright = sxright ? sxright : obj.right;
        sxscaleX = sxscaleX ? sxscaleX : obj.scaleX;
        ex = ex ? ex : obj.x;
        exleft = exleft ? exleft : obj.left;
        exhro = exhro ? exhro : obj.horizontalCenter; //x轴
        exright = exright ? exright : obj.right;
        exscaleX = exscaleX == 0 ? exscaleX : obj.scaleX;
        sy = sy ? sy : obj.y;
        sytop = sytop ? sytop : obj.top;
        syver = syver ? syver : obj.verticalCenter; //y轴
        sybot = sybot ? sybot : obj.bottom;
        syscaleY = syscaleY ? syscaleY : obj.scaleY;
        ey = ey ? ey : obj.y;
        eytop = eytop ? eytop : obj.top;
        eyver = eyver ? eyver : obj.verticalCenter; //y轴
        eybot = eybot ? eybot : obj.bottom;
        eyscaleY = eyscaleY == 0 ? eyscaleY : obj.scaleY;
        salpha = salpha == 0 ? salpha : obj.alpha;
        ealpha = ealpha == 0 ? ealpha : 1;
        AnimaMgr.aniStartEUI(obj, {
            sx: sx, sxleft: sxleft, sxhro: sxhro, sxright: sxright,
            ex: ex, exleft: exleft, exhro: exhro, exright: exright,
            sy: sy, sytop: sytop, syver: syver, sybot: sybot,
            ey: ey, eytop: eytop, eyver: eyver, eybot: eybot,
            salpha: salpha, ealpha: ealpha,
            sxscaleX: sxscaleX, exscaleX: exscaleX,
            syscaleY: syscaleY, eyscaleY: eyscaleY
        }, others);
    };
    AnimaMgr.aniStartEUI = function (obj, dir, others) {
        obj.x = dir.sx;
        obj.left = dir.sxleft;
        obj.horizontalCenter = dir.sxhro;
        obj.right = dir.sxright;
        obj.y = dir.sy;
        obj.top = dir.sytop;
        obj.verticalCenter = dir.syver;
        obj.bottom = dir.sybot;
        obj.alpha = dir.salpha;
        obj.scaleX = dir.sxscaleX;
        obj.scaleY = dir.syscaleY;
        var tw = egret.Tween.get(obj);
        var t = others ? (others.time ? others.time : AnimaMgr.time) : AnimaMgr.time;
        var ease = others ? (others.ease ? others.ease : AnimaMgr.Egret_Ease) : AnimaMgr.Egret_Ease;
        tw.to({
            x: dir.ex, left: dir.exleft, horizontalCenter: dir.exhro, right: dir.exright,
            y: dir.ey, top: dir.eytop, verticalCenter: dir.eyver, bottom: dir.eybot,
            alpha: dir.ealpha, scaleX: dir.exscaleX, scaleY: dir.eyscaleY
        }, t, ease).call(function () {
            obj.x = dir.ex;
            obj.left = dir.exleft;
            obj.horizontalCenter = dir.exhro;
            obj.right = dir.exright;
            obj.y = dir.ey;
            obj.top = dir.eytop;
            obj.verticalCenter = dir.eyver;
            obj.bottom = dir.eybot;
            obj.alpha = dir.ealpha;
            obj.scaleX = dir.exscaleX;
            obj.scaleY = dir.eyscaleY;
            AnimaMgr.cleanObj(obj);
            egret.Tween.removeTweens(obj);
            if (others && typeof (others.func) == "function")
                others.func();
        });
    };
    AnimaMgr.checkObj = function (obj) {
        if (AnimaMgr.aniMap[obj.hashCode]) {
            return false;
        }
        AnimaMgr.aniMap[obj.hashCode] = obj;
        return true;
    };
    AnimaMgr.cleanObj = function (obj) {
        if (AnimaMgr.aniMap[obj.hashCode]) {
            delete AnimaMgr.aniMap[obj.hashCode];
        }
    };
    AnimaMgr.ANITYPE_FADEIN_LEFT_HOR = 1; //左边进入
    AnimaMgr.ANITYPE_FADEIN_RIGHT_HOR = 2; //右边进入
    AnimaMgr.ANITYPE_FADEIN_UP_VER = 3; //上边进入
    AnimaMgr.ANITYPE_FADEIN_DOWN_VER = 4; //下边进入
    AnimaMgr.ANITYPE_IN_LEFT_HOR = 5; //左边进入
    AnimaMgr.ANITYPE_IN_RIGHT_HOR = 6; //右边进入
    AnimaMgr.ANITYPE_IN_UP_VER = 7; //上边进入
    AnimaMgr.ANITYPE_IN_DOWN_VER = 8; //下边进入
    AnimaMgr.ANITYPE_OUT_LEFT_HOR = 9; //左边弹出
    AnimaMgr.ANITYPE_OUT_RIGHT_HOR = 10; //右边弹出
    AnimaMgr.ANITYPE_OUT_UP_VER = 11; //上边弹出
    AnimaMgr.ANITYPE_OUT_DOWN_VER = 12; //下边弹出
    AnimaMgr.ANITYPE_IN_SCALE_VER = 13; //中间进入
    AnimaMgr.ANITYPE_OUT_SCALE_VER = 14; //中间弹出
    AnimaMgr.diff = 50; //幅度
    AnimaMgr.time = 200; //毫秒
    AnimaMgr.Egret_Ease = egret.Ease.backInOut;
    AnimaMgr.aniMap = {};
    AnimaMgr.hroWidh = 1.5; //屏幕出入偏移
    return AnimaMgr;
}());
__reflect(AnimaMgr.prototype, "AnimaMgr");
var EntrustMgr = (function (_super) {
    __extends(EntrustMgr, _super);
    function EntrustMgr() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.isStart = false;
        _this.taskDic = {};
        return _this;
    }
    EntrustMgr.ins = function () {
        return _super.ins.call(this);
    };
    EntrustMgr.prototype.start = function () {
        if (!this.isStart) {
            this.isStart = true;
            this.addCustomEvent(9 /* SYNC_POINT */, this.transferComplete);
        }
    };
    EntrustMgr.prototype.stop = function () {
        this.taskDic = {};
        this.removeCustomEvents();
        TimerMgr.ins().removeAll(this);
    };
    EntrustMgr.prototype.regEntrusTask = function (type, doFun, callobj) {
        if (!Assert(!this.taskDic[0 /* Transfer */], "There is currently a delegate transfer task！ value=" + doFun)) {
            this.start();
            switch (type) {
                case 0 /* Transfer */:
                    this.transferTask(doFun, callobj);
                    break;
            }
        }
    };
    EntrustMgr.prototype.cancelEntrusTask = function (type) {
        this.taskDic[type] = null;
        delete this.taskDic[type];
    };
    EntrustMgr.prototype.transferTask = function (doFun, callobj) {
        this.taskDic[0 /* Transfer */] = {
            doFun: doFun,
            callobj: callobj
        };
    };
    EntrustMgr.prototype.transferComplete = function () {
        var task = this.taskDic[0 /* Transfer */];
        if (task) {
            if (task.doFun instanceof Function) {
                if (task.callobj) {
                    task.doFun.bind(task.callobj)();
                }
                else {
                    task.doFun();
                }
                this.cancelEntrusTask(0 /* Transfer */);
            }
            else {
                !isNaN(this.taskDic[0 /* Transfer */]);
            }
        }
    };
    return EntrustMgr;
}(BaseSystem));
__reflect(EntrustMgr.prototype, "EntrustMgr");
var SwitchMgr = (function (_super) {
    __extends(SwitchMgr, _super);
    function SwitchMgr() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SwitchMgr.ins = function () {
        return _super.ins.call(this);
    };
    SwitchMgr.prototype.checkOpen = function (type, showTips) {
        if (showTips === void 0) { showTips = false; }
        var config = DataCenter.ins().OpenSystemConfig[type];
        var state = false;
        var openzs = true; //转生
        var openday = true; //天数
        var recharge = true; //充值
        var opencheck = true; //关卡
        var openlevel = true; //等级
        var tips = "";
        if (config) {
            if (config.judge) {
                this.checkExtData(config);
                if (config.than) {
                    if (config.openzs) {
                        openzs = reincarnateControl.lv <= config.openzs;
                    }
                    if (config.openday) {
                        openday = GameServer.serverOpenDay <= config.openday - 1;
                    }
                    if (config.recharge) {
                        recharge = vipControl.exp <= config.recharge;
                    }
                    if (config.opencheck) {
                        opencheck = copyControl.guanqiaID <= config.opencheck;
                    }
                    if (config.openlevel) {
                        openlevel = ActorControl.level <= config.openlevel;
                    }
                }
                else {
                    if (config.openzs) {
                        openzs = reincarnateControl.lv >= config.openzs;
                        if (!openzs) {
                            tips += LangMgr.getValueByKey('zslvdadao', config.openzs);
                        }
                    }
                    if (config.openday) {
                        openday = GameServer.serverOpenDay >= config.openday - 1;
                        if (!openday) {
                            tips += LangMgr.getValueByKey('openSvHowDay', config.openday);
                        }
                    }
                    if (config.recharge) {
                        recharge = vipControl.exp >= config.recharge;
                        if (!recharge) {
                            tips += LangMgr.getValueByKey('numberRecharge', config.recharge);
                        }
                    }
                    if (config.opencheck) {
                        opencheck = copyControl.guanqiaID >= config.opencheck;
                        if (!opencheck) {
                            tips += LangMgr.getValueByKey('numberPassLevel', config.opencheck);
                        }
                    }
                    if (config.openlevel) {
                        openlevel = ActorControl.level >= config.openlevel;
                        if (!openlevel) {
                            tips += LangMgr.getValueByKey('numberLevel', config.openlevel);
                        }
                    }
                }
                state = openzs && openlevel && opencheck && recharge && openday;
            }
            else {
                tips = LangMgr.getValueByKey('notOpen', config.funName);
            }
        }
        if (!state && showTips && tips != "") {
            tipsControl.showTips(tips);
        }
        return state;
    };
    SwitchMgr.prototype.checkExtData = function (config) {
        if (config && config.extData && config.extData.term && config.extData.data && spokesPersonControl.checkBaseOpen(config.extData.term)) {
            for (var key in config.extData.data) {
                if (undefined != config[key]) {
                    config[key] = config.extData.data[key];
                }
            }
        }
    };
    return SwitchMgr;
}(BaseSystem));
__reflect(SwitchMgr.prototype, "SwitchMgr");
var GameLayer = (function () {
    function GameLayer() {
    }
    GameLayer.SCENE1 = new EuiLayer();
    GameLayer.SCENE2 = new EuiLayer();
    GameLayer.SCENE3 = new EuiLayer();
    GameLayer.MAIN1 = new EuiLayer();
    GameLayer.MAIN2 = new EuiLayer();
    GameLayer.POPUP = new EuiLayer();
    GameLayer.TIPS = new EuiLayer();
    return GameLayer;
}());
__reflect(GameLayer.prototype, "GameLayer");
var UIMgr = (function (_super) {
    __extends(UIMgr, _super);
    /**
     * 构造函数
     */
    function UIMgr() {
        var _this = _super.call(this) || this;
        /**
         * 存储隐藏界面
         */
        _this._visWinLis = [];
        /**
         * 存储返回界面
         */
        _this._backWinList = [];
        _this._opens = [];
        _this._views = {};
        _this._hCode2Key = {};
        return _this;
    }
    UIMgr.ins = function () {
        return _super.ins.call(this);
    };
    UIMgr.prototype.getKey = function (nameOrClass) {
        var key = "";
        if (typeof (nameOrClass) == "string") {
            key = nameOrClass;
        }
        else if (typeof (nameOrClass) == "function") {
            key = egret.getQualifiedClassName(nameOrClass);
        }
        else if (nameOrClass instanceof BaseEuiView) {
            var keys = Object.keys(this._views);
            for (var i = 0, len = keys.length; i < len; i++) {
                var tempKey = keys[i];
                if (this._views[tempKey] == nameOrClass) {
                    key = tempKey;
                    break;
                }
            }
        }
        else {
            debug.log("UIMgr getKey error:" + nameOrClass);
        }
        return key;
    };
    UIMgr.prototype.getClass = function (key) {
        var uiClass = egret.getDefinitionByName(key);
        if (!uiClass) {
            debug.error("Unknown uiClass:", key);
            return;
        }
        return uiClass;
    };
    /**
     * 检测能否开启
     */
    UIMgr.prototype.viewOpenCheck = function (key) {
        var param = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            param[_i - 1] = arguments[_i];
        }
        var result = true;
        var uiClass = this.getClass(key);
        if (uiClass != null) {
            var fun = uiClass["openCheck"];
            if (fun != null) {
                result = fun.apply(void 0, param);
            }
        }
        return result;
    };
    /**
     * 统一打开窗口函数
     */
    UIMgr.prototype.open = function (nameOrClass) {
        var param = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            param[_i - 1] = arguments[_i];
        }
        var key = this.getKey(nameOrClass);
        //检测能否开启
        if (!this.viewOpenCheck.apply(this, [key].concat(param))) {
            return null;
        }
        var view = this.openEasy(key, param);
        if (view) {
            if (view.isShowLog) {
                debug.log("Open view: " + key, "skin: " + view.skinName);
            }
            this.checkOpenView(view);
            this.playAnima(key);
        }
        return view;
    };
    /**
     * 界面动画
     */
    UIMgr.prototype.playAnima = function (className) {
        if (className) {
            var view = this.getView(className);
            if (view) {
                view.playAnima();
            }
        }
    };
    /**
     * 简单的打开一个界面
     */
    UIMgr.prototype.openEasy = function (nameOrClass, param) {
        if (param === void 0) { param = null; }
        var key = this.getKey(nameOrClass);
        var view = this._views[key];
        if (view) {
            if (!view.parent) {
                RecycleMgr.ins().reloadContainer(view, true);
            }
        }
        else {
            var uiClass = this.getClass(key);
            if (uiClass) {
                view = new uiClass;
                this._views[key] = view;
                this._hCode2Key[view.hashCode] = key;
            }
        }
        if (view == null) {
            debug.log("Not view", key);
            return null;
        }
        //关闭互斥窗口
        for (var _i = 0, _a = view.exclusionWins; _i < _a.length; _i++) {
            var exclusionWin = _a[_i];
            this.close(exclusionWin);
        }
        Assert(view.open, view + "Not open function!!");
        if (view.isShow() || view.isInit()) {
            view.addToParent(view.uilayer);
            view.open.apply(view, param);
        }
        else {
            EasyLoading.ins().showLoading();
            view.loadResource(function () {
                if (key == "RambleMainView") {
                    var bottomNav = UIMgr.ins().getView("GameBottomView");
                    index = bottomNav && bottomNav.parent ? bottomNav.parent.getChildIndex(bottomNav) : null;
                    view.addToParent(view.uilayer, index);
                    index != null && bottomNav.addToParent(bottomNav.uilayer, index + 1);
                }
                else {
                    view.addToParent(view.uilayer);
                }
                view.setVisible(false);
            }.bind(this), function () {
                view.initUI();
                view.initData();
                view.open.apply(view, param);
                view.setVisible(true);
                EasyLoading.ins().hideLoading();
            }.bind(this));
        }
        var index = this._opens.indexOf(key);
        if (index >= 0) {
            this._opens.splice(index, 1);
        }
        this._opens.push(key);
        if (view.canVis) {
            var visKey = this.getKey(nameOrClass);
            var visIndex = this._visWinLis.indexOf(visKey);
            if (visIndex > -1) {
                this._visWinLis.splice(visIndex, 1);
            }
            this._visWinLis.push(visKey);
            this.checkVisWin();
        }
        return view;
    };
    UIMgr.prototype.checkOpenView = function (view) {
        if (view.isTopLevel && view.parent != GameLayer.POPUP) {
            SoundUtils.ins().playEffect(SoundUtils.VIEW);
            EventMgr.ins().dispatch(473 /* VIEW_OPEN */, 1);
            this.close("RambleMainView");
            this.close("RambleView");
            this.clreanBackWinList();
        }
    };
    /**
     * 统一关闭窗口函数
     */
    UIMgr.prototype.close = function (nameOrClass) {
        var param = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            param[_i - 1] = arguments[_i];
        }
        var key = this.getKey(nameOrClass);
        EventMgr.ins().dispatch(477 /* OBSERVE_CLOSE_VIEW */, [key, param]);
        this.closeEx(key, param);
    };
    UIMgr.prototype.closeEx = function (className) {
        var param = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            param[_i - 1] = arguments[_i];
        }
        if (className) {
            var view = this.getView(className);
            if (view) {
                var self_3 = this;
                view.closeEx(function () {
                    var view = self_3.closeEasy(className, param);
                    if (view) {
                        self_3.checkCloseView();
                    }
                });
            }
        }
    };
    UIMgr.prototype.checkIsTopView = function (nameOrClass) {
        var len = this._opens.length;
        var visKey = this.getKey(nameOrClass);
        for (var i = len - 1; i >= 0; i--) {
            var view = this.getView(this._opens[i]);
            if (view && view.isTopLevel) {
                return visKey == this._opens[i];
            }
        }
        return false;
    };
    UIMgr.prototype.pushBackWin = function (nameOrClass) {
        var param = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            param[_i - 1] = arguments[_i];
        }
        var args = [nameOrClass, param];
        if (this._backWinList.indexOf(args) <= -1) {
            this._backWinList.push(args);
        }
    };
    UIMgr.prototype.clreanBackWinList = function () {
        this._backWinList = [];
    };
    UIMgr.prototype.closeLastTopView = function () {
        var backArgs = this._backWinList.pop();
        if (backArgs) {
            this.open(backArgs[0], backArgs[1]);
            return;
        }
        var len = this._opens.length;
        for (var k = len - 1; k >= 0; k--) {
            var win = this.getView(this._opens[k]);
            if (win && win.isTopLevel) {
                this.close(win);
                break;
            }
        }
    };
    /**
     * 简单关闭一个窗口
     */
    UIMgr.prototype.closeEasy = function (nameOrClass) {
        var param = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            param[_i - 1] = arguments[_i];
        }
        if (!this.isShow(nameOrClass)) {
            return null;
        }
        var key = this.getKey(nameOrClass);
        var view = this.getView(key);
        if (view) {
            var viewIndex = this._opens.indexOf(key);
            if (viewIndex >= 0) {
                this._opens.splice(viewIndex, 1);
            }
            view.close.apply(view, param);
            view.$onClose.apply(view);
            view.removeFromParent();
            if (view.canVis) {
                var visIndex = this._visWinLis.indexOf(key);
                if (visIndex > -1) {
                    this._visWinLis.splice(visIndex, 1);
                }
                this.checkVisWin();
            }
        }
        return view;
    };
    UIMgr.prototype.checkCloseView = function () {
        var hasTopLevelWin = false;
        for (var _i = 0, _a = this._opens; _i < _a.length; _i++) {
            var key = _a[_i];
            var win = this.getView(key);
            if (win && win.isTopLevel) {
                hasTopLevelWin = true;
                break;
            }
        }
        if (!hasTopLevelWin) {
            SoundUtils.PLAY_OPEN_VIEW = false;
            EventMgr.ins().dispatch(473 /* VIEW_OPEN */, 0);
            if (SceneMgr.ins().getSceneName() == SceneMgr.MAIN) {
                if (!this.isShow("GameSceneView")) {
                    this.openEasy("GameSceneView");
                }
                if (!this.isShow("RambleMainView")) {
                    this.openEasy("RambleMainView");
                }
            }
        }
    };
    /**
     * 获取一个UI对象
     */
    UIMgr.prototype.getView = function (nameOrClass) {
        var key = this.getKey(nameOrClass);
        return this._views[key];
    };
    Object.defineProperty(UIMgr, "gameScene", {
        /**
         * 获取场景
         */
        get: function () {
            return UIMgr.ins().getView("GameSceneView");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UIMgr, "playFun", {
        /**
         * 获取入口
         */
        get: function () {
            return UIMgr.ins().getView("PortalView");
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 关闭所有开启中的UI
     */
    UIMgr.prototype.closeAll = function () {
        while (this._opens.length) {
            this.closeEasy(this._opens[0]);
        }
        this.destroyAllNotShowView();
        this.checkCloseView();
    };
    /**
     * 关闭所有一级界面
     */
    UIMgr.prototype.closeTopLevel = function () {
        for (var i = this._opens.length - 1; i >= 0; i--) {
            var key = this._opens[i];
            var view = this.getView(key);
            if (!view)
                continue;
            if (view.isTopLevel) {
                this.closeEasy(key);
            }
        }
        this.checkCloseView();
    };
    /**
     * 检测一个UI是否开启中
     */
    UIMgr.prototype.isShow = function (nameOrClass) {
        return this._opens.indexOf(this.getKey(nameOrClass)) >= 0;
    };
    /**
     * 是否有一级界面
     */
    UIMgr.prototype.hasTopView = function () {
        for (var _i = 0, _a = this._opens; _i < _a.length; _i++) {
            var key = _a[_i];
            var win = this.getView(key);
            if (win && win.isTopLevel) {
                return true;
            }
        }
        return false;
    };
    /**
     * 释放关闭窗口
     */
    UIMgr.prototype.destroyAllNotShowView = function () {
        for (var code in this._hCode2Key) {
            var key = this._hCode2Key[code];
            if (this._opens.indexOf(key) == -1) {
                var view = this.getView(key);
                if (view && !view.resident && view.destoryView) {
                    view.destoryView(false);
                }
            }
        }
    };
    /**
     * 检查隐藏
     */
    UIMgr.prototype.checkVisWin = function () {
        for (var i = 0; i < this._visWinLis.length; i++) {
            var view = this.getView(this._visWinLis[i]);
            if (view) {
                view.setVisible(i == this._visWinLis.length - 1);
            }
        }
    };
    /**
     * 清空处理
     */
    UIMgr.prototype.clear = function () {
        this.closeAll();
        this._views = {};
    };
    /**
     * 销毁一个面板
     */
    UIMgr.prototype.destroy = function (hCode) {
        var key = this._hCode2Key[hCode];
        delete this._views[key];
        delete this._hCode2Key[hCode];
    };
    return UIMgr;
}(SingleClass));
__reflect(UIMgr.prototype, "UIMgr");
var ActivationView = (function (_super) {
    __extends(ActivationView, _super);
    function ActivationView() {
        var _this = _super.call(this) || this;
        _this.skinName = "ActivationViewSkin";
        _this.isTopLevel = true;
        _this.addEventTouchTap(_this.bgClose, _this.onTap);
        return _this;
    }
    ActivationView.prototype.open = function (type, name, imgName, effName, spotlight, closeCallback, mcRotation, mcOffsetY) {
        this.closeFunc = closeCallback;
        this.title.source = type ? "tongyongjihuochenggongp3" : "tongyongjihuochenggongp2";
        this.itemname.text = name;
        //图片
        if (imgName) {
            this.img.source = imgName;
        }
        //动画
        if (effName) {
            this.mcGroup.rotation = mcRotation;
            if (!this.mc) {
                this.mc = new GameMovieClip;
            }
            if (!this.mc.parent) {
                this.mcGroup.addChild(this.mc);
            }
            if (mcOffsetY) {
                this.mc.y = mcOffsetY;
            }
            this.mc.playFile(PATH_EFF + effName, -1);
        }
        this.playAnimaiton(spotlight);
    };
    ActivationView.prototype.close = function () {
        egret.Tween.removeTweens(this.title);
        egret.Tween.removeTweens(this.titleBg);
        egret.Tween.removeTweens(this.img);
        egret.Tween.removeTweens(this.mcGroup);
        egret.Tween.removeTweens(this.tielian);
        egret.Tween.removeTweens(this.imgAct);
        DisplayUtils.removeFromParent(this.mc);
        DisplayUtils.removeFromParent(this.eff);
        this.mc = null;
        this.eff = null;
        if (this.closeFunc) {
            this.closeFunc.apply(null);
        }
        this.closeFunc = null;
    };
    ActivationView.prototype.playAnimaiton = function (spotlight) {
        var _this = this;
        //记录坐标
        var tlpos = [this.tielian.x, this.tielian.y];
        var lbgpos = [this.lbg.x, this.lbg.y];
        var rbgpos = [this.rbg.x, this.rbg.y];
        //记录缩放
        var titleScale = [this.title.scaleX, this.title.scaleY];
        var tbgScale = [this.titleBg.scaleX, this.titleBg.scaleY];
        var imgScale = [this.img.scaleX, this.img.scaleY];
        var imgMcScale = [this.mcGroup.scaleX, this.mcGroup.scaleY];
        //台阶
        this.estrade.visible = false;
        this.itemname.visible = false;
        this.itemBg.visible = false;
        this.buttonBg.visible = false;
        //开始前
        this.title.scaleX = this.title.scaleY = 0;
        this.titleBg.scaleX = this.titleBg.scaleY = 0;
        this.img.scaleX = this.img.scaleY = 0;
        this.mcGroup.scaleX = this.mcGroup.scaleY = 0;
        this.tielian.y = -this.tielian.height * 2;
        //动画开始
        var speed = 1; //播放速度
        var t1 = egret.Tween.get(this.tielian);
        t1.to({ y: tlpos[1] + 50 }, 200 * speed).to({ y: tlpos[1] }, 100 * speed).call(function () {
            _this.estrade.visible = true; //台阶
            var t2 = egret.Tween.get(_this.title);
            var t3 = egret.Tween.get(_this.titleBg);
            var t4 = egret.Tween.get(_this.img);
            var t5 = egret.Tween.get(_this.mcGroup);
            t2.to({ scaleX: titleScale[0], scaleY: titleScale[1] }, 500 * speed);
            t3.to({ scaleX: tbgScale[0], scaleY: tbgScale[1] }, 500 * speed);
            t5.to({ scaleX: imgMcScale[0], scaleY: imgMcScale[1] }, 500 * speed);
            t4.to({ scaleX: imgScale[0], scaleY: imgScale[1] }, 500 * speed).wait(500).call(function () {
                _this.itemname.visible = true;
                _this.itemBg.visible = true;
                _this.buttonBg.visible = true;
                if (spotlight) {
                    _this.showSpotlight();
                }
                _this.fluctuateTween();
            });
        });
        //底边
        this.lbg.y = -this.tielian.height;
        this.rbg.y = -this.tielian.height;
        var tl = egret.Tween.get(this.lbg);
        tl.to({ y: lbgpos[1] + 50 }, 200 * speed).to({ y: lbgpos[1] }, 100 * speed);
        var tr = egret.Tween.get(this.rbg);
        tr.to({ y: rbgpos[1] + 50 }, 200 * speed).to({ y: rbgpos[1] }, 100 * speed);
    };
    ActivationView.prototype.showSpotlight = function () {
        this.eff = new GameMovieClip();
        this.eff.anchorOffsetX = this.effGroup.anchorOffsetX;
        this.eff.anchorOffsetY = this.effGroup.anchorOffsetY;
        this.effGroup.addChild(this.eff);
        this.eff.playFile(PATH_EFF + "artifacteff", -1);
    };
    ActivationView.prototype.fluctuateTween = function () {
        var tween = egret.Tween.get(this.imgAct, { "loop": true });
        tween.to({ y: this.imgAct.y - 20 }, 1000).to({ y: this.imgAct.y }, 1000);
    };
    ActivationView.prototype.onTap = function (e) {
        switch (e.currentTarget) {
            case this.bgClose:
                UIMgr.ins().close(this);
                break;
        }
    };
    return ActivationView;
}(BaseEuiView));
__reflect(ActivationView.prototype, "ActivationView");
var BubbleControl = (function (_super) {
    __extends(BubbleControl, _super);
    function BubbleControl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * 气泡
     */
    BubbleControl.prototype.playBubbleEffect = function (id) {
        var bubble = "";
        var config = DataCenter.ins().BubbleConfig[id];
        if (config) {
            switch (config.type) {
                case 1 /* TYPE1 */:
                    bubble = config.news;
                    break;
                case 2 /* TYPE2 */:
                    if (config.news) {
                        skillControl.dispatchShowSkillWord(config.news);
                    }
                    break;
            }
        }
        return bubble;
    };
    return BubbleControl;
}(SingleClass));
__reflect(BubbleControl.prototype, "BubbleControl");
/**
 * 气泡显示
 */
var BubblePanel = (function (_super) {
    __extends(BubblePanel, _super);
    function BubblePanel() {
        var _this = _super.call(this) || this;
        _this.skinName = "BubblePanelSkin";
        return _this;
    }
    BubblePanel.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.x = -this.width / 2;
        this.visible = false;
    };
    BubblePanel.prototype.setSpeak = function (id, job) {
        if (job === void 0) { job = 1; }
        TimerMgr.ins().removeAll(this);
        this.start();
        this.content.textColor = LangMgr.getColor("bubbleJobColor" + job);
        ;
        var bubble = BubbleControl.ins().playBubbleEffect(id);
        if (!bubble)
            return;
        this.content.text = bubble;
        this.content.x = -this.content.textWidth >> 1;
        this.visible = true;
    };
    BubblePanel.prototype.start = function () {
        TimerMgr.ins().doTimer(1000, 1, this.destruct, this);
    };
    BubblePanel.prototype.destruct = function () {
        if (this.parent) {
            this.visible = false;
        }
    };
    return BubblePanel;
}(BasePanel));
__reflect(BubblePanel.prototype, "BubblePanel");
/**
 * 对话显示
 */
var TalkPanel = (function (_super) {
    __extends(TalkPanel, _super);
    function TalkPanel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TalkPanel.prototype.setDefSkin = function () {
        this.setCurSkin("TalkPanelSkin");
    };
    TalkPanel.prototype.setCurSkin = function (name) {
        this.skinName = name;
    };
    TalkPanel.prototype.open = function () {
        this.visible = false;
    };
    TalkPanel.prototype.setScale = function (val) {
        this.bg.scaleX = val;
        this.x = this.width / 2 * val;
    };
    TalkPanel.prototype.setSpeak = function (tips, delay) {
        if (delay === void 0) { delay = 5000; }
        TimerMgr.ins().removeAll(this);
        this.start(delay);
        this.msgTxt.textFlow = TextUtils.generateTextFlow1(tips);
        this.visible = true;
        this.scaleX = this.scaleY = 0.3;
        egret.Tween.get(this).to({
            scaleX: 1,
            scaleY: 1
        }, 100, egret.Ease.quadOut);
    };
    TalkPanel.prototype.start = function (delay) {
        if (delay) {
            TimerMgr.ins().doTimer(delay, 1, this.destruct, this);
        }
    };
    TalkPanel.prototype.destruct = function () {
        if (this.parent) {
            this.visible = false;
        }
        TimerMgr.ins().removeAll(this);
    };
    return TalkPanel;
}(BasePanel));
__reflect(TalkPanel.prototype, "TalkPanel");
var AppearanceControl = (function (_super) {
    __extends(AppearanceControl, _super);
    function AppearanceControl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AppearanceControl.ins = function () {
        return _super.ins.call(this);
    };
    AppearanceControl.getDefClothes = function () {
        return RENWU_PREFIX + "001";
    };
    AppearanceControl.prototype.downWeaponClothesType = function (roleIndex, weaponViewType, weaponViewId, clothesViewType, clothesViewId) {
        var role = heroControl.getSubRoleByIndex(roleIndex);
        if (role) {
            role.weaponViewType = weaponViewType;
            role.weaponViewId = weaponViewId;
            role.clothesViewType = clothesViewType;
            role.clothesViewId = clothesViewId;
            var entity = UnitMgr.ins().getEntityByHandle(role.handle);
            if (entity) {
                var n = entity.infoModel;
                n.weaponViewType = role.weaponViewType;
                n.weaponViewId = role.weaponViewId;
                n.clothesViewType = role.clothesViewType;
                n.clothesViewId = role.clothesViewId;
                entity.updateModel();
            }
        }
        EventMgr.ins().dispatch(711 /* WEAPONCLOTHESTYPE */, roleIndex);
    };
    AppearanceControl.prototype.checkCanShow = function (role, equipPos, type) {
        var equipAllEffConfigs = DataCenter.ins().EquipAllEffConfig[equipPos];
        if (!equipAllEffConfigs || !equipAllEffConfigs[type]) {
            return true;
        }
        var equipAllEffConfig = equipAllEffConfigs[type];
        if (equipAllEffConfig.limitType) {
            var limitTypes = equipAllEffConfig.limitType;
            for (var i = 0; i < limitTypes.length; i++) {
                var limitType = limitTypes[i];
                var effId = this.getEquipEffId(role, equipPos, limitType);
                if (effId && (!equipAllEffConfig.limited || !equipAllEffConfig.limited[limitType]
                    || equipAllEffConfig.limited[limitType].indexOf(effId) >= 0)) {
                    return false;
                }
            }
        }
        return true;
    };
    AppearanceControl.prototype.getEquipEffId = function (role, equipPos, type) {
        var isSubRole = role instanceof RankSubRoleVo;
        if (type == 3 /* TYPE3 */) {
            var weaponLv = role.thunders[0 /* WEAPON */].level;
            var clothsLv = role.thunders[2 /* CLOTHES */].level;
            var minLv = Math.min(weaponLv, clothsLv);
            return minLv;
        }
        if (type == 0 /* TYPE0 */) {
            if (isSubRole) {
                if (equipPos == 0 /* WEAPON */) {
                    return role.swordID;
                }
                if (equipPos == 2 /* CLOTHES */) {
                    return role.clothID;
                }
            }
            else {
                var equip = role.getEquipByIndex(equipPos);
                return equip.item.configID;
            }
        }
        if (type == 1 /* TYPE1 */) {
            if (equipPos == 0 /* WEAPON */) {
                return isSubRole ? role.pos2 : role.zhuangbei[1];
            }
            if (equipPos == 2 /* CLOTHES */) {
                return isSubRole ? role.pos1 : role.zhuangbei[0];
            }
        }
        else {
            if (type == 2 /* TYPE2 */) {
                return role.weapons && role.weapons.weaponsId;
            }
            if (type == 4 /* TYPE4 */) {
                return role.heirloom.getSuitLv(role);
            }
            if (type == 5 /* TYPE5 */) {
                return role.thirteenEquipLv;
            }
            if (type == 6 /* TYPE6 */) {
                if (equipPos == 0 /* WEAPON */ && role.weaponViewType == 6 /* TYPE6 */ && role.weaponViewId > 0) {
                    return role.weaponViewId;
                }
                if (equipPos == 2 /* CLOTHES */ && role.clothesViewType == 6 /* TYPE6 */ && role.clothesViewId > 0) {
                    return role.clothesViewId;
                }
            }
        }
    };
    AppearanceControl.prototype.getEquipEffName = function (role, equipPos, type) {
        var effId = this.getEquipEffId(role, equipPos, type);
        if (effId) {
            if (type == 3 /* TYPE3 */) {
                if (equipPos == 2 /* CLOTHES */) {
                    return "bodythunder";
                }
                var ltEffId = this.getLTEquipEffId(role);
                return ltEffId == 0 ? "" : "weaponthunder00" + ltEffId;
            }
            if (type == 0 /* TYPE0 */) {
                return DataCenter.ins().EquipConfig[effId].appearance;
            }
            if (type == 1 /* TYPE1 */) {
                return DataCenter.ins().FashionIdConfig[effId].res;
            }
            if (type == 2 /* TYPE2 */) {
                return DataCenter.ins().WeaponSoulConfig[effId].outside[role.job - 1];
            }
            if (type == 4 /* TYPE4 */) {
                var heirloomEquipSetConfig = DataCenter.ins().HeirloomEquipSetConfig[effId];
                return heirloomEquipSetConfig && heirloomEquipSetConfig.weff;
            }
            if (type == 5 /* TYPE5 */) {
                return equipPos == 2 /* CLOTHES */ ? DataCenter.ins().ReincarnateStarStepBsConfig.bodyEff[effId - 1]
                    : DataCenter.ins().ReincarnateStarStepBsConfig.weaponEff[effId - 1];
            }
            if (type == 6 /* TYPE6 */) {
                var data = DataCenter.ins().DevourEquipLevelConfig[equipPos];
                var zbstr = void 0;
                if (data && data[effId]) {
                    zbstr = data[effId].outside || data[effId].inside;
                }
                if (zbstr)
                    return zbstr;
            }
        }
    };
    AppearanceControl.prototype.checkWeaponHasFamale = function (zbId) {
        return DataCenter.ins().FashionIdConfig[zbId] && DataCenter.ins().FashionIdConfig[zbId].weaponHasFamale ? true : false;
    };
    AppearanceControl.prototype.getWeaponFashionSex = function (role) {
        var zbId = role.zhuangbei[1];
        return zbId && DataCenter.ins().FashionIdConfig[zbId].weaponHasFamale ? role.sex : 0;
    };
    AppearanceControl.prototype.getLTEquipEffId = function (role) {
        var ltEffId = 0;
        var effId = this.getEquipEffId(role, 0 /* WEAPON */, 1 /* TYPE1 */);
        if (effId) {
            ltEffId = DataCenter.ins().FashionIdConfig[effId].thunderEff;
        }
        else {
            var equipEffId = this.getEquipEffId(role, 0 /* WEAPON */, 0 /* TYPE0 */);
            if (equipEffId) {
                ltEffId = DataCenter.ins().EquipConfig[equipEffId].thunderEff;
            }
        }
        return ltEffId;
    };
    /**
     * 职业显示UI
     */
    AppearanceControl.prototype.getJobUIState = function (job, weaponId, isDress) {
        var state = "nor";
        if (GlobalModel.skinType == "sg") {
            if (isDress) {
                return state;
            }
            if (weaponId > 0) {
                var itemconfig = DataCenter.ins().ItemConfig[weaponId];
                //普通装备||热血装备
                if (itemconfig.zsLevel >= 6 || itemconfig.descIndex == 121) {
                    return state;
                }
            }
        }
        if (GlobalModel.jobUIState) {
            state = "job" + job;
        }
        return state;
    };
    /**
     * 职业资源处理
     */
    AppearanceControl.prototype.resJobHandler = function (resName, job) {
        if (GlobalModel.skinType == "sg") {
            var resNameSplits = resName.split("_");
            if (resNameSplits.length >= 2) {
                if (resNameSplits[0] == RENWU_PREFIX + "000") {
                    resNameSplits[0] = "" + RENWU_PREFIX + job + "00";
                    resName = resNameSplits.join("_");
                }
            }
        }
        else if (GlobalModel.skinType == "mh") {
            var resNameSplits = resName.split("_");
            if (resNameSplits.length >= 2) {
                if (resNameSplits[0].indexOf(RENWU_PREFIX + "00") == 0 && job == 2) {
                    resNameSplits[1] = job.toString();
                    resName = resNameSplits.join("_");
                }
                else if (resNameSplits[0].indexOf(RENWU_PREFIX + "00") == 0 && job == 3 && GlobalModel.gameId == 45) {
                    resNameSplits[1] = '1';
                    resName = resNameSplits.join("_");
                }
                else if (resNameSplits[0].indexOf(WUQI_PREFIX + "903") == 0 || resNameSplits[0].indexOf(WUQI_PREFIX + "904") == 0 || resNameSplits[0].indexOf(WUQI_PREFIX + "905") == 0) {
                    //热血神剑
                    resNameSplits[0] = "rxweapon" + job + "00";
                    resName = resNameSplits.join("_");
                }
                else if (resNameSplits[0].indexOf(RENWU_PREFIX + "903") == 0) {
                    //热血神甲
                    resNameSplits[0] = "rxbody" + job + "00";
                    resName = resNameSplits.join("_");
                }
                //屏蔽丑资源
                if (GlobalModel.changeUglyRes) {
                    for (var i = 1; i <= 3; i++) {
                        if ((resNameSplits[0].indexOf(RENWU_PREFIX + "000") == 0 && job == i)
                            || (resNameSplits[0].indexOf(RENWU_PREFIX + "001") == 0 && job == i)
                            || (resNameSplits[0].indexOf(RENWU_PREFIX + "002") == 0 && job == i)
                            || resNameSplits[0].indexOf("" + RENWU_PREFIX + i + "00") == 0
                            || resNameSplits[0].indexOf("" + RENWU_PREFIX + i + "01") == 0
                            || resNameSplits[0].indexOf("" + RENWU_PREFIX + i + "02") == 0
                            || resNameSplits[0].indexOf("" + RENWU_PREFIX + i + "03") == 0
                            || resNameSplits[0].indexOf("" + RENWU_PREFIX + i + "04") == 0) {
                            resNameSplits[0] = "" + RENWU_PREFIX + i + "05";
                            resName = resNameSplits.join("_");
                        }
                    }
                    for (var i = 1; i <= 3; i++) {
                        if (resNameSplits[0].indexOf("" + WUQI_PREFIX + i + "00") == 0
                            || resNameSplits[0].indexOf("" + WUQI_PREFIX + i + "01") == 0
                            || resNameSplits[0].indexOf("" + WUQI_PREFIX + i + "02") == 0
                            || resNameSplits[0].indexOf("" + WUQI_PREFIX + i + "03") == 0
                            || resNameSplits[0].indexOf("" + WUQI_PREFIX + i + "04") == 0
                            || resNameSplits[0].indexOf("" + WUQI_PREFIX + i + "05") == 0) {
                            resNameSplits[0] = "" + WUQI_PREFIX + i + "06";
                            resName = resNameSplits.join("_");
                        }
                    }
                }
            }
        }
        return resName;
    };
    __decorate([
        down(42, [1 /* Byte */, 1 /* Byte */, 3 /* Int */, 1 /* Byte */, 3 /* Int */])
    ], AppearanceControl.prototype, "downWeaponClothesType", null);
    AppearanceControl = __decorate([
        protocolsId(255 /* MAXVALUE */)
    ], AppearanceControl);
    return AppearanceControl;
}(BaseSystem));
__reflect(AppearanceControl.prototype, "AppearanceControl");
var AttributeData = (function () {
    function AttributeData(type, value) {
        if (type === void 0) { type = 0; }
        if (value === void 0) { value = 0; }
        this.type = type;
        this.value = value;
    }
    /**
     * 两组属性数组的值相加（用于羽翼 经脉 强化等等）
     * @param attr1
     * @param attr2
     */
    AttributeData.AttrAddition = function (attr1, attr2) {
        if (!attr1 || attr1.length <= 0)
            return attr2 ? attr2.concat() : null;
        if (!attr2 || attr2.length <= 0)
            return attr1 ? attr1.concat() : null;
        var attr = attr1.concat(attr2);
        //合并相同属性
        var newObj = [];
        var len = attr.length;
        var obj = new Object();
        for (var i = 0; i < len; i++) {
            if (obj[attr[i].type] == undefined)
                obj[attr[i].type] = 0;
            obj[attr[i].type] += attr[i].value;
        }
        for (var key in obj)
            newObj.push(new AttributeData((+key), (+obj[key])));
        return newObj;
    };
    //两组属性相减
    AttributeData.AttrDel = function (attr1, attr2) {
        var attr = [];
        for (var i = 0; i < attr1.length; i++) {
            var attrData = new AttributeData();
            attrData.type = attr1[i].type != 0 ? attr1[i].type : attr2[i].type;
            attrData.value = attr1[i].value - attr2[i].value;
            attr.push(attrData);
        }
        return attr;
    };
    /**
     * 属性按比例加成
     * @param attr1 当前属性
     * @param attr2 万分比加成
     * @returns {AttributeData[]}
     * @constructor
     */
    AttributeData.AttrMultiply = function (attr1, attr2) {
        var attr = [];
        for (var i = 0; i < attr1.length; i++) {
            var attrData = new AttributeData();
            attrData.type = attr1[i].type != 0 ? attr1[i].type : attr2[i].type;
            attrData.value = attr1[i].value * (1 + attr2[i].value / 10000);
            attr.push(attrData);
        }
        return attr;
    };
    /**
     * 属性列表转换（用于解析配置表后的属性列表obgject转换AttributeData[])
     * @param attrObj
     */
    AttributeData.transformAttr = function (attrObj) {
        var attrList = [];
        for (var key in attrObj) {
            var attr = new AttributeData;
            attr.type = attrObj[key].type;
            attr.value = attrObj[key].value;
            attrList.push(attr);
        }
        for (var i = 0; i < attrList.length - 1; i++) {
            for (var j = 0; j < attrList.length - i - 1; j++) {
                if (attrList[j] < attrList[j + 1]) {
                    var temp = attrList[j + 1];
                    attrList[j + 1] = attrList[j];
                    attrList[j] = temp;
                }
            }
        }
        return attrList;
    };
    /**
     * 这个函数即将被getAttStr1 替换.
     * 通过属性对象数组获取字符串
     * @param att       属性对象(支持AttributeData[] | AttributeData | config )
     * @param intervals  属性名与属性值间隔多宽(默认4格)
     * @param newline   属性与属性上下间隔几行(默认1行)
     * @param sign      符号 默认 +
     * @param isInserte  是否插入空格 默认false
     * @param isShowAttName    是否显示属性名字（例如false： +1000)
     * @param info: HeirloomInfo 传世额外属性加成
     */
    AttributeData.getAttStr = function (att, intervals, newline, sign, isInserte, isShowAttName, info, endSign, attrs) {
        if (intervals === void 0) { intervals = 4; }
        if (newline === void 0) { newline = 1; }
        if (sign === void 0) { sign = "+"; }
        if (isInserte === void 0) { isInserte = false; }
        if (isShowAttName === void 0) { isShowAttName = true; }
        var str = "";
        var space = 0;
        if (att instanceof AttributeData) {
            return this.getAttStrByType(att, intervals, sign, isInserte, isShowAttName, attrs);
        }
        else if (att instanceof Array) {
            var atts = att;
            var len = atts.length - 1;
            for (var i = 0; i < atts.length; i++) {
                if (atts[i].type == 0)
                    continue;
                //特殊属性不显示
                if (atts[i].type == 11 /* atHpEx */
                    || atts[i].type == 12 /* atAtkEx */
                    || atts[i].type == 16 /* atDamageReduction */
                    || atts[i].type == 23 /* atDefEx */
                    || atts[i].type == 24 /* atResEx */
                    || atts[i].type == 89 /* atAddPowerVal */
                    || atts[i].type == 90 /* atAddPowerPro */) {
                    space = -1;
                    continue;
                }
                str += this.getAttStrByType(atts[i], intervals, sign, isInserte, isShowAttName, attrs);
                if (info && info.attr_add) {
                    str += "+" + Math.floor(atts[i].value * (info.attr_add / 100));
                }
                if (endSign)
                    str += endSign;
                if (i < len + space) {
                    for (var j = 0; j < newline; j++)
                        str += "\n";
                }
            }
        }
        else {
            var objAtts = [];
            for (var k in this.translate) {
                if (isNaN(att[k]))
                    continue;
                var a = new AttributeData;
                a.type = parseInt(this.translate[k]);
                a.value = att[k];
                objAtts.push(a);
            }
            return this.getAttStr(objAtts, intervals, newline, sign, isInserte);
        }
        if (space < 0) {
            var index = str.lastIndexOf("\n");
            str = str.substring(0, index);
        }
        return str;
    };
    AttributeData.getAttStrEx = function (att, intervals, newline, sign, isInserte, isShowAttName, info, endSign, attrs) {
        if (intervals === void 0) { intervals = 4; }
        if (newline === void 0) { newline = 1; }
        if (sign === void 0) { sign = "+"; }
        if (isInserte === void 0) { isInserte = false; }
        if (isShowAttName === void 0) { isShowAttName = true; }
        var str = "";
        var space = 0;
        if (att instanceof AttributeData) {
            return this.getAttStrByType(att, intervals, sign, isInserte, isShowAttName, attrs);
        }
        if (!(att instanceof Array)) {
            var objAtts = [];
            for (var k in this.translate) {
                if (!isNaN(att[k])) {
                    var a = new AttributeData;
                    a.type = parseInt(this.translate[k]);
                    a.value = att[k];
                    objAtts.push(a);
                }
            }
            return this.getAttStr(objAtts, intervals, newline, sign, isInserte);
        }
        else {
            var atts = att;
            var len = atts.length - 1;
            for (var i = 0; i < atts.length; i++) {
                if (atts[i].type == 0)
                    continue;
                str += this.getAttStrByType(atts[i], intervals, sign, isInserte, isShowAttName, attrs);
                if (info && info.attr_add) {
                    str += "+" + Math.floor(atts[i].value * (info.attr_add / 100));
                }
                if (endSign)
                    str += endSign;
                if (len + space > i) {
                    for (var j = 0; j < newline; j++) {
                        str += "\n";
                    }
                }
            }
        }
        if (space < 0) {
            var index = str.lastIndexOf("\n");
            str = str.substring(0, index);
        }
        return str;
    };
    /**
     * 通过属性对象数组获取字符串
     * @param att       属性对象(支持AttributeData[] | AttributeData | config )
     * @param format  属性名与属性值间隔多宽(默认4格)
     */
    AttributeData.getAttStr1 = function (att, format, addColor) {
        if (addColor === void 0) { addColor = true; }
        var str = "";
        for (var i = 0; i < att.length; i++) {
            str += this.getAttStrByType1(att[i], format, addColor);
            if (i < att.length - 1) {
                str += StringUtils.repeatStr("\n", format.emptyLine + 1);
            }
        }
        return str;
    };
    /**
     * 通过属性对象获取字符串（例如：攻击 +1000)
     * @param att   属性对象
     * @param format  间隔多宽(默认4格)
     */
    AttributeData.getAttStrByType1 = function (att, format, addColor) {
        if (addColor === void 0) { addColor = true; }
        var typeName = format.addSpce ? AttributeData.getAttrStrWithSpaceByType(att.type) : AttributeData.getAttrStrByType(att.type);
        var type = att.type;
        var sign = format.sign;
        var valueStr = "";
        if (type == 7 /* atCrit */)
            valueStr = (att.value / 100) + "%";
        else if (type == 60 /* atTogetherHolyDamege */ || type == 57 /* atHolyDamege */)
            valueStr = att.value.toString();
        else if (type >= 11 /* atHpEx */)
            if (type == 15 /* atStunTime */)
                valueStr = (att.value / 1000) + LangMgr.getValueByKey('activitSS');
            else if (type == 12 /* atAtkEx */)
                valueStr = (att.value / 100) + "%";
            else if (type == 17 /* atCritHurt */)
                valueStr = (att.value >> 0) + "";
            else
                valueStr = ((att.value / 100) >> 0) + "%";
        else
            valueStr = att.value.toString();
        var str = addColor ? StringUtils.addColor(typeName + format.sign, format.wordColor) : typeName + format.sign;
        if (format.isShowAttName)
            str = StringUtils.complementByChar(str, format.intervals);
        var result = str + (addColor ? StringUtils.addColor(valueStr, format.attrColor) : valueStr);
        return result;
    };
    AttributeData.getExAttStr = function (att, format, addColor) {
        if (addColor === void 0) { addColor = true; }
        var exAttStr = "";
        for (var i = 0; i < att.length; i++) {
            exAttStr += this.getExAttStrByType(att[i], format, addColor);
            if (i < att.length - 1) {
                exAttStr += StringUtils.repeatStr("\n", format.emptyLine + 1);
            }
        }
        return exAttStr;
    };
    AttributeData.getExAttStrByType = function (att, format, addColor) {
        if (addColor === void 0) { addColor = true; }
        var typeName = AttributeData.getExtAttrStrByType(att.type);
        var valueStr = "";
        if (att.type == 4 /* eatGodBlessRate */
            || att.type == 3 /* eatGodBlessProbability */
            || att.type == 12 /* eatAttackAddHpProbability */
            || att.type == 5 /* eatDeathCurseProbability */
            || att.type == 31 /* eatAddWarriorDamageInc */
            || att.type == 32 /* eatAddMageDamageInc */
            || att.type == 33 /* eatAddTaoistDamageInc */
            || att.type == 16 /* eatAddToTaoistDamageInc */
            || att.type == 17 /* eatSubWarriorDamageInc */
            || att.type == 18 /* eatSubMageDamageInc */
            || att.type == 19 /* eatSubTaoistDamageInc */
            || att.type == 20 /* eatTogetherHitFree */
            || att.type == 26 /* eatMiss */
            || att.type == 21 /* eatTogetherHitMonDamageInc */
            || att.type == 22 /* eatTogetherHitRoleDamageInc */
            || att.type == 14 /* eatAddToWarriorDamageInc */
            || att.type == 15 /* eatAddToMageDamageInc */
            || att.type == 15 /* eatAddToMageDamageInc */
            || att.type == 6 /* eatDeathCurseDamageIncrease */) {
            valueStr = att.value / 100 + "%";
        }
        else if (att.type == 7 /* eatDeathCurseTime */) {
            valueStr = att.value / 1000 + LangMgr.getValueByKey("activitSS");
        }
        else if (att.type == 2 /* eatIgnoreReflect */) {
            valueStr = "";
        }
        else {
            valueStr = "" + att.value;
        }
        var str = addColor ? StringUtils.addColor(typeName + format.sign, format.wordColor) : typeName + format.sign;
        format.isShowAttName && (str = StringUtils.complementByChar(str, format.intervals));
        var result = str + (addColor ? StringUtils.addColor(valueStr, format.attrColor) : valueStr);
        return result;
    };
    /**
     * 这个函数即将被getAttStrByType1替换
     * 通过属性对象获取字符串（例如：攻击 +1000)
     * @param att   属性对象
     * @param interval  间隔多宽(默认4格)
     * @param sign  符号 默认 +
     * @param isInserte  是否插入空格 默认false
     * @param isShowAttName    是显示属性名字（例如false： +1000)
     */
    AttributeData.getAttStrByType = function (att, interval, sign, isInserte, isShowAttName, atts) {
        if (interval === void 0) { interval = 4; }
        if (sign === void 0) { sign = "+"; }
        if (isInserte === void 0) { isInserte = true; }
        if (isShowAttName === void 0) { isShowAttName = true; }
        var str = "";
        if (isShowAttName) {
            if (isInserte) {
                str = StringUtils.complementByChar(AttributeData.getAttrStrByType(att.type), interval * 8);
            }
            else {
                str = AttributeData.getAttrStrByType(att.type);
            }
        }
        switch (att.type) {
            case 7 /* atCrit */:
            case 63 /* atZhuiMingPro */:
                str += sign + (att.value / 100) + "%";
                break;
            case 15 /* atStunTime */:
                str += sign + (att.value / 1000) + LangMgr.getValueByKey('activitSS');
                break;
            case 28 /* atJob1HpEx */:
            case 29 /* atJob2HpEx */:
            case 30 /* atJob3HpEx */:
            case 0 /* atHp */:
            case 1 /* atMp */:
            case 2 /* atMaxHp */:
            case 3 /* atMaxMp */:
            case 4 /* atAttack */:
            case 5 /* atDef */:
            case 6 /* atRes */:
            case 8 /* atTough */:
            case 9 /* atMoveSpeed */:
            case 10 /* atAttackSpeed */:
            case 26 /* maxNeiGong */:
            case 31 /* atNeiGongRestore */:
            case 45 /* atJob1AtkEx */:
            case 46 /* atJob2AtkEx */:
            case 47 /* atJob3AtkEx */:
            case 48 /* atJob1DefEx */:
            case 49 /* atJob2DefEx */:
            case 50 /* atJob3DefEx */:
            case 51 /* atJob1ResEx */:
            case 52 /* atJob2ResEx */:
            case 53 /* atJob3ResEx */:
            case 57 /* atHolyDamege */:
            case 60 /* atTogetherHolyDamege */:
            case 64 /* atZhuiMingVal */:
            case 17 /* atCritHurt */:
            case 76 /* atDeadLyHurt */:
            case 77 /* atDeadLyHurtResist */:
            case 78 /* atCritHurtResist */:
            case 82 /* atHearthDamege */:
            case 85 /* atDblDef */:
                str += sign + att.value;
                break;
            case 86 /* atDamagePro */:
            case 65 /* atHuiXinDamage */:
                str += sign + att.value / 100 + "%";
                break;
            default:
                str += sign + ((att.value / 100).toFixed(1)) + "%";
        }
        if (atts) {
            for (var i = 0; i < atts.length; i++) {
                if (atts[i].type == att.type) {
                    str = atts[i].value.toString();
                    break;
                }
            }
        }
        else if (att.type == 55 /* atYuPeiDeterDam */) {
            str = "|C:0xFF0000&T:" + str + "|";
        }
        return str;
    };
    /**
     * 通过属性对象获取扩展属性字符串
     * @param att   属性对象
     * @param interval  间隔多宽(默认4格)
     * @param sign  符号 默认 +
     * @param isInserte  是否插入空格 默认false
     * @param isShowAttName    是显示属性名字（例如false： +1000)
     */
    AttributeData.getExtAttStrByType = function (att, interval, sign, isInserte, isShowAttName) {
        if (interval === void 0) { interval = 4; }
        if (sign === void 0) { sign = "+"; }
        if (isInserte === void 0) { isInserte = false; }
        if (isShowAttName === void 0) { isShowAttName = true; }
        var str = "";
        if (isShowAttName)
            str = StringUtils.complementByChar(AttributeData.getExtAttrStrByType(att.type), interval * 8);
        if (att.type == 4 /* eatGodBlessRate */ || att.type == 3 /* eatGodBlessProbability */ || att.type == 12 /* eatAttackAddHpProbability */ || att.type == 5 /* eatDeathCurseProbability */
            || att.type == 31 /* eatAddWarriorDamageInc */ || att.type == 32 /* eatAddMageDamageInc */ || att.type == 33 /* eatAddTaoistDamageInc */
            || att.type == 16 /* eatAddToTaoistDamageInc */ || att.type == 17 /* eatSubWarriorDamageInc */ || att.type == 18 /* eatSubMageDamageInc */
            || att.type == 19 /* eatSubTaoistDamageInc */ || att.type == 20 /* eatTogetherHitFree */ || att.type == 26 /* eatMiss */
            || att.type == 21 /* eatTogetherHitMonDamageInc */ || att.type == 22 /* eatTogetherHitRoleDamageInc */
            || att.type == 14 /* eatAddToWarriorDamageInc */ || att.type == 15 /* eatAddToMageDamageInc */ || att.type == 15 /* eatAddToMageDamageInc */
            || att.type == 6 /* eatDeathCurseDamageIncrease */)
            str += sign + (att.value / 100) + "%";
        else if (att.type == 7 /* eatDeathCurseTime */) {
            str += sign + (att.value / 1000) + LangMgr.getValueByKey('activitSS');
        }
        else if (att.type == 2 /* eatIgnoreReflect */) {
            str += "";
        }
        else
            str += sign + att.value;
        return str;
    };
    /**
     * 字符串插入空格
     * @param str  要更改的字符串
     * @param blankNum 插入空格数
     * @param location 插入位置 0左边 1 中间  2 右边（默认中间）
     */
    AttributeData.inserteBlank = function (str, blankNum, location) {
        if (location === void 0) { location = 1; }
        var strLen = str.length;
        var blank = "";
        while (blankNum--) {
            blank += " ";
        }
        var nStr = "";
        switch (location) {
            case 0:
                nStr = blank + str;
                break;
            case 1:
                nStr = str.slice(0, strLen / 2) + blank + str.slice(strLen / 2);
                break;
            case 2:
                nStr = str + blank;
                break;
        }
        return nStr;
    };
    /**
     * 通过物品来获取装备属性
     * @param data
     */
    AttributeData.getAttrInfoByItemData = function (data) {
        var config = DataCenter.ins().EquipConfig[data.configID];
        var attrStr = "";
        var type = 0;
        for (var k in this.translate) {
            if (config[k] <= 0)
                continue;
            for (var i = 0; i < data.att.length; i++) {
                type = data.att[i].type;
                if (this.translate[k] == type) {
                    attrStr += AttributeData.getAttrStrByType(type) + ": ";
                    attrStr += config[k] + ' +' + data.att[i].value + "\n";
                }
            }
        }
        return attrStr;
    };
    AttributeData.getAttrStrByType = function (type) {
        return LangMgr.getValueByKey("attributeType" + type);
    };
    AttributeData.getAttrStrWithSpaceByType = function (type) {
        return LangMgr.getValueByKey("attributeOther" + type);
    };
    AttributeData.getExtAttrStrByType = function (type) {
        return LangMgr.getValueByKey("exAttributeType" + type);
    };
    AttributeData.getEEquipAttrStrByType = function (type) {
        return LangMgr.getValueByKey("equipAddAttrType" + type);
    };
    AttributeData.getExAttrNameByAttrbute = function (att, showValue, sign, valueColor) {
        if (showValue === void 0) { showValue = false; }
        if (sign === void 0) { sign = "："; }
        if (valueColor === void 0) { valueColor = undefined; }
        var str = AttributeData.getExtAttrStrByType(att.type);
        var value = "";
        if (showValue) {
            switch (att.type) {
                case 31 /* eatAddWarriorDamageInc */:
                case 32 /* eatAddMageDamageInc */:
                case 33 /* eatAddTaoistDamageInc */:
                case 17 /* eatSubWarriorDamageInc */:
                case 18 /* eatSubMageDamageInc */:
                case 19 /* eatSubTaoistDamageInc */:
                case 20 /* eatTogetherHitFree */:
                case 21 /* eatTogetherHitMonDamageInc */:
                case 22 /* eatTogetherHitRoleDamageInc */:
                case 8 /* eatAllCrit */:
                case 42 /* eatHit */:
                case 26 /* eatMiss */:
                    value = att.value / 100 + "%";
                    break;
                default:
                    value += att.value;
            }
        }
        if (valueColor != undefined) {
            str = "" + str + sign + "|C:" + valueColor + "&T:" + value + "|";
        }
        else {
            str += sign + value;
        }
        return str;
    };
    AttributeData.getAttrStarAdd = function (attrbute, count) {
        var attr = [];
        attrbute.forEach(function (element) {
            var attrdata = new AttributeData();
            attrdata.type = element.type;
            attrdata.value = (element.value * count) >> 0;
            attr.push(attrdata);
        });
        return attr;
    };
    AttributeData.getAttrNameByAttrbute = function (att, showValue, sign, isInserte, valueColor) {
        if (showValue === void 0) { showValue = false; }
        if (sign === void 0) { sign = "："; }
        if (isInserte === void 0) { isInserte = false; }
        if (valueColor === void 0) { valueColor = undefined; }
        var str = AttributeData.getAttrStrByType(att.type);
        if (isInserte)
            str = AttributeData.inserteBlank(str, 7);
        var value = "";
        if (showValue) {
            switch (att.type) {
                case 7 /* atCrit */:
                case 8 /* atTough */:
                    value = att.value / 100 + "%";
                    break;
                default:
                    value = att.value + "";
            }
        }
        if (valueColor != undefined) {
            str = "" + str + sign + "|C:" + valueColor + "&T:" + value + "|";
        }
        else {
            str += sign + value;
        }
        return str;
    };
    /**给传入的属性数组加入百分比加成 返回新的属性数字*/
    AttributeData.getPercentAttr = function (arrAttr, percent, isAdd, types) {
        if (isAdd === void 0) { isAdd = true; }
        var newarrAttr = [];
        for (var i = 0; i < arrAttr.length; i++) {
            var attrData = new AttributeData();
            attrData.type = arrAttr[i].type;
            if (!types || types.indexOf(attrData.type) != -1) {
                if (isAdd) {
                    attrData.value = Math.floor(arrAttr[i].value * (1 + percent));
                }
                else {
                    attrData.value = Math.floor(arrAttr[i].value * percent);
                }
                newarrAttr.push(attrData);
            }
        }
        return newarrAttr;
    };
    AttributeData.sortAttribute = function (a, b) {
        return SortUtils.sortAscByKey(a.type, b.type);
    };
    AttributeData.copyAttrbute = function (attr) {
        var att = new AttributeData();
        att.type = attr.type;
        att.value = attr.value;
        return att;
    };
    AttributeData.addAttrToList = function (list, ele) {
        if (!list[ele.type]) {
            var newAttr = new AttributeData;
            newAttr.type = ele.type;
            newAttr.value = 0;
            list[ele.type] = newAttr;
        }
        var listItem = list[ele.type];
        listItem.value += ele.value;
    };
    AttributeData.combineAtts = function (attrs) {
        if (!attrs || !attrs.length) {
            return attrs;
        }
        var type;
        var combineAtts = [];
        var len = attrs.length;
        var obj = new Object;
        var temp = [];
        for (var i = 0; len > i; i++) {
            type = attrs[i].type;
            if (obj[type] == undefined) {
                obj[type] = 0;
                temp.push(type);
            }
            obj[attrs[i].type] += attrs[i].value;
        }
        len = temp.length;
        for (var i = 0; len > i; i++) {
            type = temp[i];
            combineAtts.push(new AttributeData(type, +obj[type]));
        }
        return combineAtts;
    };
    AttributeData.getCustomAttrValue = function (attrs, type) {
        var val = 0;
        for (var i = 0; i < attrs.length; i++) {
            if (attrs[i].type == type && type == 65 /* atHuiXinDamage */) {
                val = attrs[i].value / 100;
            }
        }
        return val;
    };
    AttributeData.filterAttrs = function (attrs, filters) {
        var index = 0;
        while (index < attrs.length) {
            if (-1 == filters.indexOf(attrs[index].type)) {
                attrs.splice(index, 1);
            }
            else {
                index++;
            }
        }
    };
    AttributeData.getAttStrSpecial = function (att, intervals, newline, sign, isInserte, isShowAttName) {
        if (intervals === void 0) { intervals = 4; }
        if (newline === void 0) { newline = 1; }
        if (sign === void 0) { sign = "+"; }
        if (isInserte === void 0) { isInserte = false; }
        if (isShowAttName === void 0) { isShowAttName = true; }
        var attStr = "";
        var datas = [];
        for (var i = 0; i < att.length; i++) {
            if (att[i]) {
                for (var j = 0; j < att[i].length; j++) {
                    if (att[i][j].value) {
                        var state = false;
                        for (var k = 0; k < datas.length; k++) {
                            if (datas[k].type == att[i][j].type) {
                                if (!datas[k].desc) {
                                    datas[k].desc = [];
                                }
                                datas[k].desc.push(att[i][j].value + "");
                                state = true;
                                break;
                            }
                        }
                        if (!state) {
                            datas.push({
                                type: att[i][j].type,
                                desc: ["" + att[i][j].value]
                            });
                        }
                    }
                }
            }
        }
        for (var i = 0; i < datas.length; i++) {
            for (var j = 0; j < datas[i].desc.length; j++) {
                if (datas[i].desc[j]) {
                    if (j) {
                        switch (datas[i].type) {
                            case 2 /* atMaxHp */:
                            case 4 /* atAttack */:
                            case 5 /* atDef */:
                            case 6 /* atRes */:
                                attStr += "+" + datas[i].desc[j];
                                break;
                            default:
                                attStr = "+" + Number(datas[i].desc[j]) / 100 + "%";
                        }
                    }
                    else {
                        attStr += this.getAttStrByType(new AttributeData(datas[i].type, Number(datas[i].desc[j])), intervals, sign, isInserte, isShowAttName);
                    }
                }
            }
            for (var j = 0; newline > j; j++) {
                attStr += "\n";
            }
            if (i == datas.length - 1) {
                for (var j = 0; newline > j; j++) {
                    var index = attStr.lastIndexOf("\n");
                    attStr = attStr.substring(0, index);
                }
            }
        }
        return attStr;
    };
    AttributeData.getBetweenAttrs = function (aAttrs, bAttrs) {
        var attrs = [];
        for (var i = 0; i < bAttrs.length; i++) {
            var state = false;
            for (var j = 0; j < aAttrs.length; j++) {
                if (bAttrs[i].type == aAttrs[j].type) {
                    var attributeData = new AttributeData;
                    attributeData.type = bAttrs[i].type;
                    attributeData.value = bAttrs[i].value - aAttrs[j].value;
                    if (attributeData.value) {
                        attrs.push(attributeData);
                    }
                    state = true;
                    break;
                }
            }
            if (!state) {
                var attributeData = new AttributeData;
                attributeData.type = bAttrs[i].type;
                attributeData.value = bAttrs[i].value;
                attrs.push(attributeData);
            }
        }
        return attrs;
    };
    AttributeData.FILTER_EXTDATA_ID = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 35, 37, 38, 39];
    AttributeData.FILTER_BASE_DATA_ID = [18, 20];
    AttributeData.attrNames = [
        'hp',
        'atk',
        'def',
        'res'
    ];
    AttributeData.itemTranslate = {
        'hp': 2 /* atMaxHp */,
        'atk': 4 /* atAttack */,
        'def': 5 /* atDef */,
        'res': 6 /* atRes */
    };
    AttributeData.translate = {
        'hp': 2 /* atMaxHp */,
        'atk': 4 /* atAttack */,
        'def': 5 /* atDef */,
        'res': 6 /* atRes */,
        'crit': 7 /* atCrit */,
        'tough': 8 /* atTough */
    };
    //百分比关联基础属性
    AttributeData.exRelate = {
        '2': 11 /* atHpEx */,
        '4': 12 /* atAtkEx */,
        '5': 23 /* atDefEx */,
        '6': 24 /* atResEx */
    };
    AttributeData.exRelateEx = {
        '11': 2 /* atMaxHp */,
        '12': 4 /* atAttack */,
        '23': 5 /* atDef */,
        '24': 6 /* atRes */
    };
    AttributeData.showTypeList = [
        4 /* atAttack */,
        2 /* atMaxHp */,
        5 /* atDef */,
        6 /* atRes */
    ];
    return AttributeData;
}());
__reflect(AttributeData.prototype, "AttributeData");
/**属性格式化 */
var AttributeFormat = (function () {
    function AttributeFormat() {
        /** 属性名与属性值间隔多宽(默认4格)*/
        this.intervals = 4;
        /**两个属性值之间的空行数量 ,默认为0 */
        this.emptyLine = 0;
        /**符号 +,-,: */
        this.sign = "+";
        /**空格的数量 */
        this.spaceCount = 0;
        /**是否显示属性名 */
        this.isShowAttName = 1;
        /**文字颜色 */
        this.wordColor = ColorUtils.ATTR_DEFAULT_COLOR;
        /**属性颜色 */
        this.attrColor = ColorUtils.ATTR_DEFAULT_COLOR;
    }
    /**
     * 根据参数获取显示格式
     */
    AttributeFormat.getFormat = function (intervals, emptyLine, sign, spaceCount, isShowAttName, wordColor, attrColor, addSpce) {
        if (intervals === void 0) { intervals = 4; }
        if (emptyLine === void 0) { emptyLine = 0; }
        if (sign === void 0) { sign = "+"; }
        if (spaceCount === void 0) { spaceCount = 0; }
        if (isShowAttName === void 0) { isShowAttName = 1; }
        if (wordColor === void 0) { wordColor = ColorUtils.ATTR_DEFAULT_COLOR; }
        if (attrColor === void 0) { attrColor = ColorUtils.ATTR_DEFAULT_COLOR; }
        if (addSpce === void 0) { addSpce = false; }
        var format = new AttributeFormat();
        format.intervals = intervals;
        format.emptyLine = emptyLine;
        format.sign = sign;
        format.spaceCount = spaceCount;
        format.isShowAttName = isShowAttName;
        format.wordColor = wordColor;
        format.attrColor = attrColor;
        format.addSpce = addSpce;
        return format;
    };
    /**
     * 格式1如下
     * 力量:400
     * 敏捷:400
    */
    AttributeFormat.FORMAT_1 = function () {
        return this.getFormat(0, 0, "：");
    };
    /**
     * 格式1如下
     * 力量:400(绿色数字)
     * 敏捷:400(绿色数字)
    */
    AttributeFormat.FORMAT_2 = function () {
        var format = this.FORMAT_1();
        format.attrColor = ColorUtils.GREEN;
        return format;
    };
    return AttributeFormat;
}());
__reflect(AttributeFormat.prototype, "AttributeFormat");
/**
 * 死亡引导类
 */
var DieGuide = (function (_super) {
    __extends(DieGuide, _super);
    function DieGuide() {
        var _this = _super.call(this) || this;
        _this.resImg = ["vipbn2_png", "vipbn2_1_png"];
        _this.addCustomEvent(510 /* CONFRONT_FIGHT_RESULT */, _this.dispatchdieGuide);
        _this.addCustomEvent(177 /* PAY_RECHARGE1_DATA */, _this.initRecharge1);
        _this.addCustomEvent(511 /* SERVER_STORAGE_INIT_SETTING */, _this.initSetting);
        return _this;
    }
    DieGuide.ins = function () {
        return _super.ins.call(this);
    };
    DieGuide.prototype.initRecharge1 = function () {
        this.isInitRecharge1 = true;
    };
    DieGuide.prototype.initSetting = function () {
        this.isInitSetting = true;
    };
    /**
     * 首死亡处理
     */
    DieGuide.prototype.dispatchdieGuide = function (result) {
        if (!result) {
            var dieTime = ServerStorage.ins().getValue(4 /* diedFirstTime */);
            if (!dieTime) {
                dieTime = Math.floor(new Date().getTime() / 1000);
                ServerStorage.ins().setValue(4 /* diedFirstTime */, dieTime);
            }
            //首充后的抽次失败
            var payVo = payControl.getRechargeData(0);
            if (payVo.num) {
                dieTime = ServerStorage.ins().getValue(10 /* diedFirstTime2 */);
                if (!dieTime) {
                    dieTime = Math.floor(new Date().getTime() / 1000);
                    ServerStorage.ins().setValue(10 /* diedFirstTime2 */, dieTime);
                }
            }
        }
        ;
        EventMgr.ins().dispatch(696 /* DIE_GUIDE */);
    };
    /**
     * 副本红点死亡引导判定
     */
    DieGuide.prototype.dieFbRedPoint = function (resetCount, fbId) {
        //玩家是否达到开启副本条件条件
        var fbconfig = DataCenter.ins().DailyCopyConfig[fbId];
        if (!fbconfig) {
            return false;
        }
        if (reincarnateControl.lv < fbconfig.zsLevel || ActorControl.level < fbconfig.levelLimit) {
            return false;
        }
        //是否点击过扫荡
        var timer = ServerStorage.ins().getValue(8 /* FB */);
        if (timer) {
            var index = fbId - 3000;
            if ((timer >> index) & 1) {
                return false; //已经触发过扫荡
            }
        }
        //如果是同一天 则对首次死亡引导进行处理
        var dieTime = ServerStorage.ins().getValue(4 /* diedFirstTime */);
        if (!dieTime) {
            return false; //未首次死亡过
        }
        var curTime = Math.floor(new Date().getTime() / 1000); //秒
        if (curTime > (DateUtils.getTodayZeroSecond(new Date(dieTime * 1000)) + 60 * 60 * 24)) {
            return false; //不是和首次死亡同一天
        }
        if (resetCount > 0) {
            return true;
        }
        return false;
    };
    /**
     * 是否弹出首充或vip引导页
     */
    DieGuide.prototype.checkFirstChargeOrVIPWin = function () {
        if (!this.isInitRecharge1 || !this.isInitSetting) {
            return;
        }
        if (copyControl.pkGqboss) {
            return;
        }
        var payVo = payControl.getRechargeData(0);
        //未首充
        if (!payVo.num) {
            //等级限制
            if (ActorControl.level >= 30) {
                //弹出首充
                var recharge = ServerStorage.ins().getValue(5 /* recharge1 */);
                if (!recharge) {
                    var view = UIMgr.playFun;
                    if (view) {
                        view.setDieGuide(DieGuide.RECHARGE);
                    }
                    ServerStorage.ins().setValue(5 /* recharge1 */, DieGuide.Show);
                    return;
                }
            }
            //首次死亡限制
            var dieTime = ServerStorage.ins().getValue(4 /* diedFirstTime */);
            if (dieTime && dieTime > 0) {
                //弹出首充
                var recharge = ServerStorage.ins().getValue(9 /* recharge2 */);
                if (!recharge) {
                    var view = UIMgr.playFun;
                    if (view) {
                        view.setDieGuide(DieGuide.RECHARGE);
                    }
                    ServerStorage.ins().setValue(9 /* recharge2 */, DieGuide.Show);
                    return;
                }
            }
        }
        else {
            //已首充 首次死亡
            var dieTime = ServerStorage.ins().getValue(10 /* diedFirstTime2 */);
            if (dieTime && dieTime > 0) {
                if (vipControl.lv < 3) {
                    //弹出VIP引导
                    var vipGuide = ServerStorage.ins().getValue(6 /* vip */);
                    if (!vipGuide) {
                        var view = UIMgr.playFun;
                        if (view) {
                            view.setDieGuide(DieGuide.VIP);
                        }
                        ServerStorage.ins().setValue(6 /* vip */, DieGuide.Show);
                        return;
                    }
                }
            }
        }
    };
    /**
     * 根据对应开启角色显示引导图片
     */
    DieGuide.prototype.getOpenRoles = function () {
        var id = ServerStorage.ins().getValue(7 /* role */);
        if (id == DieGuide.Show2) {
            if (heroControl.subRolesLen >= 3) {
                return "";
            }
        }
        var len = 3;
        for (var i = 1; i < len; i++) {
            var role = heroControl.getSubRoleByIndex(i);
            if (!role) {
                if (!id) {
                    ServerStorage.ins().setValue(7 /* role */, DieGuide.Show);
                }
                else if (id == DieGuide.Show && i == 2) {
                    ServerStorage.ins().setValue(7 /* role */, DieGuide.Show2);
                }
                return this.resImg[i - 1];
            }
        }
        return "";
    };
    /**
     * 设置扫荡位
     */
    DieGuide.prototype.setClick = function (fbID) {
        var index = fbID - 3000;
        var timer = ServerStorage.ins().getValue(8 /* FB */);
        if (!timer) {
            timer = 0;
        }
        if ((timer >> index) & 1) {
            return;
        }
        timer = timer | 1 << index;
        ServerStorage.ins().setValue(8 /* FB */, timer);
    };
    /**
     * 材料副本全部满标记位
     */
    DieGuide.prototype.setMaxFb = function (sweeps) {
        var timer = ServerStorage.ins().getValue(8 /* FB */);
        for (var i = 0; i < sweeps.length; i++) {
            if (sweeps[i] > 3000) {
                var index = sweeps[i] - 3000;
                if ((timer >> index) & 1) {
                    continue;
                }
                timer = timer | 1 << index;
                //获取材料副本已通关列表 算出通关标记位状态
                ServerStorage.ins().setValue(8 /* FB */, timer);
            }
        }
    };
    DieGuide.prototype.getDiedGainWay = function () {
        var datas = [];
        var len = Object.keys(DataCenter.ins().VipConfig).length;
        for (var key in DataCenter.ins().DeathGuideConfig) {
            var deathGuideConfig = DataCenter.ins().DeathGuideConfig[key];
            if (reincarnateControl.lv <= deathGuideConfig.zslv || ActorControl.level <= deathGuideConfig.lv) {
                for (var i in deathGuideConfig.gainWay) {
                    var type = deathGuideConfig.gainWay[i][0];
                    if (type == 16) {
                        var pic_img = DieGuide.ins().getOpenRoles();
                        if (pic_img) {
                            var desConfig = DataCenter.ins().DeathgainWayConfig[type];
                            desConfig.itemId = pic_img;
                            datas.push(type);
                        }
                        continue;
                    }
                    if (type == 14 || type == 20) {
                        var maxVipLv = Object.keys(DataCenter.ins().VipConfig).length;
                        if (vipControl.lv >= maxVipLv) {
                            continue;
                        }
                    }
                    datas.push(type);
                }
                break;
            }
        }
        return datas;
    };
    DieGuide.Show = 1; //显示过(包括第二角色)
    DieGuide.Show2 = 2; //第三角色
    DieGuide.RECHARGE = 1;
    DieGuide.VIP = 2;
    DieGuide.FB = 3;
    return DieGuide;
}(BaseSystem));
__reflect(DieGuide.prototype, "DieGuide");
var DropControl = (function () {
    function DropControl() {
    }
    DropControl.init = function (parent, parName) {
        this.dropContainer = parent;
        this.dropNameContainer = parName;
        EventMgr.addListener(131 /* CONFRONT_CREATE_DROP */, this.addDrop, this);
    };
    DropControl.start = function (entity) {
        this.mainEntity = entity ? entity : UnitMgr.ins().getNoDieRole();
        if (MapControl.copyType == 2 /* MATERIAL */
            || MapControl.copyType == 100 /* GOLD */
            || MapControl.copyType == 1 /* GUANQIABOSS */ && SwitchMgr.ins().checkOpen(25 /* QUICKDROP */)
            || (MapControl.copyType == 6 /* PERSONAL */ || confrontControl.isEncounter() || MapControl.copyType == 9 /* TIAOZHAN */) && GameServer.serverOpenDay > 0
            || MapControl.copyType == 29 /* GUARD_WEAPON */
            || MapControl.copyType == 32 /* KF_BOSS */
            || MapControl.copyType == 41 /* DEMON */
            || MapControl.copyType == 43 /* BALL */
            || MapControl.copyType == 44 /* DARKHALL */
            || MapControl.copyType == 47 /* SHENWUJINDI */
            || MapControl.copyType == 55 /* ADENTURE */
            || MapControl.copyType == 57 /* ZSBOSS */
            || MapControl.copyType == 58 /* DEVILDOM_FINAL_BOSS */
            || MapControl.copyType == 62 /* TUTEN_BOSS */
            || MapControl.copyType == 74 /* KFTOWER */
            || MapControl.copyType == 48 /* UNIONMONTER */
            || MapControl.copyType == 63 /* KF_ZH_BOSS */
            || bossControl.checkIsOpenMult()) {
            TimerMgr.ins().doTimer(1200, 1, this.delayTweenItem, this);
        }
        else if (!TimerMgr.ins().isExists(this.findDrop, this)) {
            TimerMgr.ins().doTimer(100, 0, this.findDrop, this);
        }
        this.starting = true;
    };
    DropControl.stop = function () {
        TimerMgr.ins().removeAll(this);
        this.starting = false;
        HookControl.ins().isFindDrop = false;
    };
    DropControl.delayTweenItem = function () {
        if (!DropControl.getItemCount()) {
            this.checkDrop();
            return;
        }
        var entity = this.mainEntity;
        if (!entity) {
            this.clearDrop();
            return;
        }
        for (var key in this.itemPos) {
            DropControl.tweenItem(this.itemPos[key], entity, key);
        }
    };
    DropControl.tweenItem = function (item, role, key) {
        if (item == null) {
            DebugUtils.warn(LangMgr.getValueByKey('sceneTips1'));
            return;
        }
        //将icon移到上层
        DisplayUtils.removeFromParent(item);
        item.setItemParent(DropControl.dropNameContainer);
        var tweenObj = egret.Tween.get(item);
        var randowNum = Math.random() * 500 + 200;
        tweenObj.wait(randowNum).to({ x: role.x, y: role.y - 50 }, 450, egret.Ease.backIn).call(function () {
            egret.Tween.removeTweens(item);
            DisplayUtils.removeFromParent(item);
            item.destruct();
            delete DropControl.itemPos[key];
            if (!DropControl.getItemCount()) {
                DropControl.checkDrop();
            }
        }, DropControl);
    };
    DropControl.getItemCount = function () {
        return DropControl.itemPos ? Object.keys(DropControl.itemPos).length : 0;
    };
    /**
     * 添加一个掉落物（格子坐标）会自动检测当前位置是否有掉落物，如果有掉落在附近的格子
     * @param x_Grid
     * @param y_Grid
     * @param parent
     * @param itemData
     */
    DropControl.addDrop = function (arr) {
        var x_Grid = arr[0];
        var y_Grid = arr[1];
        var itemData = arr[2];
        if (!itemData.dropEffId && DataCenter.ins().ItemConfig[itemData.id]) {
            itemData.dropEffId = DataCenter.ins().ItemConfig[itemData.id].dropeff;
        }
        var unitItemNameMerge = ObjectPool.pop("UnitItemNameMerge");
        unitItemNameMerge.setData(itemData);
        var x_g = 0;
        var y_g = 0;
        var i = 0;
        var flag = "|";
        if (this.itemPos[x_Grid + flag + y_Grid] || !MapControl.aStar.isWalkable(x_Grid, y_Grid)) {
            for (i = 0; i < this.orderX.length; i++) {
                x_g = x_Grid + this.orderX[i];
                y_g = y_Grid + this.orderY[i];
                if (MapControl.aStar.isWalkable(x_g, y_g) == false)
                    continue;
                if (this.itemPos[x_g + flag + y_g] == null)
                    break;
            }
            //超过9个，第二圈用遍历
            if (i >= this.orderX.length) {
                var index = 2;
                var b = true;
                while (b) {
                    for (var i_1 = x_Grid - index; i_1 < x_Grid + index && b; i_1++) {
                        for (var j = y_Grid - index; j < y_Grid + index && b; j++) {
                            x_g = i_1;
                            y_g = j;
                            if (MapControl.aStar.isWalkable(x_g, y_g) == false)
                                continue;
                            if (this.itemPos[x_g + flag + y_g] == null)
                                b = false;
                        }
                    }
                    index++;
                }
            }
        }
        else {
            x_g = x_Grid;
            y_g = y_Grid;
        }
        unitItemNameMerge.x = MapControl.grip2Point(x_g);
        unitItemNameMerge.y = MapControl.grip2Point(y_g);
        this.itemPos[x_g + flag + y_g] = unitItemNameMerge;
        gameControl.addEntity(unitItemNameMerge);
        unitItemNameMerge.addRoatEffect();
        unitItemNameMerge.addFloatEffect();
        unitItemNameMerge.addEffect();
    };
    /**
     * 清理所有掉落的缓动
     * @returns void
     */
    DropControl.clearAllDropTween = function () {
        if (!this.itemPos)
            return;
        var value = null;
        for (var key in this.itemPos) {
            value = this.itemPos[key];
            if (value && value instanceof UnitItemNameMerge) {
                value.removeRoatEffect();
                value.removeEffect();
            }
        }
    };
    /** 清空掉落物 */
    DropControl.clearDrop = function () {
        DropControl.clearAllDropTween();
        this.stop();
        for (var key in this.itemPos) {
            DisplayUtils.removeFromParent(this.itemPos[key]);
            if (this.itemPos[key])
                this.itemPos[key].destruct();
            ObjectPool.push(this.itemPos[key]);
            delete this.itemPos[key];
        }
        this.curTarget = null;
        if (this.completeFunc) {
            this.completeFunc.func.call(this.completeFunc.funcThis);
            this.completeFunc = null;
        }
    };
    DropControl.findDrop = function () {
        var role = this.mainEntity;
        if (!role)
            return;
        var mylist = UnitMgr.ins().getEntityByTeam(0 /* My */);
        if (this.curTarget) {
            if (!role || role.action == UnitAction.RUN || role.atking) {
                if (role && role.action == UnitAction.RUN) {
                    //解决最小化后捡道具卡住问题
                    if (role.x == this.lastPoint.x && role.y == this.lastPoint.y) {
                        role.playAction(UnitAction.STAND);
                    }
                    else {
                        this.lastPoint.x = role.x;
                        this.lastPoint.y = role.y;
                    }
                }
                return;
            }
        }
        HookControl.ins().isFindDrop = true;
        if (mylist.length > 1) {
            var len = heroControl.subRolesLen;
            var index = 0;
            var dirs = [-1, 1];
            for (var j = 0; j < mylist.length; j++) {
                var element = mylist[j];
                if (element == role || element.action == UnitAction.RUN)
                    continue;
                //跟随主人身后一到两个范围
                var selfMaster = role;
                if (element.infoModel.masterHandle) {
                    var ms = UnitMgr.ins().getEntityByHandle(element.infoModel.masterHandle);
                    if (ms) {
                        selfMaster = ms;
                    }
                }
                if (mylist.length == 2) {
                    dirs = [0];
                }
                var p = DirUtils.getGridByDir(selfMaster.dir + (dirs[index] || 0), MapControl.CELL_SIZE);
                index += 1;
                //无目标时跟随主角
                MapControl.moveEntity(element, selfMaster.x + p.x, selfMaster.y + p.y);
            }
        }
        if (egret.getTimer() - this.waitTime < 200) {
            return;
        }
        var target = null;
        if (this.curTarget) {
            target = this.curTarget;
            if (MathUtils.getDistance(role.x, role.y, target.x, target.y) < MapControl.CELL_SIZE >> 1) {
                //拾取
                for (var i in this.itemPos) {
                    if (this.itemPos[i] == target) {
                        //清理缓存
                        var dropItem = this.itemPos[i];
                        if (dropItem && dropItem instanceof UnitItemNameMerge) {
                            dropItem.removeRoatEffect();
                            dropItem.removeEffect();
                        }
                        //删除
                        delete this.itemPos[i];
                        break;
                    }
                }
                egret.Tween.get(target).wait(100).call(function () {
                    if (target && target.parent) {
                        var point = target.parent.localToGlobal(target.x, target.y);
                        gameControl.dispatchFlyItem({ item: target, point: point });
                        DisplayUtils.removeFromParent(target);
                    }
                    target = null;
                });
                this.curTarget = null;
                this.waitTime = egret.getTimer();
                return;
            }
            else {
                this.curTarget = null;
            }
        }
        var tar = null;
        var xb = Number.MAX_VALUE;
        for (var i in this.itemPos) {
            target = this.itemPos[i];
            //计算距离
            var dist = MathUtils.getDistance(role.x, role.y, target.x, target.y);
            if (xb > dist) {
                xb = dist;
                tar = this.itemPos[i];
            }
        }
        if (tar) {
            this.curTarget = tar;
            MapControl.moveEntity(role, tar.x, tar.y);
            //有掉落物，不处理下面的逻辑
            return;
        }
        this.checkDrop();
        if (MapControl.copyId == 0) {
            copyControl.upGetReward();
        }
    };
    DropControl.checkDrop = function () {
        if (!this.getItemCount()) {
            this.stop();
            if (this.completeFunc) {
                this.completeFunc.func.call(this.completeFunc.funcThis);
                this.completeFunc = null;
            }
            return;
        }
    };
    DropControl.addCompleteFunc = function (f, funcThis) {
        this.completeFunc = { func: f, funcThis: funcThis };
    };
    /**
     *  6   7   8
     *  5   0   1
     *  4   3   2
     */
    DropControl.orderX = [-1, 1, -1, 0, 1, -1, 0, 1];
    DropControl.orderY = [0, 0, 1, 1, 1, -1, -1, -1];
    DropControl.tempDropPoint = new egret.Point();
    DropControl.itemPos = {};
    DropControl.waitTime = 0;
    DropControl.lastPoint = new egret.Point();
    return DropControl;
}());
__reflect(DropControl.prototype, "DropControl");
var EquipPosAniVo = (function () {
    function EquipPosAniVo(x, y, scaleX, scaleY) {
        this.x = x;
        this.y = y;
        this.scaleX = scaleX;
        this.scaleY = scaleY;
    }
    return EquipPosAniVo;
}());
__reflect(EquipPosAniVo.prototype, "EquipPosAniVo");
var EquipVo = (function () {
    function EquipVo() {
    }
    EquipVo.prototype.init = function (datas) {
        this.strengthen = datas[0];
        this.spiritLv = datas[1];
        this.gem = datas[2];
        this.item = new ItemData;
        var startIndex = 3;
        var endIndex = startIndex + ByteConst.ItemDatas.length;
        this.item.init(datas.slice(startIndex, endIndex));
        this.zhuling = datas[endIndex];
        this.soulLv = datas[endIndex + 1];
        this.spiritExp = datas[endIndex + 3];
    };
    return EquipVo;
}());
__reflect(EquipVo.prototype, "EquipVo");
/**
 * 烈焰印记实体特效
 */
var FlameMarkEffect = (function () {
    function FlameMarkEffect(superRingInfoViewSkin, infoModel) {
        this._angle = 0.1;
        this._angles = [0, 0, 0, 0, 0, 0, 0];
        this._circleCenter = { x: 0, y: -72 };
        this._a = 60;
        this._b = 30;
        this._oldBallNum = 0;
        this._curTimes = 0;
        this._isShowBall = true;
        this._ring = superRingInfoViewSkin;
        this._infoModel = infoModel;
        EventMgr.addListener(653 /* FLAME_MARK_INFO */, this.dataChange, this);
        this.usedLyMarkSkill();
    }
    FlameMarkEffect.prototype.dataChange = function () {
        if (this._infoModel && this._infoModel.masterHandle == ActorControl.handle) {
            this.update();
        }
    };
    Object.defineProperty(FlameMarkEffect.prototype, "_parent", {
        get: function () {
            return this._ring.parent;
        },
        enumerable: true,
        configurable: true
    });
    /** 使用了烈焰印记技能 */
    FlameMarkEffect.prototype.usedLyMarkSkill = function () {
        this.resetBalls();
        TimerMgr.ins().removeAll(this);
        var lv = this.getSkillLvById(1);
        if (lv) {
            var cfg = DataCenter.ins().FlameMarkEffectConfig[1][lv];
            lv = this.getSkillLvById(3);
            var mCd = lv ? DataCenter.ins().FlameMarkEffectConfig[3][lv].reloadTime : 0;
            var skillID = cfg.skillId;
            var count = cfg.stamp;
            if (this.getSkillLvById(2)) {
                lv = this.getSkillLvById(2);
                skillID = DataCenter.ins().FlameMarkEffectConfig[2][lv].skillId;
                count = DataCenter.ins().FlameMarkEffectConfig[2][lv].stamp;
            }
            var skillDes = DataCenter.ins().SkillsDescConfig[DataCenter.ins().SkillsConfig[skillID].desc];
            var cdPer = (skillDes.cd - mCd) / count >> 0;
            TimerMgr.ins().doTimer(cdPer, count, this.doTimer, this);
            this._curTimes = 0;
        }
    };
    FlameMarkEffect.prototype.doTimer = function () {
        this._curTimes++;
        this.updateBalls(this._curTimes);
    };
    FlameMarkEffect.prototype.update = function () {
        //技能
        var skillLv, effectCfg;
        var bollNum = 0, realLv = 0;
        for (var i = 0; i <= 6; i++) {
            realLv = skillLv = this.getSkillLvById(i + 1);
            if (!skillLv)
                skillLv = 1;
            effectCfg = DataCenter.ins().FlameMarkEffectConfig[i + 1][skillLv];
            if ((i + 1 == 1 || i + 1 == 2) && realLv)
                bollNum = effectCfg.stamp;
        }
        this.updateBalls(bollNum);
    };
    FlameMarkEffect.prototype.updateBalls = function (bollNum) {
        if (!this._ring || !this._parent)
            return;
        //旋转印记
        if (bollNum && this._oldBallNum != bollNum) {
            this.resetBalls();
            this._oldBallNum = bollNum;
            if (!this._balls) {
                this._balls = [];
                TimerMgr.ins().doTimer(51, 0, this.doCircle, this);
            }
            var ball = void 0;
            var radian = 2 * Math.PI / bollNum;
            for (var i = 0; i < bollNum; i++) {
                ball = ObjectPool.pop("GameMovieClip");
                if (this._isShowBall)
                    this._parent.addChild(ball);
                this._angles[i] = radian * i;
                ball.x = this._a * Math.cos(radian * i) + this._circleCenter.x;
                ball.y = this._b * Math.sin(radian * i) + this._circleCenter.y;
                this._balls.push(ball);
                ball.playFile(PATH_SKILLEFF + "skill6204a", -1);
            }
        }
    };
    FlameMarkEffect.prototype.doCircle = function () {
        if (!this._balls) {
            TimerMgr.ins().remove(this.doCircle, this);
            return;
        }
        if (!this._isShowBall || !this._ring || !this._parent)
            return;
        var len = this._balls.length, ball;
        var parent;
        var imgIndex = 0, selfIndex = 0;
        for (var i = 0; i < len; i++) {
            ball = this._balls[i];
            ball.x = this._a * Math.cos(this._angles[i]) + this._circleCenter.x;
            ball.y = this._b * Math.sin(this._angles[i]) + this._circleCenter.y;
            this._angles[i] += this._angle;
            this._angles[i] = this._angles[i] % (2 * Math.PI);
            parent = ball.parent;
            if (parent) {
                imgIndex = parent.getChildIndex(this._ring);
                selfIndex = parent.getChildIndex(ball);
                if (this._angles[i] >= 2.5 && this._angles[i] <= 6) {
                    if (selfIndex > imgIndex) {
                        parent.addChildAt(ball, imgIndex);
                    }
                }
                else {
                    if (selfIndex < imgIndex) {
                        parent.addChildAt(ball, parent.numChildren);
                    }
                }
            }
        }
    };
    FlameMarkEffect.prototype.resetBalls = function () {
        TimerMgr.ins().remove(this.doCircle, this);
        this._oldBallNum = 0;
        if (this._balls) {
            var len = this._balls.length;
            for (var i = 0; i < len; i++) {
                this._balls[i].destroy();
            }
            this._balls = null;
        }
    };
    /** 根据id获得技能等级 */
    FlameMarkEffect.prototype.getSkillLvById = function (id) {
        var skills = this._infoModel.masterHandle == ActorControl.handle ? flameMarkControl.skills : this._infoModel.lyMarkSkills;
        if (!skills || skills.length < id)
            return 0;
        return skills[id - 1];
    };
    /** 获得印记等级*/
    FlameMarkEffect.prototype.getLyMarkLv = function () {
        return this._infoModel.masterHandle == ActorControl.handle ? flameMarkControl.lyMarkLv : this._infoModel.lyMarkLv;
    };
    /** 屏蔽火球 */
    FlameMarkEffect.prototype.showBall = function () {
        if (this._isShowBall)
            return;
        this._isShowBall = true;
        this.updateBalls(this._curTimes);
        if (this._balls) {
            var len = this._balls.length;
            for (var i = 0; i < len; i++) {
                this._parent.addChild(this._balls[i]);
            }
        }
    };
    /** 隐藏火球 */
    FlameMarkEffect.prototype.hideBall = function () {
        if (!this._isShowBall)
            return;
        this._isShowBall = false;
        this.resetBalls();
    };
    FlameMarkEffect.prototype.destruct = function () {
        this.resetBalls();
        TimerMgr.ins().removeAll(this);
        this._ring = null;
        this._infoModel = null;
        EventMgr.ins().removeAll(this);
    };
    return FlameMarkEffect;
}());
__reflect(FlameMarkEffect.prototype, "FlameMarkEffect");
/**
 * 游戏控制类
 */
var GameControl = (function (_super) {
    __extends(GameControl, _super);
    function GameControl() {
        var _this = _super.call(this) || this;
        /**刷怪半径 */
        _this.MONSTER_RADIUS = 2;
        //刷怪格子范围
        _this.MONSTER_LEN = _this.MONSTER_RADIUS * 2 + 1;
        /**刷怪半径格子表 */
        _this.radiusMap = [];
        _this.atkTarget = {};
        _this.masterAtkTarget = {};
        //正在攻击目标handle
        _this.currHandle = 0;
        //玩家正在攻击目标 masterHandle
        _this.currAttackHandle = 0;
        //当前刷怪的索引
        _this.rPosindex = [];
        _this.runTime = 0; //运行次数
        _this.guanqiaId = 0; //当前关卡id
        KeyboardUtils.ins().addKeyDown(_this.onKeyClick, _this);
        var len = _this.MONSTER_RADIUS * 2 + 1;
        for (var i = 0; i < len; i++) {
            _this.radiusMap[i] = [];
        }
        return _this;
    }
    GameControl.ins = function () {
        return _super.ins.call(this);
    };
    GameControl.prototype.initLogin = function () {
        this.heartbeat();
    };
    /**
     * 发送创建子角色
     * 255-2
     */
    GameControl.prototype.upNewRole = function (job, sex) {
        return [job, sex];
    };
    GameControl.prototype.heartbeat = function () {
        if (this.heartBeatTimer) {
            return false;
        }
        this.heartBeatTimer = new egret.Timer(60000);
        this.heartBeatTimer.addEventListener(egret.TimerEvent.TIMER, this.upHeartbeat, this);
        this.heartBeatTimer.start();
    };
    /**
     * 心跳包
     * 255-255
     */
    GameControl.prototype.upHeartbeat = function () {
    };
    /**
     * GM
     * 255-0
     */
    GameControl.prototype.upGMCommad = function (str) {
        return [str];
    };
    /**
     * 进入场景
     * 255-3
     */
    GameControl.prototype.downEnterMap = function (copyId, mapId, mapX, mapY, copyType, copyName, copyDesc) {
        MapControl.parser(copyId, mapId, mapX, mapY, copyType, copyName, copyDesc);
        //清空掉落物
        DropControl.clearDrop();
        HookControl.ins().clear();
        lookControl.clear();
        monsterSpeakControl.clear();
        //移除所有实体
        UnitMgr.ins().removeAll();
        UnitHideMgr.ins().changeScene();
        UnitShowMgr.ins().changeScene();
        //移除全体人员移动的监听
        TimerMgr.ins().removeAll(MapControl);
        TimerMgr.ins().removeAll(SkillEffPlayDisplay);
        TimerMgr.ins().remove(this.shakeMapView, this);
        var map = UIMgr.gameScene.map;
        map.clearAllLayer();
        map.changeMap();
        if (MapControl.copyId == 0) {
            copyControl.pkGqboss = false;
            //重新显示野外boss
            if (confrontControl.willBossID) {
                portalControl.upDataWillBoss(confrontControl.willBossID);
            }
        }
        else if (MapControl.copyType != 1 /* GUANQIABOSS */) {
            UIMgr.ins().closeTopLevel();
        }
        //关闭boss血条面板
        UIMgr.ins().close("BossBloodView");
        UIMgr.ins().close("TargetPlayerBigBloodView");
        unionWarControl.getModel().clearGuildWarList();
        bossControl.clearWorldBossList();
        targetListControl.clear();
        ObjectPool.clearClass("UnitMonster");
        this.onEnterScene();
        SwitchSceneMgr.ins().changeScene();
        if (!SoundUtils.PLAY_OPEN_VIEW && (MapControl.lastCopyId != MapControl.copyId || MapControl.copyId)) {
            SoundUtils.ins().playEffect(SoundUtils.TRANSFER);
        }
        if (crossFieldControl.isCross) {
            rambleControl.setCurListData(rambleControl.kfListData);
        }
        else {
            rambleControl.setCurListData(rambleControl.chatListData2);
        }
        CommonFun.checkVersion();
        RecycleMgr.ins().destroy();
        EventMgr.ins().dispatch(353 /* ENTER_MAP */);
    };
    /**
     * 创建场景实体
     * 255-4
     */
    GameControl.prototype.downCreateOtherEntity = function (type) {
        var param = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            param[_i - 1] = arguments[_i];
        }
        var datas = param[type][0];
        var model;
        if (type == 0 /* ACTOR */) {
            model = new UnitModel();
            model.initBase(datas);
            UnitMgr.ins().actorList[model.handle] = model;
            EventMgr.ins().dispatch(354 /* CREATE_OTHER_ENTITY */, false);
            return false;
        }
        else if (type == 1 /* ROLE */) {
            model = new RoleModel;
            model.initBase(datas.slice(0, 6));
            model.intOtherRole(datas.slice(6));
            titleControl.refNewTitle(model.masterHandle);
        }
        else if (type == 2 /* MONSTER */) {
            model = new UnitModel;
            model.init(datas);
        }
        else if (type == 4 /* LADDERPLAYER */) {
            model = new RoleModel;
            model.initBase(datas.slice(0, 6));
            model.intOtherRole(datas.slice(6));
            if (MapControl.copyType == 18 /* GUIDEBOSS */) {
                model.masterHandle = model.handle;
            }
            titleControl.refNewTitle(model.masterHandle);
        }
        else if (type == 5 /* COLLECTIONMONST */) {
            model = new UnitModel;
            model.initBase(datas);
        }
        else if (type == 6 /* DROPITEM */) {
            model = new ItemModel();
            model.initBase(datas.slice(0, 6));
            model.initItemData(datas.slice(6, -1));
            model.itemData.dropEffId = datas[datas.length - 1];
        }
        if (model) {
            UnitHideMgr.ins().onCreateEntity(model);
            var target = this.createEntityByModel(model);
            this.afterCreateOtherEntity(type, model, target);
        }
        EventMgr.ins().dispatch(354 /* CREATE_OTHER_ENTITY */, model);
    };
    GameControl.prototype.afterCreateOtherEntity = function (type, model, target) {
        if (type == 2 /* MONSTER */ || type == 5 /* COLLECTIONMONST */) {
            if (MapControl.copyType == 16 /* EXP */) {
                copyControl.expMonterCount += 1;
            }
            if (mineControl.inCopy) {
                if (target) {
                    target.visible = false;
                }
            }
            monsterSpeakControl.trigger(model.configID, 1 /* appear */);
        }
        else if (type == 1 /* ROLE */) {
            if (unionWarControl.getModel().checkinAppoint() || MapControl.copyType == 10 /* ZHUANSHENGBOSS */) {
                if (model.guildID != unionControl.guildID) {
                    unionWarControl.getModel().changecanPlayList(model.masterHandle);
                }
                else {
                    unionWarControl.getModel().setMyGuildNum(model.masterHandle);
                }
            }
        }
        else if (type == 4 /* LADDERPLAYER */) {
            if (MapControl.copyType == 18 /* GUIDEBOSS */) {
                copyControl.guideBossPlayerId = model.configID;
                copyControl.guideBossPlayerJob = model.job;
                copyControl.guideBossPlayerSex = model.sex;
                copyControl.guideBossPlayerName = model.name;
                if (copyControl.guideBossKill == 0) {
                    bossControl.dispatchBelongChange(model.masterHandle);
                }
            }
        }
    };
    /**
     * 货币变化
     * 255-5
     */
    GameControl.prototype.downGoldChange = function (type, value) {
        if (type == 1 /* TYPE_1 */) {
            actorControl.dispatchGoldChange(value);
        }
        else if (type == 4 /* TYPE_4 */) {
            actorControl.dispatchSoulChange(value);
        }
        else if (type == 7 /* TYPE_7 */) {
            actorControl.dispatchFeatsChange(value);
        }
        else if (type == 9 /* TYPE_9 */) {
            var oldRune = ActorControl.runeShatter;
            ActorControl.runeShatter = value;
            if (ActorControl.runeShatter - oldRune > 0) {
                tipsControl.showTips(LangMgr.getValueByKey('scentGetZW', ActorControl.runeShatter - oldRune));
            }
            this.dispatchRuneShatter();
        }
        else if (type == 10 /* TYPE_10 */) {
            var oldValue = ActorControl.runeExchange;
            ActorControl.runeExchange = value;
            if (oldValue && ActorControl.runeExchange - oldValue > 0) {
                tipsControl.showTips(LangMgr.getValueByKey('scentGet', ActorControl.runeExchange - oldValue, Currency.getCurrencyName(10 /* TYPE_10 */)));
            }
            this.dispatchRuneExchange();
        }
        else if (type == 11 /* TYPE_11 */) {
            actorControl.dispatchUpdateTogeatter(value, 1);
        }
        else if (type == 12 /* TYPE_12 */) {
            actorControl.dispatchUpdateTogeatter(value, 2);
        }
        else if (type == 14 /* TYPE_14 */) {
            actorControl.dispatchWeiWang(value);
        }
        else if (type == 15 /* TYPE_15 */) {
            actorControl.dispatchChip(value);
        }
        else {
            actorControl.dispatchYbChange(value);
        }
    };
    GameControl.prototype.dispatchRuneShatter = function () {
        EventMgr.ins().dispatch(468 /* RUNE_SHATTER */);
    };
    GameControl.prototype.dispatchRuneExchange = function () {
        EventMgr.ins().dispatch(469 /* RUNE_EX_CHANGE */);
    };
    GameControl.prototype.dispatchLevelBarChange = function (lv) {
        EventMgr.ins().dispatch(470 /* LEVEL_BAR_CHANGE */, lv);
    };
    GameControl.prototype.dispatchAdjustMapPos = function () {
        EventMgr.ins().dispatch(471 /* ADJUST_MAP_POS */);
    };
    /**
     * 血量更新
     * 255-9
     */
    GameControl.prototype.downHpChange = function (handle, hp) {
        var target = UnitMgr.ins().getEntityByHandle(handle);
        if (target) {
            var model = target.infoModel;
            var oldHp = model.getAtt(0 /* atHp */);
            model.setAtt(0 /* atHp */, hp);
            target.updateBlood();
            if (0 == oldHp && model.getAtt(0 /* atHp */) > 0 && target instanceof UnitRole) {
                titleControl.refNewTitle(target.infoModel.masterHandle);
            }
            if (hp <= 0) {
                HookControl.ins().checkPlayDieSound(target);
                DropControl.tempDropPoint.x = Math.floor(target.x / MapControl.CELL_SIZE);
                DropControl.tempDropPoint.y = Math.floor(target.y / MapControl.CELL_SIZE);
            }
            else {
                if (model.type == 1 /* ROLE */ && !target.nameVisible) {
                    target.showNameAndHp();
                }
            }
            EventMgr.ins().dispatch(355 /* HP_CHANGE */, [target, hp, oldHp]);
        }
    };
    /**
     * 内功当前值更新
     * 255-26
     */
    GameControl.prototype.downNeiGongChange = function (handle, neigong) {
        var target = UnitMgr.ins().getEntityByHandle(handle);
        if (target && target.infoModel) {
            target.infoModel.setAtt(25 /* cruNeiGong */, neigong);
            target.updateNeiGong();
        }
    };
    /**
     * 血量变更
     */
    GameControl.prototype.dispatchEntityHpChange = function (target, source, type, value) {
        if ((source && source.team == 0 /* My */) || (target && target.team == 0 /* My */)) {
            if (type == 16 /* TYPE16 */ || (type & 16 /* TYPE16 */) == 16 /* TYPE16 */ || (type & 2048 /* TYPE2048 */) == 2048 /* TYPE2048 */) {
                var map = UIMgr.gameScene.map;
                DisplayUtils.shakeItFocusAttack(map, 30, 700);
            }
        }
        EventMgr.ins().dispatch(472 /* ENTITY_HP_CHANGE */, [target, source, type, value]);
    };
    /**
     * 移除实体
     * 255-10
     */
    GameControl.prototype.downRemoveEntity = function (handle) {
        var entity = UnitMgr.ins().getEntityByHandle(handle);
        if (!entity)
            return;
        if (entity instanceof UnitRole) {
            if (entity.infoModel && entity.infoModel.type == 4 /* LADDERPLAYER */) {
                if (MapControl.copyType == 18 /* GUIDEBOSS */) {
                    if (copyControl.guideBossKill == 0) {
                        this.removeEntity(handle);
                        bossControl.dispatchBelongChange(ActorControl.handle, handle, entity.infoModel.name);
                        copyControl.guideBossKill += 1;
                    }
                    else {
                        UnitMgr.ins().removeByHandle(handle, false, true);
                        entity.onDead(function () {
                            entity.deadDelay();
                        });
                        guideControl.clickOut();
                        copyControl.guideBossKill += 1;
                        bossControl.threatList.length = 0;
                        bossControl.dispatchHasAttackChange(0);
                    }
                }
                else {
                    this.removeEntity(handle);
                }
            }
            else {
                UnitMgr.ins().removeByHandle(handle);
            }
        }
        else if (entity instanceof UnitItemNameMerge) {
            UnitMgr.ins().removeByHandle(handle);
        }
        else {
            this.removeEntity(handle);
            if (entity && entity.team != 0 /* My */) {
                var isPlayStand = false;
                //怪物杀死完后站立动作
                var nextList = UnitMgr.ins().screeningTargetByPos(entity, true);
                if (!nextList || nextList.length == 0) {
                    isPlayStand = true;
                }
                else {
                    if (MapControl.copyType == 14 /* UNION_WAR */) {
                        var char = UnitMgr.ins().getEntityByHandle(gameControl.currAttackHandle);
                        if (!char || char.infoModel.getAtt(0 /* atHp */) <= 0) {
                            isPlayStand = true;
                        }
                    }
                }
                if (isPlayStand) {
                    var mylist = UnitMgr.ins().getEntityByTeam(0 /* My */);
                    for (var _i = 0, mylist_1 = mylist; _i < mylist_1.length; _i++) {
                        var char = mylist_1[_i];
                        if (char.action != UnitAction.RUN)
                            char.playAction(UnitAction.STAND);
                    }
                }
                if (MapControl.copyType == 1 /* GUANQIABOSS */ || MapControl.copyType == 9 /* TIAOZHAN */) {
                    if (entity.parent) {
                        var point = entity.parent.localToGlobal(entity.x, entity.y);
                        copyControl.dispatchExpFly(point, 50);
                    }
                }
            }
            if (MapControl.copyType == 18 /* GUIDEBOSS */) {
                bossControl.attHandle = 0;
                if (copyControl.guideBossKill) {
                    bossControl.winner = ActorControl.myName;
                }
                guideControl.clickOut();
                gameControl.dispatchChangeTarget(0);
            }
        }
        this.dispatchRemoveEntity(handle, entity);
    };
    GameControl.prototype.dispatchRemoveEntity = function (handle, entity) {
        EventMgr.ins().dispatch(356 /* REMOVE_ENTITY */, [handle, entity]);
    };
    GameControl.prototype.removeEntity = function (handle) {
        var entity = UnitMgr.ins().getEntityByHandle(handle);
        if (entity && entity.infoModel.getAtt(0 /* atHp */) <= 0) {
            UnitMgr.ins().removeByHandle(handle, false, true);
            entity.playAction(UnitAction.HIT);
            entity.stopMove();
            entity.onDead(function () {
                entity.deadDelay();
                var t = egret.Tween.get(entity.dieTweenObj);
                t.wait(1000).to({ alpha: 0 }, 1000).call(function () {
                    DisplayUtils.removeFromParent(entity);
                });
            });
        }
        else {
            UnitMgr.ins().removeByHandle(handle, true, true);
        }
    };
    /**
     * 实体移动
     * 255-11
     */
    GameControl.prototype.downMoveEntity = function (handle, tx, ty) {
        var target = UnitMgr.ins().getEntityByHandle(handle);
        if (!target)
            return;
        if (target.x == tx && target.y == ty)
            return;
        MapControl.moveEntity(target, tx, ty, true); //是否直线行走，无视障碍物
    };
    /**
     * 停止实体移动
     * 255-12
     */
    GameControl.prototype.downStopMoveEntity = function (handle, x, y) {
        var target = UnitMgr.ins().getEntityByHandle(handle);
        if (target) {
            target.stopMove();
            if (target.infoModel.getAtt(0 /* atHp */) > 0) {
                target.playAction(UnitAction.STAND);
            }
            target.x = x;
            target.y = y;
            if (target == UnitMgr.ins().getNoDieRole()) {
                this.dispatchMoveCamera();
                MapDisplay.moveComplete(target);
            }
        }
    };
    /**
     * 同步实体坐标
     * 255-13
     */
    GameControl.prototype.downSyncPos = function (handle, type, x, y, time) {
        var _this = this;
        var target = UnitMgr.ins().getEntityByHandle(handle);
        if (target) {
            target.stopMove();
            // 0 瞬移
            // 1 野蛮冲撞
            // 2 被击退
            var tween = void 0;
            switch (type) {
                case 0:
                    target.playAction(UnitAction.STAND);
                    target.x = x;
                    target.y = y;
                    //同步坐标时，需要调用下移动摄像机，并延迟下一帧处理，因为死亡时移动会有问题
                    if (target.isMy) {
                        egret.callLater(function () {
                            _this.dispatchMoveCamera();
                        }, this);
                        if (UnitMgr.ins().getNoDieRole() == target) {
                            EventMgr.ins().dispatch(9 /* SYNC_POINT */, { x: target.x, y: target.y });
                        }
                    }
                    break;
                case 1:
                    target.playAction(UnitAction.RUN);
                    tween = egret.Tween.get(target.moveTweenObj);
                    tween.to({
                        "x": x,
                        "y": y
                    }, time).call(function () {
                        target.playAction(UnitAction.STAND);
                    });
                    break;
                case 2:
                    target.playAction(UnitAction.STAND);
                    tween = egret.Tween.get(target.moveTweenObj);
                    tween.to({
                        "x": x,
                        "y": y
                    }, time);
                    break;
            }
        }
    };
    /**
     * 派发同步实体坐标消息
     */
    GameControl.prototype.dispatchMoveCamera = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        var entity = UnitMgr.ins().getNoDieRole();
        if (entity) {
            EventMgr.ins().dispatch(357 /* MOVE_CAMERA */, [entity.x, entity.y, MapControl.mapID, MapControl.copyId]);
        }
    };
    GameControl.prototype.dispatchMainRoleMove = function (x, y) {
        return [x, y, MapControl.mapID, MapControl.copyId];
    };
    /**
     * 处理MP
     * 255-15
     */
    GameControl.prototype.downMpChange = function (handle, mp) {
        var target = UnitMgr.ins().getEntityByHandle(handle);
        var model;
        if (target) {
            model = target.infoModel;
            model.setAtt(1 /* atMp */, mp);
        }
        EventMgr.ins().dispatch(358 /* MP_CHANGE */, model);
    };
    GameControl.prototype.dispatchExpMc = function (mon) {
        EventMgr.ins().dispatch(359 /* EXP_MC */, mon);
    };
    /**
     * 显示服务器提示
     * 255-17
     */
    GameControl.prototype.downTips = function (id) {
        var strTips = DataCenter.ins().ServerTipsConfig[id].tips;
        tipsControl.showTips(strTips);
    };
    /**
     * 第一次登陆
     * 255-18
     */
    GameControl.prototype.downFirstRegister = function (loginType) {
        var welcomeItem = DataCenter.ins().ClientGlobalConfig.welcomeItem;
        var isOpen = spokesPersonControl.checkBaseOpen(welcomeItem.openTerm);
        if (loginType == 2) {
            UIMgr.ins().open(RegressionView);
            return;
        }
        if (!isOpen) {
            if (!SwitchMgr.ins().checkOpen(1024 /* JUMPGUIDE */)) {
                UIMgr.ins().open(GreetView);
            }
            else {
                UIMgr.ins().open(GuideSelectView);
            }
            return;
        }
        TimerMgr.ins().doTimer(1000, 1, function () {
            HookControl.ins().stop();
            var role = UnitMgr.ins().getNoDieRole();
            var npc = UnitMgr.ins().getNpcByConfigID(welcomeItem.npc.id);
            if (npc) {
                MapControl.moveEntity(role, npc.x, npc.y);
            }
        }, this);
        TimerMgr.ins().doTimer(3000, 1, function () {
            if (!SwitchMgr.ins().checkOpen(1024 /* JUMPGUIDE */)) {
                UIMgr.ins().open(Greet1View);
            }
            else {
                UIMgr.ins().open(GuideSelectView);
            }
        }, this);
    };
    /**
     * 处理玩家死亡提示
     * 255-20
     */
    GameControl.prototype.downDieNotice = function () {
    };
    /**
     * 处理玩家工会变化
     * 255-21
     */
    GameControl.prototype.downGuildChange = function (id, name) {
        EventMgr.ins().dispatch(360 /* GUILD_CHANGE */, [id, name]);
    };
    /**
     * 其他玩家更新属性
     * 255-24
     */
    GameControl.prototype.downOtherAttChange = function (handle, attrs) {
        var target = UnitMgr.ins().getEntityByHandle(handle);
        if (target && target.infoModel) {
            for (var i = 0; i < attrs.length; i++) {
                target.infoModel.setAtt(attrs[i][0], attrs[i][1]);
            }
            EventMgr.ins().dispatch(361 /* OTHER_ATT_CHANGE */, target);
        }
    };
    /**
     * 气泡提示
     * 255-25
     */
    GameControl.prototype.downPaoPao = function (handle, id) {
        var target = UnitMgr.ins().getEntityByHandle(handle);
        if (target)
            target.addBubble(id);
    };
    /**
     * 改名
     * 255-22
     */
    GameControl.prototype.upRename = function (name) {
        return [name];
    };
    /**
     * 改名结果
     * 255-22
     */
    GameControl.prototype.downRename = function (result) {
        if (result == 0) {
            SocketConnection.ins().close();
            UIMgr.ins().close(RenameView);
            alert(LangMgr.getValueByKey('changeName'));
            window.location.reload();
        }
        else {
            loginControl.showErrorTips(result);
        }
    };
    /**
     * 改变物体目标
     * 255-25
     */
    GameControl.prototype.dispatchChangeAttrPoint = function (handle) {
        unionWarControl.getModel().clickTime = 1;
        EventMgr.ins().dispatch(362 /* CHANGE_ATTR_POINT */);
        return [handle];
    };
    /**
     * 问客户端寻路
     * 255-31
     */
    GameControl.prototype.downFindPath = function (handle, x, y, endX, endY) {
        var sx = Math.floor(x / MapControl.CELL_SIZE);
        var sy = Math.floor(y / MapControl.CELL_SIZE);
        var tx = Math.floor(endX / MapControl.CELL_SIZE);
        var ty = Math.floor(endY / MapControl.CELL_SIZE);
        var path = MapControl.getPatch(sx, sy, tx, ty);
        this.upFindPathToServer(handle, path);
    };
    /**
     * 回复寻路结果
     * isLastGrip 格子坐标:true,像素坐标:false
     * 255-31
     */
    GameControl.prototype.upFindPathToServer = function (handle, path, isLastGrip) {
        if (isLastGrip === void 0) { isLastGrip = true; }
        var len = path ? path.length : 0;
        var arr = [];
        for (var i = 0; i < len; i++) {
            var node = path[i];
            if (node) {
                if (i == 0 && !isLastGrip) {
                    arr.push([node.x, node.y]);
                }
                else {
                    arr.push([node.x * MapControl.CELL_SIZE + (MapControl.CELL_SIZE >> 1), node.y * MapControl.CELL_SIZE + (MapControl.CELL_SIZE >> 1)]);
                }
            }
        }
        return [handle, arr];
    };
    /**
     * 扣血飘字
     * 255-32
     */
    GameControl.prototype.downBloodNumShow = function (targetHandle, sourceHandle, value, type) {
        value = Math.ceil(value) * -1;
        var charSource = UnitMgr.ins().getEntityByHandle(sourceHandle);
        if (!charSource) {
            //debug.error(`找不到handle:${sourceHandle}的施法者`);
            return;
        }
        var charTarget = UnitMgr.ins().getEntityByHandle(targetHandle);
        if (!charTarget) {
            //debug.error(`找不到handle:${targetHandle}的目标者`);
            return;
        }
        if (charTarget.team == 0 /* My */ && charTarget.infoModel.type == 2 /* MONSTER */) {
            if (value < 0)
                return; //己方怪物回血屏蔽
        }
        if (!(charTarget instanceof UnitRole)) {
            charTarget.shakeIt();
        }
        gameControl.dispatchEntityHpChange(charTarget, charSource, type, value);
    };
    /**
     * 255-33
     */
    GameControl.prototype.downChangeTarget = function (sourceHandle, targetHandle) {
        this.dispatchAllAtkTarget(sourceHandle, targetHandle);
        var char = UnitMgr.ins().getEntityByHandle(sourceHandle);
        if (char && char.infoModel && char.infoModel.masterHandle == ActorControl.handle)
            this.dispatchAtkTarget(targetHandle);
        if (targetListControl.isShow) {
            if (crazybtplayCopyControl.isShenwujindi || totemBossControl.inCopy) {
                targetListControl.dispatchTargetListEX(sourceHandle, targetHandle);
            }
            else {
                targetListControl.dispatchTargetList(sourceHandle, targetHandle);
            }
            return;
        }
        if (MapControl.copyType != 14 /* UNION_WAR */
            && MapControl.copyType != 10 /* ZHUANSHENGBOSS */
            && MapControl.copyType != 7 /* ALLHUMENBOSS */
            && MapControl.copyType != 105 /* HOLYAREA_BOSS */
            && MapControl.copyType != 17 /* HOMEBOSS */
            && MapControl.copyType != 18 /* GUIDEBOSS */ || targetHandle == 0) {
            if (char && char == UnitMgr.ins().getNoDieRole()) {
                this.currAttackHandle = UnitMgr.ins().getRootMasterHandle(targetHandle);
            }
            return;
        }
        var target = UnitMgr.ins().getEntityByHandle(targetHandle);
        if (target && target.infoModel && target.infoModel.masterHandle > 0) {
            var source = UnitMgr.ins().getEntityByHandle(sourceHandle);
            if (source && source.infoModel && source.infoModel.masterHandle == ActorControl.handle) {
                this.dispatchChangeTarget(target.infoModel.masterHandle);
            }
            if (source && source.infoModel) {
                var sources = UnitMgr.ins().getMasterList(source.infoModel.masterHandle);
                if (target.infoModel.masterHandle == ActorControl.handle && sources) {
                    for (var k in sources) {
                        if (!(sources[k] instanceof UnitRole))
                            continue;
                        sources[k].setNameTxtColor(ColorUtils.YELLOW);
                    }
                    if (MapControl.copyType == 18 /* GUIDEBOSS */) {
                        if (bossControl.threatList[0] != source.infoModel.masterHandle) {
                            var tname = source.infoModel.name;
                            if (source.infoModel.type == 4 /* LADDERPLAYER */) {
                                var strlist = tname.split("\n");
                                if (strlist[1])
                                    tname = strlist[1];
                                else
                                    tname = strlist[0];
                                tname = StringUtils.replaceStr(tname, "0xffffff", ColorUtils.GREEN + "");
                            }
                            if (copyControl.guideBossKill)
                                tipsControl.showCenterTips(LangMgr.getValueByKey('ssentTakeAttack', tname));
                        }
                        bossControl.threatList.length = 0;
                        bossControl.changeThreatList(source.infoModel.masterHandle);
                        bossControl.dispatchHasAttackChange(0);
                    }
                }
            }
        }
        else {
            var sourceHd = UnitMgr.ins().getEntityByHandle(sourceHandle);
            if (sourceHd && sourceHd.infoModel) {
                if (sourceHd.infoModel.masterHandle == ActorControl.handle) {
                    if (target && target.infoModel) {
                        this.dispatchChangeTarget(target.infoModel.masterHandle);
                    }
                    else {
                        this.dispatchChangeTarget(0);
                    }
                }
            }
        }
    };
    GameControl.prototype.getAtkHandle = function (handle) {
        return this.atkTarget[handle] || 0;
    };
    GameControl.prototype.getAtkMasterHandle = function (handle) {
        return this.masterAtkTarget[handle] || 0;
    };
    //masterHandle
    GameControl.prototype.dispatchChangeTarget = function (handle) {
        this.currAttackHandle = handle;
        EventMgr.ins().dispatch(363 /* CHANGE_TARGET */);
    };
    //atkHandle
    GameControl.prototype.dispatchAtkTarget = function (handle) {
        this.currHandle = handle;
        EventMgr.ins().dispatch(364 /* ATK_TARGET */);
    };
    //所有攻击目标
    GameControl.prototype.dispatchAllAtkTarget = function (sourceHandle, targetHandle) {
        EventMgr.ins().dispatch(365 /* ALL_ATK_TARGET */, [sourceHandle, targetHandle]);
    };
    GameControl.prototype.onKeyClick = function (keyCode) {
        if (keyCode == Keyboard.BACK_QUOTE && GlobalModel.pf == "Test") {
            if (GMCommandView.ins().stage) {
                GMCommandView.ins().close();
            }
            else {
                GMCommandView.ins().open();
            }
        }
    };
    /** 开始挑战boss */
    GameControl.prototype.startPkBoss = function () {
        copyControl.autoPk();
    };
    /**
     * 创建实体（依赖数据结构）
     */
    GameControl.prototype.createEntityByModel = function (model) {
        var param = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            param[_i - 1] = arguments[_i];
        }
        var target = UnitMgr.ins().createEntity(model, param);
        if (target)
            this.addEntity(target);
        return target;
    };
    GameControl.prototype.addEntity = function (target) {
        if (target instanceof UnitRole) {
            target.showBlood(target.isMy || target.team == 2 /* WillEntity */);
            target.showNeigong(target.isMy);
            //角色根据当前在地图上的坐标来判断方向
            target.dir = target.x >= MapControl.MAX_WIDTH >> 1 ? 6 : 2;
        }
        else if (target instanceof UnitMonster && DataCenter.ins().MonstersConfig[target.infoModel.configID] && DataCenter.ins().MonstersConfig[target.infoModel.configID].type == 3) {
            //神兽根据当前在地图上的坐标来判断方向
            target.dir = target.x >= MapControl.MAX_WIDTH >> 1 ? 6 : 2;
        }
        var map = UIMgr.gameScene.map;
        map.addEntity(target);
    };
    /**
     * 出生动画
     */
    GameControl.prototype.charAppearEff = function (target) {
        if (target instanceof UnitMonster) {
            var monstersConfig = DataCenter.ins().MonstersConfig[target.infoModel.configID];
            if (!monstersConfig) {
                monstersConfig = copyControl.guanqiaMonster[target.infoModel.configID];
            }
            if (monstersConfig && monstersConfig.createEff) {
                for (var key in monstersConfig.createEff) {
                    if (Array.isArray(monstersConfig.createEff)) {
                        var data = monstersConfig.createEff[key];
                        if (data.type == 2 /* SKILL_EFF */) {
                            SkillEffPlayDisplay.play(data.res, target, [target]);
                        }
                        else {
                            var mc = ObjectPool.pop("GameMovieClip");
                            mc.x = target.x;
                            mc.y = target.y;
                            mc.playFile(PATH_SKILLEFF + data.res, 1);
                            SkillEffPlayDisplay.bottomLayer.addChild(mc);
                        }
                    }
                }
            }
        }
    };
    /**
     * 播放技能特效
     * @param skill 技能配置
     * @param self 技能释放者
     * @param target 技能目标者
     * @return 持续时间
     */
    GameControl.prototype.playSkillEff = function (skill, self, targets, hitFun) {
        if (hitFun === void 0) { hitFun = null; }
        var rtn = 300;
        if (skill.wordEff && self.team == 0 /* My */) {
            skillControl.dispatchShowSkillWord(skill.wordEff + "");
            if (skillControl.hejiLevel > 0) {
                if (skillControl.isHejiSkill(skill.configID)) {
                    skillControl.hejiEnable = false;
                    skillControl.setHejiCD(-1);
                    skillControl.dispatchHejiRemove();
                }
            }
        }
        if ((targets.length == 1 && self != targets[0]) || targets.length > 1) {
            //计算方向
            self.dir = DirUtils.get8DirBy2Point(self, targets[0]);
        }
        if (skill && skill.actionType) {
            self.playAction(skill.actionType, self instanceof UnitRole ? null : function () {
                if (self.action != UnitAction.DIE) {
                    self.playAction(UnitAction.STAND);
                }
            });
        }
        if (!UIMgr.ins().isShow("GameSceneView")) {
            return 0;
        }
        if (self && self.team == 0 /* My */) {
            if (skill.repelDistance) {
                TimerMgr.ins().doTimer(350, 1, this.shakeMapView, this);
            }
        }
        var showList = [14];
        var skillId = Math.floor(skill.configID / 1000);
        if (!(showList.indexOf(skillId) < 0 && !UnitShowMgr.ins().checkShowSkillEffect() && self.infoModel.masterHandle) || self.isMy || targets[0].isMy) {
            if (!skill.effectId) {
                hitFun && hitFun();
                return 0;
            }
            if (self.infoModel.type == 2 /* MONSTER */ && -1 != DataCenter.ins().FlameMarkConfig.skillId.indexOf(skill.configID)) {
                self.usedLyMarkSkill();
            }
            if (!self.getIsShowBody()) {
                hitFun && hitFun();
                return 0;
            }
            SkillEffPlayDisplay.play(skill.effectId, self, [targets[0]], hitFun);
            TotemSkillControl.ins().checkActedFHJT(self, targets);
            switch (skill.effType) {
                case 3:
                    return 700;
            }
            return rtn;
        }
    };
    GameControl.prototype.shakeMapView = function () {
        var map = UIMgr.gameScene.map;
        DisplayUtils.shakeIt(map, 5, 250, 2);
    };
    GameControl.prototype.addOutEff = function (xPos, yPos) {
        var transModel = new TransferModel();
        transModel.configID = 0;
        transModel.x = xPos;
        transModel.y = yPos;
        transModel.type = 101 /* TRANSFER */;
        UnitMgr.ins().createEntity(transModel);
    };
    GameControl.prototype.removeOutEff = function () {
        UnitMgr.ins().removeTransferById(0);
    };
    /**
     * 创建关卡的怪物
     */
    GameControl.prototype.createGuanqiaMonster = function (isAll, isElite) {
        if (isAll === void 0) { isAll = true; }
        if (isElite === void 0) { isElite = false; }
        this.guanqiaId = copyControl.guanqiaID;
        if (!MapControl.sceneInHook()) {
            return;
        }
        if (confrontControl.isEncounter()) {
            return;
        }
        var count = Math.ceil(copyControl.waveMonsterCount * Math.random());
        var monsterTypeLen = copyControl.waveMonsterId.length;
        //精英怪数量
        var eliteCount = UnitMgr.ins().getEntityByMonsterId(copyControl.eliteMonsterId).length;
        //最大怪物数量限制 为10个
        var monsterCount = UnitMgr.ins().getTeamCount(1 /* Monster */) - eliteCount;
        if (monsterCount > 3 && !isElite) {
            return;
        }
        count = 10 - monsterCount;
        for (var i = 0; i < monsterTypeLen; i++) {
            var len = isAll ? copyControl.rPos[i].length : 1;
            if (len > 3) {
                len = 3;
            }
            count = Math.ceil(count / len);
            var eliteBoo = isElite;
            for (var j = 0; j < len; j++) {
                this.runTime = 0;
                if (!this.rPosindex[i] || this.rPosindex[i] >= copyControl.rPos[i].length) {
                    this.rPosindex[i] = 0;
                }
                var index = this.rPosindex[i];
                var radiusMap = [];
                var point = copyControl.rPos[i][index];
                var startX = point.x - this.MONSTER_RADIUS; //从左上开始计算
                var startY = point.y - this.MONSTER_RADIUS; //从左上开始计算
                this.addMonsterToMap(radiusMap, startX, startY, count);
                for (var tempX = 0; tempX < this.MONSTER_LEN; tempX++) {
                    for (var tempY = 0; tempY < this.MONSTER_LEN; tempY++) {
                        if (!radiusMap[tempX]) {
                            continue;
                        }
                        var tempP = radiusMap[tempX][tempY];
                        if (!tempP) {
                            continue;
                        }
                        var model = void 0;
                        if (isElite && eliteBoo && eliteCount < 5) {
                            model = copyControl.createMonster(copyControl.eliteMonsterId);
                            model.isElite = true;
                            eliteBoo = false;
                            eliteCount += 1;
                        }
                        else {
                            var monId = copyControl.waveMonsterId[i];
                            model = copyControl.createMonster(monId);
                        }
                        model.x = (startX + tempX) * MapControl.CELL_SIZE + (MapControl.CELL_SIZE >> 1);
                        model.y = (startY + tempY) * MapControl.CELL_SIZE + (MapControl.CELL_SIZE >> 1);
                        var wp = isNaN(copyControl.wanderpercent) ? 5000 : copyControl.wanderpercent;
                        model.isWander = Math.random() * 10000 < wp;
                        var monster = this.createEntityByModel(model);
                        monster.AI_STATE = 4 /* Patrol */;
                        if (model.effect) {
                            monster.addHalo(DataCenter.ins().EffectConfig[model.effect].fileName);
                        }
                    }
                }
                this.rPosindex[i]++;
            }
        }
        if (MapControl.sceneInHook()) {
            HookControl.ins().start();
        }
    };
    GameControl.prototype.addMonsterToMap = function (map, startX, startY, count) {
        this.runTime++;
        if (this.runTime > 200) {
            var desc = "Level " + this.guanqiaId + " Spawn point error. mapId:" + MapControl.mapID + ",mapName:" + MapControl.getFileName() + ",mapTurn:" + MapControl.getTurn() + ",startX:" + (startX + this.MONSTER_RADIUS) + ",startY:" + (startY + this.MONSTER_RADIUS);
            debug.log(desc);
            ReportData.getIns().reportClientErrorLog("MapError", desc);
            return;
        }
        var tx = MathUtils.limitInteger(0, this.MONSTER_LEN - 1);
        var ty = MathUtils.limitInteger(0, this.MONSTER_LEN - 1);
        if (!map[tx]) {
            map[tx] = [];
        }
        if (!map[tx][ty]) {
            var canMove = MapControl.aStar.isWalkable(startX + tx, startY + ty);
            if (canMove) {
                map[tx][ty] = 1;
                count--;
            }
            if (count > 0) {
                this.addMonsterToMap(map, startX, startY, count);
            }
        }
        else {
            this.addMonsterToMap(map, startX, startY, count);
        }
    };
    /**
     * 挂机状态变更
     */
    GameControl.prototype.dispatchHookStateChange = function (value) {
        this.hookState = value;
        EventMgr.ins().dispatch(366 /* HOOK_STATE_CHANGE */, value);
    };
    /**
     * 是否格子移动
     */
    GameControl.prototype.dispatchMoveEntity = function (entity, asNode, isGrip) {
        if (isGrip === void 0) { isGrip = true; }
        EventMgr.ins().dispatch(367 /* MOVE_ENTITY */, [entity, asNode, isGrip]);
    };
    /**
     * 计算真实属性值（含增益buff）
     */
    GameControl.calculateRealAttribute = function (target, type, self, passiveAttr) {
        if (passiveAttr === void 0) { passiveAttr = {}; }
        var value = target.infoModel.getAtt(type);
        var buffs = target.buffList;
        var buff;
        for (var i in buffs) {
            buff = buffs[i];
            var mh = UnitMgr.ins().getRootMasterHandle(self.infoModel.handle);
            if ((buff.effConfig.type == 3 /* AdditionalAttributes */ || (buff.effConfig.type == 7 /* HostAddAttributes */ && buff.hostsHandle && buff.hostsHandle.indexOf(mh) >= 0))
                && buff.effConfig.args.d == type) {
                if (buff.multRate) {
                    value += buff.value * buff.multRate;
                }
                else {
                    value += buff.value;
                }
            }
        }
        var exValue = passiveAttr[type] ? passiveAttr[type] : 0;
        return value + exValue;
    };
    //基本属性触发
    GameControl.triggerAttr = function (selfTarget, type, passiveAttr) {
        if (passiveAttr === void 0) { passiveAttr = {}; }
        var attrValue = selfTarget.infoModel.attributeData[type] || 0;
        attrValue += passiveAttr[type] ? passiveAttr[type] : 0;
        if (attrValue) {
            var r = Math.random();
            if (r < attrValue / 10000) {
                return true;
            }
        }
        return false;
    };
    GameControl.triggerExAttr = function (selfTarget, type, exAtt) {
        var attrValue = selfTarget.infoModel.attributeExData[type];
        if (exAtt) {
            attrValue += exAtt[type] || 0;
        }
        if (attrValue) {
            var r = Math.random();
            if (r < attrValue / 10000) {
                return true;
            }
        }
        return false;
    };
    //**计算buff加成 */
    GameControl.calBuffAttribute = function (selfTarget) {
        var buffLst = selfTarget.buffList, attr = {}, exAttr = {};
        for (var n in buffLst) {
            var buff = buffLst[n];
            if (buff.effConfig)
                if (buff.effConfig.type == 3 /* AdditionalAttributes */) {
                    var args = buff.effConfig.args;
                    if (!args)
                        continue;
                    var r = (selfTarget.infoModel.getAtt(args.b) || 0) * (args.a || 0) + (args.c || 0);
                    attr[args.d] = (attr[args.d] || 0) + (buff.value ? buff.value : r);
                }
                else if (buff.effConfig.type == 6 /* AddExAttributes */) {
                    var args = buff.effConfig.args;
                    if (!args)
                        continue;
                    var r = (selfTarget.infoModel.getExAtt(args.b) || 0) * (args.a || 0) + (args.c || 0);
                    exAttr[args.d] = (exAttr[args.d] || 0) + (buff.value ? buff.value : r);
                }
        }
        return {
            attr: attr,
            exAttr: exAttr
        };
    };
    //计算是否暴击
    GameControl.triggerCrit = function (selfTarget, target, addValue) {
        if (addValue === void 0) { addValue = 0; }
        var crit = selfTarget.infoModel.getAtt(7 /* atCrit */);
        if (selfTarget.buffList[60003]) {
            var skillEff = selfTarget.buffList[60003].effConfig;
            crit = crit + Math.floor(skillEff.args.c / 10000 * crit);
        }
        var attrValue = crit - target.infoModel.getAtt(8 /* atTough */) + addValue;
        if (attrValue > 0) {
            var r = Math.random();
            if (r < attrValue / 10000) {
                return true;
            }
        }
        return false;
    };
    //计算是否闪避
    GameControl.triggerMiss = function (selfTarget, target) {
        var hit = selfTarget.infoModel.getExAtt(42 /* eatHit */);
        var miss = target.infoModel.getExAtt(26 /* eatMiss */);
        var min = Math.min(miss - hit, 4000);
        if (min > 0) {
            var r = Math.random();
            if (r < min / 10000) {
                return true;
            }
        }
        return false;
    };
    GameControl.triggerValue = function (value) {
        if (value) {
            var r = Math.random();
            if (r < value / 10000) {
                return true;
            }
        }
        return false;
    };
    GameControl.prototype.downAddMonsterConfig = function (cfgStr) {
        try {
            var config = JSON.parse(cfgStr);
            for (var i in config) {
                DataCenter.ins().MonstersConfig[i] = config[i];
            }
        }
        catch (error) {
            ReportData.getIns().reportClientErrorLog("JsonError", "downAddMonsterConfig");
        }
    };
    /**
     * 255-35
     */
    GameControl.prototype.downZeroInit = function () {
        EventMgr.ins().dispatch(4 /* ZERO_INIT */);
    };
    /**
     * 更新阵营
     * 255-36
     */
    GameControl.prototype.downChangeCamp = function (handle, camp) {
        var target = UnitMgr.ins().getEntityByHandle(handle);
        if (target && target.infoModel) {
            target.infoModel.camp = camp;
            if (target.infoModel.masterHandle == ActorControl.handle) {
                campWarControl.camp = target.infoModel.camp;
                campWarControl.dispatchEnterSuccess();
            }
            target.setCharName(target.infoModel.guildAndName);
            target.updateNameColor();
        }
        EventMgr.ins().dispatch(474 /* CHANGE_CAMP */);
    };
    /**
     * 255-41
     * up
     */
    GameControl.prototype.upChooseOldPlayer = function () {
    };
    /**
     * 255-41
     */
    GameControl.prototype.downChooseOldPlayer = function () {
        roleControl.checkHaveCan(true, 0);
    };
    /**
     * 官印 判断
     */
    GameControl.skyBallCheck = function (target) {
        if (this.triggerExAttr(target, 8 /* eatAllCrit */)) {
            var effBuff = ObjectPool.pop('BuffModel');
            effBuff.effConfig = DataCenter.ins().SkillsEffectsConfig[SkillConst.EFF_SKY_BALL];
            effBuff.addTime = egret.getTimer();
            effBuff.endTime = effBuff.addTime + target.infoModel.getExAtt(9 /* eatAllCritTime */);
            target.addBuff(effBuff);
            return true;
        }
        return false;
    };
    GameControl.prototype.dispatchFlyItem = function (item) {
        EventMgr.ins().dispatch(475 /* FLY_ITEM */, item);
    };
    GameControl.prototype.dispatchFlyItemEx = function (item) {
        EventMgr.ins().dispatch(476 /* FLY_ITEM_EX */, item);
    };
    GameControl.prototype.dispatchFlyBagToItem = function (flyItem, thisObj, callback) {
        if (flyItem.parent) {
            var bottomNav = UIMgr.ins().getView("GameBottomView");
            if (!bottomNav) {
                DisplayUtils.removeFromParent(flyItem);
                thisObj && callback.call(thisObj);
                return;
            }
            var bagBtn = bottomNav.getBagBtn();
            var point = bottomNav.localToGlobal(bagBtn.x, bagBtn.y);
            flyItem.parent.globalToLocal(point.x, point.y, point);
            var toPoint = new egret.Point(flyItem.x, flyItem.y);
            flyItem.x = point.x;
            flyItem.y = point.y;
            egret.Tween.get(flyItem).to({
                x: toPoint.x,
                y: toPoint.y,
                duration: 500
            }, 1000, egret.Ease.backOut).call(function () {
                DisplayUtils.removeFromParent(flyItem);
                thisObj && callback.call(thisObj);
            });
        }
        else {
            DisplayUtils.removeFromParent(flyItem);
        }
        if (thisObj)
            callback.call(thisObj);
    };
    /***
     * 停止服务端AI
     */
    GameControl.prototype.upStopAI = function () {
    };
    /**
     * boss场景，请求发送其他玩家的属性（masterHandle不在handles中的玩家不发送）
     * 255-34
     * @param handles
     */
    GameControl.prototype.upGetOtherAttr = function (masterHandles) {
        return [masterHandles];
    };
    GameControl.prototype.dispatchUpdateTargetTask = function () {
    };
    GameControl.prototype.dispatchUpdateHpMp = function () {
    };
    GameControl.prototype.onEnterScene = function () {
        this.atkTarget = {};
        this.masterAtkTarget = {};
    };
    /**挂机状态 */
    GameControl.HOOK_STATE_HOOK = 0;
    /**寻敌状态 */
    GameControl.HOOK_STATE_FIND_ENMENY = 1;
    __decorate([
        up(2, [1 /* Byte */, 1 /* Byte */])
    ], GameControl.prototype, "upNewRole", null);
    __decorate([
        up(255)
    ], GameControl.prototype, "upHeartbeat", null);
    __decorate([
        up(0, [8 /* String */])
    ], GameControl.prototype, "upGMCommad", null);
    __decorate([
        down(3, [3 /* Int */, 3 /* Int */, 2 /* Short */, 2 /* Short */, 4 /* UByte */, 8 /* String */, 8 /* String */])
    ], GameControl.prototype, "downEnterMap", null);
    __decorate([
        down(4, [2 /* Short */,
            ByteConst.UnitActors,
            ByteConst.UnitRoles,
            ByteConst.UnitMonsters,
            [],
            ByteConst.UnitRoles,
            ByteConst.UnitModelBases,
            ByteConst.UnitDropItems
        ])
    ], GameControl.prototype, "downCreateOtherEntity", null);
    __decorate([
        down(5, [2 /* Short */, 7 /* UInt64 */])
    ], GameControl.prototype, "downGoldChange", null);
    __decorate([
        down(9, [10 /* Double */, 10 /* Double */])
    ], GameControl.prototype, "downHpChange", null);
    __decorate([
        down(26, [10 /* Double */, 10 /* Double */])
    ], GameControl.prototype, "downNeiGongChange", null);
    __decorate([
        down(10, [10 /* Double */])
    ], GameControl.prototype, "downRemoveEntity", null);
    __decorate([
        down(11, [10 /* Double */, 3 /* Int */, 3 /* Int */])
    ], GameControl.prototype, "downMoveEntity", null);
    __decorate([
        down(12, [10 /* Double */, 3 /* Int */, 3 /* Int */])
    ], GameControl.prototype, "downStopMoveEntity", null);
    __decorate([
        down(13, [10 /* Double */, 2 /* Short */, 3 /* Int */, 3 /* Int */, 3 /* Int */])
    ], GameControl.prototype, "downSyncPos", null);
    __decorate([
        down(15, [10 /* Double */, 10 /* Double */])
    ], GameControl.prototype, "downMpChange", null);
    __decorate([
        down(17, [3 /* Int */])
    ], GameControl.prototype, "downTips", null);
    __decorate([
        down(18, [1 /* Byte */])
    ], GameControl.prototype, "downFirstRegister", null);
    __decorate([
        down(20)
    ], GameControl.prototype, "downDieNotice", null);
    __decorate([
        down(21, [3 /* Int */, 8 /* String */])
    ], GameControl.prototype, "downGuildChange", null);
    __decorate([
        down(24, [10 /* Double */, [3 /* Int */, 10 /* Double */]])
    ], GameControl.prototype, "downOtherAttChange", null);
    __decorate([
        down(25, [10 /* Double */, 3 /* Int */])
    ], GameControl.prototype, "downPaoPao", null);
    __decorate([
        up(22, [8 /* String */])
    ], GameControl.prototype, "upRename", null);
    __decorate([
        down(22, [1 /* Byte */])
    ], GameControl.prototype, "downRename", null);
    __decorate([
        up(25, [10 /* Double */])
    ], GameControl.prototype, "dispatchChangeAttrPoint", null);
    __decorate([
        down(31, [10 /* Double */, 3 /* Int */, 3 /* Int */, 3 /* Int */, 3 /* Int */])
    ], GameControl.prototype, "downFindPath", null);
    __decorate([
        up(31, [10 /* Double */, [3 /* Int */, 3 /* Int */]])
    ], GameControl.prototype, "upFindPathToServer", null);
    __decorate([
        down(32, [10 /* Double */, 10 /* Double */, 10 /* Double */, 6 /* UInt */])
    ], GameControl.prototype, "downBloodNumShow", null);
    __decorate([
        down(33, [10 /* Double */, 10 /* Double */])
    ], GameControl.prototype, "downChangeTarget", null);
    __decorate([
        down(34, [8 /* String */])
    ], GameControl.prototype, "downAddMonsterConfig", null);
    __decorate([
        down(35)
    ], GameControl.prototype, "downZeroInit", null);
    __decorate([
        down(36, [10 /* Double */, 3 /* Int */])
    ], GameControl.prototype, "downChangeCamp", null);
    __decorate([
        up(41)
    ], GameControl.prototype, "upChooseOldPlayer", null);
    __decorate([
        down(41)
    ], GameControl.prototype, "downChooseOldPlayer", null);
    __decorate([
        up(33)
    ], GameControl.prototype, "upStopAI", null);
    __decorate([
        up(34, [[10 /* Double */]])
    ], GameControl.prototype, "upGetOtherAttr", null);
    GameControl = __decorate([
        protocolsId(255 /* MAXVALUE */)
    ], GameControl);
    return GameControl;
}(BaseSystem));
__reflect(GameControl.prototype, "GameControl");
var GameServer = (function (_super) {
    __extends(GameServer, _super);
    function GameServer() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._curServerTime = 0;
        _this._curClientTime = 0;
        _this._tickCount = 0;
        return _this;
    }
    GameServer_1 = GameServer;
    GameServer.ins = function () {
        return _super.ins.call(this);
    };
    GameServer.prototype.initZero = function () {
        this.resetDailyRedPoint();
        this.checkIsFirstLogin();
        EventMgr.ins().dispatch(467 /* ZERO_UPDATE_SETTING */);
    };
    Object.defineProperty(GameServer, "serverTime", {
        /**
         * 获取服务器当前时间从1970年开始的(即时)
         */
        get: function () {
            return GameServer_1._serverTime + egret.getTimer();
        },
        enumerable: true,
        configurable: true
    });
    GameServer.setServerTime = function (time) {
        GameServer_1._serverTime = DateUtils.formatMiniDateTime(time) - egret.getTimer();
    };
    /**
     * 开服信息
     * 255-23
     */
    GameServer.prototype.downServerOpenDay = function (openDay, zeroTime, heZeroTime, hefuCount, isOpenLF, kfSvidSmall, kfSvidBig, kfOpenTimeSmall, kfOpenTimeBig) {
        GameServer_1.serverOpenDay = openDay;
        GameServer_1._serverZeroTime = zeroTime;
        GameServer_1._serverHeZeroTime = heZeroTime;
        GameServer_1._hefuCount = hefuCount;
        GameServer_1.isOpenLF = isOpenLF;
        GameServer_1.kfServerIDSmall = kfSvidSmall;
        GameServer_1.kfServerIDBig = kfSvidBig;
        GameServer_1.kfOpenTimetampSmall = kfOpenTimeSmall;
        GameServer_1.kfOpenTimetampBig = kfOpenTimeBig;
        EventMgr.ins().dispatch(466 /* SERVER_OPEN_DAY */);
    };
    /**
     * 服务器时间
     * 255-14
     */
    GameServer.prototype.downServerTime = function (serverTime) {
        GameServer_1.setServerTime(serverTime);
        GameServer_1.loginTimetamp = GameServer_1.serverTime;
    };
    GameServer.prototype.upSyncServerTime = function () {
    };
    GameServer.prototype.checkServerTime = function (time) {
        var _this = this;
        var interval = 60;
        if (this._curServerTime == 0) {
            TimerMgr.ins().doTimer(1000 * interval, 0, function () {
                _this.upSyncServerTime();
            }, this);
        }
        else {
            var sdifftime = time - this._curServerTime;
            var cdifftime = Math.floor(egret.getTimer() / 1000) - this._curClientTime;
            if (1.5 * cdifftime >= interval && cdifftime >= 1.5 * sdifftime && Math.floor((new Date).getTime() / 1000) != Math.floor(Date.now() / 1000)) {
                this._tickCount += 1;
                if (this._tickCount >= 3) {
                    SocketConnection.ins().close();
                    warnControl.show(LangMgr.getValueByKey('usewgstop'), function () { }, this);
                    EasyLoading.ins().showLoading();
                }
            }
        }
        this._curServerTime = time;
        this._curClientTime = Math.floor(egret.getTimer() / 1000);
    };
    GameServer.prototype.checkIsFirstLogin = function () {
        GameServer_1.isTodayFirst = false;
        var fun = function () {
            var clientTime = new Date(1000 * ServerStorage.ins().getValue(19 /* loginTime */));
            var serverTime = new Date(GameServer_1.serverTime);
            var isFirst = clientTime.getFullYear() != serverTime.getFullYear();
            isFirst || (isFirst = clientTime.getMonth() != serverTime.getMonth());
            isFirst || (isFirst = clientTime.getDate() != serverTime.getDate());
            return isFirst;
        };
        if (!ServerStorage.ins().getValue(19 /* loginTime */) || fun()) {
            GameServer_1.isTodayFirst = true;
            ServerStorage.ins().setValue(19 /* loginTime */, GameServer_1.serverTime / 1000 >> 0);
            ServerStorage.ins().setValue(20 /* peakedMallTip */, 1);
            ServerStorage.ins().setBitValue(ClientSetBit.kfzhbossRed, 1);
            ServerStorage.ins().setBitValue(ClientSetBit.newFunNotice, 0);
            ServerStorage.ins().setBitValue(ClientSetBit.pubBossNoTipItem, 0);
            ServerStorage.ins().setBitValue(ClientSetBit.pubBossNoTipYb, 0);
            ServerStorage.ins().setBitValue(ClientSetBit.syBossNoTipItem, 0);
            ServerStorage.ins().setBitValue(ClientSetBit.matchKOTips, 0);
            ServerStorage.ins().setBitValue(ClientSetBit.matchGPTips, 0);
            ServerStorage.ins().setBitValue(ClientSetBit.funcopen, 0);
        }
        this.updateDailyRedPoint();
    };
    GameServer.prototype.updateDailyRedPoint = function () {
        var val = ServerStorage.ins().getValue(41 /* dailyloginTime */);
        if (!val) {
            this.resetDailyRedPoint();
            return;
        }
        var serverTime = GameServer_1.serverTime;
        var state = DateUtils.getDayState(serverTime, val * DateUtils.MS_PER_SECOND);
        if (state) {
            this.resetDailyRedPoint();
        }
    };
    GameServer.prototype.resetDailyRedPoint = function () {
        ServerStorage.ins().setValue(41 /* dailyloginTime */, Math.floor(GameServer_1.serverTime / DateUtils.MS_PER_SECOND));
        ServerStorage.ins().setBitValue(ClientSetBit.serverBattleShop, 1);
        amusementControl.resetActivityTips();
    };
    Object.defineProperty(GameServer, "smallKFServOpenDay", {
        get: function () {
            return this.kfOpenTimetampSmall ? this.calcDayByTimetamp(this.kfOpenTimetampSmall) : 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GameServer, "bigKFServOpenDay", {
        get: function () {
            return this.kfOpenTimetampBig ? this.calcDayByTimetamp(this.kfOpenTimetampBig) : 0;
        },
        enumerable: true,
        configurable: true
    });
    GameServer.calcDayByTimetamp = function (timetamp) {
        var time = DateUtils.formatMiniDateTime(timetamp);
        var inDay = DateUtils.calcDiffDay(this.serverTime, time);
        return timetamp > 0 ? inDay + 1 : 0;
    };
    GameServer.loginTimetamp = 0;
    __decorate([
        down(23, [3 /* Int */, 3 /* Int */, 3 /* Int */, 3 /* Int */, 0 /* Boolean */, 3 /* Int */, 3 /* Int */, 3 /* Int */, 3 /* Int */])
    ], GameServer.prototype, "downServerOpenDay", null);
    __decorate([
        down(14, [6 /* UInt */])
    ], GameServer.prototype, "downServerTime", null);
    __decorate([
        up(14)
    ], GameServer.prototype, "upSyncServerTime", null);
    GameServer = GameServer_1 = __decorate([
        protocolsId(255 /* MAXVALUE */)
    ], GameServer);
    return GameServer;
    var GameServer_1;
}(BaseSystem));
__reflect(GameServer.prototype, "GameServer");
/**
 * 道具数据
 */
var ItemData = (function () {
    function ItemData() {
        this._point = -1;
    }
    ItemData.prototype.init = function (datas) {
        this.handle = datas[0];
        this.configID = datas[1];
        this.count = datas[2];
        this.att = [];
        for (var i = 0; i < datas[3].length; i++) {
            var att = new AttributeData(datas[3][i][0], datas[3][i][1]);
            this.att.push(att);
        }
        this.extAtt = [];
        for (var i = 0; i < datas[4].length; i++) {
            var att = new AttributeData(datas[4][i][0], datas[4][i][1]);
            this.extAtt.push(att);
        }
    };
    Object.defineProperty(ItemData.prototype, "configID", {
        get: function () {
            return this._configID;
        },
        set: function (value) {
            this.itemConfig = DataCenter.ins().ItemConfig[value];
            if (value != 0) {
                Assert(this.itemConfig, LangMgr.getValueByKey('bagError', value));
            }
            this._point = -1;
            this._configID = value;
            this.setCanbeUsed();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 通过string数组获取多行字符串
     * @param str[]   属性string数组
     * @param newline  属性与属性上下间隔几行(默认1行)
     */
    ItemData.getStringByList = function (str, newline, addStr) {
        if (newline === void 0) { newline = 1; }
        if (addStr === void 0) { addStr = ": "; }
        var ret = "";
        for (var i = 0; i < str.length; i++) {
            ret += str[i] + addStr;
            if (i < str.length - 1) {
                for (var j = 0; j < newline; j++) {
                    ret += "\n";
                }
            }
        }
        return ret;
    };
    ItemData.getStringByNextList = function (now, next) {
        var ret = "";
        for (var i = 0; i < now.length; i++) {
            ret += now[i];
            if (next[i]) {
                ret += next[i];
            }
            if (i < now.length - 1) {
                ret += "\n";
            }
        }
        return ret;
    };
    Object.defineProperty(ItemData.prototype, "point", {
        get: function () {
            if (this._point == -1) {
                this._point = ItemUtils.calculateBagItemScore(this);
            }
            return this._point;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 设置道具可使用的红点提示
     */
    ItemData.prototype.setCanbeUsed = function () {
        if (!this.itemConfig)
            return;
        if (ItemUtils.getType(this.itemConfig) == 20 /* TYPE_20 */) {
            //特戒使用
            this.canbeUsed = superRingControl.checkCanUseByItem(this.itemConfig.id);
        }
        else {
            this.canbeUsed = false;
        }
    };
    ItemData.prototype.getCanbeUsed = function () {
        return this.canbeUsed;
    };
    ItemData.prototype.copy = function (item) {
        if (!item)
            item = new ItemData();
        var self = this;
        item.handle = self.handle;
        item.configID = self.configID;
        item.count = self.count;
        item._point = self._point;
        item.att = [];
        for (var i = 0; i < 8; i++) {
            var att = new AttributeData(self.att[i].type, self.att[i].value);
            item.att.push(att);
        }
        item.extAtt = [];
        for (var i = 0; i < 8; i++) {
            var att = new AttributeData(self.extAtt[i].type, self.extAtt[i].value);
            item.extAtt.push(att);
        }
        return item;
    };
    ItemData.prototype.reset = function () {
        this.handle = 0;
        this.configID = 0;
        this.count = 0;
        this.att = [];
        for (var i = 0; i < 8; i++) {
            var att = new AttributeData(0, 0);
            this.att.push(att);
        }
        this.extAtt = [];
        for (var i = 0; i < 8; i++) {
            var att = new AttributeData(0, 0);
            this.extAtt.push(att);
        }
    };
    return ItemData;
}());
__reflect(ItemData.prototype, "ItemData");
var LookControl = (function (_super) {
    __extends(LookControl, _super);
    function LookControl() {
        var _this = _super.call(this) || this;
        _this.lookerId = 0;
        _this.addCustomEvent(354 /* CREATE_OTHER_ENTITY */, _this.onCreateEntity);
        return _this;
    }
    LookControl.ins = function () {
        return _super.ins.call(this);
    };
    LookControl.prototype.onCreateEntity = function (entityModel) {
        if (this.checkCanLook() && entityModel.type == 1 /* ROLE */ && entityModel instanceof RoleModel && entityModel.guildID == unionControl.guildID) {
            this.dispatchOnlook(entityModel.masterHandle);
        }
    };
    LookControl.prototype.dispatchOnlook = function (id) {
        this.lookerId = id;
    };
    LookControl.prototype.getLookRole = function () {
        if (!this.lookerId)
            return null;
        var roleList = UnitMgr.ins().getMasterList(this.lookerId);
        if (!roleList)
            return null;
        var jobRoles = {};
        for (var i = 0; i < roleList.length; i++) {
            var role = roleList[i];
            if (role instanceof UnitRole) {
                jobRoles[role.infoModel.job] = role;
            }
        }
        var charRole;
        for (var job in jobRoles) {
            if (jobRoles[job].getHP() > 0) {
                return jobRoles[job];
            }
            if (!charRole) {
                charRole = jobRoles[job];
            }
        }
        return charRole;
    };
    LookControl.prototype.checkCanLook = function () {
        return MapControl.copyType == 45 /* UNIONCROSS */;
    };
    LookControl.prototype.checkIsCamera = function (charRole) {
        if (this.checkCanLook()) {
            var lookRole = this.getLookRole();
            if (lookRole) {
                return lookRole == charRole;
            }
        }
        return charRole == UnitMgr.ins().getNoDieRole();
    };
    LookControl.prototype.clear = function () {
        this.lookerId = 0;
    };
    return LookControl;
}(BaseSystem));
__reflect(LookControl.prototype, "LookControl");
/**
 * 移动控制
 */
var MoveControl = (function (_super) {
    __extends(MoveControl, _super);
    function MoveControl() {
        var _this = _super.call(this) || this;
        _this.addCustomEvent(7 /* MAP_GRID_CLICK */, _this.mapClick);
        _this.addCustomEvent(6 /* MAP_MOVE_COMPLETE */, _this.moveComplete);
        _this.addCustomEvent(353 /* ENTER_MAP */, _this.onEnterMap);
        return _this;
    }
    MoveControl.ins = function () {
        return _super.ins.call(this);
    };
    MoveControl.prototype.canMove = function () {
        if (toseongControl.isToseong || mineControl.inCopy || campWarControl.isCampWar() && campWarControl.canMove() || blisterControl.isPaoDian ||
            (godWeaponBossControl.isGwBoss || godWeaponBossControl.isGwTopBoss) && godWeaponBossControl.canMove() || crossBossControl.isKFBossBattle ||
            devildomControl.isDevildomBattle || crossArenaControl.isKFArena && crossArenaControl.checkFBOperat() ||
            darkHallBossControl.isDarkHallBoss || dominateBossControl.isZhuzaiBoss || totemBossControl.inCopy ||
            crazybtplayCopyControl.isShenwujindi || reincarnateStarBossControl.isInFb) {
            return true;
        }
        return false;
    };
    MoveControl.prototype.mapClick = function (_a) {
        var target = _a.target, x = _a.x, y = _a.y;
        if (MapControl.copyId == 99999) {
            gameControl.upStopAI();
            this.doMove(target, x, y);
        }
        else if (this.canMove()) {
            this.findTarget = target;
            if (toseongControl.isToseong || godWeaponBossControl.isGwBoss || godWeaponBossControl.isGwTopBoss || campWarControl.isCampWar() || blisterControl.isPaoDian ||
                crossBossControl.isKFBossBattle || devildomControl.isDevildomBattle || crossArenaControl.isKFArena || darkHallBossControl.isDarkHallBoss ||
                dominateBossControl.isZhuzaiBoss || reincarnateStarBossControl.isInFb || totemBossControl.inCopy ||
                crazybtplayCopyControl.isShenwujindi) {
                gameControl.upStopAI();
            }
            this.doMove(target, x, y);
        }
    };
    MoveControl.prototype.doMove = function (target, x, y) {
        var role = UnitMgr.ins().getNoDieRole();
        if (null != role && !role.isHardStraight) {
            if (target && target.infoModel && (target.infoModel.type == 100 /* CNPC */ || target.infoModel.type == 102 /* MINE */)) {
                var dist = MathUtils.getDistanceByObject(target, role);
                if (dist <= 2 * MapControl.CELL_SIZE) {
                    this.moveComplete(role);
                    return;
                }
                var pos = MapControl.getPosRangeRandom(target.x, target.y, DirUtils.get8DirBy2Point(target, role));
                x = pos[0] * MapControl.CELL_SIZE + MapControl.CELL_SIZE / 2;
                y = pos[1] * MapControl.CELL_SIZE + MapControl.CELL_SIZE / 2;
            }
            EntrustMgr.ins().cancelEntrusTask(0 /* Transfer */);
            MapControl.moveTo(x, y);
        }
    };
    MoveControl.prototype.moveComplete = function (e) {
        if (e.team == 0 /* My */ && e instanceof UnitRole) {
            var role = UnitMgr.ins().getNoDieRole();
            if (role == e) {
                if (this.findTarget && this.findTarget.infoModel) {
                    if (this.findTarget.infoModel.type == 100 /* CNPC */) {
                        var size = MapControl.CELL_SIZE;
                        if (Math.abs(role.x - this.findTarget.x) <= 2 * size && Math.abs(role.y - this.findTarget.y) <= 2 * size) {
                            this.moveToNpc(this.findTarget.infoModel.configID);
                        }
                    }
                    else {
                        if (this.findTarget.infoModel.type == 102 /* MINE */) {
                            UIMgr.ins().open("MineRobView", this.findTarget.infoModel);
                            this.findTarget = null;
                        }
                        else if (this.findTarget.infoModel.type == 101 /* TRANSFER */) {
                            if (mineControl.inCopy) {
                                mineControl.upSceneChange(this.findTarget.infoModel.configID);
                            }
                            this.findTarget = null;
                        }
                    }
                }
                else if (this.moveTar && this.moveTar.point) {
                    var x = MapControl.point2Grip(role.x);
                    var y = MapControl.point2Grip(role.y);
                    if (Math.abs(this.moveTar.point.x - x) <= 2 && Math.abs(this.moveTar.point.y - y) <= 2) {
                        if (this.moveTar.callback) {
                            this.moveTar.callback();
                        }
                        this.moveTar = null;
                    }
                }
            }
        }
    };
    MoveControl.prototype.moveToNpc = function (id) {
        var spokesmaxTask = spokesPersonTaskControl.getNpcTask(id);
        if (spokesmaxTask) {
            spokesPersonTaskControl.showNpcView(spokesmaxTask);
        }
        else {
            var npcBaseConfig = DataCenter.ins().NpcBaseConfig[id];
            var controlTarget = npcBaseConfig.controlTarget;
            if (controlTarget && controlTarget[0]) {
                UIMgr.ins().open(controlTarget[0], controlTarget[1]);
            }
        }
        if (this.moveTar && this.moveTar.npc == id && this.moveTar.callback) {
            this.moveTar.callback();
        }
        this.moveTar = null;
        this.findTarget = null;
    };
    MoveControl.prototype.onEnterMap = function () {
        var state = this.checkIsMove();
        if (state) {
            this.moveToTar();
        }
        else {
            this.moveTar = null;
        }
    };
    MoveControl.prototype.moveToTar = function () {
        var tar = this.moveTar;
        if (tar.npc) {
            var npc = UnitMgr.ins().getNpcByConfigID(tar.npc);
            if (npc) {
                this.mapClick({
                    target: npc,
                    x: npc.x,
                    y: npc.y
                });
            }
            else {
                this.moveTar = null;
            }
        }
        else if (tar.point) {
            this.mapClick({
                target: null,
                x: MapControl.grip2Point(tar.point.x),
                y: MapControl.grip2Point(tar.point.y)
            });
        }
    };
    MoveControl.prototype.checkIsMove = function (tar) {
        tar = tar || this.moveTar;
        if (!tar) {
            return false;
        }
        switch (tar.type) {
            case 0 /* MAP */:
                return true;
            case 1 /* TOSEONG */:
                return toseongControl.isToseong;
            case 2 /* MINE */:
                return mineControl.inCopy;
        }
        return false;
    };
    MoveControl.prototype.moveTo = function (target) {
        var self = this;
        if (!target.npc && !target.point) {
            tipsControl.showTips(LangMgr.getValueByKey('gotoTypeinex'));
            return false;
        }
        if (null == target.type) {
            target.type = 1 /* TOSEONG */;
        }
        if (this.checkIsMove(target)) {
            this.moveTar = target;
            this.moveToTar();
            return true;
        }
        switch (target.type) {
            case 1 /* TOSEONG */:
                if (!(toseongControl.enterCD < 1)) {
                    tipsControl.showTips(LangMgr.getValueByKey("activitClooding", toseongControl.enterCD));
                    return false;
                }
                warnControl.showDangerWarn(function () {
                    self.moveTar = target;
                    toseongControl.upEnter();
                });
                break;
            case 2 /* MINE */:
                this.moveTar = target;
                DangerWarnView.cancelCall = function () {
                    self.moveTar = null;
                };
                mineControl.upIntoMine();
                break;
            default:
                tipsControl.showTips(LangMgr.getValueByKey('gotoTypeinex'));
                return false;
        }
        return true;
    };
    return MoveControl;
}(BaseSystem));
__reflect(MoveControl.prototype, "MoveControl");
var MultiKillControl = (function (_super) {
    __extends(MultiKillControl, _super);
    function MultiKillControl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MultiKillControl.ins = function () {
        return _super.ins.call(this);
    };
    /**
     * 连斩
     * 41-4
     */
    MultiKillControl.prototype.downFbMultiKill = function (num) {
        EventMgr.ins().dispatch(597 /* MULTI_KILL */, num);
    };
    __decorate([
        down(4, [2 /* Short */])
    ], MultiKillControl.prototype, "downFbMultiKill", null);
    MultiKillControl = __decorate([
        protocolsId(41 /* PROTOCOL_41 */)
    ], MultiKillControl);
    return MultiKillControl;
}(BaseSystem));
__reflect(MultiKillControl.prototype, "MultiKillControl");
/**
 * 奖励数据
 */
var PayRewardVo = (function () {
    function PayRewardVo() {
    }
    return PayRewardVo;
}());
__reflect(PayRewardVo.prototype, "PayRewardVo");
var PayVo = (function () {
    function PayVo() {
    }
    PayVo.prototype.init = function (datas) {
        this.day = datas[0] + 1;
        this.curDayPay = datas[1];
        this.num = datas[2];
        this.isAwards = datas[3];
    };
    PayVo.prototype.change = function (datas) {
        this.num = datas[0];
        this.isAwards = datas[1];
    };
    return PayVo;
}());
__reflect(PayVo.prototype, "PayVo");
/**
 * 提示模块
 */
var PromptControl = (function (_super) {
    __extends(PromptControl, _super);
    function PromptControl() {
        var _this = _super.call(this) || this;
        _this.presceneid = -1;
        _this.prefbId = -1;
        _this.killType = 0;
        _this.picKillBoss = "";
        _this.addCustomEvent(353 /* ENTER_MAP */, _this.enterMap);
        return _this;
    }
    PromptControl.ins = function () {
        return _super.ins.call(this);
    };
    /**
     * 进入场景
     */
    PromptControl.prototype.enterMap = function () {
        if (this.presceneid == -1) {
            this.presceneid = MapControl.mapID;
        }
        if (this.prefbId == -1) {
            this.prefbId = MapControl.copyId;
        }
        var cfg = DataCenter.ins().ScenesConfig[MapControl.mapID];
        if (cfg) {
            this.checkHint(cfg, PromptControl.TARTYPE_SCE_IN);
            this.presceneid = MapControl.mapID;
            this.prefbId = MapControl.copyId;
        }
    };
    PromptControl.prototype.checkHint = function (cfg, targetType, config, parma) {
        if (!cfg) {
            switch (targetType) {
                case PromptControl.TARTYPE_WELCOME:
                    this.showHint(targetType);
                    return true;
                case PromptControl.TARTYPE_KILL_BOSS:
                    for (var key in DataCenter.ins().PromptConfig) {
                        var hcf = DataCenter.ins().PromptConfig[key];
                        if (hcf.target[0].guanqiaId == parma.gqid) {
                            this.showHint(targetType, hcf.image);
                            return true;
                        }
                    }
                    break;
            }
            return false;
        }
        if (cfg) {
            var pic = this.HitConfig(cfg, targetType);
            if (pic != null) {
                this.showHint(targetType, pic);
                return true;
            }
        }
        else {
            for (var key in config) {
                var cfg_1 = config[key];
                var pic = this.HitConfig(cfg_1, targetType);
                if (pic != null) {
                    this.showHint(targetType, pic);
                    return true;
                }
            }
        }
        return false;
    };
    PromptControl.prototype.HitConfig = function (data, targetType) {
        var cfg = data;
        for (var key in DataCenter.ins().PromptConfig) {
            var hcf = DataCenter.ins().PromptConfig[key];
            if (hcf.targetType != targetType) {
                continue;
            }
            switch (targetType) {
                case PromptControl.TARTYPE_ACH_BEF:
                    if (cfg.achievementId == hcf.target[0].achievementId &&
                        cfg.taskId == hcf.target[0].taskId)
                        if (hcf.target[0].isfull && hcf.target[0].isfull > 0 && backpackControl.getSurplusCount())
                            return hcf.image;
                    break;
                case PromptControl.TARTYPE_ACH_AFT:
                    if (cfg.achievementId == hcf.target[0].achievementId &&
                        cfg.taskId == hcf.target[0].taskId)
                        return hcf.image;
                    break;
                case PromptControl.TARTYPE_SCE_IN:
                    if (MapControl.mapID == hcf.target[0].sceneid &&
                        MapControl.copyId == hcf.target[0].fbId &&
                        this.presceneid == hcf.target[0].presceneid &&
                        this.prefbId == hcf.target[0].prefbId)
                        return hcf.image;
                    break;
            }
        }
        return null;
    };
    PromptControl.prototype.showHint = function (targetType, pic) {
        if (!pic && targetType == PromptControl.TARTYPE_WELCOME) {
            var cfg = DataCenter.ins().PromptConfig[targetType];
            pic = cfg.image;
            tipsControl.showHintTips(pic);
            return;
        }
        if (pic && pic != "") {
            tipsControl.showHintTips(pic);
        }
    };
    /**
     * 欢迎页
     */
    PromptControl.prototype.dispatchWelcome = function () {
        this.checkHint(null, PromptControl.TARTYPE_WELCOME);
    };
    /**
     * 接收任务
     */
    PromptControl.prototype.dispatchAchievementBef = function (cfg) {
        if (cfg) {
            this.checkHint(cfg, PromptControl.TARTYPE_ACH_BEF);
        }
    };
    /**
     * 任务完成后
     */
    PromptControl.prototype.dispatchAchievementAft = function (achievementVo) {
        if (!achievementVo) {
            return;
        }
        var cfg;
        for (var key in DataCenter.ins().GuideAchievementConfig) {
            var dcfg = DataCenter.ins().GuideAchievementConfig[key];
            if (dcfg.achievementId == achievementVo.achievementId && dcfg.taskId == achievementVo.id) {
                cfg = dcfg;
                break;
            }
        }
        if (!cfg) {
            return;
        }
        this.checkHint(cfg, PromptControl.TARTYPE_ACH_AFT);
    };
    /**
     * 击杀BOSS
     */
    PromptControl.prototype.dispatchKillBoss = function (cfg) {
        this.checkHint(cfg, PromptControl.TARTYPE_KILL_BOSS);
    };
    /**
     * 击杀关卡BOSS
     */
    PromptControl.prototype.dispatchKillBossEx = function (guanqiaId) {
        this.checkHint(null, PromptControl.TARTYPE_KILL_BOSS, null, { gqid: guanqiaId });
    };
    PromptControl.TARTYPE_WELCOME = 1; //欢迎页
    PromptControl.TARTYPE_ACH_BEF = 2; //成就表任务完成前
    PromptControl.TARTYPE_ACH_AFT = 3; //成就表任务完成后
    PromptControl.TARTYPE_SCE_IN = 4; //进入副本
    PromptControl.TARTYPE_KILL_BOSS = 5; //击杀某个boss
    return PromptControl;
}(BaseSystem));
__reflect(PromptControl.prototype, "PromptControl");
var HintTargetData = (function () {
    function HintTargetData() {
    }
    return HintTargetData;
}());
__reflect(HintTargetData.prototype, "HintTargetData");
/**
 * 膜拜
 */
var RankSubRoleVo = (function () {
    function RankSubRoleVo() {
        this.pos1 = 0;
        this.pos2 = 0;
        this.pos3 = 0;
        this.deCirShowID = 0;
        this.heirloomLv = 0;
        this.thirteenEquipLv = 0;
        this.weaponViewId = 0;
        this.clothesViewId = 0;
    }
    RankSubRoleVo.prototype.init = function (datas) {
        this.job = datas[0];
        this.sex = datas[1];
        this.clothID = datas[2];
        this.swordID = datas[3];
        this.wingLevel = datas[4];
        if (datas[5] == 0) {
            this.wingLevel = -1;
        }
        this.pos1 = datas[6];
        this.pos2 = datas[7];
        this.pos3 = datas[8];
        this.deCirShowID = datas[9];
        this.thirteenEquipLv = datas[10];
        this.weaponViewType = datas[11];
        this.weaponViewId = datas[12];
        this.clothesViewType = datas[13];
        this.clothesViewId = datas[14];
    };
    return RankSubRoleVo;
}());
__reflect(RankSubRoleVo.prototype, "RankSubRoleVo");
/**
 * 奖励数据
 */
var RewardVo = (function () {
    function RewardVo() {
        /**
         * 红点
         */
        this.isRedPoint = 0;
        /**
         * 掉落特效Id(光柱)
         */
        this.dropEffId = 0;
        /**
         * 掉落类型
         */
        this.dropType = 0;
    }
    RewardVo.prototype.init = function (datas) {
        this.type = datas[0];
        this.id = datas[1];
        this.count = datas[2];
    };
    RewardVo.copy = function (data) {
        var rewardData = new RewardVo;
        rewardData.type = data.type;
        rewardData.count = data.count;
        rewardData.id = data.id;
        return rewardData;
    };
    RewardVo.getRewardsByOpenDay = function (datas, day) {
        if (day === void 0) { day = GameServer.serverOpenDay + 1; }
        var rewards = [];
        for (var key in datas) {
            if (day >= +key) {
                rewards = datas[key].concat();
            }
        }
        return rewards;
    };
    RewardVo.getRewardsByJob = function (t, e) {
        if (!e) {
            var i = heroControl.getSubRoleByIndex(0);
            i && (e = i.job);
        }
        var s = [];
        for (var n in t)
            (void 0 == t[n].job || t[n].job == e) && s.push(t[n]);
        return s;
    };
    return RewardVo;
}());
__reflect(RewardVo.prototype, "RewardVo");
var SkillVo = (function () {
    function SkillVo(id) {
        this._specialCD = 0;
        if (id) {
            this.configID = id;
        }
    }
    Object.defineProperty(SkillVo.prototype, "lv", {
        /** 等级 */
        get: function () {
            return this._id % 1000;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SkillVo.prototype, "job", {
        get: function () {
            return Math.floor(this._id % 100000 / 10000);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SkillVo.prototype, "id", {
        /** id */
        get: function () {
            return Math.floor(this._id / 1000) * 1000;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SkillVo.prototype, "icon", {
        get: function () {
            return this.id + "_png";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SkillVo.prototype, "configID", {
        /** 配置id */
        get: function () {
            return this._id;
        },
        set: function (id) {
            if (this._id != id) {
                this._id = id;
                !Assert(DataCenter.ins().SkillsConfig, "The configuration is empty, whether the first Angle is created：" + GlobalModel.isCreateRole);
                this.config = DataCenter.ins().SkillsConfig[id];
                this._preId = NaN;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SkillVo.prototype, "preId", {
        get: function () {
            return this._preId;
        },
        set: function (id) {
            this._preId = id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SkillVo.prototype, "lv1ConfigID", {
        /** 1级的id */
        get: function () {
            return this.id + 1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SkillVo.prototype, "castType", {
        /** 施法目标 */
        get: function () {
            return isNaN(this.config.castType) ? 2 : this.config.castType;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SkillVo.prototype, "targetType", {
        /** 作用目标 */
        get: function () {
            return isNaN(this.config.targetType) ? 2 : this.config.targetType;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SkillVo.prototype, "desc", {
        /** 描述 */
        get: function () {
            var levelConfig = this.config || DataCenter.ins().SkillsConfig[this.lv1ConfigID];
            if (Assert(levelConfig, LangMgr.getValueByKey('godError1', this.configID))) {
                return "";
            }
            var config = DataCenter.ins().SkillsDescConfig[levelConfig.desc];
            var str = config ? config.desc : "";
            if (!str.length || !levelConfig.desc_ex)
                return str;
            var len = levelConfig.desc_ex.length;
            for (var i = 0; i < len; i++) {
                str = str.replace("%s%", levelConfig.desc_ex[i] + "");
            }
            return str;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SkillVo.prototype, "affectRange", {
        /** 作用范围大小 */
        get: function () {
            return isNaN(this.config.affectRange) ? 1 : this.config.affectRange;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SkillVo.prototype, "affectCount", {
        /** 作用个数 */
        get: function () {
            return isNaN(this.config.affectCount) ? 1 : this.config.affectCount;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SkillVo.prototype, "calcType", {
        /** 伤害类型 */
        get: function () {
            return isNaN(this.config.calcType) ? 1 : this.config.calcType;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SkillVo.prototype, "herdMonRate", {
        /** 群攻对怪物伤害降低比例*/
        get: function () {
            var config = DataCenter.ins().SkillsDescConfig[this.descID];
            return config ? (isNaN(config.herdMonRate) ? 100 : config.herdMonRate) : 100;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SkillVo.prototype, "herdPlayerRate", {
        /** 群攻对人物伤害降低比例*/
        get: function () {
            var config = DataCenter.ins().SkillsDescConfig[this.descID];
            return config ? (isNaN(config.herdPlayerRate) ? 10 : config.herdPlayerRate) : 10;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SkillVo.prototype, "cd", {
        get: function () {
            if (this._specialCD)
                return this._specialCD;
            var config = DataCenter.ins().SkillsDescConfig[this.descID];
            var revise = this.reviseCD ? this.reviseCD : 0;
            return config ? config.cd - revise : 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SkillVo.prototype, "specialCD", {
        /** 设置特殊CD（需要计算的CD） */
        set: function (value) {
            this._specialCD = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SkillVo.prototype, "isPassive", {
        /** 是否被动技能 */
        get: function () {
            return !!this.config.passive;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SkillVo.prototype, "rate", {
        /** 触发几率 */
        get: function () {
            return this.config.passive && this.config.passive.rate || 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SkillVo.prototype, "cond", {
        /** 主动触发(0)还是被动触发(1) */
        get: function () {
            return this.config.passive && this.config.passive.cond || 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SkillVo.prototype, "castRange", {
        /** 施法距离(按格子) */
        get: function () {
            var config = DataCenter.ins().SkillsDescConfig[this.descID];
            return config ? config.castRange : 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SkillVo.prototype, "repelDistance", {
        /** 附加击退（距离） */
        get: function () {
            return this.config.repelDistance;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SkillVo.prototype, "teleport", {
        /** 自身是否位移（0否1是） */
        get: function () {
            return this.config.teleport;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SkillVo.prototype, "actionType", {
        /** 动作类型 */
        get: function () {
            var config = DataCenter.ins().SkillsDescConfig[this.descID];
            return config ? config.actionType : "";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SkillVo.prototype, "tarEff", {
        get: function () {
            return this.config.tarEff;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SkillVo.prototype, "otarEff", {
        get: function () {
            return this.config.otarEff;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SkillVo.prototype, "selfEff", {
        get: function () {
            return this.config.selfEff;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SkillVo.prototype, "canUse", {
        get: function () {
            return this.config && !!this.lv;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SkillVo.prototype, "name", {
        get: function () {
            var config = DataCenter.ins().SkillsDescConfig[this.descID];
            return config ? config.name : "";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SkillVo.prototype, "args", {
        get: function () {
            return this.config.args;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SkillVo.prototype, "wordEff", {
        get: function () {
            var config = DataCenter.ins().SkillsDescConfig[this.descID];
            return config ? config.wordEff : "";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SkillVo.prototype, "effType", {
        get: function () {
            return this.config.effType;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SkillVo.prototype, "otherSkills", {
        get: function () {
            return this.getOtherSkills(true);
        },
        enumerable: true,
        configurable: true
    });
    SkillVo.prototype.getOtherSkills = function (state) {
        if (!this.config)
            return null;
        var otherSkills = [];
        if (this.config.otherSkills) {
            for (var key in this.config.otherSkills) {
                var otherSkill = this.config.otherSkills[key];
                if (state) {
                    if (GameControl.triggerValue(otherSkill.rate)) {
                        otherSkills.push(otherSkill.id);
                    }
                }
                else {
                    otherSkills.push(otherSkill.id);
                }
            }
        }
        return otherSkills;
    };
    Object.defineProperty(SkillVo.prototype, "effectId", {
        get: function () {
            var config = DataCenter.ins().SkillsDescConfig[this.descID];
            return config ? config.effectId : 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SkillVo.prototype, "sound", {
        get: function () {
            var config = DataCenter.ins().SkillsDescConfig[this.descID];
            return config ? config.sound : '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SkillVo.prototype, "die_summoner", {
        get: function () {
            return this.config ? this.config.die_summoner : [];
        },
        enumerable: true,
        configurable: true
    });
    SkillVo.getSkillByJob = function (job, index, lv) {
        if (index === void 0) { index = 1; }
        if (lv === void 0) { lv = 1; }
        return new SkillVo(job * 10000 + index * 1000 + lv);
    };
    Object.defineProperty(SkillVo.prototype, "descID", {
        get: function () {
            var config = DataCenter.ins().SkillsConfig[this.configID] || DataCenter.ins().SkillsConfig[this.lv1ConfigID];
            return config ? config.desc : 0;
        },
        enumerable: true,
        configurable: true
    });
    SkillVo.reviseDp = function (id, index) {
        if (isNaN(index)) {
            return null;
        }
        if (this.storeSkillReviDp[id]) {
            return this.storeSkillReviDp[id];
        }
        //神宠
        var summonerCfg = crazyDogControl.getLinkSkillReviseCfg(id);
        this.pushSkillReviDp(summonerCfg, id);
        //图腾
        var ttCfg;
        var skillReviseIds = totemControl.getSkillReviseId(index, id);
        for (var i = 0; i < skillReviseIds.length; i++) {
            var skillReviseId = skillReviseIds[i];
            if (ttCfg) {
                this.mergeReviDp(ttCfg, DataCenter.ins().SkillsCommonReviseConfig[skillReviseId]);
            }
            else {
                ttCfg = CommonUtils.copyDataDepth(DataCenter.ins().SkillsCommonReviseConfig[skillReviseId]);
            }
        }
        this.pushSkillReviDp(ttCfg, id);
        return this.storeSkillReviDp[id];
    };
    SkillVo.pushSkillReviDp = function (reviseCfg, id) {
        if (reviseCfg) {
            if (this.storeSkillReviDp[id]) {
                this.mergeReviDp(this.storeSkillReviDp[id], reviseCfg);
            }
            else {
                this.storeSkillReviDp[id] = CommonUtils.copyDataDepth(reviseCfg);
            }
        }
    };
    SkillVo.mergeReviDp = function (storeCfg, reviseCfg) {
        for (var key in storeCfg) {
            if ("skill" != key && "id" != key) {
                if ("selfEff" == key || "targetEff" == key || "args" == key || "desc" == key) {
                    if (storeCfg[key]) {
                        storeCfg[key].concat(reviseCfg[key]);
                    }
                }
                else {
                    storeCfg[key] += reviseCfg[key];
                }
            }
        }
    };
    SkillVo.storeSkillReviDp = {};
    return SkillVo;
}());
__reflect(SkillVo.prototype, "SkillVo");
var ArrowEffect = (function (_super) {
    __extends(ArrowEffect, _super);
    function ArrowEffect() {
        var _this = _super.call(this) || this;
        _this.otherMc = [];
        _this.init();
        return _this;
    }
    ArrowEffect.prototype.init = function () {
        this._effGroup = new eui.Group;
        this.addChild(this._effGroup);
        this._arrowGroup = new eui.Group;
        this.addChild(this._arrowGroup);
        this._effCir = new GameMovieClip;
        this._effGroup.addChild(this._effCir);
        this._arrow = new GuideArrow2;
        this._arrowGroup.addChild(this._arrow);
        this.touchChildren = false;
        this.touchEnabled = false;
    };
    ArrowEffect.prototype.show = function (tips, target, dir) {
        if (dir === void 0) { dir = 0; }
        if (!this._isShow) {
            this._isShow = true;
            egret.Tween.removeTweens(this);
            this.alpha = 0;
            egret.Tween.get(this).to({
                alpha: 1
            }, 300);
            this.x = target.width >> 1;
            this.y = target.height >> 1;
            target.addChild(this);
            this._arrow.setDirection(dir);
            this._effCir.playFile(PATH_EFF + "guideff", -1);
        }
        this._arrow.setTips(tips);
    };
    ArrowEffect.prototype.showTapOutEff = function () {
        var self = this;
        this.otherMc.length = 2;
        var _loop_3 = function (i) {
            if (!self.otherMc[i]) {
                self.otherMc[i] = new GameMovieClip;
            }
            if (!self.otherMc[i].parent) {
                self.addChild(self.otherMc[i]);
            }
            self.otherMc[i].scaleX = 3.3;
            self.otherMc[i].scaleY = 3.3;
            self.otherMc[i].x = 0;
            self.otherMc[i].y = 0;
            var tween = egret.Tween.get(self.otherMc[i]);
            tween.wait(240 * i).call(function () {
                self.otherMc[i].playFile(PATH_EFF + "forceguildeff", 1, function () {
                    egret.Tween.removeTweens(self.otherMc[i]);
                    DisplayUtils.removeFromParent(self.otherMc[i]);
                });
            });
        };
        for (var i = 0; i < this.otherMc.length; i++) {
            _loop_3(i);
        }
    };
    ArrowEffect.prototype.hide = function () {
        if (this._isShow) {
            this._isShow = false;
            this._arrow.removeTweens();
            if (this.parent) {
                this.parent.removeChild(this);
            }
        }
    };
    ArrowEffect.prototype.isShow = function () {
        return this._isShow;
    };
    return ArrowEffect;
}(egret.DisplayObjectContainer));
__reflect(ArrowEffect.prototype, "ArrowEffect");
/**
 * 素材需要提前加载好
 * 素材命名规则：类型_数值（有类型是因为一般会同时有几种数字图片，比如大小号或不同颜色）
 * 点号素材命名：类型_dot
 * 创建BitmapNumber使用createNumPic返回DisplayObjectContainer
 * 创建好的BitmapNumber数值需要变化是调用changeNum
 * 回收使用desstroyNumPic
 */
var BitmapNumber = (function (_super) {
    __extends(BitmapNumber, _super);
    function BitmapNumber() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._imgPool = [];
        _this._containerPool = [];
        return _this;
    }
    BitmapNumber.ins = function () {
        return _super.ins.call(this);
    };
    /**
     * 根据需要的数字和类型返回一个DisplayObjectContainer
     * num数字值，支持小数点
     * type素材类型
     */
    BitmapNumber.prototype.createNumPic = function (num, type, offset, offsetY) {
        if (offset === void 0) { offset = 0; }
        if (offsetY === void 0) { offsetY = 0; }
        var container = this.getContainer();
        var numStr = num.toString();
        var tempBm;
        for (var index = 0; index < numStr.length; index++) {
            tempBm = this.getSingleNumPic(numStr.charAt(index), type);
            container.addChild(tempBm);
        }
        this.repositionNumPic(container, offset, offsetY);
        return container;
    };
    //回收带数字的DisplayObjectContainer
    BitmapNumber.prototype.desstroyNumPic = function (picContainer) {
        this.clearContainer(picContainer);
        if (picContainer.parent) {
            picContainer.parent.removeChild(picContainer);
        }
        this._containerPool.push(picContainer);
    };
    /**
     * 改变带数字的DisplayObjectContainer数字值
     * 提供这个方法是为了提高效率，直接更换之前创建对象的texture，避免多余的删除和创建
     */
    BitmapNumber.prototype.changeNum = function (picContainer, num, type, offset, offsetY) {
        if (offset === void 0) { offset = 0; }
        if (offsetY === void 0) { offsetY = 0; }
        var numStr = num.toString();
        //如果当前数字个数多于目标个数则把多余的回收
        if (picContainer.numChildren > numStr.length) {
            while (picContainer.numChildren > numStr.length) {
                this.recycleBM(picContainer.getChildAt(picContainer.numChildren - 1));
            }
        }
        var tempStr;
        for (var index = 0; index < numStr.length; index++) {
            //如果当前的Bitmap数量不够则获取新的Bitmap补齐
            if (index >= picContainer.numChildren) {
                picContainer.addChild(this.getBitmap());
            }
            tempStr = numStr.charAt(index);
            tempStr = tempStr == "." ? "dot" : tempStr;
            picContainer.getChildAt(index).texture = this.getTexture(tempStr, type);
        }
        this.repositionNumPic(picContainer, offset, offsetY);
    };
    //每个数字宽度不一样，所以重新排列
    BitmapNumber.prototype.repositionNumPic = function (container, offset, offsetY) {
        if (offset === void 0) { offset = 0; }
        if (offsetY === void 0) { offsetY = 0; }
        var lastX = 0;
        var temp;
        for (var index = 0; index < container.numChildren; index++) {
            temp = container.getChildAt(index);
            temp.x = lastX - offset;
            // temp.y = - offsetY;
            lastX = temp.x + temp.width;
        }
    };
    //清理容器
    BitmapNumber.prototype.clearContainer = function (picContainer) {
        while (picContainer.numChildren) {
            this.recycleBM(picContainer.getChildAt(picContainer.numChildren - 1));
        }
    };
    //回收Bitmap
    BitmapNumber.prototype.recycleBM = function (bm) {
        if (bm && bm.parent) {
            bm.parent.removeChild(bm);
            bm.texture = null;
            this._imgPool.push(bm);
        }
    };
    BitmapNumber.prototype.getContainer = function () {
        if (this._containerPool.length) {
            return this._containerPool.shift();
        }
        return new egret.DisplayObjectContainer();
    };
    //获得单个数字Bitmap
    BitmapNumber.prototype.getSingleNumPic = function (num, type) {
        if (num == ".") {
            num = "dot";
        }
        var bm = this.getBitmap();
        var texture = this.getTexture(num, type);
        if (texture) {
            bm.texture = texture;
        }
        else {
            this.getTextureAsync(num, type, bm);
        }
        return bm;
    };
    BitmapNumber.prototype.getTexture = function (num, type) {
        return RES.getRes(type + num + "_png");
    };
    BitmapNumber.prototype.getTextureAsync = function (num, type, bm) {
        RES.getResAsync(type + num + "_png", function (data) {
            bm.texture = data;
        }, undefined);
    };
    BitmapNumber.prototype.getBitmap = function () {
        if (this._imgPool.length) {
            return this._imgPool.shift();
        }
        return new egret.Bitmap();
    };
    return BitmapNumber;
}(SingleClass));
__reflect(BitmapNumber.prototype, "BitmapNumber");
var BossAttackButton = (function (_super) {
    __extends(BossAttackButton, _super);
    function BossAttackButton() {
        var _this = _super.call(this) || this;
        _this.skinName = 'BossAttackButtonSkin';
        return _this;
    }
    return BossAttackButton;
}(eui.Component));
__reflect(BossAttackButton.prototype, "BossAttackButton");
var DropDown = (function (_super) {
    __extends(DropDown, _super);
    function DropDown() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DropDown.prototype.childrenCreated = function () {
        this.init();
    };
    DropDown.prototype.init = function () {
        this.touchEnabled = true;
        this.currentState = 'up';
        this.addEventChange(this.list, this.listSelect);
        this.addEventTouchTap(this, this.onTap);
        this.addEventRemovedFromStage(this, this.removeStage);
        this.dataPro = new eui.ArrayCollection();
        this.list.itemRenderer = DropDownListItem;
        this.list.dataProvider = this.dataPro;
    };
    DropDown.prototype.listSelect = function (e) {
        if (this.list.selectedItem) {
            this.value.text = this.list.selectedItem.name;
        }
    };
    DropDown.prototype.removeStage = function (e) {
        if (this.stage) {
            this.removeEventTouchTap(this.stage, this.onTap);
        }
    };
    DropDown.prototype.onTap = function (e) {
        this.currentState = this.currentState == 'up' ? 'down' : 'up';
        this.listSelect(null);
        e.stopPropagation();
        if (this.stage) {
            if (this.currentState == 'down') {
                this.addEventTouchTap(this.stage, this.onTap);
            }
            else {
                this.removeEventTouchTap(this.stage, this.onTap);
            }
        }
    };
    DropDown.prototype.setData = function (data) {
        this.dataPro.replaceAll(data);
    };
    DropDown.prototype.setSelectedIndex = function (value) {
        this.list.selectedIndex = value;
    };
    DropDown.prototype.getSelectedIndex = function () {
        return this.list.selectedIndex;
    };
    DropDown.prototype.getSelectedItemData = function () {
        return this.list.selectedItem;
    };
    DropDown.prototype.setLabel = function (str) {
        this.value.text = str;
    };
    DropDown.prototype.getLabel = function () {
        return this.value.text;
    };
    DropDown.prototype.setEnabled = function (b) {
        this.list.touchEnabled = b;
        this.list.touchChildren = b;
    };
    DropDown.prototype.getEnabled = function () {
        return this.list.touchEnabled;
    };
    DropDown.prototype.destructor = function () {
        this.removeEventChange(this.list, this.listSelect);
        this.removeEventTouchTap(this, this.onTap);
        this.removeEventRemovedFromStage(this, this.removeStage);
        this.removeStage();
    };
    return DropDown;
}(BasePanel));
__reflect(DropDown.prototype, "DropDown");
var DropDownListItem = (function (_super) {
    __extends(DropDownListItem, _super);
    function DropDownListItem() {
        return _super.call(this) || this;
    }
    DropDownListItem.prototype.dataChanged = function () {
        this.nameLbl.text = this.data.name;
    };
    return DropDownListItem;
}(BaseItemRender));
__reflect(DropDownListItem.prototype, "DropDownListItem");
var EasyLoading = (function (_super) {
    __extends(EasyLoading, _super);
    function EasyLoading() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    EasyLoading.ins = function () {
        return _super.ins.call(this);
    };
    EasyLoading.prototype.init = function () {
        _super.prototype.init.call(this);
        SocketConnection.ins().setOnClose(this.showLoading, this);
        SocketConnection.ins().setOnConnected(this.hideLoading, this);
    };
    return EasyLoading;
}(StartLoading));
__reflect(EasyLoading.prototype, "EasyLoading");
var GainGoodsItem = (function (_super) {
    __extends(GainGoodsItem, _super);
    function GainGoodsItem() {
        var _this = _super.call(this) || this;
        _this.skinName = "GainGoodsItemSkin";
        _this.graycolor = LangMgr.getColor('color86');
        return _this;
    }
    GainGoodsItem.prototype.dataChanged = function () {
        this.greencolor = this.desc.textColor;
        this.norcolor = this.desc2.textColor;
        this.desc.text = this.data[0];
    };
    GainGoodsItem.prototype.gainData = function (isOpen, stars, condition) {
        this.stars.visible = true;
        if (!isOpen) {
            this.desc.textColor = this.graycolor;
            this.desc2.textColor = this.graycolor;
            if (condition) {
                var str = "";
                if (condition.needZs)
                    str += LangMgr.getValueByKey('warnTips3', condition.needZs);
                if (condition.needLv)
                    str += LangMgr.getValueByKey('tipsOpenLevel', condition.needLv);
                if (condition.guanka)
                    str += LangMgr.getValueByKey('warnTips3', condition.guanka);
                this.desc2.text = str;
            }
            this.dir.visible = false;
            for (var i = 1; i <= 5; i++) {
                this["star" + i].visible = false;
            }
        }
        else {
            for (var i = 1; i <= 5; i++) {
                this["star" + i].visible = (i <= stars);
            }
        }
    };
    return GainGoodsItem;
}(BaseItemRender));
__reflect(GainGoodsItem.prototype, "GainGoodsItem");
var GainGoodsNoSkinItem = (function (_super) {
    __extends(GainGoodsNoSkinItem, _super);
    function GainGoodsNoSkinItem() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GainGoodsNoSkinItem.prototype.dataChanged = function () {
        this.desc.text = this.data[0];
    };
    return GainGoodsNoSkinItem;
}(BaseItemRender));
__reflect(GainGoodsNoSkinItem.prototype, "GainGoodsNoSkinItem");
var ItemBaseNoName = (function (_super) {
    __extends(ItemBaseNoName, _super);
    function ItemBaseNoName() {
        var _this = _super.call(this) || this;
        _this.isShowName(false);
        _this.touchChildren = false;
        return _this;
    }
    return ItemBaseNoName;
}(ItemBase));
__reflect(ItemBaseNoName.prototype, "ItemBaseNoName");
var ItemBaseNoNameCanTap = (function (_super) {
    __extends(ItemBaseNoNameCanTap, _super);
    function ItemBaseNoNameCanTap() {
        var _this = _super.call(this) || this;
        _this.isShowName(false);
        return _this;
    }
    return ItemBaseNoNameCanTap;
}(ItemBase));
__reflect(ItemBaseNoNameCanTap.prototype, "ItemBaseNoNameCanTap");
/**
 * 基础道具显示类
 */
var ItemBaseNoTap = (function (_super) {
    __extends(ItemBaseNoTap, _super);
    function ItemBaseNoTap() {
        return _super.call(this) || this;
    }
    ItemBaseNoTap.prototype.onClick = function () {
    };
    return ItemBaseNoTap;
}(ItemBase));
__reflect(ItemBaseNoTap.prototype, "ItemBaseNoTap");
var ItemBaseTimes = (function (_super) {
    __extends(ItemBaseTimes, _super);
    function ItemBaseTimes() {
        var _this = _super.call(this) || this;
        _this.skinName = "ItemTimesSkin";
        return _this;
    }
    ItemBaseTimes.prototype.dataChanged = function () {
        if (this.data) {
            this.item.data = this.data;
            if (isNaN(this.data.tag)) {
                this.tagImg.source = null;
            }
            else {
                this.tagImg.source = "tag_multi_" + this.data.tag;
            }
        }
    };
    return ItemBaseTimes;
}(BaseItemRender));
__reflect(ItemBaseTimes.prototype, "ItemBaseTimes");
var ItemIcon = (function (_super) {
    __extends(ItemIcon, _super);
    function ItemIcon() {
        var _this = _super.call(this) || this;
        _this.skinName = "ItemIconSkin";
        return _this;
    }
    ItemIcon.prototype.setSoul = function (isSoul) {
        this.tag.visible = isSoul;
    };
    ItemIcon.prototype.setData = function (config) {
        this.config = config;
        if (config != null) {
            this.imgIcon.source = config.icon + '_png';
            this.imgBg.source = 'quality' + ItemUtils.getQuality(config);
            var type = ItemUtils.getType(config);
            var job = ItemUtils.getJob(config);
            this.imgJob.source = (type == 0 || type == 4) && job && this.imgJob.visible ? "job" + job + "Item" : '';
            if (DataCenter.ins().ClientGlobalConfig.effectItems.indexOf && DataCenter.ins().ClientGlobalConfig.effectItems.indexOf(config.id) >= 0) {
                if (this.effect == null) {
                    this.effect = new GameMovieClip;
                    this.effect.x = 35;
                    this.effect.y = 35;
                    this.addChildAt(this.effect, 2);
                    this.effect.addEventListener(egret.Event.ADDED_TO_STAGE, this.resumePlay, this);
                }
                this.effect.playFile(PATH_EFF + 'quality_0' + ItemUtils.getQuality(config));
            }
            // if (type == ItemType.TYPE_40) {
            // 	let totemCorner = DataCenter.ins().TotemCorner[config.level];
            // 	if (totemCorner.leftImg) {
            // 		this.leftCorner.source = totemCorner.leftImg;
            // 		this.leftCorner.visible = true;
            // 	}
            //     if (totemCorner.rightImg && totemCorner.rightCount) {
            // 		for (let i = 0; i < totemCorner.rightCount; i++) {
            // 			this.rightCorner.addChild(new eui.Image(totemCorner.rightImg));
            // 		}
            //         this.rightCorner.visible = true;
            //     }
            // }
        }
        else {
            this.imgIcon.source = '';
            this.imgBg.source = 'quality0';
            this.imgJob.source = '';
        }
    };
    ItemIcon.prototype.resumePlay = function (e) {
        this.effect.play(-1);
    };
    ItemIcon.prototype.setActived = function (b) {
        this.actived.visible = b;
    };
    ItemIcon.prototype.setImgBg1 = function (res) {
        this.imgBg1.visible = true;
        this.imgBg.visible = !this.imgBg1.visible;
        if (res) {
            this.imgBg1.source = res;
        }
    };
    ItemIcon.prototype.setJobImg = function (job) {
        if (job) {
            this.imgJob.visible = true;
            this.imgJob.source = "job" + job + "Item";
        }
    };
    return ItemIcon;
}(BaseItemRender));
__reflect(ItemIcon.prototype, "ItemIcon");
var PriceIcon = (function (_super) {
    __extends(PriceIcon, _super);
    function PriceIcon() {
        var _this = _super.call(this) || this;
        _this.skinName = "PriceIconSkin";
        return _this;
    }
    PriceIcon.prototype.childrenCreated = function () {
        this.priceLabel.textColor = ColorUtils.NORMAL_COLOR;
    };
    /**
     * 价格
     */
    PriceIcon.prototype.getPrice = function () {
        return this._price;
    };
    PriceIcon.prototype.setPrice = function (value, value2) {
        if (value2 === void 0) { value2 = -1; }
        if (value == this._price && value2 == -1)
            return;
        this._price = value;
        if (value2 >= 0) {
            var colorStr = "";
            if (value2 >= value) {
                colorStr = ColorUtils.GREEN_COLOR;
            }
            else {
                colorStr = ColorUtils.RED_COLOR;
            }
            this.priceLabel.textFlow = TextUtils.generateTextFlow("<font color=" + colorStr + ">" + value2 + "</font><font color=" + ColorUtils.WHITE_COLOR + ">/" + value + "</font> ");
        }
        else {
            this.priceLabel.text = "" + this._price;
        }
    };
    PriceIcon.prototype.setText = function (str) {
        this.priceLabel.textFlow = new egret.HtmlTextParser().parser(str);
    };
    PriceIcon.prototype.setData = function (data) {
        var str = "";
        if (data) {
            var awards = data;
            if (awards.type == 0) {
                switch (awards.id) {
                    case 0 /* TYPE_0 */:
                        str = "exp_png";
                        break;
                    case 1 /* TYPE_1 */:
                        str = "szjinbi";
                        break;
                    case 2 /* TYPE_2 */:
                        str = "szyuanbao";
                        break;
                    case 3 /* TYPE_3 */:
                        str = "fame";
                        break;
                    case 4 /* TYPE_4 */:
                        str = "soul";
                        break;
                    case 5 /* TYPE_5 */:
                        str = "yumao_png";
                        break;
                    case 10 /* TYPE_10 */:
                        str = "500008_png";
                        break;
                }
            }
            else if (awards.type == 1) {
                switch (awards.id) {
                    case 200001:
                        str = "yumao_png";
                        break;
                    case 200002:
                        str = "forge";
                        break;
                    case 200003:
                        str = "gem";
                        break;
                    case 200004:
                        str = "spirit";
                        break;
                    case 200005:
                        str = "vigor";
                        break;
                    case 200006:
                        str = "shield";
                        break;
                }
            }
            this._type = awards.id;
            this.setPrice(awards.count);
        }
        else if (data) {
            var itemData = data;
            switch (itemData.itemConfig.id) {
                case 200001:
                    str = "yumao_png";
                    break;
                case 200002:
                    str = "szyuanbao";
                    break;
                case 200003:
                    str = "szyuanbao";
                    break;
                case 200004:
                    str = "szyuanbao";
                    break;
                case 200005:
                    str = "szyuanbao";
                    break;
                case 200006:
                    str = "szyuanbao";
                    break;
            }
            this._type = itemData.itemConfig.id;
            this.setPrice(itemData.count);
        }
        this.iconImg.source = str;
    };
    PriceIcon.prototype.getType = function () {
        return this._type;
    };
    PriceIcon.prototype.setType = function (value) {
        if (this._type == value)
            return;
        this._type = value;
        var str = "";
        switch (this._type) {
            case 0 /* TYPE_0 */:
                str = "exp";
                break;
            case 1 /* TYPE_1 */:
                str = "szjinbi";
                break;
            case 2 /* TYPE_2 */:
                str = "szyuanbao";
                break;
            case 3 /* TYPE_3 */:
                str = "fame";
                break;
            case 4 /* TYPE_4 */:
                str = "soul";
                break;
            case 5 /* TYPE_5 */:
                str = "yumao_png";
                break;
        }
        this.iconImg.source = str;
    };
    Object.defineProperty(PriceIcon.prototype, "labelColor", {
        get: function () {
            return this._labelColor;
        },
        set: function (value) {
            if (this._labelColor != value) {
                this._labelColor = value;
                this.priceLabel.textColor = this._labelColor;
            }
        },
        enumerable: true,
        configurable: true
    });
    return PriceIcon;
}(BaseItemRender));
__reflect(PriceIcon.prototype, "PriceIcon");
/**
 * 特效经验条
 */
var ProgressBarEff = (function (_super) {
    __extends(ProgressBarEff, _super);
    function ProgressBarEff(type) {
        if (type === void 0) { type = ProgressBarEff.TYPE_ORANGE; }
        var _this = _super.call(this) || this;
        /**值特效容器 */
        _this.group = new eui.Group();
        /**值特效 */
        _this.bgmc = new GameMovieClip();
        /**尾巴特效 */
        _this.xianmc = new GameMovieClip();
        /**背景框特效 */
        _this.bordermc = new GameMovieClip();
        /**值table */
        _this.lbvalue = new eui.Label;
        _this.bgimg = new eui.Image;
        _this.bgRect = new eui.Rect;
        /**是否第一次*/
        _this.isFisrt = true;
        /**最大值 */
        _this.maxValue = 0;
        /**当前值 */
        _this.value = 0;
        /**是否播放提升特效 */
        _this.isPlayMc = true;
        _this.offSetX = 23;
        _this.mcWidth = 460;
        _this.bgWidth = 525;
        _this.oldMaxValue = 0;
        _this.oldValue = 0;
        _this._proSkin = type;
        _this.iniUi();
        return _this;
    }
    ProgressBarEff.prototype.iniUi = function () {
        this.touchEnabled = this.touchChildren = false;
        this.bgRect = new eui.Rect;
        this.bgRect.width = this.mcWidth;
        this.bgRect.height = 20;
        this.bgRect.fillColor = 0x100a06;
        this.bgRect.x = 50;
        this.bgRect.y = 22;
        this.addChild(this.bgRect);
        this.group.x = 50;
        this.group.y = 22;
        this.group.width = 0;
        this.group.height = 50;
        this.group.scrollEnabled = true;
        this.bgmc.playFile(PATH_EFF + this._proSkin, -1);
        this.addChild(this.group);
        this.group.addChild(this.bgmc);
        this.xianmc.playFile(PATH_EFF + "jindutiaotoueff", -1);
        this.xianmc.x = this.group.x + this.group.width - this.offSetX;
        this.xianmc.y = 10;
        this.xianmc.scrollRect = new egret.Rectangle(0, 0, 24, 39);
        this.addChild(this.xianmc);
        this.bgimg.x = 14;
        this.bgimg.y = 13;
        this.bgimg.source = "jingyantiao1";
        this.bgimg.scale9Grid = new egret.Rectangle(54, 0, 13, 37);
        this.bgimg.width = this.bgWidth;
        this.addChild(this.bgimg);
        this.lbvalue.x = this.bgimg.x + (this.bgimg.width - 200) / 2;
        this.lbvalue.y = 22;
        this.lbvalue.size = 16;
        this.lbvalue.width = 200;
        this.lbvalue.textAlign = "center";
        this.lbvalue.textColor = 0xffebc8;
        this.addChild(this.lbvalue);
    };
    ProgressBarEff.prototype.setData = function (value, maxValue) {
        this.value = value;
        this.maxValue = maxValue;
        this.setui();
    };
    ProgressBarEff.prototype.setWidth = function (value) {
        this.bgWidth = value;
        this.bgimg.width = this.bgWidth;
        this.lbvalue.x = this.bgimg.x + (this.bgimg.width - 200) / 2;
        var scale = value / ProgressBarEff.DEFAULT_WIDTH;
        this.bgmc.scaleX = scale;
        this.mcWidth = this.bgWidth - 2 * (this.group.x - this.bgimg.x);
        this.bgRect.width = this.mcWidth;
    };
    ProgressBarEff.prototype.setEffXY = function (x, y) {
        this.bgmc.x = this.bgmc.scaleX * x;
        this.bgmc.y = y;
    };
    ProgressBarEff.prototype.setValue = function (value) {
        this.value = value;
        this.setui();
    };
    ProgressBarEff.prototype.getValue = function () {
        return this.value;
    };
    ProgressBarEff.prototype.getMaxValue = function () {
        return this.maxValue;
    };
    ProgressBarEff.prototype.reset = function () {
        this.rePlayMc();
        this.isFisrt = true;
        this.oldValue = this.oldMaxValue = this.value = this.maxValue = 0;
    };
    ProgressBarEff.prototype.rePlayMc = function () {
        this.xianmc.playFile(PATH_EFF + "jindutiaotoueff", -1);
        this.bgmc.playFile(PATH_EFF + this._proSkin, -1);
    };
    ProgressBarEff.prototype.setProgressSkin = function (t) {
        this._proSkin = t;
        this.bgmc.playFile(PATH_EFF + this._proSkin, -1);
    };
    ProgressBarEff.prototype.setMaxValue = function (maxValue) {
        this.maxValue = maxValue;
        this.setui();
    };
    ProgressBarEff.prototype.setui = function () {
        var _this = this;
        egret.Tween.removeTweens(this.group);
        var t = this;
        if (this.maxValue == 0) {
            this.value = 100;
            this.maxValue = 100;
            this.lbvalue.visible = false;
        }
        else {
            this.lbvalue.visible = true;
        }
        if ((this.maxValue > this.oldMaxValue && this.oldMaxValue != 0 || this.maxValue == 0 || this.value < this.oldValue) && !this.isFisrt) {
            var w = (this.oldMaxValue / this.oldMaxValue * this.mcWidth);
            var w2 = (this.value / this.oldMaxValue * this.mcWidth);
            var timer_1 = 30;
            var curX_1 = this.group.x;
            var curCurWidth_1 = this.group.width;
            var t1 = egret.Tween.get(this.group, {
                onChange: function () {
                    if (_this.group.width >= _this.mcWidth - 3 || _this.group.width < 3) {
                        _this.xianmc.visible = false;
                    }
                    else {
                        _this.xianmc.visible = true;
                    }
                    _this.xianmc.x = curX_1 + curCurWidth_1 - _this.offSetX;
                }
            });
            t1.to({
                width: w
            }, 150 + timer_1).call(function () {
                var t2 = egret.Tween.get(_this.group);
                var w1 = (_this.value / _this.maxValue * _this.mcWidth);
                _this.group.width = 0;
                _this.oldValue = _this.value;
                _this.oldMaxValue = _this.maxValue;
                t2.to({
                    width: w1
                }, 150 + timer_1).call(function () {
                    _this.xianmc.x = _this.group.x + w1 - _this.offSetX;
                });
            });
        }
        else {
            this.oldValue = this.value;
            var width = 0;
            if (this.value <= 0) {
                width = 0;
            }
            else {
                var newVal = this.value > this.maxValue ? this.maxValue : this.value;
                width = (newVal / this.maxValue * this.mcWidth);
            }
            var t1 = egret.Tween.get(this.group, {
                onChange: function () {
                    if (_this.group.width >= _this.mcWidth - 3 || _this.group.width < 3) {
                        _this.xianmc.visible = false;
                    }
                    else {
                        _this.xianmc.visible = true;
                    }
                    _this.xianmc.x = _this.group.x + _this.group.width - _this.offSetX;
                }
            });
            t1.to({
                width: width
            }, 200).call(function () {
                _this.oldMaxValue = _this.maxValue;
            });
        }
        this.lbvalue.text = this.value + "/" + this.maxValue;
        if (this.isFisrt) {
            this.isFisrt = false;
            return;
        }
    };
    ProgressBarEff.prototype.max = function () {
        this.maxValue = 0;
        this.setui();
        this.lbvalue.visible = true;
        this.lbvalue.text = "";
    };
    ProgressBarEff.prototype.setLbValueText = function (text) {
        this.setui();
        this.lbvalue.visible = true;
        this.lbvalue.text = text;
    };
    ProgressBarEff.prototype.setStroke = function (color, size) {
        this.lbvalue.stroke = size;
        this.lbvalue.strokeColor = color;
    };
    ProgressBarEff.TYPE_GREEN = "jindutiaoeff1";
    ProgressBarEff.TYPE_ORANGE = "jindutiaoeff";
    ProgressBarEff.DEFAULT_WIDTH = 525;
    ProgressBarEff.DEFAULT_MC_WIDTH = 460;
    return ProgressBarEff;
}(egret.DisplayObjectContainer));
__reflect(ProgressBarEff.prototype, "ProgressBarEff");
/**
 * 技能效果显示
 * 必须重写bottomLayer,topLayer,setTimeout
 */
var SkillEffPlayDisplay = (function () {
    function SkillEffPlayDisplay() {
    }
    Object.defineProperty(SkillEffPlayDisplay, "urlSkill", {
        get: function () {
            return "" + PATH_SKILLJSON;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SkillEffPlayDisplay, "urlSkillEff", {
        get: function () {
            return "" + PATH_SKILLEFF;
        },
        enumerable: true,
        configurable: true
    });
    SkillEffPlayDisplay.playConfigs = function (configs, param) {
        var _this = this;
        if (!this.setTimeout) {
            debug.warn("SkillEffPlayDisplay.setTimeout Is not set");
            return;
        }
        var _loop_4 = function (i) {
            var config = configs[i];
            //初始化没有的值，且不修改源
            config = SkillEffConfig.initValue(config);
            this_3.setTimeout(config.delay / param.rate, function () {
                if (config.type > 50) {
                    var typeFun_1 = _this["type" + config.type];
                    if (typeFun_1) {
                        typeFun_1.call(_this, param, config);
                    }
                    return;
                }
                var mc = ObjectPool.pop("GameMovieClip");
                mc.rate = config.playSpeed * (config.isRate ? param.rate : 1);
                var fileName = SkillEffPlayDisplay.urlSkillEff + config.effectId + (config.isDirN ? "" : config.isDir ? DirUtils.get5DirBy8Dir(param.initParam.dir) : "");
                var s = fileName + param.append;
                mc.playFile(s, config.playCount, function () {
                    _this.removeMC(mc);
                });
                mc.x = config.x;
                mc.y = config.y;
                if (param.offset) {
                    mc.x += param.offset.x;
                    mc.y += param.offset.y;
                }
                if (typeof config.rotation == "string") {
                    var str = config.rotation + "";
                    var rots = str.split("|");
                    var rotMin = +rots[0];
                    var rotMax = +rots[1] - +rots[0];
                    mc.rotation = Math.random() * rotMax + rotMin;
                }
                else {
                    mc.rotation = config.rotation;
                }
                mc.scaleX = config.scaleX * (config.isDir ? DirUtils.isScaleX(param.initParam.dir) ? -1 : 1 : 1);
                mc.scaleY = config.scaleY;
                mc.alpha = config.alpha;
                mc.anchorOffsetX = config.cx;
                mc.anchorOffsetY = config.cy;
                var layer = config.layer;
                if (config.dirPos.length && config.dirPos[param.initParam.dir]) {
                    var dirPos = config.dirPos[param.initParam.dir];
                    if (!isNaN(dirPos.x))
                        mc.x += dirPos.x;
                    if (!isNaN(dirPos.y))
                        mc.y += dirPos.y;
                    if (!isNaN(dirPos.layer))
                        layer = dirPos.layer;
                    if (!isNaN(dirPos.rotation))
                        mc.rotation += dirPos.rotation;
                    if (!isNaN(dirPos.scaleX))
                        mc.scaleX = dirPos.scaleX;
                    if (!isNaN(dirPos.scaleY))
                        mc.scaleY = dirPos.scaleY;
                    if (!isNaN(dirPos.cx))
                        mc.anchorOffsetX = dirPos.cx;
                    if (!isNaN(dirPos.cy))
                        mc.anchorOffsetY = dirPos.cy;
                }
                if (config.isRot && param.target) {
                    var targetXY = config.isInit ? {
                        x: param.initParam.tar[0].x,
                        y: param.initParam.tar[0].y
                    } : param.target[0];
                    var angle = MathUtils.getAngle(MathUtils.getRadian2(param.source.x, param.source.y, targetXY.x, targetXY.y));
                    mc.rotation = angle + mc.rotation;
                }
                param.mc = mc;
                var layerFun = _this["layer" + layer];
                if (layerFun) {
                    layerFun.call(_this, param);
                }
                var typeFun = _this["type" + config.type];
                if (typeFun) {
                    typeFun.call(_this, param, config);
                }
                if (config.tween.length > 0) {
                    var tw = egret.Tween.get(mc);
                    for (var j = 0; j < config.tween.length; j += 2) {
                        var to = config.tween[j];
                        if (to.tweenType == 1) {
                            var props = {};
                            for (var key in to) {
                                if ("tweenType" != key) {
                                    props[key] = (mc[key] || 0) + to[key];
                                }
                            }
                            tw.to(props, config.tween[j + 1].time);
                        }
                        else {
                            if (to.tweenType != undefined) {
                                delete to.tweenType;
                            }
                            tw.to(to, config.tween[j + 1].time);
                        }
                    }
                }
            }, this_3);
        };
        var this_3 = this;
        for (var i = 0; i < configs.length; i++) {
            _loop_4(i);
        }
    };
    /**
     * 播放技能效果
     * @param skillId   技能id
     * @param source    施法者
     * @param target    目标列表
     * @param hitFun    命中回调
     * @param rate      延时的除数
     * @param append    特效名追加字符
     */
    SkillEffPlayDisplay.play = function (skillId, source, target, hitFun, rate, offset, append) {
        var _this = this;
        if (target === void 0) { target = []; }
        if (hitFun === void 0) { hitFun = null; }
        if (rate === void 0) { rate = 1; }
        if (offset === void 0) { offset = null; }
        if (append === void 0) { append = ""; }
        var url = "" + this.urlRoot + this.urlSkill + skillId + ".json";
        RES.getResByUrl(url, function (configs) {
            if (!configs) {
                debug.log("You don't have that skill- " + skillId);
                return;
            }
            var param = new EffParam;
            param.initParam = { dir: source.dir, x: source.x, y: source.y, tar: [] };
            for (var i = 0; target && i < target.length; i++) {
                param.initParam.tar.push({ dir: target[i].dir, x: target[i].x, y: target[i].y });
            }
            param.source = source;
            param.target = target;
            param.hitFun = hitFun;
            param.rate = rate;
            param.offset = offset;
            param.append = append;
            _this.playConfigs(configs, param);
        }, this, RES.ResourceItem.TYPE_JSON);
    };
    SkillEffPlayDisplay.type1 = function (param, config) {
        var _this = this;
        var target = param.target;
        var source = param.source;
        var mc = param.mc;
        var hitFun = param.hitFun;
        var targetXY = config.isInit ? { x: param.initParam.tar[0].x, y: param.initParam.tar[0].y } : target[0];
        var t = egret.Tween.get(mc);
        var jl = config.dis || MathUtils.getDistanceByObject(source, targetXY);
        if (config.sDis)
            jl += config.sDis;
        var angle = MathUtils.getAngle(MathUtils.getRadian2(source.x, source.y, targetXY.x, targetXY.y)) + config.range;
        if (config.sDis) {
            var p2 = MathUtils.getDirMove(angle, config.sDis);
            mc.x += p2.x;
            mc.y += p2.y;
        }
        var p1 = MathUtils.getDirMove(angle, jl, mc.x, mc.y);
        t.to({ 'x': p1.x, 'y': p1.y }, jl / config.moveSpeed * 1000).call(function () {
            _this.removeMC(mc);
            if (config.hit && hitFun)
                hitFun(config.probability);
            if (config.exEff)
                _this.play(config.exEff, source, target, hitFun, 1, null, param.append);
        });
    };
    SkillEffPlayDisplay.removeMC = function (mc) {
        mc.destroy();
    };
    SkillEffPlayDisplay.type96 = function (param, config) {
        if (!this.shake) {
            debug.warn("SkillEffPlayDisplay.shake Is not set");
            return;
        }
        var source = param.source;
        this.shake(source, config.range, config.time, config.playCount, config.probability);
    };
    SkillEffPlayDisplay.type97 = function (param, config) {
        var target = param.target;
        var source = param.source;
        if (MapControl.copyType != 0)
            return;
        target[0].stopMove();
        var isMainRole = target[0] == UnitMgr.ins().getNoDieRole();
        var jl = config.dis || MathUtils.getDistanceByObject(source, target[0]);
        var angle = MathUtils.getAngle(MathUtils.getRadian2(source.x, source.y, target[0].x, target[0].y));
        var p = MathUtils.getDirMove(angle, jl, target[0].x, target[0].y);
        var data = Bresenham.canThrough(MapControl.aStar, MapControl.point2Grip(target[0].x), MapControl.point2Grip(target[0].y), MapControl.point2Grip(p.x), MapControl.point2Grip(p.y));
        if (data[0] == 0) {
            if (MapControl.point2Grip(target[0].x) == data[2] && MapControl.point2Grip(target[0].y) == data[3]) {
                p.x = target[0].x;
                p.y = target[0].y;
            }
            else {
                p.x = MapControl.grip2Point(data[2]);
                p.y = MapControl.grip2Point(data[3]);
            }
        }
        p.x = Math.max(Math.min(p.x, MapControl.MAX_WIDTH), 0);
        p.y = Math.max(Math.min(p.y, MapControl.MAX_HEIGHT), 0);
        jl = MathUtils.getDistanceByObject(target[0], p);
        if (jl <= 0)
            return;
        var t = egret.Tween.get(target[0].moveTweenObj);
        t.to({ 'x': p.x, 'y': p.y }, jl / config.moveSpeed * 1000);
    };
    SkillEffPlayDisplay.type98 = function (param, config) {
        var target = param.target;
        var source = param.source;
        if (MapControl.copyType != 0)
            return;
        source.stopMove();
        var isMainRole = source == UnitMgr.ins().getNoDieRole();
        var jl = config.dis || MathUtils.getDistanceByObject(source, target[0]);
        var angle = MathUtils.getAngle(MathUtils.getRadian2(source.x, source.y, target[0].x, target[0].y));
        var p = MathUtils.getDirMove(angle, jl, target[0].x, target[0].y);
        var data = Bresenham.canThrough(MapControl.aStar, MapControl.point2Grip(target[0].x), MapControl.point2Grip(target[0].y), MapControl.point2Grip(p.x), MapControl.point2Grip(p.y));
        if (data[0] == 0) {
            if (MapControl.point2Grip(target[0].x) == data[2] && MapControl.point2Grip(target[0].y) == data[3]) {
                p.x = target[0].x;
                p.y = target[0].y;
            }
            else {
                p.x = MapControl.grip2Point(data[2]);
                p.y = MapControl.grip2Point(data[3]);
            }
        }
        p.x = Math.max(Math.min(p.x, MapControl.MAX_WIDTH), 0);
        p.y = Math.max(Math.min(p.y, MapControl.MAX_HEIGHT), 0);
        jl = MathUtils.getDistanceByObject(target[0], p);
        if (jl <= 0)
            return;
        p = MathUtils.getDirMove(angle, jl, source.x, source.y);
        var t = egret.Tween.get(source.moveTweenObj);
        t.to({ 'x': p.x, 'y': p.y }, jl / config.moveSpeed * 1000);
    };
    SkillEffPlayDisplay.type99 = function (param, config) {
        var hitFun = param.hitFun;
        if (hitFun)
            hitFun(config.probability);
    };
    SkillEffPlayDisplay.layer0 = function (param) {
        var source = param.source;
        var mc = param.mc;
        mc.x += source.x;
        mc.y += source.y;
        if (!this.bottomLayer) {
            debug.warn("SkillEffPlayDisplay.bottomLayer Is not set");
            return;
        }
        this.bottomLayer.addChild(mc);
    };
    SkillEffPlayDisplay.layer1 = function (param) {
        var source = param.source;
        var mc = param.mc;
        source.addChildAt(mc, 0);
    };
    SkillEffPlayDisplay.layer2 = function (param) {
        var source = param.source;
        var mc = param.mc;
        source.addChild(mc);
    };
    SkillEffPlayDisplay.layer3 = function (param) {
        var source = param.source;
        var mc = param.mc;
        mc.x += source.x;
        mc.y += source.y;
        if (!this.topLayer) {
            debug.warn("SkillEffPlayDisplay.topLayer Is not set");
            return;
        }
        this.topLayer.addChild(mc);
    };
    SkillEffPlayDisplay.layer4 = function (param) {
        var target = param.target;
        var mc = param.mc;
        mc.x += target[0].x;
        mc.y += target[0].y;
        if (!this.bottomLayer) {
            debug.warn("SkillEffPlayDisplay.bottomLayer Is not set");
            return;
        }
        this.bottomLayer.addChild(mc);
    };
    SkillEffPlayDisplay.layer5 = function (param) {
        var target = param.target;
        var mc = param.mc;
        target[0].addChildAt(mc, 0);
    };
    SkillEffPlayDisplay.layer6 = function (param) {
        var target = param.target;
        var mc = param.mc;
        target[0].addChild(mc);
    };
    SkillEffPlayDisplay.layer7 = function (param) {
        var target = param.target;
        var mc = param.mc;
        mc.x += target[0].x;
        mc.y += target[0].y;
        if (!this.topLayer) {
            debug.warn("SkillEffPlayDisplay.topLayer Is not set");
            return;
        }
        this.topLayer.addChild(mc);
    };
    SkillEffPlayDisplay.layer8 = function (param) {
        if (!this.fixedLayer) {
            debug.warn("SkillEffPlayDisplay.topLayer Is not set");
            return;
        }
        this.fixedLayer.addChild(param.mc);
    };
    SkillEffPlayDisplay.urlRoot = "";
    return SkillEffPlayDisplay;
}());
__reflect(SkillEffPlayDisplay.prototype, "SkillEffPlayDisplay");
var EffParam = (function () {
    function EffParam() {
        this.append = "";
        this.rate = 1;
    }
    return EffParam;
}());
__reflect(EffParam.prototype, "EffParam");
var SkillEffConfig = (function () {
    function SkillEffConfig() {
        /** 类型 */
        this.type = 0;
        /** 延时毫秒 */
        this.delay = 0;
        /** 层级 */
        this.layer = 3;
        /** 坐标x */
        this.x = 0;
        /** 坐标y */
        this.y = 0;
        /** 特效id */
        this.effectId = 0;
        /** 播放速度 */
        this.playSpeed = 1;
        /** 水平缩放 */
        this.scaleX = 1;
        /** 垂直缩放 */
        this.scaleY = 1;
        /** 旋转角度 */
        this.rotation = 0;
        /** 特效带方向 */
        this.isDir = 0;
        this.isDirN = 0;
        /** 移动速度 */
        this.moveSpeed = 100;
        /** 播放次数 */
        this.playCount = 1;
        /** 距离 */
        this.dis = 0;
        /** 开始距离 */
        this.sDis = 0;
        /** 透明 */
        this.alpha = 1;
        /** 是否以目标点旋转 */
        this.isRot = 0;
        /** 完成后是否命中 */
        this.hit = 0;
        /** 中心点x */
        this.cx = 0;
        /** 中心点y */
        this.cy = 0;
        /** 幅度|角度 */
        this.range = 0;
        /** 持续时间 */
        this.time = 0;
        /** 攻速影响 */
        this.isRate = 0;
        /** 是否拿初始属性做计算 */
        this.isInit = 0;
        /** 概率*/
        this.probability = 1;
        /** 后续特效 */
        this.exEff = "";
        /** 随目标方向偏移的坐标 */
        this.dirPos = [];
        this.tween = [];
    }
    SkillEffConfig.initValue = function (config) {
        config["__proto__"] = this.o;
        return config;
    };
    SkillEffConfig.o = new SkillEffConfig();
    return SkillEffConfig;
}());
__reflect(SkillEffConfig.prototype, "SkillEffConfig");
/**
 * 技能效果UI显示
 * 必须重写bottomLayer,topLayer,setTimeout
 */
var SkillEffPlayShow = (function () {
    function SkillEffPlayShow() {
    }
    Object.defineProperty(SkillEffPlayShow, "urlSkill", {
        get: function () {
            return "" + PATH_SKILLJSON;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SkillEffPlayShow, "urlSkillEff", {
        get: function () {
            return "" + PATH_SKILLEFF;
        },
        enumerable: true,
        configurable: true
    });
    SkillEffPlayShow.playConfigs = function (configs, param) {
        var _this = this;
        if (!this.setTimeout) {
            debug.warn("SkillEffPlayShow.setTimeout Is not set");
            return;
        }
        var _loop_5 = function (i) {
            var config = configs[i];
            //初始化没有的值，且不修改源
            config = SkillEffConfig.initValue(config);
            this_4.setTimeout(config.delay / param.rate, function () {
                if (config.type > 50) {
                    var typeFun_2 = _this["type" + config.type];
                    if (typeFun_2) {
                        typeFun_2.call(_this, param, config);
                    }
                    return;
                }
                var mc = ObjectPool.pop("GameMovieClip");
                mc.rate = config.playSpeed * (config.isRate ? param.rate : 1);
                var fileName = SkillEffPlayShow.urlSkillEff + config.effectId + (config.isDirN ? "" : config.isDir ? DirUtils.get5DirBy8Dir(param.initParam.dir) : "");
                var s = fileName + param.append;
                mc.playFile(s, config.playCount, function () {
                    _this.removeMC(mc);
                });
                mc.x = config.x;
                mc.y = config.y;
                if (param.offset) {
                    mc.x += param.offset.x;
                    mc.y += param.offset.y;
                }
                if (typeof config.rotation == "string") {
                    var str = config.rotation + "";
                    var rots = str.split("|");
                    var rotMin = +rots[0];
                    var rotMax = +rots[1] - +rots[0];
                    mc.rotation = Math.random() * rotMax + rotMin;
                }
                else {
                    mc.rotation = config.rotation;
                }
                mc.scaleX = config.scaleX * (config.isDir ? DirUtils.isScaleX(param.initParam.dir) ? -1 : 1 : 1);
                mc.scaleY = config.scaleY;
                mc.alpha = config.alpha;
                mc.anchorOffsetX = config.cx;
                mc.anchorOffsetY = config.cy;
                var layer = config.layer;
                if (config.dirPos.length && config.dirPos[param.initParam.dir]) {
                    var dirPos = config.dirPos[param.initParam.dir];
                    if (!isNaN(dirPos.x))
                        mc.x += dirPos.x;
                    if (!isNaN(dirPos.y))
                        mc.y += dirPos.y;
                    if (!isNaN(dirPos.layer))
                        layer = dirPos.layer;
                    if (!isNaN(dirPos.rotation))
                        mc.rotation += dirPos.rotation;
                    if (!isNaN(dirPos.scaleX))
                        mc.scaleX = dirPos.scaleX;
                    if (!isNaN(dirPos.scaleY))
                        mc.scaleY = dirPos.scaleY;
                    if (!isNaN(dirPos.cx))
                        mc.anchorOffsetX = dirPos.cx;
                    if (!isNaN(dirPos.cy))
                        mc.anchorOffsetY = dirPos.cy;
                }
                if (config.isRot && param.target) {
                    var targetXY = config.isInit ? {
                        x: param.initParam.tar[0].x,
                        y: param.initParam.tar[0].y
                    } : param.target[0];
                    var angle = MathUtils.getAngle(MathUtils.getRadian2(param.source.x, param.source.y, targetXY.x, targetXY.y));
                    mc.rotation = angle + mc.rotation;
                }
                param.mc = mc;
                var layerFun = _this["layer" + layer];
                if (layerFun) {
                    layerFun.call(_this, param);
                }
                var typeFun = _this["type" + config.type];
                if (typeFun) {
                    typeFun.call(_this, param, config);
                }
                if (config.tween.length > 0) {
                    var tw = egret.Tween.get(mc);
                    for (var j = 0; j < config.tween.length; j += 2) {
                        var to = config.tween[j];
                        tw.to(to, config.tween[j + 1].time);
                    }
                }
            }, this_4);
        };
        var this_4 = this;
        for (var i = 0; i < configs.length; i++) {
            _loop_5(i);
        }
    };
    /**
     * 播放技能效果
     * @param skillId   技能id
     * @param source    施法者
     * @param target    目标列表
     * @param hitFun    命中回调
     * @param rate      延时的除数
     * @param append    特效名追加字符
     */
    SkillEffPlayShow.play = function (skillId, source, target, hitFun, rate, offset, append) {
        var _this = this;
        if (target === void 0) { target = []; }
        if (hitFun === void 0) { hitFun = null; }
        if (rate === void 0) { rate = 1; }
        if (offset === void 0) { offset = null; }
        if (append === void 0) { append = ""; }
        var url = "" + this.urlRoot + this.urlSkill + skillId + ".json";
        RES.getResByUrl(url, function (configs) {
            if (!configs) {
                console.log("You don't have that skill:" + skillId);
                return;
            }
            var param = new EffParam;
            param.initParam = { dir: source.dir, x: source.x, y: source.y, tar: [] };
            for (var i = 0; target && i < target.length; i++) {
                param.initParam.tar.push({ dir: target[i].dir, x: target[i].x, y: target[i].y });
            }
            param.source = source;
            param.target = target;
            param.hitFun = hitFun;
            param.rate = rate;
            param.offset = offset;
            param.append = append;
            _this.playConfigs(configs, param);
        }, this, RES.ResourceItem.TYPE_JSON);
    };
    SkillEffPlayShow.type1 = function (param, config) {
        var _this = this;
        var target = param.target;
        var source = param.source;
        var mc = param.mc;
        var hitFun = param.hitFun;
        var targetXY = config.isInit ? { x: param.initParam.tar[0].x, y: param.initParam.tar[0].y } : target[0];
        var t = egret.Tween.get(mc);
        var jl = config.dis || MathUtils.getDistanceByObject(source, targetXY);
        if (config.sDis)
            jl += config.sDis;
        var angle = MathUtils.getAngle(MathUtils.getRadian2(source.x, source.y, targetXY.x, targetXY.y)) + config.range;
        if (config.sDis) {
            var p2 = MathUtils.getDirMove(angle, config.sDis);
            mc.x += p2.x;
            mc.y += p2.y;
        }
        var p1 = MathUtils.getDirMove(angle, jl, mc.x, mc.y);
        t.to({ 'x': p1.x, 'y': p1.y }, jl / config.moveSpeed * 1000).call(function () {
            _this.removeMC(mc);
            if (config.hit && hitFun)
                hitFun(config.probability);
            if (config.exEff)
                _this.play(config.exEff, source, target, hitFun, 1, null, param.append);
        });
    };
    SkillEffPlayShow.removeMC = function (mc) {
        mc.destroy();
    };
    SkillEffPlayShow.type96 = function (param, config) {
        if (!this.shake) {
            debug.warn("SkillEffPlayShow.shake Is not set");
            return;
        }
        var source = param.source;
        this.shake(source, config.range, config.time, config.playCount, config.probability);
    };
    SkillEffPlayShow.type97 = function (param, config) {
        var target = param.target;
        var source = param.source;
        if (MapControl.copyType != 0)
            return;
        target[0].stopMove();
        var isMainRole = target[0] == UnitMgr.ins().getNoDieRole();
        var jl = config.dis || MathUtils.getDistanceByObject(source, target[0]);
        var angle = MathUtils.getAngle(MathUtils.getRadian2(source.x, source.y, target[0].x, target[0].y));
        var p = MathUtils.getDirMove(angle, jl, target[0].x, target[0].y);
        var data = Bresenham.canThrough(MapControl.aStar, MapControl.point2Grip(target[0].x), MapControl.point2Grip(target[0].y), MapControl.point2Grip(p.x), MapControl.point2Grip(p.y));
        if (data[0] == 0) {
            if (MapControl.point2Grip(target[0].x) == data[2] && MapControl.point2Grip(target[0].y) == data[3]) {
                p.x = target[0].x;
                p.y = target[0].y;
            }
            else {
                p.x = MapControl.grip2Point(data[2]);
                p.y = MapControl.grip2Point(data[3]);
            }
        }
        p.x = Math.max(Math.min(p.x, MapControl.MAX_WIDTH), 0);
        p.y = Math.max(Math.min(p.y, MapControl.MAX_HEIGHT), 0);
        jl = MathUtils.getDistanceByObject(target[0], p);
        if (jl <= 0)
            return;
        var t = egret.Tween.get(target[0].moveTweenObj);
        t.to({ 'x': p.x, 'y': p.y }, jl / config.moveSpeed * 1000);
    };
    SkillEffPlayShow.type98 = function (param, config) {
        var target = param.target;
        var source = param.source;
        if (MapControl.copyType != 0)
            return;
        source.stopMove();
        var isMainRole = source == UnitMgr.ins().getNoDieRole();
        var jl = config.dis || MathUtils.getDistanceByObject(source, target[0]);
        var angle = MathUtils.getAngle(MathUtils.getRadian2(source.x, source.y, target[0].x, target[0].y));
        var p = MathUtils.getDirMove(angle, jl, target[0].x, target[0].y);
        var data = Bresenham.canThrough(MapControl.aStar, MapControl.point2Grip(target[0].x), MapControl.point2Grip(target[0].y), MapControl.point2Grip(p.x), MapControl.point2Grip(p.y));
        if (data[0] == 0) {
            if (MapControl.point2Grip(target[0].x) == data[2] && MapControl.point2Grip(target[0].y) == data[3]) {
                p.x = target[0].x;
                p.y = target[0].y;
            }
            else {
                p.x = MapControl.grip2Point(data[2]);
                p.y = MapControl.grip2Point(data[3]);
            }
        }
        p.x = Math.max(Math.min(p.x, MapControl.MAX_WIDTH), 0);
        p.y = Math.max(Math.min(p.y, MapControl.MAX_HEIGHT), 0);
        jl = MathUtils.getDistanceByObject(target[0], p);
        if (jl <= 0)
            return;
        p = MathUtils.getDirMove(angle, jl, source.x, source.y);
        var t = egret.Tween.get(source.moveTweenObj);
        t.to({ 'x': p.x, 'y': p.y }, jl / config.moveSpeed * 1000);
    };
    SkillEffPlayShow.type99 = function (param, config) {
        var hitFun = param.hitFun;
        if (hitFun)
            hitFun(config.probability);
    };
    SkillEffPlayShow.layer0 = function (param) {
        var source = param.source;
        var mc = param.mc;
        mc.x += source.x;
        mc.y += source.y;
        if (!this.bottomLayer) {
            debug.warn("SkillEffPlayShow.bottomLayer Is not set");
            return;
        }
        this.bottomLayer.addChild(mc);
    };
    SkillEffPlayShow.layer1 = function (param) {
        var source = param.source;
        var mc = param.mc;
        source.addChildAt(mc, 0);
    };
    SkillEffPlayShow.layer2 = function (param) {
        var source = param.source;
        var mc = param.mc;
        source.addChild(mc);
    };
    SkillEffPlayShow.layer3 = function (param) {
        var source = param.source;
        var mc = param.mc;
        mc.x += source.x;
        mc.y += source.y;
        if (!this.topLayer) {
            debug.warn("SkillEffPlayShow.topLayer Is not set");
            return;
        }
        this.topLayer.addChild(mc);
    };
    SkillEffPlayShow.layer4 = function (param) {
        var target = param.target;
        var mc = param.mc;
        mc.x += target[0].x;
        mc.y += target[0].y;
        if (!this.bottomLayer) {
            debug.warn("SkillEffPlayShow.bottomLayer Is not set");
            return;
        }
        this.bottomLayer.addChild(mc);
    };
    SkillEffPlayShow.layer5 = function (param) {
        var target = param.target;
        var mc = param.mc;
        target[0].addChildAt(mc, 0);
    };
    SkillEffPlayShow.layer6 = function (param) {
        var target = param.target;
        var mc = param.mc;
        target[0].addChild(mc);
    };
    SkillEffPlayShow.layer7 = function (param) {
        var target = param.target;
        var mc = param.mc;
        mc.x += target[0].x;
        mc.y += target[0].y;
        if (!this.topLayer) {
            debug.warn("SkillEffPlayShow.topLayer Is not set");
            return;
        }
        this.topLayer.addChild(mc);
    };
    SkillEffPlayShow.layer8 = function (param) {
        if (!this.fixedLayer) {
            debug.warn("SkillEffPlayShow.topLayer Is not set");
            return;
        }
        this.fixedLayer.addChild(param.mc);
    };
    SkillEffPlayShow.clean = function () {
        TimerMgr.ins().removeAll(this);
        this.bottomLayer = null;
        this.topLayer = null;
        this.setTimeout = null;
        this.shake = null;
    };
    SkillEffPlayShow.urlRoot = "";
    SkillEffPlayShow.effScale = 0;
    return SkillEffPlayShow;
}());
__reflect(SkillEffPlayShow.prototype, "SkillEffPlayShow");
var StarList = (function (_super) {
    __extends(StarList, _super);
    function StarList(listLength, starNum, spacing, isShowNum, resType, resSources) {
        if (listLength === void 0) { listLength = 10; }
        if (starNum === void 0) { starNum = 0; }
        if (spacing === void 0) { spacing = 50; }
        if (isShowNum === void 0) { isShowNum = 1; }
        var _this = _super.call(this) || this;
        _this._statListLength = listLength;
        _this._starNum = starNum;
        _this.resType = resType;
        _this.resSources = resSources;
        _this.list = [];
        for (var i = 0; i < _this._statListLength; i++) {
            var starItem = new StarItem;
            starItem.x = i * spacing + 10;
            _this.addChild(starItem);
            if (i <= _this._starNum - 1) {
                starItem.isShow(1, _this.resType, _this.resSources && _this.resSources[i]);
            }
            starItem.isShowFull(isShowNum, _this.resType, _this.resSources && _this.resSources[i]);
            _this.list.push(starItem);
        }
        _this.mc = new GameMovieClip();
        _this.mc.scaleX = 1.5;
        _this.mc.scaleY = 1.5;
        return _this;
    }
    StarList.prototype.setStarNum = function (num, show, resSources) {
        if (show === void 0) { show = 0; }
        if (resSources) {
            this.resSources = resSources;
            for (var key in this.list) {
                this.list[key].isShowFull(+key + 1, 1, resSources[key]);
            }
        }
        if (this._starNum == num) {
            return;
        }
        this._starNum = num;
        for (var i = 0; i < this._statListLength; i++) {
            if (i <= this._starNum - 1) {
                this.list[i].isShow(1, this.resType, this.resSources && this.resSources[i]);
                if (show == 1 && i == this._starNum - 1) {
                    this.mc.x = this.list[i].x + 24;
                    this.mc.y = this.list[i].y + 28;
                    if (!this.mc.parent) {
                        this.addChild(this.mc);
                    }
                    this.mc.playFile(PATH_EFF + "minusstar", 1);
                }
            }
            else {
                this.list[i].isShow(0, this.resType, this.resSources && this.resSources[i]);
            }
        }
    };
    StarList.prototype.updateStar = function (show, resSources) {
        if (show === void 0) { show = 0; }
        this.resSources = resSources;
        for (var i = 0; i < this._statListLength; i++) {
            if (i <= this._starNum - 1) {
                if (show == 1 && i == this._starNum - 1) {
                    this.mc.x = this.list[i].x + 24;
                    this.mc.y = this.list[i].y + 28;
                    if (!this.mc.parent) {
                        this.addChild(this.mc);
                    }
                    this.mc.playFile(PATH_EFF + "minusstar", 1);
                }
            }
            this.list[i].isShow(1, this.resType, this.resSources && this.resSources[i]);
            this.list[i].isShowFull(1, this.resType, this.resSources && this.resSources[i]);
        }
    };
    Object.defineProperty(StarList.prototype, "starNum", {
        get: function () {
            return this._starNum;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StarList.prototype, "listLength", {
        get: function () {
            return this._statListLength;
        },
        enumerable: true,
        configurable: true
    });
    StarList.prototype.setlistLength = function (listLength, starNum, spacing, isShowNum) {
        if (listLength === void 0) { listLength = 10; }
        if (starNum === void 0) { starNum = 0; }
        if (spacing === void 0) { spacing = 50; }
        if (isShowNum === void 0) { isShowNum = 1; }
        for (var i = this._statListLength; i < listLength; i++) {
            var starItem = new StarItem;
            starItem.x = i * spacing + 10;
            this.addChild(starItem);
            if (i <= starNum - 1) {
                starItem.isShow(1, this.resType, this.resSources && this.resSources[i]);
            }
            starItem.isShowFull(isShowNum, this.resType, this.resSources && this.resSources[i]);
            this.list.push(starItem);
        }
        this._statListLength = listLength;
    };
    return StarList;
}(eui.Component));
__reflect(StarList.prototype, "StarList");
var StarItem = (function (_super) {
    __extends(StarItem, _super);
    function StarItem() {
        var _this = _super.call(this) || this;
        _this.skinName = "StarItemSkin";
        return _this;
    }
    StarItem.prototype.isShow = function (num, resType, resSources) {
        if (resSources) {
            this.starImg.source = num ? resSources.star : "";
        }
        else {
            this.starImg.source = num ? this.getStarSource(resType) : "";
        }
    };
    StarItem.prototype.isShowFull = function (num, resType, resSources) {
        if (resSources) {
            this.fullStarImg.source = num ? resSources.fullStar : "";
        }
        else {
            this.fullStarImg.source = num ? this.getStarFullSource(resType) : "";
        }
    };
    StarItem.prototype.getStarSource = function (resType) {
        switch (resType) {
            case 1:
                return "shenqi_star";
            default:
                return "star2";
        }
    };
    StarItem.prototype.getStarFullSource = function (resType) {
        switch (resType) {
            case 1:
                return "shenqi_star_empty";
            default:
                return "star1";
        }
    };
    return StarItem;
}(eui.Component));
__reflect(StarItem.prototype, "StarItem");
/*法宝跟随着走*/
var SuperRingTurnDisplayer = (function (_super) {
    __extends(SuperRingTurnDisplayer, _super);
    function SuperRingTurnDisplayer() {
        var _this = _super.call(this) || this;
        _this.gAngle = 180;
        _this.gHasReset = true;
        _this.gInitPos = true;
        _this.isMaxX = false;
        _this.isMaxY = false;
        _this.gemPos1 = [64, -52, -68, -80, -84, -80, -64, -90, -50, -100, 40, -110, 64, -80, 64, -52];
        _this.mc = new GameMovieClip;
        _this.gFollowItem = new egret.DisplayObjectContainer();
        _this.addChild(_this.gFollowItem);
        _this.gCenterPos = new egret.Point();
        _this.gTurnItem = new egret.DisplayObjectContainer();
        _this.gTurnItem.addChild(_this.mc);
        _this.gFollowItem.addChild(_this.gTurnItem);
        TimerMgr.ins().doTimer(20, 0, _this.update, _this);
        return _this;
    }
    //设置主角
    SuperRingTurnDisplayer.prototype.setOwner = function (player) {
        this.gOwner = player;
        this.gTurnTime = 10000 + 10000 * Math.random() + egret.getTimer();
        this.gAngle = SuperRingTurnDisplayer.STAR_ANGLE;
        this.gStopTime = 0;
    };
    /**
     *更新
     *
     */
    SuperRingTurnDisplayer.prototype.update = function () {
        if (this.gInitPos) {
            this.gFollowItem.x = SuperRingTurnDisplayer.TARGET_POINT_X;
            this.gFollowItem.y = SuperRingTurnDisplayer.TARGET_POINT_Y - this.gOwner.height;
            this.gInitPos = false;
        }
        else {
            this.gFollowItem.x = this.gFollowItem.x - (this.gOwner.x - this.gOwnerLastX);
            this.gFollowItem.y = this.gFollowItem.y - (this.gOwner.y - this.gOwnerLastY);
        }
        this.gCenterPos = new egret.Point(this.effectX, this.effectY);
        this.moveCenterPoint();
        this.gOwnerLastX = this.gOwner.x;
        this.gOwnerLastY = this.gOwner.y;
    };
    /**
     *设置中心位置
     * @param dir
     *
     */
    SuperRingTurnDisplayer.prototype.setEffectXY = function (dir) {
        // DebugUtils.log("位置dir" + dir);
        var sx = this.gemPos1[dir * 2];
        var sy = this.gemPos1[dir * 2 + 1];
        this.effectX = sx + Math.ceil(100 * Math.random() - 50);
        this.effectY = sy + Math.ceil(100 * Math.random() - 50);
    };
    /**
     *像人物中心移动
     *
     */
    SuperRingTurnDisplayer.prototype.moveCenterPoint = function () {
        var _local1;
        var _local2 = this.gCenterPos.x - this.gFollowItem.x;
        if (_local2 != 0) {
            if (Math.abs(_local2) > SuperRingTurnDisplayer.MAX_DIS) {
                _local1 = Math.ceil(Math.abs(_local2) * SuperRingTurnDisplayer.SPEED_RATIO) * 2 * 3 / 2;
                if (_local2 > 0) {
                    if (_local2 > _local1)
                        this.gFollowItem.x = this.gFollowItem.x + _local1;
                }
                else if (_local2 < 0) {
                    if (Math.abs(_local2) > _local1)
                        this.gFollowItem.x = this.gFollowItem.x - _local1;
                }
            }
            else {
                this.isMaxX = false;
                _local1 = Math.ceil(Math.abs(_local2) * SuperRingTurnDisplayer.SPEED_RATIO) * 3 / 2 * 1.35;
                if (_local2 > 0) {
                    if (_local2 > _local1)
                        this.gFollowItem.x = this.gFollowItem.x + _local1;
                }
                else if (_local2 < 0) {
                    if (Math.abs(_local2) > _local1)
                        this.gFollowItem.x = this.gFollowItem.x - _local1;
                }
            }
        }
        var _local3 = this.gCenterPos.y - this.gFollowItem.y;
        if (_local3 != 0) {
            if (Math.abs(_local3) > SuperRingTurnDisplayer.MAX_DIS) {
                _local1 = Math.ceil(Math.abs(_local3) * SuperRingTurnDisplayer.SPEED_RATIO) * 2 * 3 / 2;
                if (_local3 >= 0) {
                    if (_local3 > _local1)
                        this.gFollowItem.y = this.gFollowItem.y + _local1;
                }
                else if (_local3 < 0) {
                    if (Math.abs(_local3) > _local1)
                        this.gFollowItem.y = this.gFollowItem.y - _local1;
                }
            }
            else {
                this.isMaxY = false;
                _local1 = Math.ceil(Math.abs(_local3) * SuperRingTurnDisplayer.SPEED_RATIO) * 3 / 2 * 1.35;
                if (_local3 >= 0) {
                    if (_local3 > _local1)
                        this.gFollowItem.y = this.gFollowItem.y + _local1;
                }
                else if (_local3 < 0) {
                    if (Math.abs(_local3) > _local1)
                        this.gFollowItem.y = this.gFollowItem.y - _local1;
                }
            }
        }
    };
    /**
     * 设置法宝
     */
    SuperRingTurnDisplayer.prototype.setModel = function (id, infoModel, topContainer) {
        this.infomodel = infoModel;
        if (infoModel.masterHandle && infoModel.masterHandle == ActorControl.handle) {
            if (id < 0 || id == null)
                return;
            if (UnitMgr.ins().getMainRole(0) && (UnitMgr.ins().getMainRole(0).infoModel.handle != infoModel.handle))
                return;
        }
        if (infoModel.masterHandle && superRingControl.hasHanlder(infoModel.masterHandle)) {
            if (this.lastID != id) {
                this.showRing(id);
                this.lastID = id;
            }
            return;
        }
        this.showRing(id);
        topContainer.addChild(this);
    };
    /**
     * 显示戒指模型
     */
    SuperRingTurnDisplayer.prototype.showRing = function (id) {
        this.mc.alpha = 1;
        this.ringInfo = DataCenter.ins().FireRingRoleConfig[id];
        var monConfig = DataCenter.ins().MonstersConfig[this.ringInfo.avatarFileName];
        this.mc.playFile(PATH_GUAIWU + "monster" + monConfig.avatar + "_0a", -1);
    };
    /**
     * 清理
     */
    SuperRingTurnDisplayer.prototype.reset = function () {
        if (this.mc) {
            DisplayUtils.removeFromParent(this.mc);
        }
        superRingControl.delHanlder(this.infomodel.masterHandle);
        this.gOwnerLastX = 0;
        this.gOwnerLastY = 0;
        this.gCenterPos.x = 0;
        this.gCenterPos.y = 0;
        this.gHasReset = true;
        this.gInitPos = true;
        this.gModelUrl = "";
        TimerMgr.ins().removeAll(this);
    };
    /*法宝的一些轨迹算法*/
    SuperRingTurnDisplayer.TARGET_POINT_X = 95; //相对人物身上的位置x
    SuperRingTurnDisplayer.TARGET_POINT_Y = -40; //相对人物身上的位置y
    SuperRingTurnDisplayer.MAX_DIS = 60;
    SuperRingTurnDisplayer.STAR_ANGLE = 0;
    SuperRingTurnDisplayer.SPEED_RATIO = 0.015;
    return SuperRingTurnDisplayer;
}(egret.DisplayObjectContainer));
__reflect(SuperRingTurnDisplayer.prototype, "SuperRingTurnDisplayer");
/**
 * 跨服切换
 */
var CrossServerSwitchView = (function (_super) {
    __extends(CrossServerSwitchView, _super);
    function CrossServerSwitchView() {
        var _this = _super.call(this) || this;
        _this.isOnBack = false;
        _this.BAR_W = 422;
        _this.skinName = "CrossServerSwitchViewSkin";
        _this.uilayer = GameLayer.TIPS;
        return _this;
    }
    CrossServerSwitchView.prototype.open = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this.isOnBack = !crossFieldControl.isCrossServer;
        this.switchLabel.text = this.isOnBack ? LangMgr.getValueByKey('backServering') : LangMgr.getValueByKey('gotocrossserver');
        this.progressBar.width = 0;
        egret.Tween.get(this.progressBar, null, null, true).to({
            width: this.BAR_W
        }, CrossServerSwitchView.Switch_Time + 200);
    };
    CrossServerSwitchView.readyClose = function () {
        var view = UIMgr.ins().getView(CrossServerSwitchView);
        if (view) {
            view.readyClose();
        }
    };
    CrossServerSwitchView.prototype.readyClose = function () {
        if (!TimerMgr.ins().isExists(this.closeWin, this)) {
            TimerMgr.ins().doTimer(1000, 1, this.closeWin, this);
        }
    };
    CrossServerSwitchView.prototype.closeWin = function () {
        UIMgr.ins().close(this);
    };
    CrossServerSwitchView.prototype.close = function () {
        egret.Tween.removeTweens(this.progressBar);
        if (this.isOnBack && CrossServerSwitchView.backCloseFun) {
            egret.callLater(function () {
                CrossServerSwitchView.backCloseFun();
            }, CrossServerSwitchView.backCloseFun);
        }
    };
    CrossServerSwitchView.Switch_Time = 2000;
    return CrossServerSwitchView;
}(BaseEuiView));
__reflect(CrossServerSwitchView.prototype, "CrossServerSwitchView");
/**
 * 装备tips
 */
var EquipNormalTipsView = (function (_super) {
    __extends(EquipNormalTipsView, _super);
    function EquipNormalTipsView() {
        var _this = _super.call(this) || this;
        _this.skinName = "EquipNormalTipsViewSkin";
        return _this;
    }
    EquipNormalTipsView.prototype.otherClose = function (e) {
        UIMgr.ins().close(this);
    };
    EquipNormalTipsView.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.addEventTouchEnd(this.bgClose, this.otherClose);
        this.addEventTouchEnd(this.changeBtn, this.onTap);
        this.setHideButton();
    };
    EquipNormalTipsView.prototype.updateView = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.itemType = param[0]; //道具类型
        this.id = param[1]; //道具id
        this.sco = param[2]; //评分
        this.power = param[3]; //战力
        this.desc = param[4]; //道具框右边的描述
        this.attrs = param[5]; //描述头属性集
        var itemConfig = DataCenter.ins().ItemConfig[this.id];
        this.itemIcon.setData(itemConfig);
        var quality = ItemUtils.getQuality(itemConfig);
        this.quali.source = quality > 0 ? "quali" + quality : "";
        this.nameLabel.textFlow = TextUtils.generateTextFlow1("|C:" + ItemUtils.getQualityColor(itemConfig) + "&T:" + this.getItemName());
        this.score.text = "\u8BC4\u5206\uFF1A" + this.sco;
        this.typeName.textFlow = TextUtils.generateTextFlow1(this.desc.left);
        this.typeValue.textFlow = TextUtils.generateTextFlow1(this.desc.right);
        this.powerPanel.setPower(this.power);
        for (var i = 0; i < this.attrs.length; i++) {
            var equip = new EquipNormalTipsItemRenderer();
            equip.data = {
                title: this.attrs[i].title,
                attributeData: this.attrs[i].attr,
                colorName: this.attrs[i].colorName,
                colorValue: this.attrs[i].colorValue,
                others: this.attrs[i].others,
                ext: this.attrs[i].ext
            };
            this.content.addChild(equip);
        }
    };
    EquipNormalTipsView.prototype.getItemName = function () {
        return DataCenter.ins().ItemConfig[this.id].name;
    };
    EquipNormalTipsView.prototype.setHideButton = function () {
        this.changeBtn.visible = false;
    };
    EquipNormalTipsView.prototype.onTap = function (e) {
    };
    return EquipNormalTipsView;
}(BaseEuiView));
__reflect(EquipNormalTipsView.prototype, "EquipNormalTipsView");
/**
 * 战斗力
 */
var PowerPanel = (function (_super) {
    __extends(PowerPanel, _super);
    function PowerPanel() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.showBg = true;
        _this.imgWidth = 72;
        return _this;
    }
    PowerPanel.prototype.childrenCreated = function () {
        this.init();
    };
    PowerPanel.prototype.init = function () {
        this.playFlameMC();
        this.totalPower = BitmapNumber.ins().createNumPic(0, "8", 5);
        this.totalPower.x = 100;
        this.totalPower.y = 20;
        this.addChild(this.totalPower);
        this.initPos();
    };
    PowerPanel.prototype.setPower = function (value) {
        this.power = value;
        BitmapNumber.ins().changeNum(this.totalPower, value, "8", 5);
        this.initPos();
    };
    PowerPanel.prototype.initPos = function () {
        if (this.showBg) {
            var val = this.totalPower.width > 30 ? this.totalPower.width : 30;
            this.totalPower.x = this.width - val / 2 - 130;
            this.powerImg.x = this.totalPower.x - this.imgWidth - 10;
        }
    };
    PowerPanel.prototype.setBgVis = function (bool) {
        this.bgImg.visible = bool;
        this.flameGroup.visible = bool;
        this.showBg = bool;
    };
    PowerPanel.prototype.setMcVisible = function (bool) {
        this.flameGroup.visible = bool;
    };
    /**
     * 播放火焰动画
     */
    PowerPanel.prototype.playFlameMC = function () {
        if (this.flameMC) {
            this.flameMC.play(-1);
        }
        else {
            this.flameMC = new GameMovieClip();
            this.flameMC.x = 76;
            this.flameMC.y = 23;
            this.flameMC.playFile(PATH_EFF + "zhanduolibeijing", -1);
            this.flameGroup.addChild(this.flameMC);
        }
    };
    PowerPanel.prototype.destructor = function () {
        DisplayUtils.removeFromParent(this);
    };
    return PowerPanel;
}(BasePanel));
__reflect(PowerPanel.prototype, "PowerPanel");
/**
 * 三角色选择面板
 */
var RoleSelectPanel = (function (_super) {
    __extends(RoleSelectPanel, _super);
    function RoleSelectPanel() {
        var _this = _super.call(this) || this;
        /** 当前选择的角色 */
        _this._curRole = 0;
        _this.lastX = 0;
        _this.isTouchBegin = false;
        _this.rolesLength = 1;
        _this.initMc();
        _this.addEventAddedFromStage(_this, _this.onAdd);
        return _this;
    }
    RoleSelectPanel.prototype.$onRemoveFromStage = function () {
        _super.prototype.$onRemoveFromStage.call(this);
        this.destructor();
    };
    RoleSelectPanel.prototype.childrenCreated = function () {
        this.init();
    };
    RoleSelectPanel.prototype.initMc = function () {
        this.roleMovie = [];
        for (var i = 0; i < GlobalModel.roleNum - 1; i++) {
            var mc = new GameMovieClip;
            mc.x = 44;
            mc.y = 44;
            mc.touchEnabled = false;
            this.roleMovie.push(mc);
        }
    };
    RoleSelectPanel.prototype.hideTop = function () {
        this.leftImg.visible = false;
        this.rightImg.visible = false;
        this.bgImg.visible = false;
    };
    RoleSelectPanel.prototype.init = function () {
        this.roles = [];
        for (var i = 0; i < 5; i++) {
            if (this["role" + i] && i < GlobalModel.roleNum) {
                this.roles.push(this["role" + i]);
            }
            else if (this["role" + i]) {
                this["role" + i].parent.removeChild(this["role" + i]);
            }
        }
        for (var i = 0; i < this.roles.length - 1; i++) {
            var mc = this.roleMovie[i];
            this.roles[i + 1].addChild(mc);
        }
    };
    RoleSelectPanel.prototype.onAdd = function () {
        this.destructor();
        this.addEventTouchBegin(this.parent, this.onMove);
        this.addEventTouchEnd(this.parent, this.onMove);
        this.addEventTouchTap(this.recharge, this.onBtnClick);
        this.addEventTouchTap(this.recharge0, this.onBtnClick);
        this.addEventTouchTap(this, this.onClick);
        this.addCustomEvent(352 /* SUB_ROLE_CHANGE */, this.updateRole);
        this.addCustomEvent(461 /* ACTOR_LEVEL_CHANGE */, this.updateRole);
        this.addCustomEvent(106 /* VIP_DATA */, this.updateRole);
        this.addCustomEvent(112 /* REINCARNATE_DATA */, this.updateRole);
        this.addCustomEvent(456 /* ACTOR_GOLD_CHANGE */, this.initData);
        this.addCustomEvent(457 /* ACTOR_YB_CHANGE */, this.initData);
        this.setCurRole(this._curRole);
        this.updateRole();
        this.initData();
    };
    RoleSelectPanel.prototype.initData = function () {
        CommonUtils.labelIsOverLenght(this.goldTxt, ActorControl.gold);
        CommonUtils.labelIsOverLenght(this.ybTxt, ActorControl.yb);
    };
    RoleSelectPanel.prototype.getCurRole = function () {
        return this._curRole;
    };
    RoleSelectPanel.prototype.setCurRole = function (value) {
        this._curRole = value;
        for (var i = 0; i < this.roles.length; i++) {
            var element = this.roles[i];
            element.selected = i == value;
        }
        this.dispatchEventWith(egret.Event.CHANGE, false, this._curRole);
    };
    RoleSelectPanel.prototype.onBtnClick = function (e) {
        switch (e.currentTarget) {
            case this.recharge0:
                payControl.checkOpenWin();
                break;
            case this.recharge:
                storeControl.openBuyGoldWin();
                break;
        }
    };
    RoleSelectPanel.prototype.onClick = function (e) {
        var index = this.roles.indexOf(e.target);
        if (index > -1)
            this.changeRole(index);
    };
    RoleSelectPanel.prototype.onMove = function (e) {
        if (!this.headGroup.visible || !this.parent || !this.parent.touchEnabled)
            return;
        if (this.isPass())
            return;
        switch (e.type) {
            case egret.TouchEvent.TOUCH_BEGIN:
                this.lastX = e.stageX;
                this.isTouchBegin = true;
                break;
            case egret.TouchEvent.TOUCH_END:
                if (!this.isTouchBegin)
                    break;
                this.isTouchBegin = false;
                var Index = this._curRole;
                if (this.lastX - e.stageX >= 100) {
                    Index++;
                    if (Index > this.rolesLength)
                        Index = 0;
                    this.changeRole(Index);
                }
                else if (this.lastX - e.stageX <= -100) {
                    Index--;
                    if (Index < 0)
                        Index = this.rolesLength;
                    this.changeRole(Index);
                }
                break;
        }
    };
    RoleSelectPanel.prototype.isPass = function () {
        var view = UIMgr.ins().getView("IntensifyView");
        if (view && view.isNotMove)
            return true;
        var advanequipwin = UIMgr.ins().getView("DeityEquipView");
        if (advanequipwin && advanequipwin.isNotMove)
            return true;
        return false;
    };
    RoleSelectPanel.prototype.changeRole = function (value) {
        var model = heroControl.getSubRoleByIndex(value);
        if (model) {
            this.setCurRole(value);
        }
        else {
            UIMgr.ins().open("RecruitView");
            if (!Assert(this.roles[value], "RoleSelectPanel changeRole value:" + value)) {
                this.roles[value].selected = false;
            }
        }
    };
    RoleSelectPanel.prototype.updateRole = function () {
        var role;
        var roleData;
        var len = this.roles.length;
        this.rolesLength = heroControl.subRolesLen - 1;
        for (var i = 0; i < len; i++) {
            role = this.roles[i];
            roleData = heroControl.getSubRoleByIndex(i);
            if (roleData) {
                role['jobImg'].visible = true;
                role['jobImg'].source = "job" + roleData.job + "Item";
                role['stageImg'].visible = false;
                role['stageImg'].source = "";
                role.icon = "yuanhead" + roleData.job + roleData.sex;
                if (this.roleMovie[i - 1])
                    DisplayUtils.removeFromParent(this.roleMovie[i - 1]);
            }
            else {
                var config = DataCenter.ins().RoleNewConfig[i];
                if (!config) {
                    debug.warn("role" + (i + 1) + "open condition no confing(RoleNewConfig)");
                    continue;
                }
                role['jobImg'].visible = false;
                role['stageImg'].visible = true;
                if (config.zsLevel) {
                    if (reincarnateControl.lv < config.zsLevel) {
                        role['stageImg'].source = "toujiesuo" + config.zsLevel;
                    }
                    else {
                        role['stageImg'].source = "toujiesuo";
                    }
                }
                else {
                    if (ActorControl.level < config.level) {
                        role['stageImg'].source = "toujiesuo" + config.level;
                    }
                    else {
                        role['stageImg'].source = "toujiesuo";
                    }
                }
                if (config.vip && vipControl.lv >= config.vip) {
                    role['stageImg'].source = "toujiesuo";
                }
                if (config.firstrecharge && vipControl.exp > 0) {
                    role['stageImg'].source = "toujiesuo";
                }
                role.icon = "";
            }
            if (this.roleMovie[i - 1] && role['stageImg'].source == "toujiesuo" && role['stageImg'].visible) {
                this.roleMovie[i - 1].playFile(PATH_EFF + 'juesejiesuo', -1);
                this.showRedPoint(i, true);
            }
        }
    };
    RoleSelectPanel.prototype.showRedPoint = function (index, b) {
        if (this.roles == null)
            return;
        this.roles[index]['redPoint'].visible = b;
    };
    RoleSelectPanel.prototype.clearRedPoint = function () {
        for (var i = 0; i < this.roles.length; i++) {
            this.roles[i]['redPoint'].visible = false;
        }
    };
    RoleSelectPanel.prototype.openRole = function () {
        this.headGroup.visible = true;
    };
    RoleSelectPanel.prototype.hideRole = function () {
        this.headGroup.visible = false;
    };
    RoleSelectPanel.prototype.destructor = function () {
        if (this.parent) {
            this.removeEventTouchBegin(this.parent, this.onMove);
            this.removeEventTouchEnd(this.parent, this.onMove);
        }
    };
    return RoleSelectPanel;
}(BasePanel));
__reflect(RoleSelectPanel.prototype, "RoleSelectPanel");
/**
 * 属性描述控件
 */
var EquipNormalTipsItemRenderer = (function (_super) {
    __extends(EquipNormalTipsItemRenderer, _super);
    function EquipNormalTipsItemRenderer() {
        var _this = _super.call(this) || this;
        _this.skinName = "EquipNormalTipsItemRendererSkin";
        return _this;
    }
    EquipNormalTipsItemRenderer.prototype.dataChanged = function () {
        if (!this.data)
            return;
        var title = this.data.title;
        var colorName = this.data.colorName;
        var colorValue = this.data.colorValue;
        var attrs = this.data.attributeData;
        var others = this.data.others;
        var ext = this.data.ext;
        var attrName = "";
        var attrValue = "";
        if (!others || !others.suitdesc) {
            DisplayUtils.removeFromParent(this.desc1);
        }
        if (attrs) {
            for (var i = 0; i < attrs.length; i++) {
                if (attrs[i].type != 20 /* atPenetrate */ && AttributeData.getAttrStrByType(attrs[i].type)) {
                    attrName += AttributeData.getAttrStrByType(attrs[i].type) + ": \n";
                    if (attrs[i].type == 2 /* atMaxHp */ ||
                        attrs[i].type == 4 /* atAttack */ ||
                        attrs[i].type == 5 /* atDef */ ||
                        attrs[i].type == 6 /* atRes */ ||
                        attrs[i].type == 89 /* atAddPowerVal */) {
                        attrValue += attrs[i].value;
                    }
                    else {
                        attrValue += attrs[i].value / 100 + "%";
                    }
                    attrValue += "\n";
                }
            }
            if (attrName) {
                var index = attrName.lastIndexOf("\n");
                attrName = attrName.substring(0, index);
            }
            if (attrValue) {
                var index = attrValue.lastIndexOf("\n");
                attrValue = attrValue.substring(0, index);
            }
            if (others && others.exdesc) {
                var str = others.exdesc.split("+");
                attrName += "\n" + str[0] + ":";
                attrValue += "\n" + str[1];
            }
            this.attrName.textFlow = TextUtils.generateTextFlow1(colorName ? "|C:" + colorName + "&T:" + attrName : "" + attrName);
            this.attrValue.textFlow = TextUtils.generateTextFlow1(colorValue ? "|C:" + colorValue + "&T:" + attrValue : "" + attrValue);
        }
        else {
            DisplayUtils.removeFromParent(this.attrDesc);
        }
        this.attrType.textFlow = TextUtils.generateTextFlow1(title);
        if (this.desc1 && this.desc1.parent) {
            this.suit.textFlow = TextUtils.generateTextFlow1(others.suitdesc);
        }
        if (ext) {
            this.ext.textFlow = TextUtils.generateTextFlow1(ext.text);
            if (ext.pos != undefined) {
                this.ext.x = ext.pos;
            }
        }
    };
    return EquipNormalTipsItemRenderer;
}(BaseItemRender));
__reflect(EquipNormalTipsItemRenderer.prototype, "EquipNormalTipsItemRenderer");
var OtherRoleItemRenderer = (function (_super) {
    __extends(OtherRoleItemRenderer, _super);
    function OtherRoleItemRenderer() {
        var _this = _super.call(this) || this;
        _this.index = 0;
        _this.addEventTouchTap(_this, _this.showRole);
        return _this;
    }
    OtherRoleItemRenderer.prototype.dataChanged = function () {
        if (!this.data || !this.data.otherPlayerData || !CommonFun.instanceofByName(this.data.otherPlayerData, "OtherPlayerData")) {
            this.setRole(null);
            return;
        }
        var otherPlayerData = this.data.otherPlayerData;
        var role = otherPlayerData.roleData[this.index];
        if (role) {
            this.setRole(role);
        }
    };
    OtherRoleItemRenderer.prototype.showRole = function (e) {
        if (this.data && this.data.otherPlayerData) {
            UIMgr.ins().open("RankRoleView", this.data.otherPlayerData);
            var view = UIMgr.ins().open("RankRoleView", this.data.otherPlayerData);
            view.hideEx(2);
        }
    };
    return OtherRoleItemRenderer;
}(RoleItemRenderer));
__reflect(OtherRoleItemRenderer.prototype, "OtherRoleItemRenderer");
var StageItemRenderer = (function (_super) {
    __extends(StageItemRenderer, _super);
    function StageItemRenderer() {
        var _this = _super.call(this) || this;
        _this.skinName = "StageItemRendererSkin";
        return _this;
    }
    StageItemRenderer.prototype.dataChanged = function () {
        if (!this.data || !(typeof this.data == "string"))
            return;
        var strNum = StringUtils.getStrByRegExp(this.data);
        var strChn = StringUtils.getStrByRegExp(this.data, /[\u4E00-\u9FA5]+/g);
        var stage = "";
        var tempF = [];
        var tempA = [];
        var tempFindex = this.data.indexOf(strNum[0]);
        var tempAindex = this.data.indexOf(strChn[0]);
        if (tempFindex >= 0 && tempAindex >= 0) {
            if (tempFindex < tempAindex) {
                tempF = this.convert(strNum);
                tempA = strChn;
            }
            else {
                tempF = strChn;
                tempA = this.convert(strNum);
            }
        }
        else {
            if (tempFindex == -1) {
                tempF = strChn;
            }
            else {
                tempF = this.convert(strNum);
            }
        }
        for (var i = 0; i < tempF.length; i++) {
            stage += tempF[i];
            if (tempA[i]) {
                stage += tempA[i];
            }
        }
        this.lv0.text = stage;
        this.calcHeight();
    };
    StageItemRenderer.prototype.convert = function (strNum) {
        for (var i = 0; i < strNum.length; i++) {
            strNum[i] = StringUtils.NumberToChinese(Number(strNum[i]));
        }
        return strNum;
    };
    StageItemRenderer.prototype.calcHeight = function () {
        this.validateNow();
        var textHeight = this.lv0.textHeight;
        if (textHeight == 0) {
            textHeight = this.lv0.text.length * 16;
        }
        this.height = textHeight + 5;
    };
    return StageItemRenderer;
}(BaseItemRender));
__reflect(StageItemRenderer.prototype, "StageItemRenderer");
var DailyRedBagControl = (function (_super) {
    __extends(DailyRedBagControl, _super);
    function DailyRedBagControl() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.dailySysOpen = 0;
        /**
         * 今日已抢次数
         */
        _this.curCount = 0;
        /**
         * 领取时间
         */
        _this.nearGetTimes = 0;
        /**
         * 本次红包值
         */
        _this.nearNormalValue = 0;
        /**
         * 充值额外红包值
         */
        _this.nearGetRechargeValue = 0;
        /**
         * 是否已额外领取
         */
        _this.curDayRechargeSuccess = 0;
        /**
         * 日志
         */
        _this.logs = [];
        return _this;
    }
    DailyRedBagControl.ins = function () {
        return _super.ins.call(this);
    };
    DailyRedBagControl.prototype.checkSysOpen = function () {
        return this.dailySysOpen && this.checkLvOpen() ? true : false;
    };
    DailyRedBagControl.prototype.checkLvOpen = function () {
        var zslv = Math.floor(DataCenter.ins().DailyRedBagConfig.openZslv / 1000);
        var lv = DataCenter.ins().DailyRedBagConfig.openZslv % 1000;
        return reincarnateControl.lv >= zslv && ActorControl.level >= lv;
    };
    DailyRedBagControl.prototype.getLeftTime = function () {
        var time = Math.floor((DateUtils.formatMiniDateTime(this.nearGetTimes + DataCenter.ins().DailyRedBagConfig.cd) - GameServer.serverTime) / 1000);
        if (0 >= time) {
            time = 0;
        }
        return time;
    };
    DailyRedBagControl.prototype.isNormalGet = function () {
        if (this.isCount()) {
            if (this.getLeftTime()) {
                return false;
            }
            else {
                return true;
            }
        }
        return false;
    };
    DailyRedBagControl.prototype.isExtraGet = function () {
        var rechargeData = payControl.getRechargeData(0);
        return rechargeData && rechargeData.curDayPay && !this.curDayRechargeSuccess;
    };
    DailyRedBagControl.prototype.isEnvelope = function () {
        return this.isCount() && !this.getLeftTime() ? true : false;
    };
    DailyRedBagControl.prototype.isCount = function () {
        return this.curCount < DataCenter.ins().DailyRedBagConfig.lottery ? true : false;
    };
    DailyRedBagControl.prototype.checkFirstRedPoint = function () {
        if (!this.isFirstLogin) {
            this.isFirstLogin = true;
            if (this.isExtraGet()) {
                this.firstRedPoint = true;
            }
            else {
                this.firstRedPoint = false;
            }
            this.dispatchFirstRedPoint();
        }
    };
    DailyRedBagControl.prototype.setFirstRedPoint = function () {
        if (!this.isEnvelope()) {
            this.firstRedPoint = false;
        }
        this.dispatchFirstRedPoint();
    };
    DailyRedBagControl.prototype.dispatchFirstRedPoint = function () {
        EventMgr.ins().dispatch(677 /* DAILY_RED_BAG_FIRST_RED */);
    };
    DailyRedBagControl.prototype.dispatchRuleIconRedPoint = function () {
        EventMgr.ins().dispatch(679 /* DAILY_RED_BAG_PORTAL_RED */);
    };
    DailyRedBagControl.prototype.isRedPoint = function () {
        if (this.checkSysOpen()) {
            if (this.isNormalGet()) {
                return true;
            }
            else if (this.isExtraGet()) {
                return true;
            }
            return this.firstRedPoint;
        }
        return false;
    };
    /**
     * 领取红包
     * 41-6
     */
    DailyRedBagControl.prototype.upDailyEnvelope = function (type) {
        return [type];
    };
    /**
     * 获取日志
     * 41-7
     */
    DailyRedBagControl.prototype.upDailyEnvelopeLogs = function () {
    };
    /**
     * 红包数据
     * 41-5
     */
    DailyRedBagControl.prototype.downInfo = function (dailySysOpen, curCount, nearGetTimes, nearNormalValue, nearGetRechargeValue, curDayRechargeSuccess) {
        this.dailySysOpen = dailySysOpen;
        this.curCount = curCount;
        this.nearGetTimes = nearGetTimes;
        this.nearNormalValue = nearNormalValue;
        this.nearGetRechargeValue = nearGetRechargeValue;
        this.curDayRechargeSuccess = curDayRechargeSuccess;
        this.checkFirstRedPoint();
        EventMgr.ins().dispatch(288 /* DAILYREDBAG_INFO */);
    };
    /**
     * 红包日志
     * 41-7
     */
    DailyRedBagControl.prototype.downLogs = function (datas) {
        this.logs = [];
        for (var i = 0; datas.length > i; i++) {
            this.logs.push({
                name: datas[i][0],
                value: datas[i][1]
            });
        }
        EventMgr.ins().dispatch(289 /* DAILYREDBAG_LOGS */);
    };
    __decorate([
        up(6, [1 /* Byte */])
    ], DailyRedBagControl.prototype, "upDailyEnvelope", null);
    __decorate([
        up(7)
    ], DailyRedBagControl.prototype, "upDailyEnvelopeLogs", null);
    __decorate([
        down(5, [1 /* Byte */, 1 /* Byte */, 3 /* Int */, 3 /* Int */, 3 /* Int */, 1 /* Byte */])
    ], DailyRedBagControl.prototype, "downInfo", null);
    __decorate([
        down(7, [[8 /* String */, 3 /* Int */]])
    ], DailyRedBagControl.prototype, "downLogs", null);
    DailyRedBagControl = __decorate([
        protocolsId(41 /* PROTOCOL_41 */)
    ], DailyRedBagControl);
    return DailyRedBagControl;
}(BaseSystem));
__reflect(DailyRedBagControl.prototype, "DailyRedBagControl");
var DailyRedBagPanel = (function (_super) {
    __extends(DailyRedBagPanel, _super);
    function DailyRedBagPanel() {
        var _this = _super.call(this) || this;
        _this.bt1 = false;
        _this.bt2 = false;
        _this.bt3 = false;
        var spokesmanredbag = DataCenter.ins().ClientGlobalConfig.spokesmanredbag;
        var isOpen = spokesPersonControl.checkBaseOpen(spokesmanredbag.openTerm);
        _this.skinName = isOpen ? spokesmanredbag.skin : "DailyRedBagPanelSkin";
        _this.init();
        return _this;
    }
    DailyRedBagPanel.prototype.init = function () {
        this.logList.itemRenderer = DailyRedBagLogsItemRenderer;
        this.logListData = new eui.ArrayCollection;
        this.logList.dataProvider = this.logListData;
        this.reset();
    };
    DailyRedBagPanel.openCheck = function () {
        if (!dailyRedBagControl.dailySysOpen) {
            tipsControl.showTips(LangMgr.getValueByKey("doubleEndActivity"));
            return false;
        }
        if (!dailyRedBagControl.checkLvOpen()) {
            var zslv = Math.floor(DataCenter.ins().DailyRedBagConfig.openZslv / 1000);
            var lv = DataCenter.ins().DailyRedBagConfig.openZslv % 1000;
            tipsControl.showTips(LangMgr.getValueByKey("numberRotation", zslv) + LangMgr.getValueByKey("tipsOpenLevel", lv));
            return false;
        }
        return true;
    };
    DailyRedBagPanel.prototype.close = function () {
        TimerMgr.ins().remove(this.tick, this);
        TimerMgr.ins().remove(this.logsTick, this);
    };
    DailyRedBagPanel.prototype.open = function () {
        this.addEventTouchEnd(this.getBtn, this.onClick);
        this.addEventTouchEnd(this.normalGet, this.onClick);
        this.addEventTouchEnd(this.ExtraGet, this.onClick);
        this.addCustomEvent(288 /* DAILYREDBAG_INFO */, this.callBack);
        this.addCustomEvent(177 /* PAY_RECHARGE1_DATA */, this.callBack);
        this.addCustomEvent(289 /* DAILYREDBAG_LOGS */, this.updateLogs);
        if (!TimerMgr.ins().isExists(this.logsTick, this)) {
            TimerMgr.ins().doTimer(10000, 0, this.logsTick, this);
        }
        if (!TimerMgr.ins().isExists(this.tick, this)) {
            TimerMgr.ins().doTimer(1000, 0, this.tick, this);
        }
        dailyRedBagControl.upDailyEnvelopeLogs();
        this.updateView();
    };
    DailyRedBagPanel.prototype.callBack = function () {
        if (!TimerMgr.ins().isExists(this.tick, this) && dailyRedBagControl.isCount()) {
            TimerMgr.ins().doTimer(1000, 0, this.tick, this);
        }
        this.updateView();
    };
    DailyRedBagPanel.prototype.logsTick = function () {
        dailyRedBagControl.upDailyEnvelopeLogs();
    };
    DailyRedBagPanel.prototype.tick = function () {
        if (dailyRedBagControl.isEnvelope()) {
            this.twGroup.visible = true;
            this.getBtn.visible = true;
        }
        else {
            this.twGroup.visible = false;
        }
        var time = dailyRedBagControl.getLeftTime();
        if (0 >= time) {
            this.timer.text = "";
            TimerMgr.ins().remove(this.tick, this);
        }
        else {
            this.timer.text = DateUtils.getFormatBySecond(time, DateUtils.TIME_FORMAT_5, 4);
        }
        this.timeGroup.visible = dailyRedBagControl.isCount() && time > 0;
    };
    DailyRedBagPanel.prototype.updateView = function () {
        var count = DataCenter.ins().DailyRedBagConfig.lottery - dailyRedBagControl.curCount;
        var color = ColorUtils.GREEN;
        if (0 >= count) {
            color = ColorUtils.RED;
            count = 0;
        }
        this.count.textFlow = TextUtils.generateTextFlow1("|C:" + color + "&T:" + count);
        this.normalRedbg.text = "" + dailyRedBagControl.nearNormalValue;
        this.extraRedbg.text = "" + dailyRedBagControl.nearGetRechargeValue;
        this.normalGet.enabled = dailyRedBagControl.isNormalGet();
        this.normalGet.label = this.normalGet.enabled ? LangMgr.getValueByKey("activitGet") : LangMgr.getValueByKey("activitAlreadingGet");
        this.ExtraGet.enabled = !dailyRedBagControl.curDayRechargeSuccess;
        this.ExtraGet.label = dailyRedBagControl.curDayRechargeSuccess ? LangMgr.getValueByKey("activitAlreadingGet") : LangMgr.getValueByKey("dailyRedBag1");
        this.updateLogs();
        this.tick();
        dailyRedBagControl.setFirstRedPoint();
    };
    DailyRedBagPanel.prototype.updateLogs = function () {
        var logs = dailyRedBagControl.logs.concat();
        logs = logs.reverse();
        this.logListData.replaceAll(logs);
    };
    DailyRedBagPanel.prototype.onClick = function (e) {
        switch (e.currentTarget) {
            case this.getBtn:
                if (!dailyRedBagControl.dailySysOpen) {
                    tipsControl.showTips(LangMgr.getValueByKey("doubleEndActivity"));
                    return;
                }
                if (!dailyRedBagControl.checkLvOpen()) {
                    var zslv = Math.floor(DataCenter.ins().DailyRedBagConfig.openZslv / 1000);
                    var lv = DataCenter.ins().DailyRedBagConfig.openZslv % 1000;
                    tipsControl.showTips(LangMgr.getValueByKey("numberRotation", zslv) + LangMgr.getValueByKey("tipsOpenLevel", lv));
                    return;
                }
                if (!dailyRedBagControl.isCount()) {
                    tipsControl.showTips(LangMgr.getValueByKey("dailyRedBag2"));
                    return;
                }
                dailyRedBagControl.upDailyEnvelope(2);
                break;
            case this.normalGet:
                if (!dailyRedBagControl.isNormalGet()) {
                    tipsControl.showTips(LangMgr.getValueByKey("dailyRedBag3"));
                    return;
                }
                dailyRedBagControl.upDailyEnvelope(0);
                break;
            case this.ExtraGet:
                if (!dailyRedBagControl.isExtraGet()) {
                    var rechargeData = payControl.getRechargeData(0);
                    if (!rechargeData) {
                        tipsControl.showTips(LangMgr.getValueByKey("activitDataError"));
                        return;
                    }
                    if (!rechargeData.curDayPay) {
                        warnControl.show(LangMgr.getValueByKey("dailyRedBag4"), function () {
                            payControl.checkOpenWin();
                        }, this);
                        return;
                    }
                    if (dailyRedBagControl.curDayRechargeSuccess) {
                        tipsControl.showTips(LangMgr.getValueByKey("activitAlreadingGet"));
                        return;
                    }
                }
                dailyRedBagControl.upDailyEnvelope(1);
        }
    };
    DailyRedBagPanel.prototype.reset = function () {
        this.bt1 = this.bt2 = this.bt3 = false;
        this.startTopImgY = this.topImg.y;
        this.startDownImgY = this.downImg.y;
        this.topImg.scrollRect = undefined;
        this.downImg.scrollRect = undefined;
    };
    DailyRedBagPanel.prototype.playAni = function (CallBack, thisObj) {
        var self = this;
        this.getBtn.visible = false;
        this.topImg.scrollRect || (this.topImg.scrollRect = new egret.Rectangle(0, 0, this.topImg.width, this.topImg.height));
        this.downImg.scrollRect || (this.downImg.scrollRect = new egret.Rectangle(0, 0, this.downImg.width, this.downImg.height));
        this.callFun = function () {
            CallBack && CallBack.call(thisObj);
        };
        var topScrollRect = this.topImg.scrollRect;
        var downScrollRect = this.downImg.scrollRect;
        var duration = 400;
        var tween1 = egret.Tween.get(topScrollRect, {
            onChange: function () {
                self.topImg.scrollRect = topScrollRect;
            }
        }).to({
            y: 200
        }, duration).call(function () {
            egret.Tween.removeTweens(tween1);
            self.bt1 = true;
        });
        var tween2 = egret.Tween.get(downScrollRect, {
            onChange: function () {
                self.downImg.scrollRect = downScrollRect;
            }
        }).to({
            height: 0
        }, duration).call(function () {
            egret.Tween.removeTweens(tween2);
            self.bt2 = true;
        });
        var tween3 = egret.Tween.get(this.downImg).to({
            y: this.downImg.y + this.downImg.height
        }, duration).call(function () {
            egret.Tween.removeTweens(tween3);
            self.bt3 = true;
        });
    };
    return DailyRedBagPanel;
}(BaseEuiView));
__reflect(DailyRedBagPanel.prototype, "DailyRedBagPanel");
var DailyRedBagLogsItemRenderer = (function (_super) {
    __extends(DailyRedBagLogsItemRenderer, _super);
    function DailyRedBagLogsItemRenderer() {
        var _this = _super.call(this) || this;
        _this.skinName = "DailyRedBagLogItemSkin";
        return _this;
    }
    DailyRedBagLogsItemRenderer.prototype.dataChanged = function () {
        if (this.data) {
            this.nameLabel.textFlow = TextUtils.generateTextFlow1(LangMgr.getValueByKey("dailyRedBag5", this.data.name));
            this.num.text = this.data.value + "";
        }
    };
    return DailyRedBagLogsItemRenderer;
}(BaseItemRender));
__reflect(DailyRedBagLogsItemRenderer.prototype, "DailyRedBagLogsItemRenderer");
var GMCommandView = (function (_super) {
    __extends(GMCommandView, _super);
    function GMCommandView() {
        var _this = _super.call(this) || this;
        _this.skinName = "GMCommandViewSkin";
        _this.initUI();
        return _this;
    }
    GMCommandView.ins = function () {
        if (!this._ins)
            this._ins = new GMCommandView;
        return this._ins;
    };
    GMCommandView.prototype.initUI = function () {
        _super.prototype.initUI.call(this);
    };
    GMCommandView.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.addEventTouchTap(this.commandSendBtn, this.onTou);
        this.addEventTouchTap(this.niubiBtn, this.onTou);
        this.addEventTouchTap(this.superManBtn, this.onTou);
        this.addEventTouchTap(this.superAttrBtn, this.onTou);
        this.addEventTouchTap(this.chapterBtn, this.onTou);
        this.addEventTouchTap(this.monthCardBtn, this.onTou);
        this.addEventTouchTap(this.monthCardBtn1, this.onTou);
        this.addEventTouchTap(this.additemBtn, this.onTou);
        this.addEventTouchTap(this.clearBagBtn, this.onTou);
        this.addEventTouchTap(this.stopAIBtn, this.onTou);
        this.addEventTouchTap(this.openAIBtn, this.onTou);
        this.addEventTouchTap(this.testFbBtn, this.onTou);
        this.addEventTouchTap(this.rgBtn, this.onTou);
        this.addEventTouchTap(this.newdayBtn, this.onTou);
        this.addEventTouchTap(this.rechargeBtn, this.onTou);
        this.addEventFocusIn(this.commandInput, this.focusInHandler);
        this.addEventFocusIn(this.chapterInput, this.focusInHandler);
        this.addEventFocusIn(this.additemInput, this.focusInHandler);
        this.versionLabel.text = "Ver." + GlobalModel.gameVersion;
        this.accountTxt.text = "Account:" + GlobalModel.openID;
        this.serverTxt.text = LangMgr.getValueByKey('serveridportstr', GlobalModel.srvid, GlobalModel.serverPort);
        StageUtils.ins().getUIStage().addChild(this);
        if (!TimerMgr.ins().isExists(this.onTime, this)) {
            TimerMgr.ins().doTimer(1000, 0, this.onTime, this);
        }
        this.onTime();
    };
    GMCommandView.prototype.onTime = function () {
        this.serverTimer.text = LangMgr.getValueByKey('openservertime', (GameServer.serverOpenDay + 1), DateUtils.getFormatBySecond(GameServer.serverTime / DateUtils.MS_PER_SECOND, DateUtils.TIME_FORMAT_2));
        this.kfServerTimer.text = LangMgr.getValueByKey('crossdayallday', GameServer.smallKFServOpenDay, GameServer.bigKFServOpenDay);
        var role = UnitMgr.ins().getNoDieRole();
        if (role) {
            var x = role.x >> 0;
            var y = role.y >> 0;
            var col = MapControl.point2Grip(role.x);
            var row = MapControl.point2Grip(role.y);
            var walk = MapControl.aStar.isWalkable(col, row);
            this.xyLabel.text = "posXY:(" + (x + "," + y) + ")(" + (col + "," + row + "," + (walk ? 1 : 0)) + ")";
        }
        else {
            this.xyLabel.text = "posXY:(-,-)";
        }
        var hashCount = egret.$hashCount;
        var count = hashCount - this.hasCount;
        var color = count > 120 ? ColorUtils.RED : ColorUtils.GREEN;
        this.hasCountTxt.textFlow = TextUtils.generateTextFlow1(LangMgr.getValueByKey('monitoringnum', "|C:" + color + "&T:" + count + "/120|"));
        this.hasCount = hashCount;
    };
    GMCommandView.prototype.close = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.removeEventFocusIn(this.commandInput, this.focusInHandler);
        this.removeEventFocusIn(this.chapterInput, this.focusInHandler);
        this.removeEventFocusIn(this.additemInput, this.focusInHandler);
        DisplayUtils.removeFromParent(this);
        this.$onClose();
        TimerMgr.ins().removeAll(this);
    };
    GMCommandView.prototype.focusInHandler = function (e) {
        switch (e.currentTarget) {
            case this.commandInput:
                if (LangMgr.getValueByKey('inputcmd') != this.commandInput.text)
                    return;
                e.target.text = "@";
                break;
            case this.rechargeInput:
                if ("10000" != this.rechargeInput.text)
                    return;
                e.target.text = "";
                break;
            case this.chapterInput:
                if ("100" != this.chapterInput.text)
                    return;
                e.target.text = "";
                break;
            case this.additemInput:
                if ("200002" != this.additemInput.text)
                    return;
                e.target.text = "";
                break;
        }
    };
    GMCommandView.prototype.focusOutHandler = function (e) {
        switch (e.target) {
            case this.commandInput:
                this.commandInput.text = LangMgr.getValueByKey('inputcmd');
                break;
        }
    };
    GMCommandView.prototype.onTou = function (e) {
        switch (e.target) {
            case this.commandSendBtn:
                this.keyEnter();
                break;
            case this.rechargeBtn:
                if (!this.rechargeInput.text) {
                    tipsControl.showCenterTips(LangMgr.getValueByKey('inputpayid'));
                    return;
                }
                payControl.upPayDebug(Number(this.rechargeInput.text));
                break;
            case this.niubiBtn:
                gameControl.upGMCommad("@setbianniubi");
                break;
            case this.superManBtn:
                gameControl.upGMCommad("@biandage");
                break;
            case this.superAttrBtn:
                gameControl.upGMCommad("@setattr 4 99999999999");
                gameControl.upGMCommad("@setattr 2 99999999999");
                break;
            case this.chapterBtn:
                if (!this.chapterInput.text) {
                    tipsControl.showCenterTips(LangMgr.getValueByKey('inputlevelnum'));
                    return;
                }
                gameControl.upGMCommad("@chapter2 " + this.chapterInput.text);
                break;
            case this.monthCardBtn:
                gameControl.upGMCommad("@buyprivilegemonthcard");
                break;
            case this.monthCardBtn1:
                gameControl.upGMCommad("@buymonthcard");
                break;
            case this.additemBtn:
                if (!this.additemInput.text) {
                    tipsControl.showCenterTips(LangMgr.getValueByKey('inputgoodsid'));
                    return;
                }
                var splits = this.additemInput.text.split(" ");
                gameControl.upGMCommad("@additem " + splits[0] + " " + (splits[1] || 1));
                break;
            case this.clearBagBtn:
                gameControl.upGMCommad("@clearbag 0");
                gameControl.upGMCommad("@clearbag 1");
                gameControl.upGMCommad("@clearbag 2");
                break;
            case this.storeBtn:
                gameControl.upGMCommad("@savesysvar");
                break;
            case this.stopAIBtn:
                gameControl.upGMCommad("@city eai");
                break;
            case this.openAIBtn:
                gameControl.upGMCommad("@city sai");
                break;
            case this.testFbBtn:
                gameControl.upGMCommad("@etfb");
                break;
            case this.rgBtn:
                gameControl.upGMCommad("@rsf");
                break;
            case this.newdayBtn:
                gameControl.upGMCommad("@newday");
                break;
        }
    };
    GMCommandView.prototype.keyEnter = function () {
        gameControl.upGMCommad(this.commandInput.text);
    };
    return GMCommandView;
}(BaseEuiView));
__reflect(GMCommandView.prototype, "GMCommandView");
var GMMemView = (function (_super) {
    __extends(GMMemView, _super);
    function GMMemView() {
        var _this = _super.call(this) || this;
        _this.showState = false;
        _this.touchEnabled = false;
        _this.touchChildren = false;
        var shp = new egret.Shape();
        shp.graphics.beginFill(0x000000, 0.7);
        shp.graphics.drawRect(0, 0, 120, 20);
        shp.graphics.endFill();
        _this.addChild(shp);
        _this.memText = new eui.Label;
        _this.memText.width = 120;
        _this.memText.height = 20;
        _this.memText.size = 16;
        _this.memText.textColor = 0xffffff;
        _this.memText.verticalAlign = "middle";
        _this.addChild(_this.memText);
        return _this;
    }
    GMMemView.Ins = function () {
        if (!this.instance) {
            this.instance = new GMMemView();
        }
        return this.instance;
    };
    GMMemView.prototype.show = function (state) {
        this.showState = state;
        this.visible = this.showState;
        if (this.showState) {
            this.showMem();
            StageUtils.ins().getStage().addChild(this);
            TimerMgr.ins().doTimer(5000, 0, this.showMem, this);
        }
        else {
            TimerMgr.ins().remove(this.showMem, this);
            if (this.parent) {
                this.parent.removeChild(this);
            }
        }
    };
    GMMemView.prototype.showMem = function () {
        if (this.memText && RecycleMgr.ins().imageTotalSize) {
            this.memText.text = "Mem:" + (RecycleMgr.ins().imageTotalSize / 1024 / 1024).toFixed(2) + "M";
        }
    };
    return GMMemView;
}(egret.Sprite));
__reflect(GMMemView.prototype, "GMMemView");
var GMNetCalcItemRenderer = (function (_super) {
    __extends(GMNetCalcItemRenderer, _super);
    function GMNetCalcItemRenderer() {
        return _super.call(this) || this;
    }
    GMNetCalcItemRenderer.prototype.dataChanged = function () {
        var data = this.data;
        this.idTxt.text = data.id;
        this.sumTxt.text = (data.sum / 1024).toFixed(1) + "kb";
        this.countTxt.text = data.count + "";
        this.perTxt.text = data.per + "b";
    };
    return GMNetCalcItemRenderer;
}(BaseItemRender));
__reflect(GMNetCalcItemRenderer.prototype, "GMNetCalcItemRenderer");
var GMNetCalcView = (function (_super) {
    __extends(GMNetCalcView, _super);
    function GMNetCalcView() {
        var _this = _super.call(this) || this;
        _this.listState = 0;
        _this.lastState = 0;
        _this.uilayer = GameLayer.POPUP;
        _this.skinName = "GMNetCalcViewSkin";
        _this._dataPro = new eui.ArrayCollection;
        _this.list.itemRenderer = GMNetCalcItemRenderer;
        _this.list.dataProvider = _this._dataPro;
        return _this;
    }
    GMNetCalcView.prototype.open = function () {
        this.addEventTouchTap(this.totalBtn, this.onTap);
        this.addEventTouchTap(this.countBtn, this.onTap);
        this.addEventTouchTap(this.perBtn, this.onTap);
        this.addEventTouchTap(this.idBtn, this.onTap);
        this.addEventTouchTap(this.clearBtn, this.onTap);
        this.addEventTouchTap(this.bgClose, this.onTap);
        this.addEventTouchTap(this.changeBtn, this.onTap);
        if (!TimerMgr.ins().isExists(this.updateView, this)) {
            TimerMgr.ins().loop(1000, this.updateView, this);
        }
        this.updateView();
    };
    GMNetCalcView.prototype.updateView = function () {
        var self = this;
        var msgBytes = NetCalcUtils.msgBytes;
        var datas = [];
        for (var sysId in msgBytes) {
            for (var msgId in msgBytes[sysId]) {
                var data = msgBytes[sysId][msgId];
                datas.push({
                    id: sysId + "-" + msgId,
                    sum: data[0],
                    count: data[1],
                    per: data[0] / data[1] >> 0,
                    idSys: +sysId,
                    idMsg: +msgId
                });
            }
        }
        var key1 = "sum";
        if (1 == this.listState) {
            key1 = "count";
        }
        else if (2 == this.listState) {
            key1 = "per";
        }
        var key2 = "sum";
        if (1 == this.lastState) {
            key2 = "count";
        }
        else if (2 == this.lastState) {
            key2 = "per";
        }
        datas.sort(function (a, b) {
            if (3 == self.listState) {
                if (a.idSys < b.idSys) {
                    return -1;
                }
                else if (a.idSys > b.idSys) {
                    return 1;
                }
                else if (3 == self.lastState) {
                    if (a.idMsg < b.idMsg) {
                        return -1;
                    }
                }
                else if (a[key2] > b[key2]) {
                    return -1;
                }
            }
            else if (a[key1] > b[key1]) {
                return -1;
            }
            return 1;
        });
        this._dataPro.replaceAll(datas);
        this.timeTxt.text = "运行时间：" + (egret.getTimer() / 1000 >> 0) + "秒";
        this.totalTxt.text = "总流量：" + (NetCalcUtils.revBytes2 / 1024).toFixed(1) + "kb+" + (NetCalcUtils.sendBytes / 1024).toFixed(1) + "kb";
    };
    GMNetCalcView.prototype.onTap = function (e) {
        var currentTarget = e.currentTarget;
        switch (currentTarget) {
            case this.bgClose:
                UIMgr.ins().close(this);
                break;
            case this.totalBtn:
                if (0 != this.listState) {
                    this.lastState = this.listState;
                    this.listState = 0;
                    this.updateView();
                }
                break;
            case this.countBtn:
                if (1 != this.listState) {
                    this.lastState = this.listState;
                    this.listState = 1;
                    this.updateView();
                }
                break;
            case this.perBtn:
                if (2 != this.listState) {
                    this.lastState = this.listState;
                    this.listState = 2;
                    this.updateView();
                }
                break;
            case this.idBtn:
                if (3 != this.listState || this.listState != this.lastState) {
                    this.lastState = this.listState;
                    this.listState = 3;
                    this.updateView();
                }
                break;
            case this.clearBtn:
                NetCalcUtils.clearRevBytes();
                this.updateView();
                break;
            case this.changeBtn:
                GMMemView.Ins().show(!GMMemView.Ins().showState);
                break;
        }
    };
    return GMNetCalcView;
}(BaseEuiView));
__reflect(GMNetCalcView.prototype, "GMNetCalcView");
var DownloadView = (function (_super) {
    __extends(DownloadView, _super);
    function DownloadView() {
        var _this = _super.call(this) || this;
        _this.skinName = "DownloadViewSkin";
        _this.isTopLevel = true;
        _this.uilayer = GameLayer.POPUP;
        return _this;
    }
    DownloadView.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.addEventTouchTap(this.androidBtn, this.onTap);
        this.addEventTouchTap(this.iosBtn, this.onTap);
        this.addEventTouchTap(this.bgClose, this.onTap);
    };
    DownloadView.prototype.close = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.removeEventTouchTap(this.androidBtn, this.onTap);
        this.removeEventTouchTap(this.iosBtn, this.onTap);
        this.removeEventTouchTap(this.bgClose, this.onTap);
        this.removeCustomEvents();
    };
    DownloadView.prototype.onTap = function (e) {
        switch (e.currentTarget) {
            case this.bgClose:
                UIMgr.ins().close(this);
                break;
            case this.androidBtn:
                this.downloadFile(1);
                break;
            case this.iosBtn:
                this.downloadFile(2);
                break;
        }
    };
    DownloadView.prototype.downloadFile = function (type) {
        var device = "android";
        if (type == 2) {
            device = "ios";
        }
        window.open(GlobalModel.gmDomain + ":8080/api/download?pfid=" + GlobalModel.pfid + "&gameid=" + GlobalModel.gameId + "&channelId=" + GlobalModel.channelId + "&device=" + device, "newwindow", "toolbar =no, menubar=no, scrollbars=no, resizable=no, location=no, status=no");
    };
    return DownloadView;
}(BaseEuiView));
__reflect(DownloadView.prototype, "DownloadView");
/**
 * 邮件数据
 */
var EmailUserControl = (function (_super) {
    __extends(EmailUserControl, _super);
    function EmailUserControl() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.currentMailHandle = 0;
        _this.mailData = [];
        _this._mailListData = new eui.ArrayCollection();
        return _this;
    }
    EmailUserControl.ins = function () {
        return _super.ins.call(this);
    };
    Object.defineProperty(EmailUserControl.prototype, "mailListData", {
        get: function () {
            this.mailData.sort(this.mailSort2);
            this._mailListData.source = this.mailData;
            return this._mailListData;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 邮件数据
     * 8-2
     */
    EmailUserControl.prototype.upMailContentData = function (mailHandle) {
        return [mailHandle];
    };
    /**
     * 邮件领取附件
     * 8-4
     */
    EmailUserControl.prototype.upGetItem = function (list) {
        return [list];
    };
    /**
     * 处理邮件数据
     * 8-1
     */
    EmailUserControl.prototype.downMailData = function (datas) {
        this.mailData = [];
        for (var i = 0; i < datas.length; i++) {
            var mailData = new EmailDataVo();
            mailData.initBase(datas[i]);
            this.mailData.push(mailData);
        }
        this.mailSort(1);
        this.dispatchMailData();
    };
    /**
     * 处理邮件数据
     */
    EmailUserControl.prototype.dispatchMailData = function () {
        EventMgr.ins().dispatch(215 /* EMAIL_DATA */);
    };
    /**
     * 处理邮件详细数据
     * 8-2
     */
    EmailUserControl.prototype.downMailDetailedData = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        var mailData = new EmailDataVo();
        mailData.init(param);
        for (var i = 0; i < this.mailData.length; i++) {
            if (this.mailData[i].handle == mailData.handle) {
                this.mailData.splice(i, 1, mailData);
                break;
            }
        }
        this.currentMailHandle = mailData.handle;
        if (!emailUserControl.isAllReceive) {
            UIMgr.ins().open(EmailDetailedView);
        }
        this.dispatchMailDetail(mailData);
    };
    /**
     * 处理邮件详细数据
     */
    EmailUserControl.prototype.dispatchMailDetail = function (data) {
        EventMgr.ins().dispatch(216 /* EMAIL_DETAIL */, data);
    };
    /**
     * 处理删除邮件
     * 8-3
     */
    EmailUserControl.prototype.downDeleteMail = function (handle) {
        this.deleteMailDataByHandle(handle);
        this.dispatchMailData();
    };
    /**
     * 处理领取邮件回包
     * 8-4
     */
    EmailUserControl.prototype.downGetItemMail = function (datas) {
        for (var i = 0; i < datas.length; i++) {
            var handle = datas[i][0];
            for (var _i = 0, _a = this.mailData; _i < _a.length; _i++) {
                var mail = _a[_i];
                if (mail.handle == handle) {
                    mail.type = datas[i][1];
                    mail.receive = datas[i][2];
                    this.dispatchMailDetail(mail);
                    break;
                }
            }
        }
        this.dispatchGetItemFromMail();
    };
    /**
     * 派发处理领取邮件
     */
    EmailUserControl.prototype.dispatchGetItemFromMail = function () {
        EventMgr.ins().dispatch(217 /* EMAIL_GET_ITEM */);
    };
    /**
     * 添加邮件
     * 8-5
     */
    EmailUserControl.prototype.downAddMail = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        var mailData = new EmailDataVo();
        mailData.initBase(param);
        this.mailData.unshift(mailData);
        this.dispatchMailData();
    };
    /**
     * 通过唯一id获取邮件数据
     * @param handle
     */
    EmailUserControl.prototype.getMailDataByHandle = function (handle) {
        for (var _i = 0, _a = this.mailData; _i < _a.length; _i++) {
            var mail = _a[_i];
            if (mail.handle == handle)
                return mail;
        }
        return null;
    };
    /**
     * 通过唯一id删除邮件数据
     * @param handle
     */
    EmailUserControl.prototype.deleteMailDataByHandle = function (handle) {
        for (var i = 0; i < this.mailData.length; i++) {
            if (this.mailData[i].handle == handle) {
                this.mailData.splice(i, 1);
                return;
            }
        }
    };
    /**
     * 通过领取状态获取邮件
     * @param receive  默认0未领  1已领
     */
    EmailUserControl.prototype.getMailByReceive = function (receive) {
        if (receive === void 0) { receive = 0; }
        var list = [];
        for (var i = this.mailData.length - 1; i >= 0; i--) {
            if (this.mailData[i].receive == receive)
                list.push(this.mailData[i]);
        }
        return list;
    };
    EmailUserControl.prototype.getUnreadMail = function () {
        var sum = 0;
        for (var i = this.mailData.length - 1; i >= 0; i--) {
            var mail = this.mailData[i];
            if (mail.type == 0 || mail.receive == 0)
                sum += 1;
        }
        return sum;
    };
    /**
     * 获取当前邮件
     */
    EmailUserControl.prototype.getCurrentMail = function () {
        return this.getMailDataByHandle(this.currentMailHandle);
    };
    EmailUserControl.prototype.sortDesc = function (a, b) {
        return SortUtils.sortDescByKey(a, b, "times");
    };
    EmailUserControl.prototype.sortAsc = function (a, b) {
        return SortUtils.sortAscByKey(a, b, "times");
    };
    /**
     * 邮件排列
     * @param isSort 0:从小到大 1:从大到小
     */
    EmailUserControl.prototype.mailSort = function (isSort) {
        var mailList = this.mailData;
        if (isSort)
            mailList.sort(this.sortDesc);
        else
            mailList.sort(this.sortAsc);
        return mailList;
    };
    /**
     * 邮件排列
     */
    EmailUserControl.prototype.mailSort2 = function (a, b) {
        var num = 0;
        //未读
        num = SortUtils.sortAscByKey(a, b, "type");
        if (num != 0)
            return num;
        //附件
        if (a.receive == 0 && b.receive != 0)
            return -1;
        if (a.receive != 0 && b.receive == 0)
            return 1;
        //时间
        num = SortUtils.sortDescByKey(a, b, "times");
        if (num != 0)
            return num;
        return num;
    };
    __decorate([
        up(2, [3 /* Int */])
    ], EmailUserControl.prototype, "upMailContentData", null);
    __decorate([
        up(4, [[3 /* Int */]])
    ], EmailUserControl.prototype, "upGetItem", null);
    __decorate([
        down(1, [ByteConst.EmailBaseVos])
    ], EmailUserControl.prototype, "downMailData", null);
    __decorate([
        down(2, ByteConst.EmailDataVos.slice())
    ], EmailUserControl.prototype, "downMailDetailedData", null);
    __decorate([
        down(3, [3 /* Int */])
    ], EmailUserControl.prototype, "downDeleteMail", null);
    __decorate([
        down(4, [[3 /* Int */, 3 /* Int */, 3 /* Int */]])
    ], EmailUserControl.prototype, "downGetItemMail", null);
    __decorate([
        down(5, ByteConst.EmailBaseVos.slice())
    ], EmailUserControl.prototype, "downAddMail", null);
    EmailUserControl = __decorate([
        protocolsId(8 /* PROTOCOL_8 */)
    ], EmailUserControl);
    return EmailUserControl;
}(BaseSystem));
__reflect(EmailUserControl.prototype, "EmailUserControl");
/**
 * 邮件系统
 */
var EmailDataVo = (function () {
    function EmailDataVo() {
    }
    /**
     * 基础数据
     */
    EmailDataVo.prototype.initBase = function (datas) {
        this.handle = datas[0];
        this.title = datas[1];
        this.times = datas[2];
        this.type = datas[3];
        this.receive = datas[4];
    };
    /**
     * 详细数据
     */
    EmailDataVo.prototype.init = function (datas) {
        this.initBase(datas.slice(0, 5));
        this.item = [];
        this.text = datas[5];
        for (var i = 0; i < datas[6].length; i++) {
            var reward = new RewardVo;
            reward.init(datas[6][i]);
            this.item.push(reward);
        }
    };
    return EmailDataVo;
}());
__reflect(EmailDataVo.prototype, "EmailDataVo");
var EmailDetailedView = (function (_super) {
    __extends(EmailDetailedView, _super);
    function EmailDetailedView() {
        var _this = _super.call(this) || this;
        _this.uilayer = GameLayer.POPUP;
        return _this;
    }
    EmailDetailedView.prototype.initUI = function () {
        _super.prototype.initUI.call(this);
        this.skinName = "EmailDetailedViewSkin";
        this.itemList.itemRenderer = ItemBase;
    };
    EmailDetailedView.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.addEventTouchTap(this.closeBtn, this.onTap);
        this.addEventTouchTap(this.rect, this.onTap);
        this.addEventTextLink(this.textLabel, this.linkClick);
        this.addEventTouchTap(this.receiveBtn, this.onTap);
        this.addCustomEvent(217 /* EMAIL_GET_ITEM */, this.setMailData);
        this.setMailData();
    };
    EmailDetailedView.prototype.close = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
    };
    EmailDetailedView.prototype.linkClick = function (evt) {
        var lst = evt.text.split(",");
        var pa = lst.slice(1);
        if (lst[0]) {
            UIMgr.ins().open(lst[0], pa[0] ? pa : null);
            UIMgr.ins().close(this);
            UIMgr.ins().close("PartnerBgView");
        }
    };
    EmailDetailedView.prototype.onTap = function (e) {
        switch (e.currentTarget) {
            case this.receiveBtn:
                var list = [];
                list.push(emailUserControl.currentMailHandle);
                emailUserControl.upGetItem(list);
            case this.closeBtn:
            case this.closeBtn0:
            case this.rect:
                UIMgr.ins().close(this);
                break;
        }
    };
    EmailDetailedView.prototype.otherClose = function (evt) {
        var bg = this.background;
        if (evt.localX >= bg.x && evt.localX <= bg.x + bg.width && evt.localY >= bg.y && evt.localY <= bg.y + bg.height) { }
        else {
            UIMgr.ins().close(this);
        }
    };
    EmailDetailedView.prototype.setMailData = function () {
        var mailData = emailUserControl.getCurrentMail();
        this.textLabel.textFlow = TextUtils.generateTextFlow1(mailData.text);
        this.setReceiveBtn(mailData.receive, mailData.item.length > 0);
        this.itemList.dataProvider = new eui.ArrayCollection(mailData.item);
    };
    /**
     * 设置领取按钮
     * @param receive
     */
    EmailDetailedView.prototype.setReceiveBtn = function (receive, isShow) {
        if (isShow === void 0) { isShow = false; }
        var str = "";
        this.receiveBtn.visible = receive >= 0;
        if (receive)
            str = LangMgr.getValueByKey('activitAlreadingGet');
        else
            str = LangMgr.getValueByKey('mailTips1');
        this.receiveBtn.label = str;
        this.receiveBtn.enabled = !Boolean(receive);
        this.receiveBtn.visible = isShow;
        this.desc.visible = !isShow;
    };
    return EmailDetailedView;
}(BaseEuiView));
__reflect(EmailDetailedView.prototype, "EmailDetailedView");
/**
 * 邮件窗口
 */
var EmailPanel = (function (_super) {
    __extends(EmailPanel, _super);
    function EmailPanel() {
        var _this = _super.call(this) || this;
        _this.name = LangMgr.getValueByKey('chatMenu7');
        return _this;
    }
    EmailPanel.prototype.childrenCreated = function () {
        this._mails = [];
        this.mailList.itemRenderer = EmailItemRenderer;
        this.mailScroller.viewport = this.mailList;
    };
    EmailPanel.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.addEventTouchTap(this.closeBtn, this.onTap);
        this.addEventTouchTap(this.closeBtn0, this.onTap);
        this.addEventTouchTap(this.allReceiveBtn, this.onTap);
        this.addEventTouchTap(this.mailList, this.onSendMail);
        this.addCustomEvent(216 /* EMAIL_DETAIL */, this.setOpenMail);
        this.addCustomEvent(217 /* EMAIL_GET_ITEM */, this.mailCall);
        this.setMailData();
    };
    EmailPanel.prototype.close = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        WatcherUtil.removeFromArrayCollection(this.mailList.dataProvider);
        this.mailList.dataProvider = null;
    };
    EmailPanel.prototype.mailCall = function () {
        if (emailUserControl.isAllReceive) {
            for (var i = 0; i < this._mails.length; i++) {
                emailUserControl.upMailContentData(this._mails[i].handle);
            }
        }
    };
    EmailPanel.prototype.onTap = function (e) {
        switch (e.currentTarget) {
            case this.allReceiveBtn:
                emailUserControl.isAllReceive = true;
                var list = [];
                var mailList = emailUserControl.getMailByReceive();
                for (var i = 0; i < mailList.length; i++) {
                    list.push(mailList[i].handle);
                }
                emailUserControl.upGetItem(list);
                break;
        }
    };
    EmailPanel.prototype.onSendMail = function (e) {
        if (!e)
            return;
        emailUserControl.isAllReceive = false;
        var item = e.target.parent;
        if (item) {
            var mailData = item.data;
            if (mailData) {
                emailUserControl.upMailContentData(mailData.handle);
            }
        }
    };
    EmailPanel.prototype.setMailData = function () {
        this._mails = emailUserControl.mailData;
        this.mailList.dataProvider = new eui.ArrayCollection(this._mails);
        this.allReceiveBtn.visible = Boolean(emailUserControl.getMailByReceive().length);
        if (emailUserControl.mailData.length > 0)
            this.noMailTip.visible = false;
    };
    EmailPanel.prototype.setOpenMail = function (mailData) {
        for (var i = 0; i < this.mailList.numChildren; i++) {
            var item = this.mailList.getChildAt(i);
            if (item.data.handle == mailData.handle) {
                item.data = mailData;
                return;
            }
        }
    };
    return EmailPanel;
}(BasePanel));
__reflect(EmailPanel.prototype, "EmailPanel");
var EmailItemRenderer = (function (_super) {
    __extends(EmailItemRenderer, _super);
    function EmailItemRenderer() {
        var _this = _super.call(this) || this;
        _this.skinName = "EmailItemRendererSkin";
        return _this;
    }
    EmailItemRenderer.prototype.createChildren = function () {
        _super.prototype.createChildren.call(this);
    };
    EmailItemRenderer.prototype.dataChanged = function () {
        var mailData = this.data;
        if (mailData instanceof EmailDataVo) {
            var str = "|C:" + LangMgr.getColor('color78') + "&T:" + mailData.title + "|";
            str = str + "|C:" + (mailData.type ? LangMgr.getValueByKey('color76') : LangMgr.getValueByKey('color77')) + "&T:" + (mailData.type ? LangMgr.getValueByKey('mailTips2') : LangMgr.getValueByKey('mailTips3')) + "|";
            this.nameLabel.textFlow = TextUtils.generateTextFlow(str);
            this.dateLabel.text = DateUtils.getFormatBySecond(mailData.times, 2);
            this.treasure.source = mailData.receive == 0 ? "220003_png" : "";
        }
    };
    return EmailItemRenderer;
}(BaseItemRender));
__reflect(EmailItemRenderer.prototype, "EmailItemRenderer");
/**
 * 羽翼
 */
var FeatherControl = (function (_super) {
    __extends(FeatherControl, _super);
    function FeatherControl() {
        var _this = _super.call(this) || this;
        _this.timeID = 0;
        _this.godWing = [];
        _this.isListen = false;
        _this.godWingForge = [];
        _this.addCustomEventMany(_this.startCheckHaveCan, 266 /* BACKPACK_ITEM_ADD */, 268 /* BACKPACK_ITEM_DEL */, 352 /* SUB_ROLE_CHANGE */, 461 /* ACTOR_LEVEL_CHANGE */, 206 /* FEATHER_UPGRADE */, 267 /* BACKPACK_ITEM_CHANGE */, 210 /* FEATHER_USE_DAN */);
        return _this;
    }
    FeatherControl_1 = FeatherControl;
    FeatherControl.ins = function () {
        return _super.ins.call(this);
    };
    Object.defineProperty(FeatherControl, "WingMaxLv", {
        get: function () {
            return DataCenter.ins().FeatherCommonConfig.wingMaxLv;
        },
        enumerable: true,
        configurable: true
    });
    FeatherControl.prototype.initConfig = function () {
        if (!this.wingSkillDic) {
            this.wingSkillDic = [];
            var config = DataCenter.ins().FeatherLevelConfig;
            for (var k in config) {
                if (config[k].pasSkillId) {
                    this.wingSkillDic.push(config[k].pasSkillId);
                }
            }
        }
    };
    FeatherControl.prototype.getWingSkillByIndex = function (index) {
        this.initConfig();
        return this.wingSkillDic[index];
    };
    FeatherControl.prototype.startCheckHaveCan = function (isWear, roleIndex) {
        if (isWear === void 0) { isWear = false; }
        if (roleIndex === void 0) { roleIndex = -1; }
        if (this.isListen) {
            return;
        }
        this.isListen = true;
        TimerMgr.ins().doTimerDelay(3000, 1000, 1, this.showNavBtnRedPoint, this);
    };
    /**
     * 培养请求
     * 6-2
     */
    FeatherControl.prototype.upBoost = function (roleId, type) {
        return [roleId, type];
    };
    /**
     * 升级请求
     * 6-3
     */
    FeatherControl.prototype.upUpgrade = function (roleId) {
        return [roleId];
    };
    /**
     * 激活请求
     * 6-4
     */
    FeatherControl.prototype.upActivate = function (roleId) {
        return [roleId];
    };
    /**
     * 发送直升一阶
     * 6-12
     */
    FeatherControl.prototype.upBigUpLevel = function (roleId) {
        return [roleId];
    };
    /**
     * 羽翼数据
     * 6-1
     */
    FeatherControl.prototype.downUpDataWing = function (index) {
        var param = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            param[_i - 1] = arguments[_i];
        }
        heroControl.getSubRoleByIndex(index).wingsData.init(param);
    };
    /**
     * 培养
     * 6-2
     */
    FeatherControl.prototype.downBoost = function (index, lv, exp, addExp, clearTime, crit) {
        var lastLv = heroControl.getSubRoleByIndex(index).wingsData.lv;
        heroControl.getSubRoleByIndex(index).wingsData.parserBoost(lv, exp);
        heroControl.getSubRoleByIndex(index).wingsData.parserClearTime(clearTime);
        this.dispatchBoost(crit, addExp);
        if (lastLv != heroControl.getSubRoleByIndex(index).wingsData.lv) {
            var skillAct = DataCenter.ins().FeatherLevelConfig[heroControl.getSubRoleByIndex(index).wingsData.lv];
            heroControl.getSubRoleByIndex(index).setWingSkill();
            var role = UnitMgr.ins().getMainRole(index);
            if (role) {
                role.updateModel();
            }
            EventMgr.ins().dispatch(206 /* FEATHER_UPGRADE */);
            CommonFun.show(1, skillAct.name, "j" + skillAct.appearance + "_png");
        }
        this.dispatchWingTime();
    };
    /**
     * 派发培养回调
     */
    FeatherControl.prototype.dispatchBoost = function (crit, addExp) {
        EventMgr.ins().dispatch(580 /* FEATHER_BOOST */, [crit, addExp]);
    };
    /**
     * 激活
     * 6-4
     */
    FeatherControl.prototype.downActivate = function (index, openStatus) {
        heroControl.getSubRoleByIndex(index).wingsData.parserOpenStatus(openStatus);
        var config = DataCenter.ins().FeatherLevelConfig[0];
        CommonFun.show(0, config.name, "j" + config.appearance + "_png");
        //更新羽翼显示
        var role = UnitMgr.ins().getMainRole(index);
        if (role) {
            role.updateModel();
        }
        EventMgr.ins().dispatch(208 /* FEATHER_ACT */);
    };
    /**
     * 升阶羽翼刷新倒计时
     */
    FeatherControl.prototype.dispatchWingTime = function () {
        EventMgr.ins().dispatch(581 /* FEATHER_TIME */);
    };
    /**
     * 检查是否需要显示红点
     */
    FeatherControl.prototype.showNavBtnRedPoint = function () {
        //是否有装备可以穿戴
        this.isListen = false;
        var b = false;
        var actorLv = ActorControl.level;
        if (ActorControl.level >= DataCenter.ins().FeatherCommonConfig.openLevel) {
            //是否有翅膀装备可以穿戴
            //翅膀是否有可以升级
            if (!b && CommonFun.andState(this.canGradeupWing())) {
                roleControl.showNavBtnRedPoint(true);
                return;
            }
        }
        if (this.canUseFlyUp()) {
            roleControl.showNavBtnRedPoint(true);
            return;
        }
        if (this.canUseAptitude()) {
            roleControl.showNavBtnRedPoint(true);
            return;
        }
        roleControl.showNavBtnRedPoint(false);
    };
    FeatherControl.prototype.getLevelBySkill = function (index) {
        if (!this.wingSkillLevelDic) {
            this.wingSkillLevelDic = [];
            var config = DataCenter.ins().FeatherLevelConfig;
            for (var k in config) {
                if (config[k].pasSkillId > 0) {
                    this.wingSkillLevelDic.push(config[k].level);
                }
            }
        }
        if (this.wingSkillLevelDic[index]) {
            return this.wingSkillLevelDic[index];
        }
        return 0;
    };
    /**
     * 是否可以提升翅膀（包括直升丹道具）
     */
    FeatherControl.prototype.canGradeupWing = function () {
        var boolList = [false, false, false];
        return boolList;
    };
    /**
     * 是否可以使用道具（羽毛）提升羽翼
     */
    FeatherControl.prototype.canItemGradeupWing = function () {
        var boolList = [false, false, false];
        var lvMax = FeatherControl_1.WingMaxLv;
        var len = heroControl.subRolesLen;
        for (var i = 0; i < len; i++) {
            //获取角色是否激活了羽翼
            var roleOpenWing = heroControl.getSubRoleByIndex(i).wingsData.openStatus;
            if (roleOpenWing) {
                var curlevel = heroControl.getSubRoleByIndex(i).wingsData.lv;
                if (curlevel < lvMax && curlevel < FeatherControl_1.WingExpRedPoint) {
                    //获取背包是否有羽毛道具
                    var config = DataCenter.ins().FeatherLevelConfig[curlevel];
                    if (Assert(config, "get WingLevelConfig null " + curlevel))
                        continue;
                    var num = backpackControl.getBagGoodsCountById(0, config.itemId);
                    boolList[i] = config.itemNum <= num;
                }
                else {
                    boolList[i] = false;
                }
                //羽翼直升丹
                if (!boolList[i]) {
                    var count = backpackControl.getBagGoodsCountById(0, DataCenter.ins().FeatherCommonConfig.levelItemid);
                    boolList[i] = count > 0 && curlevel == FeatherControl_1.WingExpRedPoint;
                }
            }
        }
        return boolList;
    };
    /**
     * 是否有羽翼可以激活
     * @params roleId == -1 表示取全部
     */
    FeatherControl.prototype.isHaveActivationWing = function (roleId) {
        if (roleId === void 0) { roleId = -1; }
        var myLevel = ActorControl.level;
        var needLevel = DataCenter.ins().FeatherCommonConfig.openLevel;
        if (myLevel < needLevel) {
            return false;
        }
        var len = heroControl.subRolesLen;
        if (roleId == -1) {
            for (var i = 0; i < len; i++) {
                var wingData = heroControl.getSubRoleByIndex(i).wingsData;
                if (!wingData.openStatus) {
                    return true;
                }
            }
        }
        else {
            var wingData = heroControl.getSubRoleByIndex(roleId).wingsData;
            if (!wingData.openStatus) {
                return true;
            }
        }
        return false;
    };
    /**
     * 是否可以激活角色羽翼
     * @returns boolean
     */
    FeatherControl.prototype.canRoleOpenWing = function () {
        var boolList = [false, false, false];
        var len = heroControl.subRolesLen;
        for (var i = 0; i < len; i++) {
            //获取角色是否激活了羽翼
            var roleOpenWing = heroControl.getSubRoleByIndex(i).wingsData.openStatus;
            boolList[i] = !roleOpenWing && ActorControl.level >= 16;
        }
        return boolList;
    };
    /**
     * 申请穿戴
     * 6-3
     */
    FeatherControl.prototype.upWingWear = function (roleId, itemId) {
        return [roleId, itemId];
    };
    /**
     * 穿戴是否成功
     * 6-3
     */
    FeatherControl.prototype.downWingWear = function (result) {
        EventMgr.ins().dispatch(207 /* FEATHER_WEAR */, result);
    };
    /**
     * 神羽数据同步
     * 6-5
     */
    FeatherControl.prototype.downGodWingData = function (roleId, datas) {
        if (!this.godWing[roleId]) {
            this.godWing[roleId] = new FeatherDeityVo();
        }
        this.godWing[roleId].parser(datas);
        EventMgr.ins().dispatch(209 /* FEATHER_GOD_DATA */);
    };
    /**
     * 使用提升丹
     * 6-8
     */
    FeatherControl.prototype.upUseDan = function (id, type) {
        return [id, type];
    };
    /**
     * 使用提升丹成功
     * 6-8
     */
    FeatherControl.prototype.downUseDanSuccess = function (index, type, count) {
        var wingsData = heroControl.getSubRoleByIndex(index).wingsData;
        if (type == 0) {
            wingsData.aptitudeDan = count;
        }
        else {
            wingsData.flyUpDan = count;
        }
        EventMgr.ins().dispatch(210 /* FEATHER_USE_DAN */);
    };
    /**
     * 可以使用飞升丹
     */
    FeatherControl.prototype.canUseFlyUp = function () {
        var len = heroControl.roles.length;
        for (var i = 0; i < len; i++) {
            if (this.canUseFlyUpByRoleID(i))
                return true;
        }
        return false;
    };
    /**
     * 子角色可以使用飞升丹
     * @param roleID
     */
    FeatherControl.prototype.canUseFlyUpByRoleID = function (roleID) {
        var role = heroControl.getSubRoleByIndex(roleID);
        if (role.wingsData && role.wingsData.openStatus == 1) {
            if (role.wingsData.flyUpDan < DataCenter.ins().FeatherLevelConfig[role.wingsData.lv].flyPill) {
                var itemData = backpackControl.getBagItemById(DataCenter.ins().FeatherCommonConfig.flyPillId);
                var num = itemData ? itemData.count : 0;
                if (num) {
                    return true;
                }
            }
        }
        return false;
    };
    /**
     * 可以使用资质丹
     */
    FeatherControl.prototype.canUseAptitude = function () {
        var len = heroControl.roles.length;
        for (var i = 0; i < len; i++) {
            if (this.canUseAptitudeByRoleID(i))
                return true;
        }
        return false;
    };
    /**
     * 子角色可以使用资质丹
     * @param roleID
     */
    FeatherControl.prototype.canUseAptitudeByRoleID = function (roleID) {
        var role = heroControl.getSubRoleByIndex(roleID);
        if (role.wingsData && role.wingsData.openStatus == 1) {
            if (role.wingsData.aptitudeDan < DataCenter.ins().FeatherLevelConfig[role.wingsData.lv].attrPill) {
                var itemData = backpackControl.getBagItemById(DataCenter.ins().FeatherCommonConfig.attrPillId);
                var num = itemData ? itemData.count : 0;
                if (num) {
                    return true;
                }
            }
        }
        return false;
    };
    /**
     * 使用飞升丹或资质丹
     * @param id
     */
    FeatherControl.prototype.userDans = function (id) {
        var len = heroControl.roles.length;
        var role;
        var maxRole = null;
        var maxLvRole = null;
        var maxUnOpen = 0;
        var lvMax = 0;
        var cfg;
        var useMax;
        var isZiZhi = id == DataCenter.ins().FeatherCommonConfig.attrPillId;
        for (var i = 0; i < len; i++) {
            role = heroControl.getSubRoleByIndex(i);
            if (role.wingsData.openStatus == 1) {
                cfg = DataCenter.ins().FeatherLevelConfig[role.wingsData.lv];
                useMax = (isZiZhi && role.wingsData.aptitudeDan >= cfg.attrPill) || (!isZiZhi && role.wingsData.flyUpDan >= cfg.flyPill);
                if (!useMax) {
                    if (!maxRole) {
                        maxRole = role;
                    }
                    if (role.wingsData.lv > maxRole.wingsData.lv) {
                        maxRole = role;
                    }
                    if (!maxLvRole) {
                        maxLvRole = role;
                    }
                    if (isZiZhi && role.wingsData.aptitudeDan > maxRole.wingsData.aptitudeDan) {
                        maxLvRole = role;
                    }
                    if (!isZiZhi && role.wingsData.flyUpDan > maxRole.wingsData.flyUpDan) {
                        maxLvRole = role;
                    }
                }
                else {
                    lvMax++;
                }
            }
            else {
                maxUnOpen++;
            }
        }
        if (maxUnOpen >= len) {
            tipsControl.showTips(LangMgr.getValueByKey('allroleUnopenedwing'));
            return;
        }
        if (lvMax >= len) {
            tipsControl.showTips(isZiZhi ? LangMgr.getValueByKey('allrolewingzzfull') : LangMgr.getValueByKey('allrolewingfsfull'));
            return;
        }
        var index = maxRole.index;
        if (maxRole.index != maxLvRole.index && maxRole.wingsData.lv == maxLvRole.wingsData.lv) {
            index = maxLvRole.index;
        }
        UIMgr.ins().open("RoleView", 3, index);
    };
    /**
     * 神羽合成
     * 6-6
     */
    FeatherControl.prototype.upWingCompose = function (type, itemId, roleIndex) {
        var data = [type, itemId];
        if (type == 1) {
            data.push(roleIndex);
        }
        return data;
    };
    /**
     * 神羽置换
     * 6-7
     */
    FeatherControl.prototype.upResetGodWing = function (src, des) {
        return [src, des];
    };
    /**
     * 获取神羽部位当前道具id
     */
    FeatherControl.prototype.getCurLevelItemId = function (roleId, slot) {
        var glconfig;
        var level;
        if (!this.godWing[roleId]) {
            return null;
        }
        level = this.godWing[roleId].getLevel(slot);
        if (!level) {
            return null;
        }
        glconfig = DataCenter.ins().FeatherDeityLevelConfig[level][slot];
        return glconfig;
    };
    /**
     * 获取神羽部位下一级道具id
     */
    FeatherControl.prototype.getNextLevelItemId = function (roleId, slot) {
        var level;
        level = this.godWing[roleId].getLevel(slot);
        level = level ? (this.getNextLevel(level)) : 0;
        if (!DataCenter.ins().FeatherDeityLevelConfig[level]) {
            return null;
        }
        return DataCenter.ins().FeatherDeityLevelConfig[level][slot];
    };
    /**
     * 快速合成红点
     */
    FeatherControl.prototype.quickComposeRedPoint = function (roleIndex, slot) {
        var lv = featherControl.getGodWing(roleIndex).getLevel(slot);
        var nextLvl = this.getNextLevel(lv);
        if (!nextLvl) {
            return false;
        }
        var cfg = DataCenter.ins().FeatherDeityLevelConfig[nextLvl][slot];
        if (!this.checkGodWingLevel(roleIndex, cfg.itemId)) {
            return false;
        }
        if (this.checkGodWingItem(roleIndex, cfg.itemId, slot)) {
            return true;
        }
        return false;
    };
    /**
     * 装备红点
     */
    FeatherControl.prototype.wearItemRedPoint = function (roleIndex, slot) {
        //在背包是否有更高阶可替换
        if (this.checkSlotLevel(roleIndex, slot)) {
            return true;
        }
        return false;
    };
    /**
     * 格子红点
     */
    FeatherControl.prototype.gridRedPoint = function (roleIndex, slot) {
        if (this.wearItemRedPoint(roleIndex, slot)) {
            return true;
        }
        return this.quickComposeRedPoint(roleIndex, slot);
    };
    /**
     * 是否有可装备的神羽
     */
    FeatherControl.prototype.isWearGodWing = function (i) {
        var role = heroControl.getSubRoleByIndex(i);
        if (!role)
            return false;
        for (var j = 1; j <= FeatherControl_1.GodWingMaxSlot; j++) {
            if (this.gridRedPoint(role.index, j)) {
                return true;
            }
        }
        return false;
    };
    /**
     * 检查某个部位是否有穿戴
     */
    FeatherControl.prototype.checkSlot = function (roleId, slot) {
        var lv = this.getGodWing(roleId).getLevel(slot);
        if (!lv) {
            return false;
        }
        return true;
    };
    /**
     * 获取能穿的id
     */
    FeatherControl.prototype.getWearItem = function (roleId, slot) {
        var lv = this.getGodWing(roleId).getLevel(slot);
        var items = backpackControl.getBagGoodsByType(16 /* TYPE_16 */);
        for (var i = 0; i < items.length; i++) {
            var itemConf = DataCenter.ins().FeatherItemConfig[items[i].configID];
            if (this.checkGodWingLevel(roleId, itemConf.itemId) && itemConf.slot == slot && itemConf.level > lv) {
                return itemConf.itemId;
            }
        }
        return 0;
    };
    /**
     * 在背包是否有更高阶可替换
     */
    FeatherControl.prototype.checkSlotLevel = function (roleId, slot) {
        var lv = this.getGodWing(roleId).getLevel(slot);
        var items = backpackControl.getBagGoodsByType(16 /* TYPE_16 */);
        for (var i = 0; i < items.length; i++) {
            var itemConf = DataCenter.ins().FeatherItemConfig[items[i].configID];
            if (this.checkGodWingLevel(roleId, itemConf.itemId) && itemConf.slot == slot && itemConf.level > lv) {
                return true;
            }
        }
        return false;
    };
    /**
     * 检查当前神羽道具是否符合穿戴要求
     */
    FeatherControl.prototype.checkGodWingLevel = function (roleId, itemId) {
        var gwconfig = DataCenter.ins().FeatherItemConfig[itemId];
        var myWinglevel = 0;
        var wd = heroControl.getSubRoleByIndex(roleId).wingsData;
        myWinglevel += wd.lv;
        if (wd.openStatus) {
            myWinglevel += 1;
        }
        if (myWinglevel >= gwconfig.level) {
            return true;
        }
        return false;
    };
    /**
     * 检查当前神羽道具是否有足够材料合成
     */
    FeatherControl.prototype.checkGodWingItem = function (roleId, itemId, slot) {
        //是否有足够的材料
        var gwconfig = DataCenter.ins().FeatherItemConfig[itemId];
        var totalSum = gwconfig.composeItem.count;
        var mySum = 0;
        var itemdata = backpackControl.getBagItemById(gwconfig.composeItem.id);
        if (itemdata) {
            mySum = itemdata.count;
        }
        //传了值代表要判定包括自身穿戴那件
        if (slot) {
            var isWear = this.getGodWing(roleId).getLevel(slot);
            if (isWear) {
                totalSum -= 1;
            }
        }
        if (mySum >= totalSum) {
            return true;
        }
        return false;
    };
    /**
     * 当前部位是否有可快速合成/升阶神羽
     * 快速合成条件:1.可合成 2.能穿戴
     */
    FeatherControl.prototype.isQuicComposeGodWing = function (roleId, slot) {
        var role = heroControl.getSubRoleByIndex(roleId);
        if (!role) {
            return false;
        }
        var level = this.godWing[roleId].getLevel(slot);
        if (!level) {
            level = this.getStartLevel(slot);
        }
        if (!level) {
            return false;
        }
        //是否达到穿戴等级
        var myWinglevel = 0;
        var wd = heroControl.getSubRoleByIndex(roleId).wingsData;
        myWinglevel += wd.lv;
        if (wd.openStatus)
            myWinglevel += 1;
        if (myWinglevel < level) {
            return false;
        }
        //是否有足够的材料
        var isAct = this.getGodWing(roleId).getLevel(slot);
        if (isAct) {
            //求下一阶材料
            level = this.getNextLevel(level);
            if (!level) {
                return false;
            }
        }
        var itemId = DataCenter.ins().FeatherDeityLevelConfig[level][slot].itemId;
        var gwconfig = DataCenter.ins().FeatherItemConfig[itemId];
        var totalSum = gwconfig.composeItem.count;
        var mySum = 0;
        var itemdata = backpackControl.getBagItemById(gwconfig.composeItem.id);
        if (itemdata) {
            mySum = itemdata.count;
        }
        //查看当前装备中是否有神羽 有则把自身拥有数量+1 (快速合成)
        var myLevel = this.getGodWing(roleId).getLevel(slot);
        if (myLevel) {
            var lcfg = DataCenter.ins().FeatherDeityLevelConfig[myLevel][slot];
            if (lcfg.itemId == gwconfig.composeItem.id) {
                mySum += 1;
            }
        }
        if (mySum >= totalSum) {
            return true;
        }
        return false;
    };
    /**
     * 当前部位仅判断是否有可合成神羽
     */
    FeatherControl.prototype.isComposeGodWingOnly = function (itemId) {
        var gwconfig = DataCenter.ins().FeatherItemConfig[itemId];
        var totalSum = gwconfig.composeItem.count;
        var mySum = 0;
        var itemdata = backpackControl.getBagItemById(gwconfig.composeItem.id);
        if (itemdata) {
            mySum = itemdata.count;
        }
        if (mySum >= totalSum) {
            return true;
        }
        return false;
    };
    /**
     * 判断合成页所有阶神羽是否可合成
     */
    FeatherControl.prototype.isComposeGodWingAll = function () {
        for (var k in DataCenter.ins().FeatherDeitySuitConfig) {
            var cfg = DataCenter.ins().FeatherDeitySuitConfig[k];
            for (var i = 1; i <= FeatherControl_1.GodWingMaxSlot; i++) {
                var glcfg = DataCenter.ins().FeatherDeityLevelConfig[cfg.lv][i];
                if (this.isComposeGodWingOnly(glcfg.itemId)) {
                    return true;
                }
            }
        }
        return false;
    };
    /**
     * 判断合成页某部位某阶神羽是否可合成
     */
    FeatherControl.prototype.isComposeGodWingLevel = function (lv, slot) {
        var glcfg = DataCenter.ins().FeatherDeityLevelConfig[lv][slot];
        return this.isComposeGodWingOnly(glcfg.itemId);
    };
    /**
     * 判断合成页某阶某部位神羽是否可合成
     */
    FeatherControl.prototype.isComposeGodWingSlot = function (lv, slot) {
        var cfg = DataCenter.ins().FeatherDeitySuitConfig[lv];
        var glcfg = DataCenter.ins().FeatherDeityLevelConfig[cfg.lv][slot];
        return this.isComposeGodWingOnly(glcfg.itemId);
    };
    /**
     * 是否有可合成神羽
     * @param type: 空值:是否可合成  1:是否可合成并且达到可装备条件
     */
    FeatherControl.prototype.isComposeGodWing = function (type) {
        //求出当前当前开启角色中所有的神羽部位数据
        var len = heroControl.subRolesLen;
        for (var i = 0; i < 3; i++) {
            var role = heroControl.getSubRoleByIndex(i);
            if (!role) {
                continue;
            }
            var slotData = this.calcGodWingSlot(i);
            //当前角色四个部位神羽数据
            for (var j = 0; j < slotData.length; j++) {
                var gl = DataCenter.ins().FeatherDeityLevelConfig[slotData[j].level][slotData[j].slot];
                //1情况判断此角色穿戴条件是否满足
                if (type) {
                    var myWinglevel = 0;
                    var wd = heroControl.getSubRoleByIndex(i).wingsData;
                    myWinglevel += wd.lv;
                    if (wd.openStatus) {
                        myWinglevel += 1;
                    }
                    if (myWinglevel < gl.level) {
                        continue;
                    }
                }
                var gwconfig = DataCenter.ins().FeatherItemConfig[gl.itemId];
                var itemId = gwconfig.composeItem.id;
                var itemData = backpackControl.getBagItemById(itemId);
                var totalSum = gwconfig.composeItem.count;
                var mySum = itemData ? itemData.count : 0;
                if (mySum >= totalSum) {
                    return true;
                }
            }
        }
        return false;
    };
    /**
     * 求出当前角色四个部位神羽数据
     */
    FeatherControl.prototype.calcGodWingSlot = function (roleId) {
        var slotData = [];
        for (var i = 1; i <= FeatherControl_1.GodWingMaxSlot; i++) {
            var lv = featherControl.getGodWing(roleId).getLevel(i);
            var tmp = { slot: 0, level: 0 };
            tmp.slot = i;
            if (!lv) {
                lv = this.getStartLevel(i);
            }
            tmp.level = lv;
            slotData.push(tmp);
        }
        return slotData;
    };
    /**
     * 获取表中某个部位最初神羽等级数据
     */
    FeatherControl.prototype.getStartLevel = function (slot) {
        for (var k in DataCenter.ins().FeatherDeityLevelConfig) {
            var gwconfig = DataCenter.ins().FeatherDeityLevelConfig[k];
            for (var j in gwconfig) {
                if (gwconfig[j].slot == slot) {
                    return gwconfig[j].level; //部位最初等级
                }
            }
        }
        return 0;
    };
    /**
     * 获取当前等级的上一级
     */
    FeatherControl.prototype.getPreLevel = function (curLevel) {
        var prelevel = 0;
        for (var k in DataCenter.ins().FeatherDeityLevelConfig) {
            if (!prelevel) {
                prelevel = Number(k);
                continue;
            }
            if (Number(k) == curLevel) {
                return prelevel;
            }
            prelevel = Number(k);
        }
        return prelevel;
    };
    /**
     * 获取当前等级的下一级
     */
    FeatherControl.prototype.getNextLevel = function (curLevel) {
        var keys = [];
        for (var i in DataCenter.ins().FeatherDeityLevelConfig) {
            keys.push(+i);
        }
        keys.sort(function (a, b) {
            return a < b ? -1 : 1;
        });
        for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
            var k = keys_1[_i];
            if (curLevel < k) {
                return k;
            }
        }
        return 0;
    };
    /**
     * 获取神羽部位名字
     */
    FeatherControl.prototype.getNameFromSlot = function (slot) {
        return LangMgr.getValueByKey("wingType" + slot);
    };
    /**
     * 获取神羽数据
     */
    FeatherControl.prototype.getGodWing = function (roleId) {
        if (!this.godWing[roleId]) {
            this.godWing[roleId] = new FeatherDeityVo();
        }
        return this.godWing[roleId];
    };
    FeatherControl.prototype.getGodWingItem = function () {
        var num = 0;
        for (var i = 0; i < heroControl.subRolesLen; i++) {
            var data = this.getGodWing(i);
            if (data && data.getData()) {
                num += CommonUtils.getObjectLength(data.getData());
            }
        }
        return num;
    };
    //**直升丹红点计算*/
    FeatherControl.prototype.checkDanRed = function () {
        var len = heroControl.subRolesLen;
        for (var i = 0; len > i; i++)
            if (this.checkDanRedByIndex(i))
                return true;
        return false;
    };
    //**直升丹红点计算*/
    FeatherControl.prototype.checkDanRedByIndex = function (rid) {
        var role = heroControl.getSubRoleByIndex(rid);
        if (!role || !role.wingsData.openStatus)
            return false;
        var upgreteItem = DataCenter.ins().FeatherCommonConfig.upgrateItem;
        for (var s = 0; s < upgreteItem.length; s++) {
            var itemId = upgreteItem[s];
            if (!backpackControl.isHideDanIcon(itemId)) {
                if (backpackControl.getBagGoodsCountById(BackpackControl.BAG_TYPE_OTHTER, itemId)
                    && role.wingsData.lv == DataCenter.ins().ItemConfig[itemId].useArg.maxLevel)
                    return true;
                break;
            }
        }
        return false;
    };
    FeatherControl.prototype.checkIsOpen = function () {
        if (heroControl.subRolesLen < 3) {
            return false;
        }
        var forgeOpenLv = DataCenter.ins().FeatherCommonConfig.forgeOpenLv;
        for (var i = 0; 3 > i; i++) {
            var role = heroControl.getSubRoleByIndex(i);
            if (role.wingsData.lv < forgeOpenLv) {
                return false;
            }
        }
        return true;
    };
    FeatherControl.prototype.checkRoleRed = function (roleId) {
        for (var i = 1; i <= featherControl.GodWingMaxSlot; i++) {
            if (this.checkSlotRed(roleId, i)) {
                return true;
            }
        }
        return false;
    };
    FeatherControl.prototype.checkSlotRed = function (roleId, slot) {
        var slotData = this.getGodWingForgeData(roleId).getSlotData(slot);
        if (!slotData.isTupo) {
            for (var key in DataCenter.ins().FeatherDeityForgeExtraLvConfig) {
                var godWingForgeExtraLvConfig = DataCenter.ins().FeatherDeityForgeExtraLvConfig[key];
                if (godWingForgeExtraLvConfig.forgeLvLimit == slotData.lv) {
                    var bagCount_1 = backpackControl.getBagGoodsCountById(0, DataCenter.ins().FeatherCommonConfig.forgeExtraItemId);
                    return bagCount_1 >= godWingForgeExtraLvConfig.cost;
                }
            }
        }
        var lv = slotData.lv + 1;
        var godWingForgeLvConfig = DataCenter.ins().FeatherDeityForgeLvConfig[lv];
        if (!godWingForgeLvConfig) {
            return false;
        }
        var bagCount = backpackControl.getBagGoodsCountById(0, DataCenter.ins().FeatherCommonConfig.forgeItemId);
        return bagCount >= godWingForgeLvConfig.cost;
    };
    FeatherControl.prototype.checkIsCanTupo = function (lv) {
        for (var key in DataCenter.ins().FeatherDeityForgeExtraLvConfig) {
            var godWingForgeExtraLvConfig = DataCenter.ins().FeatherDeityForgeExtraLvConfig[key];
            if (godWingForgeExtraLvConfig.forgeLvLimit == lv) {
                return true;
            }
        }
        return false;
    };
    /**
     * 下发所有仙炼数据
     * 6-13
     * down
     */
    FeatherControl.prototype.downAllForge = function (datas) {
        for (var i = 0; datas.length > i; i++) {
            var godWingForgeData = new FeatherDeityForgeVo;
            godWingForgeData.parse(datas[i]);
            this.godWingForge[godWingForgeData.roleId] = godWingForgeData;
        }
        EventMgr.ins().dispatch(719 /* FEATHER_FORGE_DATA */);
    };
    /**
     * 仙炼升级
     * 6-14
     * up
     */
    FeatherControl.prototype.upForge = function (roleId, slot) {
        return [roleId, slot];
    };
    /**
     * 仙炼升级下行
     * 6-14
     * down
     */
    FeatherControl.prototype.downItemForge = function (roleId, slot, lv, isTupo) {
        var godWingForgeItem = this.getGodWingForgeData(roleId).getSlotData(slot);
        godWingForgeItem.lv = lv;
        godWingForgeItem.isTupo = isTupo;
        EventMgr.ins().dispatch(720 /* FEATHER_FORGE_ITEM */);
        return godWingForgeItem;
    };
    FeatherControl.prototype.getGodWingForgeData = function (roleId) {
        var godWingForgeData = this.godWingForge[roleId];
        if (!godWingForgeData) {
            godWingForgeData = new FeatherDeityForgeVo;
            godWingForgeData.roleId = roleId;
            this.godWingForge[roleId] = godWingForgeData;
        }
        return godWingForgeData;
    };
    FeatherControl.prototype.getSkillLv = function (roleId) {
        var godWingForgeData = this.getGodWingForgeData(roleId);
        var maxNum = Number.MAX_VALUE;
        for (var i = 1; i <= FeatherControl_1.GodWingMaxSlot; i++) {
            var godWingForgeItem = godWingForgeData.getSlotData(i);
            var level = this.getStarData(godWingForgeItem.lv, godWingForgeItem.isTupo).level;
            maxNum = Math.min(maxNum, level);
        }
        return maxNum;
    };
    FeatherControl.prototype.getStarData = function (lv, isTupo) {
        40;
        var level = 0;
        var star = 0;
        if (isTupo && lv % 10 == 0 && 0 != lv) {
            level = Math.floor(lv / 10) - 1;
            star = 10;
        }
        else {
            level = Math.floor(lv / 10);
            star = lv % 10;
            var max = DataCenter.ins().FeatherDeityForgeLvConfig[lv + 1];
            if (!max) {
                level = Math.floor(lv / 10) - 1;
                star = 10;
            }
        }
        return { level: level, star: star };
    };
    FeatherControl.WingExpRedPoint = 3;
    FeatherControl.GodWingMaxSlot = 4;
    FeatherControl.hint = true;
    __decorate([
        up(2, [2 /* Short */, 1 /* Byte */])
    ], FeatherControl.prototype, "upBoost", null);
    __decorate([
        up(3, [2 /* Short */])
    ], FeatherControl.prototype, "upUpgrade", null);
    __decorate([
        up(4, [2 /* Short */])
    ], FeatherControl.prototype, "upActivate", null);
    __decorate([
        up(12, [3 /* Int */])
    ], FeatherControl.prototype, "upBigUpLevel", null);
    __decorate([
        down(1, [2 /* Short */].concat(ByteConst.FeatherVos))
    ], FeatherControl.prototype, "downUpDataWing", null);
    __decorate([
        down(2, [2 /* Short */, 3 /* Int */, 6 /* UInt */, 3 /* Int */, 6 /* UInt */, 2 /* Short */])
    ], FeatherControl.prototype, "downBoost", null);
    __decorate([
        down(4, [2 /* Short */, 3 /* Int */])
    ], FeatherControl.prototype, "downActivate", null);
    __decorate([
        up(3, [2 /* Short */, 3 /* Int */])
    ], FeatherControl.prototype, "upWingWear", null);
    __decorate([
        down(3, [0 /* Boolean */])
    ], FeatherControl.prototype, "downWingWear", null);
    __decorate([
        down(5, [2 /* Short */, [2 /* Short */, 3 /* Int */]])
    ], FeatherControl.prototype, "downGodWingData", null);
    __decorate([
        up(8, [1 /* Byte */, 1 /* Byte */])
    ], FeatherControl.prototype, "upUseDan", null);
    __decorate([
        down(8, [1 /* Byte */, 1 /* Byte */, 2 /* Short */])
    ], FeatherControl.prototype, "downUseDanSuccess", null);
    __decorate([
        up(6, [2 /* Short */, 3 /* Int */, 3 /* Int */])
    ], FeatherControl.prototype, "upWingCompose", null);
    __decorate([
        up(7, [3 /* Int */, 3 /* Int */])
    ], FeatherControl.prototype, "upResetGodWing", null);
    __decorate([
        down(13, [[1 /* Byte */, [3 /* Int */, 1 /* Byte */]]])
    ], FeatherControl.prototype, "downAllForge", null);
    __decorate([
        up(14, [1 /* Byte */, 1 /* Byte */])
    ], FeatherControl.prototype, "upForge", null);
    __decorate([
        down(14, [1 /* Byte */, 1 /* Byte */, 3 /* Int */, 1 /* Byte */])
    ], FeatherControl.prototype, "downItemForge", null);
    FeatherControl = FeatherControl_1 = __decorate([
        protocolsId(6 /* PROTOCOL_6 */)
    ], FeatherControl);
    return FeatherControl;
    var FeatherControl_1;
}(BaseSystem));
__reflect(FeatherControl.prototype, "FeatherControl");
var FeatherVo = (function () {
    function FeatherVo() {
        this.openStatus = 0; //是否激活（0未，1已）
        this.clearTime = 0;
        this.aptitudeDan = 0; //资质丹
        this.flyUpDan = 0; //飞升丹
    }
    FeatherVo.prototype.init = function (datas) {
        this.parserBoost(datas[0], datas[1]);
        this.parserOpenStatus(datas[2]);
        this.parserClearTime(datas[3]);
        this.parserDans(datas[4], datas[5]);
    };
    FeatherVo.prototype.parserBoost = function (lv, exp) {
        this.lv = lv;
        this.exp = exp;
    };
    FeatherVo.prototype.parserOpenStatus = function (openStatus) {
        this.openStatus = openStatus;
    };
    FeatherVo.prototype.parserClearTime = function (clearTime) {
        this.clearTime = clearTime;
    };
    /**
     * 飞升丹和资质丹
     */
    FeatherVo.prototype.parserDans = function (aptitudeDan, flyUpDan) {
        this.aptitudeDan = aptitudeDan;
        this.flyUpDan = flyUpDan;
    };
    FeatherVo.prototype.getImgSource = function () {
        if (this.lv > FeatherControl.WingMaxLv || this.lv < 0)
            return "";
        return DataCenter.ins().FeatherLevelConfig[this.lv].appearance + "_png";
    };
    FeatherVo.getWingAllLevel = function () {
        var sumlevel = 0;
        var len = heroControl.subRolesLen;
        for (var i = 0; i < len; i++) {
            var data = heroControl.getSubRoleByIndex(i).wingsData;
            sumlevel += data.lv;
            if (data.openStatus) {
                sumlevel += 1;
            }
        }
        return sumlevel;
    };
    return FeatherVo;
}());
__reflect(FeatherVo.prototype, "FeatherVo");
/**
 * 羽翼资质
 */
var FeatherAptitudesTipsView = (function (_super) {
    __extends(FeatherAptitudesTipsView, _super);
    function FeatherAptitudesTipsView() {
        var _this = _super.call(this) || this;
        _this._curRole = 0;
        _this.skinName = "FeatherAptitudesTipsViewSkin";
        _this.isTopLevel = true;
        _this.itemImg.source = "200238_png";
        _this.itemIcon.source = "200238_png";
        return _this;
    }
    FeatherAptitudesTipsView.prototype.open = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this._curRole = args[0];
        this.addCustomEvent(266 /* BACKPACK_ITEM_ADD */, this.itemChange);
        this.addCustomEvent(267 /* BACKPACK_ITEM_CHANGE */, this.itemChange);
        this.addCustomEvent(268 /* BACKPACK_ITEM_DEL */, this.itemChange);
        this.addCustomEvent(210 /* FEATHER_USE_DAN */, this.update);
        this.addCustomEvent(206 /* FEATHER_UPGRADE */, this.update);
        this.addEventTouchTap(this, this.onTouch);
        this.update();
    };
    FeatherAptitudesTipsView.prototype.close = function () {
        this.removeCustomEvents();
        this.removeEventTouchTap(this, this.onTouch);
    };
    FeatherAptitudesTipsView.prototype.update = function () {
        var role = heroControl.getSubRoleByIndex(this._curRole);
        var cfg = DataCenter.ins().FeatherLevelConfig[role.wingsData.lv];
        this.wingName.text = cfg.name;
        this.zizhiLv.text = role.wingsData.aptitudeDan + LangMgr.getValueByKey('numberLevel', '');
        this.career.text = RoleModel.getJobNameByJob(role.job);
        var maxNum = cfg.attrPill;
        if (role.wingsData.aptitudeDan >= maxNum) {
            this.currentState = "maxLv";
        }
        else {
            var itemData = backpackControl.getBagItemById(DataCenter.ins().FeatherCommonConfig.attrPillId);
            var num = itemData ? itemData.count : 0;
            this.currentState = num ? "normal" : "noitem";
        }
        this.updateAttrs();
    };
    FeatherAptitudesTipsView.prototype.updateAttrs = function () {
        //增加属性
        var role = heroControl.getSubRoleByIndex(this._curRole);
        var attrs = DataCenter.ins().FeatherCommonConfig.attrPill;
        var len = attrs.length;
        var pAttr = [];
        var attData;
        for (var i = 1; i <= 4; i++) {
            this["attr" + i].text = "";
            this["attr" + i + "NextLv"].text = "";
            if (i <= len) {
                attData = attrs[i - 1];
                this["attr" + i].text = AttributeData.getAttrStrByType(attData.type) + ": +" + (attData.value * role.wingsData.aptitudeDan);
                pAttr.push(new AttributeData(attData.type, attData.value * role.wingsData.aptitudeDan));
                if (this.currentState == "normal") {
                    this["attr" + i + "NextLv"].text = "+" + (attrs[i - 1].value * (role.wingsData.aptitudeDan + 1));
                }
            }
        }
        this.powerPanel.setPower(BackpackControl.getAttrPower(pAttr));
    };
    FeatherAptitudesTipsView.prototype.itemChange = function () {
        if (this.currentState == "maxLv") {
            return;
        }
        var itemData = backpackControl.getBagItemById(DataCenter.ins().FeatherCommonConfig.attrPillId);
        var num = itemData ? itemData.count : 0;
        var stateChange;
        if (num) {
            stateChange = this.currentState != "normal";
            this.currentState = "normal";
        }
        else {
            stateChange = this.currentState != "noitem";
            this.currentState = "noitem";
        }
        if (stateChange) {
            this.updateAttrs();
        }
    };
    FeatherAptitudesTipsView.prototype.onTouch = function (e) {
        switch (e.target) {
            case this.bgClose:
                UIMgr.ins().close(this);
                break;
            case this.updateBtn:
                featherControl.upUseDan(this._curRole, 0);
                break;
        }
    };
    return FeatherAptitudesTipsView;
}(BaseEuiView));
__reflect(FeatherAptitudesTipsView.prototype, "FeatherAptitudesTipsView");
var FeatherHintView = (function (_super) {
    __extends(FeatherHintView, _super);
    function FeatherHintView() {
        var _this = _super.call(this) || this;
        _this.isTopLevel = true;
        _this.uilayer = GameLayer.POPUP;
        return _this;
    }
    FeatherHintView.prototype.initUI = function () {
        _super.prototype.initUI.call(this);
        this.skinName = "FeatherHintViewSkin";
    };
    FeatherHintView.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.type = param[0];
        this.index = param[1];
        this.data = param[2];
        this.addEventTouchTap(this.closeBtn, this.onClick);
        if (this.fgClose) {
            this.addEventTouchTap(this.fgClose, this.onClick);
        }
        this.addEventTouchTap(this.up, this.onClick);
        this.addEventTouchTap(this.BG, this.onClick);
        this.lastTimeDown = Math.floor((DateUtils.formatMiniDateTime(this.data.clearTime) - GameServer.serverTime) / 1000);
        this.lastTimeDown = (DateUtils.formatMiniDateTime(this.data.clearTime) - GameServer.serverTime) / 1000;
        this.lastTimeDown = Math.max(0, this.lastTimeDown);
        this.desc.textFlow = TextUtils.generateTextFlow(LangMgr.getValueByKey('roleTips8', this.data.exp, DateUtils.getFormatBySecond(this.lastTimeDown, 1)));
    };
    FeatherHintView.prototype.close = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.removeEventTouchTap(this.closeBtn, this.onClick);
        this.removeEventTouchTap(this.up, this.onClick);
        this.removeEventTouchTap(this.BG, this.onClick);
    };
    FeatherHintView.prototype.onClick = function (e) {
        UIMgr.ins().close(this);
        switch (e.currentTarget) {
            case this.closeBtn:
                if (this.type == 1) {
                    var view = UIMgr.ins().getView("RoleView");
                    view.setTabSelectedIndex(this.index);
                }
                else if (this.type == 2) {
                    UIMgr.ins().close("RoleView");
                }
                break;
        }
        FeatherControl.hint = !this.nextHint.selected;
    };
    return FeatherHintView;
}(BaseEuiView));
__reflect(FeatherHintView.prototype, "FeatherHintView");
/**
 * 羽翼
 */
var FeatherPanel = (function (_super) {
    __extends(FeatherPanel, _super);
    function FeatherPanel() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.barbc = new ProgressBarEff();
        _this.curRole = 0;
        _this._lastLv = 0;
        _this._isAutoUp = false;
        _this.currViewNum = 0;
        _this.lastTimeDown = 0;
        _this.rapetNum = 0;
        return _this;
    }
    FeatherPanel.prototype.childrenCreated = function () {
        this.init();
    };
    FeatherPanel.prototype.init = function () {
        this.boostPrice1.setType(5 /* TYPE_5 */);
        this.barbc.setWidth(525);
        this.barbc.x = 10;
        this.barbc.y = -37;
        this.skillGroup.addChild(this.barbc);
        this.mc = new GameMovieClip;
        this.mc.x = 214;
        this.mc.y = 245;
        this.wingImg.touchEnabled = false;
        this.reliveEff = new GameMovieClip();
        this.reliveEff.scaleX = 1;
        this.reliveEff.scaleY = 1;
        this.skillIconArr = [];
        for (var i = 0; i < 5; i++) {
            this.skillIconArr[i] = this["itemicon" + i];
        }
        this.danItemID = DataCenter.ins().FeatherCommonConfig.levelItemid;
    };
    FeatherPanel.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.addEventTouchTap(this.openStatusBtn, this.onTap);
        this.addEventTouchTap(this.boostBtn1, this.onTap);
        this.addEventTouchTap(this.checkBoxs, this.isShowUpGradeBtn);
        this.addEventTouchTap(this.rightBtn, this.onTap);
        this.addEventTouchTap(this.leftBtn, this.onTap);
        this.addEventTouchTap(this.bigUpLevelBtn, this.onTap);
        this.addEventTouchTap(this.boostBtn0, this.onTap);
        this.addEventTouchTap(this.shenyu, this.onTap);
        this.addEventTouchTap(this.feishengBtn, this.onTap);
        this.addEventTouchTap(this.zizhiBtn, this.onTap);
        for (var i = 0; i < 5; i++) {
            this.addEventTouchTap(this.skillIconArr[i], this.skillItemClick);
        }
        this.addCustomEvent(580 /* FEATHER_BOOST */, this.showBoost);
        this.addCustomEvent(206 /* FEATHER_UPGRADE */, this.updateLevel);
        this.addCustomEvent(208 /* FEATHER_ACT */, this.setWingData);
        this.addCustomEvent(581 /* FEATHER_TIME */, this.setTimeDown);
        this.addCustomEvent(267 /* BACKPACK_ITEM_CHANGE */, this.isShowUpGradeBtn); //道具变更
        this.addCustomEvent(266 /* BACKPACK_ITEM_ADD */, this.isShowUpGradeBtn); //道具添加
        this.addCustomEvent(268 /* BACKPACK_ITEM_DEL */, this.isShowUpGradeBtn); //道具删除
        this.addCustomEvent(582 /* FEATHER_DEITY_RED */, this.updateRedPoint); //神羽红点
        this.addCustomEvent(210 /* FEATHER_USE_DAN */, this.setWingData); //使用飞升丹或资质丹
        this.barbc.reset();
        this.setWingData();
        this.updateLevel();
        this.updateRedPoint();
        this.upBtn.open(DataCenter.ins().FeatherCommonConfig.upgrateItem, this.curRole);
    };
    FeatherPanel.prototype.close = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.removeEventTouchTap(this.openStatusBtn, this.onTap);
        this.removeEventTouchTap(this.boostBtn1, this.onTap);
        this.removeEventTouchTap(this.checkBoxs, this.isShowUpGradeBtn);
        this.removeEventTouchTap(this.rightBtn, this.onTap);
        this.removeEventTouchTap(this.leftBtn, this.onTap);
        this.removeEventTouchTap(this.boostBtn0, this.onTap);
        this.removeEventTouchTap(this.bigUpLevelBtn, this.onTap);
        this.removeEventTouchTap(this.shenyu, this.onTap);
        this.removeEventTouchTap(this.feishengBtn, this.onTap);
        this.removeEventTouchTap(this.zizhiBtn, this.onTap);
        for (var i = 0; i < 5; i++) {
            this.removeEventTouchTap(this.skillIconArr[i], this.skillItemClick);
        }
        TimerMgr.ins().remove(this.autoUpStar, this);
        this.removeCustomEvents();
        if (this._isAutoUp) {
            this.stopAutoUp();
        }
        TimerMgr.ins().remove(this.refushTimeLabel, this);
        this.upBtn.close();
    };
    FeatherPanel.prototype.updateLevel = function () {
        var wingSkills = heroControl.getSubRoleByIndex(this.curRole).wingSkillData;
        var curIndex = 0;
        for (var i = 0; i < 5; i++) {
            if (wingSkills[i] && wingSkills[i] > 0) {
                this.skillIconArr[i].data = wingSkills[i];
                this["openTxt" + i].text = "";
                curIndex = i + 1;
            }
            else {
                var level = featherControl.getLevelBySkill(i);
                this["openTxt" + i].text = LangMgr.getValueByKey('wingOpen', level + 1);
                var cfg = DataCenter.ins().FeatherLevelConfig[level];
                if (cfg && cfg.pasSkillId) {
                    this.skillIconArr[i].data = cfg.pasSkillId;
                    this.skillIconArr[i].blackImg.visible = true;
                }
            }
        }
        //下一级预览
        if (curIndex < 5) {
            var icon = void 0;
            var wingConfig = DataCenter.ins().FeatherLevelConfig;
            var idx = 0;
            for (var k in wingConfig) {
                var cfg = wingConfig[k];
                if (cfg && cfg.pasSkillId) {
                    icon = cfg.pasSkillId;
                    if (idx == curIndex)
                        break;
                    idx++;
                }
            }
            if (icon) {
                this.skillIconArr[curIndex].data = icon;
                this.skillIconArr[curIndex].blackImg.visible = true;
            }
        }
        if (this._isAutoUp) {
            this.stopAutoUp();
        }
        this.setWingData();
    };
    /**
     * 刷新飞升丹和资质丹
     */
    FeatherPanel.prototype.updateDans = function () {
        this.redPoint1.visible = featherControl.canUseFlyUpByRoleID(this.curRole);
        this.redPoint2.visible = featherControl.canUseAptitudeByRoleID(this.curRole);
    };
    FeatherPanel.prototype.onTap = function (e) {
        var _this = this;
        switch (e.currentTarget) {
            case this.openStatusBtn:
                if (ActorControl.level >= DataCenter.ins().FeatherCommonConfig.openLevel) {
                    this.showOpenMovie();
                }
                else {
                    tipsControl.showTips(LangMgr.getValueByKey('wingNoActivity'));
                }
                break;
            case this.boostBtn1:
                if (this._isAutoUp) {
                    this.stopAutoUp();
                }
                this.autoUpStar();
                break;
            case this.rightBtn:
                this.currViewNum++;
                this.setSeeBtnStatu();
                this.setWingView(this.currViewNum);
                break;
            case this.leftBtn:
                this.currViewNum--;
                this.setSeeBtnStatu();
                this.setWingView(this.currViewNum);
                break;
            case this.boostBtn0:
                if (this.boostBtn0.label == LangMgr.getValueByKey('wingStop')) {
                    if (this._isAutoUp) {
                        this.stopAutoUp();
                    }
                }
                else {
                    this._isAutoUp = true;
                    this.boostBtn0.label = LangMgr.getValueByKey('wingStop');
                    TimerMgr.ins().doTimer(150, 0, this.autoUpStar, this);
                }
                break;
            case this.bigUpLevelBtn:
                var itemName = DataCenter.ins().ItemConfig[this.danItemID].name;
                warnControl.show(LangMgr.getValueByKey('wingUpdate', itemName, DataCenter.ins().ItemConfig[this.danItemID].desc), function () {
                    featherControl.upBigUpLevel(_this.curRole);
                }, this);
                break;
            case this.shenyu:
                UIMgr.ins().open(FeatherDeityView);
                break;
            case this.feishengBtn:
                UIMgr.ins().open(FeatherSoaringTipsView, this.curRole);
                break;
            case this.zizhiBtn:
                UIMgr.ins().open(FeatherAptitudesTipsView, this.curRole);
                break;
        }
    };
    FeatherPanel.prototype.skillItemClick = function (e) {
        var index = this.skillIconArr.indexOf(e.currentTarget);
        if (index >= 0) {
            if (!this.skillIconArr[index].skillIcon.visible) {
                return;
            }
            UIMgr.ins().open(FeatherSkillTipsView, featherControl.getWingSkillByIndex(index), index, this.curRole);
        }
    };
    FeatherPanel.prototype.stopAutoUp = function () {
        this._isAutoUp = false;
        this.boostBtn0.label = LangMgr.getValueByKey('wingOneKeyUpdate');
        TimerMgr.ins().remove(this.autoUpStar, this);
    };
    FeatherPanel.prototype.autoUpStar = function () {
        var config = DataCenter.ins().FeatherLevelConfig[this._wingsData.lv];
        var count = backpackControl.getBagGoodsCountById(0, config.itemId);
        if (count >= config.itemNum) {
            featherControl.upBoost(this.curRole, 0);
        }
        else if (this.checkBoxs.selected) {
            if (ActorControl.yb >= config.itemNum * config.itemPrice) {
                featherControl.upBoost(this.curRole, 1);
            }
            else {
                this.stopAutoUp();
            }
        }
        else {
            this.stopAutoUp();
            tipsControl.showTips(LangMgr.getValueByKey('wingAutoUpdate'));
        }
    };
    /**
     * 未激活
     */
    FeatherPanel.prototype.notOpenStatus = function () {
        this.expGroup.visible = false;
        this.skillGroup.visible = false;
        this.barbc.visible = false;
        this.boostBtn0.visible = false;
        this.boostBtn1.visible = false;
        this.boostPrice1.visible = false;
        this.powerPanel.visible = false;
        this.openStatusBtn.visible = true;
        this.rightBtn.visible = false;
        this.leftBtn.visible = false;
        this.jihuo.visible = false;
        this.weijihuo.visible = true;
        this.wing.visible = true;
        this.dor1.x = 2;
        this.dor2.x = 558;
        this.shan.visible = false;
        var flag = DataCenter.ins().FeatherCommonConfig.openLevel > ActorControl.level;
        this.jihuolv.visible = flag;
        this.jihuolv.text = LangMgr.getValueByKey('tipsOpenLevel', DataCenter.ins().FeatherCommonConfig.openLevel);
        this.bigUpLevelBtn.visible = this.redPoint.visible = false;
        if (!flag) {
            this.reliveEff.playFile(PATH_EFF + "chargeff1", -1);
            this.openStatusBtn.addChild(this.reliveEff);
            this.reliveEff.x = this.openStatusBtn.width / 2;
            this.reliveEff.y = this.openStatusBtn.height / 2;
        }
    };
    /**
     * 已激活
     */
    FeatherPanel.prototype.openStatusOpen = function () {
        this.skillGroup.visible = true;
        this.openStatusBtn.visible = false;
        this.barbc.visible = true;
        this.boostBtn0.visible = true;
        this.boostBtn1.visible = true;
        this.powerPanel.visible = true;
        this.rightBtn.visible = true;
        this.leftBtn.visible = true;
        this.jihuo.visible = true;
        this.weijihuo.visible = false;
        this.bigUpLevelBtn.visible = true;
        if (this._wingsData.lv >= FeatherControl.WingMaxLv) {
            //最高级
            this.arrows.visible = false;
            this.nextAttrLabel.text = "";
            this.attrLabel.horizontalCenter = 0;
            this.expGroup.visible = false;
            this.maxInfo.visible = true;
        }
        else {
            //不是最高级
            this.arrows.visible = true;
            this.attrLabel.horizontalCenter = -100;
            this.expGroup.visible = true;
            this.maxInfo.visible = false;
        }
        this.redPoint.visible = this.bigUpLevelBtn.visible && this._wingsData.lv == FeatherControl.WingExpRedPoint;
    };
    /**
     * 培养表现
     * @param crit 暴击（1=不暴击，2=两倍暴击，以此类推）
     * @param addExp 增加的经验
     */
    FeatherPanel.prototype.showBoost = function (param) {
        var _this = this;
        var crit = param[0];
        var addExp = param[1];
        var label = new eui.Label;
        label.size = 20;
        var str = "";
        label.textColor = ColorUtils.GREEN;
        str = LangMgr.getValueByKey('wingExpAdd');
        label.x = 225;
        label.y = 326;
        label.text = str + addExp;
        this.addChild(label);
        var t = egret.Tween.get(label);
        t.to({ "y": label.y - 45 }, 500).call(function () {
            _this.removeChild(label);
        }, this);
        if (crit && (crit == 2 || crit == 5)) {
            var img_1 = new eui.Image("xn_wingup" + crit);
            img_1.horizontalCenter = 0;
            img_1.verticalCenter = 0;
            img_1.scaleX = img_1.scaleY = 0.5;
            var t_1 = egret.Tween.get(img_1);
            t_1.to({ "scaleX": 1.5, "scaleY": 1.5, "alpha": 0 }, 500).call(function () {
                DisplayUtils.removeFromParent(img_1);
            }, this);
            this.actEff.addChild(img_1);
        }
        this.expBarChange();
        this.updateAtt();
        this.isShowUpGradeBtn();
    };
    FeatherPanel.prototype.setWingView = function (lv) {
        this.updateDans();
        if (lv > FeatherControl.WingMaxLv || lv < 0) {
            return;
        }
        var tempConfig = DataCenter.ins().FeatherLevelConfig[lv];
        this.wingImg.source = tempConfig.appearance + "_png";
        this.nameTxt.text = tempConfig.name;
    };
    FeatherPanel.prototype.setWingData = function () {
        this._wingsData = heroControl.getSubRoleByIndex(this.curRole).wingsData;
        this.wingImg.source = this._wingsData.getImgSource();
        this.currViewNum = this._wingsData.lv;
        this.setSeeBtnStatu();
        var cfg = DataCenter.ins().FeatherLevelConfig[this._wingsData.lv];
        this.nameTxt.text = cfg.name;
        this.updateDans();
        if (this._wingsData.openStatus) {
            this.openStatusOpen();
        }
        else {
            this.notOpenStatus();
            return;
        }
        this.expBarChange();
        this.updateAtt();
        this.isShowUpGradeBtn();
        this.setTimeDown();
        if (this._lastLv == 0)
            this._lastLv = this._wingsData.lv;
        if (this._lastLv != this._wingsData.lv) {
            this._lastLv = this._wingsData.lv;
        }
    };
    FeatherPanel.prototype.setSeeBtnStatu = function () {
        if (this.currViewNum >= FeatherControl.WingMaxLv || this.currViewNum >= this._wingsData.lv + 1) {
            this.rightBtn.enabled = false;
            this.leftBtn.enabled = true;
        }
        else if (this.currViewNum <= 0) {
            this.leftBtn.enabled = false;
            this.rightBtn.enabled = true;
        }
        else {
            this.leftBtn.enabled = true;
            this.rightBtn.enabled = true;
        }
    };
    FeatherPanel.prototype.setTimeDown = function () {
        var config = DataCenter.ins().FeatherLevelConfig[this._wingsData.lv];
        if (!config) {
            return;
        }
        TimerMgr.ins().remove(this.refushTimeLabel, this);
        if (config.clearTime) {
            this.clearGroup.visible = true;
            if (this._wingsData.clearTime > 0) {
                this.lastTime.text = LangMgr.getValueByKey('expHaveTime', '');
                this.lastTimeDown = Math.floor((DateUtils.formatMiniDateTime(this._wingsData.clearTime) - GameServer.serverTime) / 1000);
                this.lastTimeDown = Math.max(0, this.lastTimeDown);
                this.timeLabel.text = DateUtils.getFormatBySecond(this.lastTimeDown, 1);
                TimerMgr.ins().remove(this.refushTimeLabel, this);
                TimerMgr.ins().doTimer(1000, this.lastTimeDown, this.refushTimeLabel, this);
            }
            else {
                this.lastTime.text = "";
                this.timeLabel.text = "";
                TimerMgr.ins().remove(this.refushTimeLabel, this);
            }
        }
        else {
            this.clearGroup.visible = false;
        }
        this.noclean.visible = !this.clearGroup.visible;
    };
    FeatherPanel.prototype.refushTimeLabel = function () {
        if (this.lastTimeDown > 0) {
            --this.lastTimeDown;
            this.timeLabel.text = DateUtils.getFormatBySecond(this.lastTimeDown, 1);
        }
    };
    FeatherPanel.prototype.updateAtt = function () {
        var config = DataCenter.ins().FeatherLevelConfig[this._wingsData.lv];
        var nextLvConfig = DataCenter.ins().FeatherLevelConfig[this._wingsData.lv + 1];
        var power = 0;
        this._totalPower = BackpackControl.getAttrPower(config.attr);
        var addAttrs = this.getDanAttrs(this._wingsData.lv);
        this._totalPower += BackpackControl.getAttrPower(addAttrs);
        this.attrLabel.text = AttributeData.getAttStr(AttributeData.AttrAddition(addAttrs, config.attr), 1);
        if (this._wingsData && this._wingsData.exp && nextLvConfig) {
            var tempAttr = [];
            var attr = nextLvConfig.attr;
            var configPercent = DataCenter.ins().FeatherCommonConfig.tempattr ? DataCenter.ins().FeatherCommonConfig.tempattr : 1;
            for (var index = 0; index < attr.length; index++) {
                var attrs = new AttributeData;
                attrs.type = attr[index].type;
                attrs.value = Math.ceil((this._wingsData.exp / config.exp) * (configPercent * attr[index].value));
                tempAttr.push(attrs);
            }
            this.attrTempLabel.text = AttributeData.getAttStr(tempAttr, 1, 1, LangMgr.getValueByKey('wingCur'), false, false, null, "）");
            power = BackpackControl.getAttrPower(tempAttr);
            this.attrGroup.horizontalCenter = -143;
        }
        else {
            this.attrTempLabel.text = "";
            this.attrGroup.horizontalCenter = -100;
        }
        this._totalPower = this._totalPower + power;
        this.powerPanel.setPower(this._totalPower);
        if (this._wingsData.lv < FeatherControl.WingMaxLv) {
            this.nextAttrLabel.text = AttributeData.getAttStr(AttributeData.AttrAddition(addAttrs, nextLvConfig.attr), 1);
        }
    };
    /**
     * 资质丹和飞升丹增加的属性
     */
    FeatherPanel.prototype.getDanAttrs = function (lv) {
        var role = heroControl.getSubRoleByIndex(this.curRole);
        var config = DataCenter.ins().FeatherLevelConfig[lv];
        var len = config.attr.length;
        var pAttr = [];
        for (var i = 0; i < len; i++) {
            pAttr.push(new AttributeData(config.attr[i].type, Math.floor(config.attr[i].value * DataCenter.ins().FeatherCommonConfig.flyPill / 10000 * role.wingsData.flyUpDan)));
        }
        var attrs = DataCenter.ins().FeatherCommonConfig.attrPill;
        len = attrs.length;
        for (var i = 0; i < len; i++) {
            pAttr.push(new AttributeData(attrs[i].type, attrs[i].value * role.wingsData.aptitudeDan));
        }
        attrs = DataCenter.ins().FeatherCommonConfig.flyPillAttr;
        len = attrs.length;
        for (var i = 0; i < len; i++) {
            pAttr.push(new AttributeData(attrs[i].type, attrs[i].value * role.wingsData.flyUpDan));
        }
        return pAttr;
    };
    FeatherPanel.prototype.expBarChange = function () {
        var starConfig = DataCenter.ins().FeatherLevelConfig[this._wingsData.lv];
        var maxExp = starConfig.exp;
        if (this.barbc.getMaxValue() != maxExp) {
            this.barbc.setData(this._wingsData.exp, maxExp);
        }
        else {
            this.barbc.setValue(this._wingsData.exp);
        }
    };
    FeatherPanel.prototype.isShowUpGradeBtn = function () {
        this.updateDans();
        if (this._wingsData.lv >= FeatherControl.WingMaxLv) {
            return;
        }
        var config = DataCenter.ins().FeatherLevelConfig[this._wingsData.lv];
        if (this._wingsData.lv >= FeatherControl.WingMaxLv) {
            this.boostBtn1.visible = false;
            this.boostPrice1.visible = false;
            this.bigUpLevelBtn.visible = false;
        }
        else {
            this.boostBtn1.visible = true;
            this.boostPrice1.visible = true;
            var count = backpackControl.getBagGoodsCountById(0, this.danItemID);
            this.bigUpLevelBtn.visible = count > 0;
            var itemData = backpackControl.getBagItemById(config.itemId);
            if (itemData) {
                if (itemData.count < config.itemNum && this.checkBoxs.selected) {
                    this.boostPrice1.setType(2 /* TYPE_2 */);
                    this.boostPrice1.setPrice(config.itemPrice * config.itemNum, ActorControl.yb);
                }
                else {
                    this.boostPrice1.setType(5 /* TYPE_5 */);
                    this.boostPrice1.setPrice(config.itemNum, itemData.count);
                }
            }
            else {
                if (this.checkBoxs.selected) {
                    this.boostPrice1.setType(2 /* TYPE_2 */);
                    this.boostPrice1.setPrice(config.itemPrice * config.itemNum, ActorControl.yb);
                }
                else {
                    this.boostPrice1.setType(5 /* TYPE_5 */);
                    this.boostPrice1.setPrice(config.itemNum, 0);
                }
            }
        }
        this.redPoint.visible = this.bigUpLevelBtn.visible && this._wingsData.lv == FeatherControl.WingExpRedPoint;
    };
    FeatherPanel.prototype.showOpenMovie = function () {
        var _this = this;
        StageUtils.ins().setTouchChildren(false);
        DisplayUtils.removeFromParent(this.reliveEff);
        this.openStatusBtn.visible = false;
        if (!this.flyUpEffect) {
            this.flyUpEffect = new GameMovieClip();
            this.flyUpEffect.x = this.wingeff.width / 2;
            this.flyUpEffect.y = this.wingeff.height / 2;
        }
        this.wingeff.addChild(this.flyUpEffect);
        this.flyUpEffect.playFile(PATH_EFF + "functionopeneff", -1);
        var masksp = new egret.Sprite();
        var square = new egret.Shape();
        square.graphics.beginFill(LangMgr.getColor('color39'));
        square.graphics.drawRect(0, 0, 300, 300);
        square.graphics.endFill();
        masksp.anchorOffsetX = 0;
        masksp.anchorOffsetY = 0;
        masksp.addChild(square);
        this.wingeff.addChild(masksp);
        masksp.y = 300;
        this.flyUpEffect.mask = masksp;
        var tween0 = egret.Tween.get(masksp);
        tween0.to({ "y": 0 }, 1500).call(function () {
            egret.Tween.removeTweens(_this.flyUpEffect);
            _this.flyUpEffect.visible = false;
            _this.wingeff.removeChild(masksp);
            _this.wingeff.removeChild(_this.flyUpEffect);
            _this.flowReckEffect();
        });
    };
    FeatherPanel.prototype.flowReckEffect = function () {
        var _this = this;
        if (!this.openEffect) {
            this.openEffect = new GameMovieClip();
            this.wingeff.addChild(this.openEffect);
            this.openEffect.x = this.wingeff.width / 2;
            this.openEffect.y = this.wingeff.height / 2;
        }
        this.openEffect.playFile(PATH_EFF + "chibangstart", 1);
        TimerMgr.ins().doTimer(500, 1, function () {
            _this.shan.visible = true;
            _this.openEffect.scaleX += 1;
            _this.openEffect.scaleY += 1;
            var tween0 = egret.Tween.get(_this.openEffect, {
                loop: false, onChange: function () {
                    var tween1 = egret.Tween.get(_this.dor1);
                    var tween2 = egret.Tween.get(_this.dor2);
                    var tween3 = egret.Tween.get(_this.shan);
                    tween1.to({ "x": -280 }, 500);
                    tween2.to({ "x": 558 + 280 }, 500).call(function () {
                        featherControl.upActivate(_this.curRole);
                        StageUtils.ins().setTouchChildren(true);
                    }, _this);
                    _this.wing.visible = false;
                    tween3.to({ alpha: 0 }, 500);
                    DisplayUtils.removeFromParent(_this.openEffect);
                }
            });
        }, this);
    };
    FeatherPanel.prototype.updateRedPoint = function () {
        if (this._wingsData.openStatus) {
            this.redPoint0.visible = FeatherDeityRedPoint.ins().getGodWingRedPoint();
        }
        else {
            this.redPoint0.visible = false;
        }
    };
    return FeatherPanel;
}(BasePanel));
__reflect(FeatherPanel.prototype, "FeatherPanel");
var FeatherSkillTipsView = (function (_super) {
    __extends(FeatherSkillTipsView, _super);
    function FeatherSkillTipsView() {
        var _this = _super.call(this) || this;
        _this.uilayer = GameLayer.POPUP;
        return _this;
    }
    FeatherSkillTipsView.prototype.initUI = function () {
        _super.prototype.initUI.call(this);
        this.skinName = "FeatherSkillTipsViewSkin";
    };
    FeatherSkillTipsView.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        var id = param[0];
        var index = param[1];
        var roleIndex = param[2];
        this.addEventTouchEnd(this, this.otherClose);
        this.setData(id, index, roleIndex);
    };
    FeatherSkillTipsView.prototype.close = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.removeEventTouchEnd(this, this.otherClose);
    };
    FeatherSkillTipsView.prototype.otherClose = function (evt) {
        UIMgr.ins().close(this);
    };
    FeatherSkillTipsView.prototype.setData = function (id, index, roleIndex) {
        var config = new SkillVo(id);
        if (config.name) {
            this.nameLabel.text = config.name;
        }
        if (config.desc) {
            this.description.textFlow = TextUtils.generateTextFlow(config.desc);
        }
        var wingSkills = heroControl.getSubRoleByIndex(roleIndex).wingSkillData;
        if (wingSkills[index] && wingSkills[index] > 0) {
            this.grpNoActiveTip.visible = false;
            this.lblAcitveTip.visible = true;
        }
        else {
            this.grpNoActiveTip.visible = true;
            this.lblAcitveTip.visible = false;
            var level = featherControl.getLevelBySkill(index);
            this.lblNoAcitveTip.text = LangMgr.getValueByKey("wingNeedLevel1", level + 1);
        }
        this.imgSkill.source = id + "_png";
        this.BG.height = 170 + this.description.height;
    };
    return FeatherSkillTipsView;
}(BaseEuiView));
__reflect(FeatherSkillTipsView.prototype, "FeatherSkillTipsView");
/**
 * 羽翼飞升
 */
var FeatherSoaringTipsView = (function (_super) {
    __extends(FeatherSoaringTipsView, _super);
    function FeatherSoaringTipsView() {
        var _this = _super.call(this) || this;
        _this._curRole = 0;
        _this.skinName = "FeatherSoaringTipsViewSkin";
        _this.isTopLevel = true;
        _this.itemImg.source = "200239_png";
        _this.itemIcon.source = "200239_png";
        return _this;
    }
    FeatherSoaringTipsView.prototype.open = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this._curRole = args[0];
        this.addCustomEvent(266 /* BACKPACK_ITEM_ADD */, this.itemChange);
        this.addCustomEvent(267 /* BACKPACK_ITEM_CHANGE */, this.itemChange);
        this.addCustomEvent(268 /* BACKPACK_ITEM_DEL */, this.itemChange);
        this.addCustomEvent(210 /* FEATHER_USE_DAN */, this.update);
        this.addCustomEvent(206 /* FEATHER_UPGRADE */, this.update);
        this.addEventTouchTap(this, this.onTouch);
        this.update();
    };
    FeatherSoaringTipsView.prototype.close = function () {
        this.removeCustomEvents();
        this.removeEventTouchTap(this, this.onTouch);
    };
    FeatherSoaringTipsView.prototype.update = function () {
        var role = heroControl.getSubRoleByIndex(this._curRole);
        var cfg = DataCenter.ins().FeatherLevelConfig[role.wingsData.lv];
        this.wingName.text = cfg.name;
        this.feishengLv.text = role.wingsData.flyUpDan + LangMgr.getValueByKey('numberLevel', '');
        this.career.text = RoleModel.getJobNameByJob(role.job);
        var maxNum = cfg.flyPill;
        if (role.wingsData.flyUpDan >= maxNum) {
            this.currentState = "maxLv";
        }
        else {
            var itemData = backpackControl.getBagItemById(DataCenter.ins().FeatherCommonConfig.flyPillId);
            var num = itemData ? itemData.count : 0;
            this.currentState = num ? "normal" : "noitem";
        }
        this.updateAttrs();
    };
    FeatherSoaringTipsView.prototype.updateAttrs = function () {
        //增加百分比
        var role = heroControl.getSubRoleByIndex(this._curRole);
        var cfg = DataCenter.ins().FeatherLevelConfig[role.wingsData.lv];
        var len = cfg.attr.length;
        var flyAttrs = DataCenter.ins().FeatherCommonConfig.flyPillAttr;
        var len2 = flyAttrs.length;
        var pAttr = [];
        var attData;
        for (var i = 1; i <= 4; i++) {
            this["attr" + i].text = "";
            this["attr" + i + "NextLv"].text = "";
            if (i <= len) {
                attData = cfg.attr[i - 1];
                this["attr" + i].text = AttributeData.getAttrStrByType(attData.type) + ": +" + (Math.floor(DataCenter.ins().FeatherCommonConfig.flyPill / 100) * role.wingsData.flyUpDan) + "%";
                if (this.currentState == "normal") {
                    this["attr" + i + "NextLv"].text = "+" + (Math.floor(DataCenter.ins().FeatherCommonConfig.flyPill / 100) * (role.wingsData.flyUpDan + 1)) + "%";
                }
                pAttr.push(new AttributeData(attData.type, Math.floor(attData.value * DataCenter.ins().FeatherCommonConfig.flyPill / 10000 * role.wingsData.flyUpDan)));
            }
            this["attr" + (i + 4)].text = "";
            this["attr" + (i + 4) + "NextLv"].text = "";
            if (i <= len2) {
                attData = flyAttrs[i - 1];
                this["attr" + (i + 4)].text = AttributeData.getAttrStrByType(attData.type) + ": +" + attData.value * role.wingsData.flyUpDan;
                if (this.currentState == "normal") {
                    this["attr" + (i + 4) + "NextLv"].text = "+" + attData.value * (role.wingsData.flyUpDan + 1);
                }
                pAttr.push(new AttributeData(attData.type, attData.value * role.wingsData.flyUpDan));
            }
        }
        this.powerPanel.setPower(BackpackControl.getAttrPower(pAttr));
    };
    FeatherSoaringTipsView.prototype.itemChange = function () {
        if (this.currentState == "maxLv") {
            return;
        }
        var itemData = backpackControl.getBagItemById(DataCenter.ins().FeatherCommonConfig.flyPillId);
        var num = itemData ? itemData.count : 0;
        var stateChange;
        if (num) {
            stateChange = this.currentState != "normal";
            this.currentState = "normal";
        }
        else {
            stateChange = this.currentState != "noitem";
            this.currentState = "noitem";
        }
        if (stateChange) {
            this.updateAttrs();
        }
    };
    FeatherSoaringTipsView.prototype.onTouch = function (e) {
        switch (e.target) {
            case this.bgClose:
                UIMgr.ins().close(this);
                break;
            case this.updateBtn:
                featherControl.upUseDan(this._curRole, 1);
                break;
        }
    };
    return FeatherSoaringTipsView;
}(BaseEuiView));
__reflect(FeatherSoaringTipsView.prototype, "FeatherSoaringTipsView");
var FeatherSkillItemRenderer = (function (_super) {
    __extends(FeatherSkillItemRenderer, _super);
    function FeatherSkillItemRenderer() {
        var _this = _super.call(this) || this;
        _this.touchEnabled = false;
        _this.skinName = "FeatherSkillItemRendererSkin";
        return _this;
    }
    FeatherSkillItemRenderer.prototype.dataChanged = function () {
        if (this.data) {
            this.skillIcon.visible = true;
            this.skillIcon.source = this.data + "_png";
            this.blackImg.visible = false;
        }
    };
    return FeatherSkillItemRenderer;
}(BaseItemRender));
__reflect(FeatherSkillItemRenderer.prototype, "FeatherSkillItemRenderer");
/**
 * 神羽红点
 */
var FeatherDeityRedPoint = (function (_super) {
    __extends(FeatherDeityRedPoint, _super);
    function FeatherDeityRedPoint() {
        var _this = _super.call(this) || this;
        _this.redPoint = false;
        _this.roleTabs = {};
        _this.tabs = {};
        _this.addCustomEventMany(_this.dispatchGodWingRedPoint, 583 /* FEATHER_DEITY_ITEM_RED */, 721 /* FEATHER_FORGE_Red */);
        _this.addCustomEventMany(_this.dispatchGodWingItem, 207 /* FEATHER_WEAR */, 209 /* FEATHER_GOD_DATA */, 206 /* FEATHER_UPGRADE */, 208 /* FEATHER_ACT */, 267 /* BACKPACK_ITEM_CHANGE */, 266 /* BACKPACK_ITEM_ADD */);
        _this.addCustomEventMany(_this.dispatchGodWingCompose, 267 /* BACKPACK_ITEM_CHANGE */, 266 /* BACKPACK_ITEM_ADD */);
        _this.addCustomEventMany(_this.postGodWingForge, 719 /* FEATHER_FORGE_DATA */, 720 /* FEATHER_FORGE_ITEM */, 209 /* FEATHER_GOD_DATA */, 206 /* FEATHER_UPGRADE */, 208 /* FEATHER_ACT */, 267 /* BACKPACK_ITEM_CHANGE */, 266 /* BACKPACK_ITEM_ADD */);
        return _this;
    }
    /**
     * 神羽入口红点
     */
    FeatherDeityRedPoint.prototype.dispatchGodWingRedPoint = function () {
        var oldv = this.redPoint;
        this.redPoint = this.tabs[0] || this.tabs[1];
        EventMgr.ins().dispatch(582 /* FEATHER_DEITY_RED */, oldv != this.redPoint);
    };
    /**
     * 神羽装备
     */
    FeatherDeityRedPoint.prototype.dispatchGodWingItem = function () {
        var tab = 0; //装备页签
        if (!this.roleTabs[tab]) {
            this.roleTabs[tab] = {};
        }
        var len = 3;
        for (var roleIndex = 0; roleIndex < len; roleIndex++) {
            if (!this.roleTabs[tab]) {
                this.roleTabs[tab] = {};
            }
            this.roleTabs[tab][roleIndex] = featherControl.isWearGodWing(roleIndex);
        }
        this.tabs[tab] = false;
        for (var i in this.roleTabs[tab]) {
            if (this.roleTabs[tab][i]) {
                this.tabs[tab] = true;
            }
        }
        EventMgr.ins().dispatch(583 /* FEATHER_DEITY_ITEM_RED */, true);
    };
    /**
     * 神羽合成
     */
    FeatherDeityRedPoint.prototype.dispatchGodWingCompose = function () {
        var tab = 1; //合成页签
        this.tabs[tab] = featherControl.isComposeGodWingAll();
        if (!this.roleTabs[tab]) {
            this.roleTabs[tab] = {};
        }
        EventMgr.ins().dispatch(584 /* FEATHER_DEITY_COMPOSE */, true);
    };
    /**
     * 神羽转换
     */
    FeatherDeityRedPoint.prototype.dispatchGodWingTransfer = function () {
        var tab = 2; //转换页签
        if (!this.roleTabs[tab]) {
            this.roleTabs[tab] = {};
        }
        this.tabs[tab] = Boolean(backpackControl.getBagGoodsByType(16 /* TYPE_16 */));
    };
    /**
     * 仙炼
     */
    FeatherDeityRedPoint.prototype.postGodWingForge = function () {
        var tab = 3;
        if (!this.roleTabs[tab]) {
            this.roleTabs[tab] = {};
        }
        this.tabs[tab] = false;
        if (!featherControl.checkIsOpen()) {
            return false;
        }
        var state = false;
        var len = 3;
        for (var i = 0; len > i; i++) {
            if (!this.roleTabs[tab]) {
                this.roleTabs[tab] = {};
            }
            var tabVal = this.roleTabs[tab][i];
            this.roleTabs[tab][i] = featherControl.checkRoleRed(i);
            if (!!tabVal != this.roleTabs[tab][i]) {
                state = true;
            }
        }
        for (var key in this.roleTabs[tab]) {
            if (this.roleTabs[tab][key]) {
                this.tabs[tab] = true;
            }
        }
        EventMgr.ins().dispatch(721 /* FEATHER_FORGE_Red */);
        return state;
    };
    /**
     * 判定神羽最大红点
     */
    FeatherDeityRedPoint.prototype.getGodWingRedPoint = function () {
        if (GameServer.serverOpenDay + 1 < DataCenter.ins().FeatherCommonConfig.openDay) {
            return false;
        }
        //只要其中一个角色开启了羽翼就有红点判定
        for (var i = 0; i < heroControl.subRolesLen; i++) {
            var wingsData = heroControl.getSubRoleByIndex(i).wingsData;
            if (wingsData.openStatus) {
                return this.redPoint;
            }
        }
        return false;
    };
    return FeatherDeityRedPoint;
}(BaseSystem));
__reflect(FeatherDeityRedPoint.prototype, "FeatherDeityRedPoint");
var FeatherDeityForgeItemVo = (function () {
    function FeatherDeityForgeItemVo() {
    }
    return FeatherDeityForgeItemVo;
}());
__reflect(FeatherDeityForgeItemVo.prototype, "FeatherDeityForgeItemVo");
var FeatherDeityForgeVo = (function () {
    function FeatherDeityForgeVo() {
        this.data = {};
    }
    FeatherDeityForgeVo.prototype.parse = function (datas) {
        this.roleId = datas[0];
        for (var i = 0; datas[1].length > i; i++) {
            var godWingForgeItem = new FeatherDeityForgeItemVo;
            godWingForgeItem.roleId = this.roleId;
            godWingForgeItem.slot = i + 1;
            godWingForgeItem.lv = datas[1][i][0];
            godWingForgeItem.isTupo = datas[1][i][1];
            this.data[godWingForgeItem.slot] = godWingForgeItem;
        }
    };
    FeatherDeityForgeVo.prototype.getSlotData = function (slot) {
        var godWingForgeItem = this.data[slot];
        if (!godWingForgeItem) {
            godWingForgeItem = new FeatherDeityForgeItemVo;
            godWingForgeItem.roleId = this.roleId;
            godWingForgeItem.slot = slot;
            godWingForgeItem.lv = 0;
            godWingForgeItem.isTupo = 0;
            this.data[slot] = godWingForgeItem;
        }
        return godWingForgeItem;
    };
    return FeatherDeityForgeVo;
}());
__reflect(FeatherDeityForgeVo.prototype, "FeatherDeityForgeVo");
/**
 * 神羽
 */
var FeatherDeityVo = (function () {
    function FeatherDeityVo() {
        //神羽具体数据
        this.data = {};
    }
    FeatherDeityVo.prototype.parser = function (datas) {
        for (var i = 0; i < datas.length; i++) {
            var slot = datas[i][0];
            var level = datas[i][1];
            this.data[slot] = { slot: slot, level: level };
        }
    };
    FeatherDeityVo.prototype.getLevel = function (slot) {
        return this.data[slot] ? this.data[slot].level : 0;
    };
    FeatherDeityVo.prototype.getData = function () {
        return this.data;
    };
    /**
     * 获取套装等级
     */
    FeatherDeityVo.prototype.getSuitLevel = function () {
        var minLv = Number.MAX_VALUE;
        var slot = 0;
        //获取最低等级
        for (var i in this.data) {
            if (this.data[i].level < minLv) {
                slot = this.data[i].slot;
                minLv = this.data[i].level;
            }
        }
        if (!slot) {
            return 0;
        }
        //获取最低等级对应所有部位数量(从高到低兼容)
        var glconfig = DataCenter.ins().FeatherDeityLevelConfig[minLv][slot]; //最小等级配置
        if (!glconfig) {
            return 0;
        }
        var ishave = [];
        for (var k in DataCenter.ins().FeatherItemConfig) {
            var gwconfig = DataCenter.ins().FeatherItemConfig[k];
            if (ishave.length >= FeatherControl.GodWingMaxSlot) {
                break;
            }
            if (gwconfig.level >= glconfig.level && glconfig.slot != gwconfig.slot) {
                if (this.data[gwconfig.slot] && this.data[gwconfig.slot].level >= gwconfig.level) {
                    ishave.push(gwconfig.itemId);
                }
            }
        }
        if (ishave.length >= FeatherControl.GodWingMaxSlot - 1) {
            return minLv;
        }
        return 0;
    };
    /**
     * 获取套装数量
     */
    FeatherDeityVo.prototype.getSuitSum = function () {
        var lv = this.getSuitLevel();
        var sum = 0;
        for (var i in this.data) {
            if (this.data[i].level >= lv) {
                sum++;
            }
        }
        return sum;
    };
    return FeatherDeityVo;
}());
__reflect(FeatherDeityVo.prototype, "FeatherDeityVo");
/**
 * 神羽合成装备界面
 */
var FeatherDeityComposePanel = (function (_super) {
    __extends(FeatherDeityComposePanel, _super);
    function FeatherDeityComposePanel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FeatherDeityComposePanel.prototype.close = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.removeEventTouchTap(this.compose, this.onClick);
        this.removeCustomEvents();
        //部位
        for (var i = 0; i < FeatherControl.GodWingMaxSlot; i++) {
            this.removeEventTouchTap(this["item" + i], this.onSlot);
        }
    };
    FeatherDeityComposePanel.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.addEventTouchEnd(this.compose, this.onClick);
        this.addEventTouchTap(this.now, this.onClick);
        this.addEventTouchEnd(this.next, this.onClick);
        this.addEventItemTap(this.list, this.onListTap);
        this.addCustomEvent(584 /* FEATHER_DEITY_COMPOSE */, this.updateItem);
        this.slot = 1; //部位
        //套装阶级
        for (var i in DataCenter.ins().FeatherDeitySuitConfig) {
            this.curIndex = DataCenter.ins().FeatherDeitySuitConfig[i].lv; //第一件
            break;
        }
        //部位
        for (var i = 0; i < FeatherControl.GodWingMaxSlot; i++) {
            this.addEventTouchTap(this["item" + i], this.onSlot);
            this["item" + i].setSelect(false);
        }
        this["item" + 0].setSelect(true);
        this.list.itemRenderer = FeatherDeityComposeItemRenderer;
        this.itemList = new eui.ArrayCollection([]);
        this.updateGodWing();
    };
    //选择列表
    FeatherDeityComposePanel.prototype.onListTap = function (e) {
        if (e && e.itemRenderer && e.item) {
            var suit = e.item;
            this.curIndex = suit.suitConfig.lv;
            this.updateItem();
        }
    };
    //选择部位
    FeatherDeityComposePanel.prototype.onSlot = function (e) {
        for (var i = 0; i < FeatherControl.GodWingMaxSlot; i++) {
            if (e.currentTarget == this["item" + i]) {
                this["item" + i].setSelect(true);
                this.slot = i + 1;
                this.updateItem();
            }
            else {
                this["item" + i].setSelect(false);
            }
        }
    };
    FeatherDeityComposePanel.prototype.onClick = function (e) {
        switch (e.currentTarget) {
            case this.compose:
                var gwconfig = DataCenter.ins().FeatherDeityLevelConfig[this.curIndex][this.slot];
                if (featherControl.isComposeGodWingOnly(gwconfig.itemId)) {
                    var glconfig = DataCenter.ins().FeatherDeityLevelConfig[this.curIndex][this.slot];
                    //请求合成神羽
                    featherControl.upWingCompose(2, glconfig.itemId);
                }
                else {
                    tipsControl.showTips(LangMgr.getValueByKey('materialEnought1'));
                }
                break;
            case this.now:
                var cfg = e.currentTarget.data;
                var gwConfig = void 0;
                if (cfg.itemId) {
                    gwConfig = DataCenter.ins().FeatherItemConfig[cfg.itemId];
                }
                if (gwConfig) {
                    UIMgr.ins().open(FeatherDeityTipsView, gwConfig);
                }
                else {
                    //碎片
                    var itemdata = backpackControl.getBagItemById(cfg.id);
                    var count = itemdata ? itemdata.count : 0;
                    UIMgr.ins().open("ItemTipsView", 0, cfg.id, count);
                }
                break;
            case this.next:
                cfg = e.currentTarget.data;
                gwConfig = DataCenter.ins().FeatherItemConfig[cfg.itemId];
                UIMgr.ins().open(FeatherDeityTipsView, gwConfig);
                break;
        }
    };
    /**UI*/
    FeatherDeityComposePanel.prototype.updateGodWing = function () {
        //左边的套装列表
        this.dataList = [];
        var slot = 1;
        for (var i in DataCenter.ins().FeatherDeitySuitConfig) {
            var suitConfig = DataCenter.ins().FeatherDeitySuitConfig[i];
            this.dataList.push({
                slot: slot,
                suitConfig: suitConfig
            }); //同一个部位5阶
        }
        this.itemList.replaceAll(this.dataList);
        this.list.dataProvider = this.itemList;
        this.list.validateNow();
        this.list.selectedIndex = 0;
        this.updateItem();
    };
    FeatherDeityComposePanel.prototype.updateItem = function () {
        var glconfig = DataCenter.ins().FeatherDeityLevelConfig[this.curIndex][this.slot];
        var mysum = 0;
        var totalsum = 0;
        this["power0"].visible = this["attr0"].visible = false;
        if (glconfig) {
            this.next.data = glconfig;
            this.next.setCountVisible(false);
            var gwconfig = DataCenter.ins().FeatherItemConfig[glconfig.itemId];
            gwconfig = DataCenter.ins().FeatherItemConfig[gwconfig.composeItem.id]; //是否是碎片
            if (!gwconfig) {
                //1阶去道具表找碎片
                gwconfig = DataCenter.ins().FeatherItemConfig[glconfig.itemId];
                var itemconfig = DataCenter.ins().ItemConfig[gwconfig.composeItem.id];
                this.now.data = itemconfig;
                this.now.setCountVisible(false);
                var attrtext = AttributeData.getAttStr(gwconfig.attr, 0, 1, "：") + "\n";
                attrtext += AttributeData.getExAttrNameByAttrbute(gwconfig.exattr[0], true);
                this["attr0"].text = attrtext;
                var power0 = Math.floor(BackpackControl.getAttrPower(gwconfig.attr));
                this["power0"].text = LangMgr.getValueByKey('godFightValue', power0 + gwconfig.exPower);
                var itemdata = backpackControl.getBagItemById(itemconfig.id);
                mysum = itemdata ? itemdata.count : 0;
                totalsum = gwconfig.composeItem.count;
                this["power0"].visible = this["attr0"].visible = true;
            }
            else {
                //左边
                var prelevel = featherControl.getPreLevel(this.curIndex);
                var preconfig = DataCenter.ins().FeatherDeityLevelConfig[prelevel][this.slot];
                this.now.data = preconfig;
                this.now.setCountVisible(false);
                var pregwconfig = DataCenter.ins().FeatherItemConfig[preconfig.itemId];
                var preattrtext = AttributeData.getAttStr(pregwconfig.attr, 0, 1, "：") + "\n";
                preattrtext += AttributeData.getExAttrNameByAttrbute(pregwconfig.exattr[0], true);
                this["attr1"].text = preattrtext;
                var power1 = Math.floor(BackpackControl.getAttrPower(pregwconfig.attr));
                this["power1"].text = LangMgr.getValueByKey('godFightValue', power1 + pregwconfig.exPower);
                //右边
                gwconfig = DataCenter.ins().FeatherItemConfig[glconfig.itemId];
                var attrtext = AttributeData.getAttStr(gwconfig.attr, 0, 1, "：") + "\n";
                attrtext += AttributeData.getExAttrNameByAttrbute(gwconfig.exattr[0], true);
                this["attr2"].text = attrtext;
                var power2 = Math.floor(BackpackControl.getAttrPower(gwconfig.attr));
                this["power2"].text = LangMgr.getValueByKey('godFightValue', power2 + gwconfig.exPower);
                //数量
                var itemdata = backpackControl.getBagItemById(gwconfig.composeItem.id);
                mysum = itemdata ? itemdata.count : 0;
                totalsum = gwconfig.composeItem.count;
            }
        }
        this["attr1"].visible = this["attr2"].visible = !this["attr0"].visible;
        this["power1"].visible = this["power2"].visible = !this["power0"].visible;
        var colorStr;
        if (mysum >= totalsum)
            colorStr = ColorUtils.GREEN;
        else
            colorStr = ColorUtils.RED;
        this.number.textFlow = TextUtils.generateTextFlow1("|C:" + colorStr + "&T:" + mysum + "|/|C:" + ColorUtils.NORMAL_COLOR + "&T:" + totalsum);
        //刷新部位列表
        for (var i = 0; i < this.dataList.length; i++) {
            this.dataList[i].slot = this.slot;
        }
        this.itemList.replaceAll(this.dataList);
        this.list.dataProvider = this.itemList;
        this.updateRedPoint();
        this.updateGodWingItem();
    };
    FeatherDeityComposePanel.prototype.updateGodWingItem = function () {
        for (var i = 0; i < FeatherControl.GodWingMaxSlot; i++) {
            var glconfig = DataCenter.ins().FeatherDeityLevelConfig[this.curIndex][i + 1];
            var config = DataCenter.ins().FeatherItemConfig[glconfig.itemId];
            this["item" + i].data = config;
            this["item" + i].setImgIcon("sybg" + (i + 1));
            this["item" + i].setCountVisible(false);
            this["item" + i].setNameVisible(false);
        }
    };
    FeatherDeityComposePanel.prototype.updateRedPoint = function () {
        var gwconfig = DataCenter.ins().FeatherDeityLevelConfig[this.curIndex][this.slot];
        this.redPoint.visible = featherControl.isComposeGodWingOnly(gwconfig.itemId);
        //同一个部位某阶
        for (var i = 0; i < this.list.numElements; i++) {
            var render = this.list.getVirtualElementAt(i);
            var slotdata = this.list.dataProvider.getItemAt(i);
            var b = featherControl.isComposeGodWingLevel(slotdata.suitConfig.lv, this.slot);
            render.setRedPoint(b);
        }
        //某阶某部位
        for (var i = 1; i <= FeatherControl.GodWingMaxSlot; i++) {
            for (var j = 0; j < this.list.numElements; j++) {
                var slotdata = this.list.dataProvider.getItemAt(j);
                var b = featherControl.isComposeGodWingSlot(slotdata.suitConfig.lv, i);
                this["item" + (i - 1)].updateRedPoint(b);
                if (b) {
                    break;
                }
            }
        }
    };
    return FeatherDeityComposePanel;
}(BasePanel));
__reflect(FeatherDeityComposePanel.prototype, "FeatherDeityComposePanel");
var FeatherDeityForgePanel = (function (_super) {
    __extends(FeatherDeityForgePanel, _super);
    function FeatherDeityForgePanel() {
        var _this = _super.call(this) || this;
        _this.roleId = 0;
        _this.slot = 1;
        _this.nextLv = 1;
        _this.nextTupo = 0;
        return _this;
    }
    FeatherDeityForgePanel.prototype.childrenCreated = function () {
        _super.prototype.childrenCreated.call(this);
        this.starList = new StarList(10, 0, 60);
        this.starList.scaleX = 0.7;
        this.starList.scaleY = 0.7;
        this.schedule0.addChild(this.starList);
        this.getItemTxt.textFlow = (new egret.HtmlTextParser).parser("<u>" + this.getItemTxt.text + "</u>");
    };
    FeatherDeityForgePanel.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.roleId = param[0] || 0;
        this.addEventTouchTap(this.upGradeBtn, this.onTap);
        this.addEventTouchTap(this.icon, this.onTap);
        this.addEventTouchTap(this.getItemTxt, this.onTap);
        for (var i = 0; 4 > i; i++) {
            this.addEventTouchTap(this.getItem(i + 1), this.onTap);
            this.addEventTouchTap(this.getLabel(i + 1), this.onTap);
        }
        this.addCustomEvent(720 /* FEATHER_FORGE_ITEM */, this.update);
        this.addCustomEvent(719 /* FEATHER_FORGE_DATA */, this.update);
        this.addCustomEvent(267 /* BACKPACK_ITEM_CHANGE */, this.updateItem);
        this.addCustomEvent(266 /* BACKPACK_ITEM_ADD */, this.updateItem);
        var maxNum = Number.MAX_VALUE;
        var slot = 1;
        var godWingForgeData = FeatherControl.ins().getGodWingForgeData(this.roleId);
        for (var i = 1; i <= FeatherControl.GodWingMaxSlot; i++) {
            var slotData = godWingForgeData.getSlotData(i);
            this.getItem(i).data = slotData;
            if (slotData.lv < maxNum) {
                maxNum = slotData.lv;
                slot = i;
            }
        }
        this.setSelectSlot(slot);
        this.updateSkillName();
        this.updatePower();
        this.updateRedPoint();
    };
    FeatherDeityForgePanel.prototype.update = function (item) {
        this.updateSlot();
        var val = -1;
        if (item instanceof FeatherDeityForgeItemVo) {
            val = 10 == this.starList.starNum ? 1 : 0;
        }
        if (1 == val) {
            this.playUpMc();
        }
        this.setSelectSlot(this.slot, true, 0 == val ? 1 : 0);
        this.updateSkillName();
        this.updatePower();
    };
    FeatherDeityForgePanel.prototype.updateItem = function () {
        this.updateSlot();
        this.setSelectSlot(this.slot, false);
    };
    FeatherDeityForgePanel.prototype.updateSlot = function () {
        var godWingForgeData = FeatherControl.ins().getGodWingForgeData(this.roleId);
        for (var i = 1; i <= FeatherControl.GodWingMaxSlot; i++) {
            var slotData = godWingForgeData.getSlotData(i);
            this.getItem(i).data = slotData;
        }
        this.updateRedPoint();
    };
    FeatherDeityForgePanel.prototype.updateSkillName = function () {
        var skillLv = FeatherControl.ins().getSkillLv(this.roleId);
        this.nameLbl.text = DataCenter.ins().FeatherCommonConfig.forgeSkillName + " Lv." + skillLv;
    };
    FeatherDeityForgePanel.prototype.setSelectSlot = function (slot, showStar, index) {
        if (showStar === void 0) { showStar = true; }
        if (index === void 0) { index = 0; }
        this.setSelectSkillEff(false);
        this.getItem(this.slot).setSelect(false);
        this.slot = slot;
        this.getItem(this.slot).setSelect(true);
        var slotData = FeatherControl.ins().getGodWingForgeData(this.roleId).getSlotData(this.slot);
        var starData = FeatherControl.ins().getStarData(slotData.lv, slotData.isTupo);
        var name = FeatherControl.ins().getNameFromSlot(this.slot);
        this.curState.text = name + " " + LangMgr.getValueByKey('forgeTips2', StringUtils.NumberToChinese(starData.level), starData.star);
        var godWingForgeLvConfig = DataCenter.ins().FeatherDeityForgeLvConfig[slotData.lv];
        var godWingForgeExtraLvConfig = DataCenter.ins().FeatherDeityForgeExtraLvConfig[starData.level];
        var addAttr = AttributeData.AttrAddition(godWingForgeLvConfig ? godWingForgeLvConfig.attr : null, godWingForgeExtraLvConfig ? godWingForgeExtraLvConfig.attr : null);
        this.sortAttr(addAttr, godWingForgeLvConfig ? godWingForgeLvConfig.attr : null);
        var attrStr = LangMgr.getValueByKey('forgeTips1');
        if (addAttr) {
            attrStr = AttributeData.getAttStr(addAttr, 0, 1, ":");
        }
        this.curAttr.text = attrStr;
        if (showStar) {
            this.starList.setStarNum(starData.star, index);
        }
        var nextLv = slotData.lv + 1; //slotData.isTupo ? slotData.lv + 1 : FeatherControl.ins().checkIsCanTupo(slotData.lv) ? slotData.lv : slotData.lv + 1;
        var nextTupo = slotData.isTupo ? 1 : 0;
        this.nextLv = nextLv;
        this.nextTupo = nextTupo;
        godWingForgeLvConfig = DataCenter.ins().FeatherDeityForgeLvConfig[nextLv];
        if (godWingForgeLvConfig) {
            var nextStarData = FeatherControl.ins().getStarData(nextLv, nextTupo);
            this.nextState.text = name + " " + LangMgr.getValueByKey('forgeTips2', StringUtils.NumberToChinese(nextStarData.level), nextStarData.star);
            godWingForgeExtraLvConfig = DataCenter.ins().FeatherDeityForgeExtraLvConfig[nextStarData.level];
            var nextAddAttr = AttributeData.AttrAddition(godWingForgeLvConfig ? godWingForgeLvConfig.attr : null, godWingForgeExtraLvConfig ? godWingForgeExtraLvConfig.attr : null);
            this.sortAttr(nextAddAttr, godWingForgeLvConfig ? godWingForgeLvConfig.attr : null);
            var nextAttrStr = "";
            if (nextAddAttr) {
                nextAttrStr = AttributeData.getAttStr(nextAddAttr, 0, 1, ":");
            }
            this.nextAttr.text = nextAttrStr;
            this.curState.horizontalCenter = -110;
            this.curAttr.horizontalCenter = -110;
            this.costGroup.visible = this.getItemTxt.visible = this.upGradeBtn.visible = true;
            this.maxDesc.visible = false;
            this.arrow.visible = true;
        }
        else {
            this.nextState.text = "";
            this.nextAttr.text = "";
            this.curState.horizontalCenter = 0;
            this.curAttr.horizontalCenter = 0;
            this.costGroup.visible = this.getItemTxt.visible = this.upGradeBtn.visible = false;
            this.maxDesc.visible = true;
            this.arrow.visible = false;
        }
        var itemId = nextTupo ? DataCenter.ins().FeatherCommonConfig.forgeExtraItemId : DataCenter.ins().FeatherCommonConfig.forgeItemId;
        this.icon0.source = DataCenter.ins().ItemConfig[itemId].icon + "_png";
        var bagCount = backpackControl.getBagGoodsCountById(0, itemId);
        var cost = godWingForgeLvConfig && !nextTupo ? godWingForgeLvConfig.cost : godWingForgeExtraLvConfig && nextTupo ? godWingForgeExtraLvConfig.cost : 0;
        var str = "|C:" + (bagCount >= cost ? 65280 : 16711680) + "&T:" + bagCount + "|/" + cost;
        this.countLabel0.textFlow = TextUtils.generateTextFlow1(str);
        this.upGradeBtn.label = LangMgr.getValueByKey("forgeTips" + (nextTupo ? 3 : 4));
        this.needGet = cost > bagCount;
        this.forgeinfo.visible = this.forgeoprate.visible = true;
        this.skillinfo.visible = this.skillrequire.visible = false;
    };
    FeatherDeityForgePanel.prototype.sortAttr = function (aAttr, bAttr) {
        if (aAttr && bAttr) {
            return aAttr.sort(function (a, b) {
                var aIndex = 0;
                var bIndex = 0;
                bAttr.forEach(function (val, index) {
                    if (val.type == a.type) {
                        aIndex = index;
                    }
                    if (val.type == b.type) {
                        bIndex = index;
                    }
                });
                return bIndex > aIndex ? 0 : 1;
            });
        }
        return aAttr;
    };
    FeatherDeityForgePanel.prototype.setSelectSkill = function () {
        this.getItem(this.slot).setSelect(false);
        this.setSelectSkillEff(true);
        var forgeSkillName = DataCenter.ins().FeatherCommonConfig.forgeSkillName;
        var skillLv = FeatherControl.ins().getSkillLv(this.roleId);
        this.curSkillState.text = forgeSkillName + " Lv." + skillLv;
        if (0 == skillLv) {
            this.curSkillAttr.textFlow = TextUtils.generateTextFlow1(DataCenter.ins().FeatherCommonConfig.forgeSkillInitial);
        }
        else {
            var str = LangMgr.getValueByKey('forgeTips5', DataCenter.ins().FeatherDeityForgeSkillConfig[skillLv].attr[0].value / 100);
            this.curSkillAttr.textFlow = TextUtils.generateTextFlow1(str);
        }
        var nextLv = skillLv + 1;
        var nextGodWingForgeSkillConfig = DataCenter.ins().FeatherDeityForgeSkillConfig[nextLv];
        if (nextGodWingForgeSkillConfig) {
            this.arrow1.visible = true;
            this.nextSkillState.text = forgeSkillName + " Lv." + nextLv;
            var str = LangMgr.getValueByKey('forgeTips5', nextGodWingForgeSkillConfig.attr[0].value / 100);
            this.nextSkillAttr.textFlow = TextUtils.generateTextFlow1(str);
        }
        else {
            this.arrow1.visible = false;
            this.nextSkillState.text = "";
            this.nextSkillAttr.text = "";
            nextLv = skillLv;
        }
        var godWingForgeData = FeatherControl.ins().getGodWingForgeData(this.roleId);
        for (var i = 1; i <= FeatherControl.GodWingMaxSlot; i++) {
            var slotData = godWingForgeData.getSlotData(i);
            var level = FeatherControl.ins().getStarData(slotData.lv, slotData.isTupo).level;
            var color = level >= nextLv ? 65280 : 16711680;
            var name_3 = FeatherControl.ins().getNameFromSlot(i);
            this.getLabel(i).textFlow = TextUtils.generateTextFlow1(LangMgr.getValueByKey('forgeTips6', color, name_3 + StringUtils.NumberToChinese(nextLv)));
        }
        this.forgeinfo.visible = this.forgeoprate.visible = false;
        this.skillinfo.visible = this.skillrequire.visible = true;
    };
    FeatherDeityForgePanel.prototype.setSelectSkillEff = function (state) {
        if (state) {
            this.skillSelMc = this.skillSelMc || new GameMovieClip;
            this.skillSelectEff.addChild(this.skillSelMc);
            this.skillSelMc.playFile(PATH_EFF + "quaeff5", -1);
        }
        else if (this.skillSelMc && this.skillSelMc.parent) {
            this.skillSelMc.parent.removeChild(this.skillSelMc);
        }
    };
    FeatherDeityForgePanel.prototype.onTap = function (e) {
        var target = e.currentTarget;
        if (target == this.icon) {
            this.setSelectSkill();
        }
        else if (target == this.upGradeBtn) {
            this.needGet ? this.buyItem() : this.sendUp();
        }
        else if (target == this.getItemTxt) {
            this.buyItem();
        }
        else {
            for (var i = 0; 4 > i; i++) {
                if (target == this.getItem(i + 1) || target == this.getLabel(i + 1)) {
                    this.setSelectSlot(i + 1);
                    break;
                }
            }
        }
    };
    FeatherDeityForgePanel.prototype.buyItem = function () {
        var itemId = this.nextTupo ? DataCenter.ins().FeatherCommonConfig.forgeExtraItemId : DataCenter.ins().FeatherCommonConfig.forgeItemId;
        warnControl.setBuyGoodsWarn(itemId);
    };
    FeatherDeityForgePanel.prototype.getItem = function (index) {
        return this["item" + (index - 1)];
    };
    FeatherDeityForgePanel.prototype.getLabel = function (index) {
        return this["require" + (index - 1)];
    };
    FeatherDeityForgePanel.prototype.sendUp = function () {
        FeatherControl.ins().upForge(this.roleId, this.slot);
    };
    FeatherDeityForgePanel.prototype.updatePower = function () {
        var power = 0;
        for (var i = 1; i <= FeatherControl.GodWingMaxSlot; i++) {
            var slotData = FeatherControl.ins().getGodWingForgeData(this.roleId).getSlotData(i);
            var level = FeatherControl.ins().getStarData(slotData.lv, slotData.isTupo).level;
            var godWingForgeLvConfig = DataCenter.ins().FeatherDeityForgeLvConfig[slotData.lv];
            var godWingForgeExtraLvConfig = DataCenter.ins().FeatherDeityForgeExtraLvConfig[level];
            if (godWingForgeLvConfig) {
                power += BackpackControl.getAttrPower(godWingForgeLvConfig.attr);
            }
            if (godWingForgeExtraLvConfig) {
                power += BackpackControl.getAttrPower(godWingForgeExtraLvConfig.attr);
            }
        }
        var skillLv = FeatherControl.ins().getSkillLv(this.roleId);
        if (DataCenter.ins().FeatherDeityForgeSkillConfig[skillLv]) {
            power += ItemUtils.relatePower(DataCenter.ins().FeatherDeityForgeSkillConfig[skillLv].attr[0], heroControl.getSubRoleByIndex(this.roleId));
        }
        this.powerPanel.setPower(power);
    };
    FeatherDeityForgePanel.prototype.updateRedPoint = function () {
        for (var i = 1; i <= featherControl.GodWingMaxSlot; i++) {
            this.getItem(i).updateRedPoint(FeatherControl.ins().checkSlotRed(this.roleId, i));
        }
    };
    FeatherDeityForgePanel.prototype.playUpMc = function () {
        var self = this;
        if (!this.mc) {
            this.mc = new GameMovieClip;
        }
        this.mc.playFile(PATH_EFF + "forgeSuccess", 1, function () {
            self.mc.parent && self.mc.parent.removeChild(self.mc);
        });
        this.mc.x = this.getItem(this.slot).x + 45;
        this.mc.y = this.getItem(this.slot).y + 35;
        this.addChild(this.mc);
    };
    FeatherDeityForgePanel.prototype.close = function () {
    };
    return FeatherDeityForgePanel;
}(BasePanel));
__reflect(FeatherDeityForgePanel.prototype, "FeatherDeityForgePanel");
/**
 * 神羽装备界面
 */
var FeatherDeityPanel = (function (_super) {
    __extends(FeatherDeityPanel, _super);
    function FeatherDeityPanel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FeatherDeityPanel.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.addEventTouchEnd(this.attr, this.onClick);
        this.addEventTouchEnd(this.skill, this.onTouch);
        this.addEventTouchEnd(this.replace, this.onClick);
        this.addEventTouchEnd(this.replace0, this.onClick);
        this.addEventTouchEnd(this.getItemTxt, this.onClick);
        this.addCustomEvent(583 /* FEATHER_DEITY_ITEM_RED */, this.updateItem);
        for (var i = 0; i < FeatherControl.GodWingMaxSlot; i++) {
            this.addEventTouchTap(this["item" + i], this.onTab);
        }
        this.slot = 1;
        this.updateGodWing();
    };
    /**选中的神羽部位 */
    FeatherDeityPanel.prototype.onTab = function (e) {
        for (var i = 0; i < FeatherControl.GodWingMaxSlot; i++) {
            if (e.currentTarget == this["item" + i]) {
                this.slot = i + 1;
                this["item" + i].setSelect(true);
                this.updateGodWing();
            }
            else {
                this["item" + i].setSelect(false);
            }
        }
    };
    FeatherDeityPanel.prototype.onClick = function (e) {
        switch (e.target) {
            case this.attr://查看神羽套装
                UIMgr.ins().open(FeatherDeitySuitTipsView, this.curRole);
                break;
            case this.replace://装备神羽
                var gwconfig = this["item" + (this.slot - 1)].data;
                if (gwconfig) {
                    gwconfig = DataCenter.ins().FeatherDeityLevelConfig[gwconfig.level][gwconfig.slot];
                    //检查某个部位是否有穿戴
                    //注意:允许穿戴同部位高阶的神羽
                    if (!featherControl.wearItemRedPoint(this.curRole, this.slot)) {
                        tipsControl.showTips(LangMgr.getValueByKey('godTips8'));
                        return;
                    }
                    var itemid = featherControl.getWearItem(this.curRole, this.slot);
                    if (!itemid)
                        itemid = gwconfig.itemId;
                    featherControl.upWingWear(this.curRole, itemid);
                }
                break;
            case this.replace0://快速合成神羽
                if (featherControl.isQuicComposeGodWing(this.curRole, this.slot)) {
                    var gwconfig_1 = featherControl.getCurLevelItemId(this.curRole, this.slot);
                    //条件
                    if (!gwconfig_1) {
                        //进行材料合成
                        var level = featherControl.getStartLevel(this.slot); //起始等级
                        gwconfig_1 = DataCenter.ins().FeatherDeityLevelConfig[level][this.slot];
                    }
                    else {
                        //进行神羽的升阶
                        var level = featherControl.getNextLevel(gwconfig_1.level); //下一等级
                        gwconfig_1 = DataCenter.ins().FeatherDeityLevelConfig[level][this.slot];
                    }
                    //穿戴要求
                    if (!featherControl.checkGodWingLevel(this.curRole, gwconfig_1.itemId)) {
                        tipsControl.showTips(LangMgr.getValueByKey('godTips9'));
                        return;
                    }
                    //是否有足够材料
                    if (!featherControl.checkGodWingItem(this.curRole, gwconfig_1.itemId, this.slot)) {
                        tipsControl.showTips(LangMgr.getValueByKey('godTips10'));
                        return;
                    }
                    featherControl.upWingCompose(1, gwconfig_1.itemId, this.curRole);
                }
                else {
                    tipsControl.showTips(LangMgr.getValueByKey('godTips11'));
                }
                break;
            case this.getItemTxt:
                var cfg = this["item" + (this.slot - 1)].data;
                if (cfg) {
                    cfg = DataCenter.ins().FeatherItemConfig[cfg.itemId];
                    var gayId = cfg.itemId;
                    if (!featherControl.getGodWing(this.curRole).getLevel(this.slot)) {
                        if (cfg)
                            gayId = cfg.composeItem.id;
                    }
                    warnControl.setBuyGoodsWarn(gayId);
                }
                break;
        }
    };
    FeatherDeityPanel.prototype.onTouch = function (e) {
        switch (e.currentTarget) {
            case this.skill://技能tips
                UIMgr.ins().open(FeatherDeitySkillTipsView, this.skill.data, this.isActive);
                break;
        }
    };
    FeatherDeityPanel.prototype.updateGodWing = function () {
        this.updateItem();
    };
    FeatherDeityPanel.prototype.updateItem = function () {
        var gw = featherControl.getGodWing(this.curRole);
        var gwdata = gw.getData();
        var level = gw.getLevel(this.slot);
        this.attr0.visible = level ? false : true; //未激活(穿戴)时候显示
        this.attr1.visible = this.attr2.visible = !this.attr0.visible;
        this.state0.visible = this.power0.visible = this.attr0.visible;
        this.power1.visible = this.power2.visible = !this.power0.visible;
        this.state1.visible = this.state2.visible = !this.state0.visible;
        this.attr3.visible = this.power3.visible = this.state3.visible = false;
        this.replace.visible = this.replace0.visible = this.redPointReplace.visible = this.redPointReplace0.visible = true;
        //已满级
        if (level && !featherControl.getNextLevel(level)) {
            this.replace.visible = this.replace0.visible = this.redPointReplace.visible = this.redPointReplace0.visible = false;
            this.attr3.visible = this.power3.visible = this.state3.visible = true;
            for (var i = 0; i < 3; i++) {
                this["attr" + i].visible = this["power" + i].visible = this["state" + i].visible = !this.attr3.visible;
            }
        }
        var gitem;
        var nextgitem;
        var percent = 0;
        var suitsum = gw.getSuitSum();
        if (suitsum >= FeatherControl.GodWingMaxSlot) {
            var minLevel = gw.getSuitLevel();
            var tmp = DataCenter.ins().FeatherDeitySuitConfig[minLevel];
            if (tmp)
                percent = tmp.precent / 10000;
        }
        //未装备
        if (this.attr0.visible) {
            var idx = featherControl.getStartLevel(this.slot);
            var wl = DataCenter.ins().FeatherDeityLevelConfig[idx][this.slot];
            gitem = DataCenter.ins().FeatherItemConfig[wl.itemId];
            var power0 = Math.floor(BackpackControl.getAttrPower(gitem.attr));
            this.power0.text = LangMgr.getValueByKey('godFightValue', power0 + gitem.exPower);
            this.power0.visible = true;
            this.attr0.text = AttributeData.getAttStr(gitem.attr, 0, 1, "：");
            var attrtext = AttributeData.getAttStr(gitem.attr, 0, 1, "：") + "\n";
            attrtext += AttributeData.getExAttrNameByAttrbute(gitem.exattr[0], true);
            this.attr0.text = attrtext;
        }
        //已装备
        if (this.attr1.visible) {
            //当前
            var glconfig = featherControl.getCurLevelItemId(this.curRole, this.slot);
            if (glconfig) {
                gitem = DataCenter.ins().FeatherItemConfig[glconfig.itemId];
                var newAttr = AttributeData.getPercentAttr(gitem.attr, percent);
                var power1 = Math.floor(BackpackControl.getAttrPower(newAttr));
                this.power1.text = LangMgr.getValueByKey('godFightValue', power1 + gitem.exPower);
                var attrtext = AttributeData.getAttStr(gitem.attr, 0, 1, "：") + "\n";
                attrtext += AttributeData.getExAttrNameByAttrbute(gitem.exattr[0], true);
                this.attr1.text = attrtext;
            }
            //下一阶
            glconfig = featherControl.getNextLevelItemId(this.curRole, this.slot);
            if (glconfig) {
                nextgitem = DataCenter.ins().FeatherItemConfig[glconfig.itemId];
                var newAttr = AttributeData.getPercentAttr(nextgitem.attr, percent);
                var power2 = Math.floor(BackpackControl.getAttrPower(newAttr));
                this.power2.text = LangMgr.getValueByKey('godFightValue', power2 + nextgitem.exPower);
                var attrtext = AttributeData.getAttStr(nextgitem.attr, 0, 1, "：") + "\n";
                attrtext += AttributeData.getExAttrNameByAttrbute(nextgitem.exattr[0], true);
                this.attr2.text = attrtext;
            }
        }
        //已满级
        if (this.attr3.visible) {
            var glconfig = featherControl.getCurLevelItemId(this.curRole, this.slot);
            gitem = DataCenter.ins().FeatherItemConfig[glconfig.itemId];
            var newAttr = AttributeData.getPercentAttr(gitem.attr, percent);
            var power0 = Math.floor(BackpackControl.getAttrPower(newAttr));
            this.power3.text = LangMgr.getValueByKey('godFightValue', power0 + gitem.exPower);
            this.power3.visible = true;
            this.attr3.text = AttributeData.getAttStr(gitem.attr, 0, 1, "：");
            var attrtext = AttributeData.getAttStr(gitem.attr, 0, 1, "：") + "\n";
            attrtext += AttributeData.getExAttrNameByAttrbute(gitem.exattr[0], true);
            this.attr3.text = attrtext;
        }
        var costItem = gitem;
        this.costImg0.visible = this.cost0.visible = this.costName.visible = true;
        if (!this.attr0.visible) {
            var nextLv = featherControl.getNextLevel(gitem.level);
            if (nextLv) {
                var nextcfg = DataCenter.ins().FeatherDeityLevelConfig[nextLv][this.slot];
                costItem = DataCenter.ins().FeatherItemConfig[nextcfg.itemId];
            }
            else {
                //满级隐藏材料消耗
                this.costImg0.visible = this.cost0.visible = this.costName.visible = false;
            }
        }
        this.updateCost(costItem);
        for (var i = 0; i < 4; i++) {
            this["item" + i].data = null;
            this["item" + i].setSelect(false);
            this["item" + i].setCountVisible(false);
            var isShow_1 = featherControl.getGodWing(this.curRole).getLevel(i + 1);
            this["item" + i].setNameVisible(isShow_1);
        }
        //当前选中的部位
        this["item" + (this.slot - 1)].data = gitem;
        if (!featherControl.getCurLevelItemId(this.curRole, this.slot)) {
            //未激活
            this["item" + (this.slot - 1)].setImgIcon("sybg" + this.slot);
        }
        this["item" + (this.slot - 1)].setSelect(true);
        this["item" + (this.slot - 1)].setCountVisible(false);
        //已装备
        var isShow = featherControl.getGodWing(this.curRole).getLevel(this.slot);
        this["item" + (this.slot - 1)].setNameVisible(isShow);
        //各个部位显示item
        for (var i = 1; i <= 4; i++) {
            if (i != this.slot) {
                var itemlevel = void 0;
                var islock = false;
                if (gwdata[i]) {
                    itemlevel = gwdata[i].level;
                    islock = true;
                }
                else {
                    itemlevel = featherControl.getStartLevel(i);
                }
                var cfg = DataCenter.ins().FeatherDeityLevelConfig[itemlevel][i];
                var gitem_1 = DataCenter.ins().FeatherItemConfig[cfg.itemId];
                if (gitem_1) {
                    this["item" + (i - 1)].data = gitem_1;
                    if (!islock) {
                        this["item" + (i - 1)].setImgIcon("sybg" + i);
                        this["item" + (i - 1)].setQuality("quality0");
                    }
                }
            }
        }
        this.updatePower();
        this.updateRedPoint();
        this.updateSkill();
    };
    FeatherDeityPanel.prototype.setNnactive = function () {
        for (var k in DataCenter.ins().FeatherDeitySuitConfig) {
            var config = DataCenter.ins().FeatherDeitySuitConfig[k];
            this.skill.data = config;
            this.skill.setCountVisible(false);
            this.skill.setImgIcon("sy100000");
            break;
        }
    };
    FeatherDeityPanel.prototype.updateSkill = function () {
        var gw = featherControl.getGodWing(this.curRole);
        var gwsconfig;
        var suitLevel = gw.getSuitLevel();
        this.isActive = false;
        if (!suitLevel) {
            this.setNnactive();
            return 0;
        }
        else {
            var sconfig = DataCenter.ins().FeatherDeitySuitConfig[suitLevel];
            if (sconfig.skillname) {
                this.isActive = true;
            }
            gwsconfig = sconfig;
        }
        this.skill.data = gwsconfig;
        this.skill.setCountVisible(false);
        if (!this.isActive) {
            this.skill.setImgIcon("sy100000");
            //显示名字
            for (var k in DataCenter.ins().FeatherDeitySuitConfig) {
                var gsconfig = DataCenter.ins().FeatherDeitySuitConfig[k];
                if (gsconfig.skillname)
                    this.skill.setNameText(gsconfig.skillname);
            }
        }
    };
    FeatherDeityPanel.prototype.updateCost = function (gitem) {
        if (!gitem)
            return;
        //背包拥有数
        var itemData = backpackControl.getBagItemById(gitem.composeItem.id);
        var costItemLen = itemData ? itemData.count : 0;
        //查看当前装备中是否有神羽 有则把自身拥有数量+1 (快速合成)
        var myLevel = featherControl.getGodWing(this.curRole).getLevel(this.slot);
        if (myLevel) {
            var lcfg = DataCenter.ins().FeatherDeityLevelConfig[myLevel][this.slot];
            if (lcfg.itemId == gitem.composeItem.id)
                costItemLen += 1;
        }
        var itemconfig = DataCenter.ins().ItemConfig[gitem.composeItem.id];
        this.costImg0.source = itemconfig.icon + "_png";
        this.costImg0.visible = false;
        var colorStr;
        if (costItemLen >= gitem.composeItem.count)
            colorStr = ColorUtils.GREEN;
        else
            colorStr = ColorUtils.RED;
        this.cost0.textFlow = TextUtils.generateTextFlow1("|C:" + colorStr + "&T:" + costItemLen + "|/|C:" + ColorUtils.NORMAL_COLOR + "&T:" + gitem.composeItem.count);
        this.getItemTxt.textFlow = TextUtils.generateTextFlow1("|U:&T:" + this.getItemTxt.text);
        var it = DataCenter.ins().ItemConfig[gitem.composeItem.id];
        colorStr = ItemUtils.getQualityColor(it);
        this.costName.textFlow = TextUtils.generateTextFlow1(LangMgr.getValueByKey('zhuzaiExpend') + "|C:" + colorStr + "&T:" + it.name + "|C:" + LangMgr.getColor('color43') + "&T:" + ":");
    };
    FeatherDeityPanel.prototype.updateRedPoint = function () {
        for (var i = 0; i < FeatherControl.GodWingMaxSlot; i++) {
            this["item" + i].updateRedPoint(featherControl.gridRedPoint(this.curRole, i + 1));
        }
        this.redPointReplace.visible = featherControl.wearItemRedPoint(this.curRole, this.slot);
        this.redPointReplace0.visible = featherControl.quickComposeRedPoint(this.curRole, this.slot);
    };
    /**
     * 计算每个角色神羽的总战力
     */
    FeatherDeityPanel.prototype.updatePower = function () {
        var gw = featherControl.getGodWing(this.curRole);
        var gwdata = gw.getData();
        var powers = 0;
        var percent = 0;
        var suitsum = gw.getSuitSum();
        if (suitsum >= FeatherControl.GodWingMaxSlot) {
            var minLevel = gw.getSuitLevel();
            var tmp = DataCenter.ins().FeatherDeitySuitConfig[minLevel];
            if (tmp)
                percent = tmp.precent / 10000;
        }
        for (var k in gwdata) {
            var glconfig = DataCenter.ins().FeatherDeityLevelConfig[gwdata[k].level][gwdata[k].slot];
            var gwconfig = DataCenter.ins().FeatherItemConfig[glconfig.itemId];
            var exPower = gwconfig.exPower ? gwconfig.exPower : 0;
            var newAttr = AttributeData.getPercentAttr(gwconfig.attr, percent);
            powers += Math.floor(BackpackControl.getAttrPower(newAttr)) + exPower;
        }
        this.powerPanel.setPower(powers);
    };
    return FeatherDeityPanel;
}(BasePanel));
__reflect(FeatherDeityPanel.prototype, "FeatherDeityPanel");
/**
 * 神羽技能tips
 */
var FeatherDeitySkillTipsView = (function (_super) {
    __extends(FeatherDeitySkillTipsView, _super);
    function FeatherDeitySkillTipsView() {
        var _this = _super.call(this) || this;
        _this.skinName = "FeatherDeitySkillTipsViewSkin";
        _this.uilayer = GameLayer.POPUP;
        return _this;
    }
    FeatherDeitySkillTipsView.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.addEventTouchEnd(this.bgClose, this.onClick);
        this.gwsConfig = param[0];
        var isActive = param[1];
        for (var i in DataCenter.ins().FeatherDeitySuitConfig) {
            var suitconfig = DataCenter.ins().FeatherDeitySuitConfig[i];
            if (suitconfig.skillname && suitconfig.lv > this.gwsConfig.lv) {
                this.nextConfig = suitconfig; //取最新技能套装
                break;
            }
        }
        if (!isActive) {
            this.currentState = "unactive";
        }
        else {
            if (this.nextConfig) {
                this.currentState = "active";
            }
            else {
                this.currentState = "max";
            }
        }
        this.validateNow();
        this.updateDesc();
    };
    FeatherDeitySkillTipsView.prototype.close = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.removeEventTouchTap(this.bgClose, this.onClick);
        this.removeCustomEvents();
    };
    FeatherDeitySkillTipsView.prototype.onClick = function () {
        UIMgr.ins().close(this);
    };
    FeatherDeitySkillTipsView.prototype.updateDesc = function () {
        this.setCurDesc();
        this.setNextDesc();
    };
    /**当前 */
    FeatherDeitySkillTipsView.prototype.setCurDesc = function () {
        this.icon.data = this.gwsConfig;
        this.icon.setNameVisible(false);
        this.icon.setCountVisible(false);
        this.content.textFlow = TextUtils.generateTextFlow1(this.gwsConfig.skilldesc);
        this.lv.text = LangMgr.getValueByKey('equiLevel') + this.gwsConfig.skilllevel;
        var glc = DataCenter.ins().FeatherDeityLevelConfig[this.gwsConfig.lv][1];
        var showlv = DataCenter.ins().FeatherItemConfig[glc.itemId].showlv;
        this.condition.text = LangMgr.getValueByKey('godGodCondition', showlv);
    };
    /**下一阶 */
    FeatherDeitySkillTipsView.prototype.setNextDesc = function () {
        if (!this.nextConfig)
            return;
        this.icon0.data = this.nextConfig;
        this.icon0.setNameVisible(false);
        this.icon0.setCountVisible(false);
        this.content0.textFlow = TextUtils.generateTextFlow1(this.nextConfig.skilldesc);
        this.lv0.text = LangMgr.getValueByKey('equiLevel') + this.nextConfig.skilllevel + "";
        var glc = DataCenter.ins().FeatherDeityLevelConfig[this.nextConfig.lv][1];
        var showlv = DataCenter.ins().FeatherItemConfig[glc.itemId].showlv;
        this.condition0.text = LangMgr.getValueByKey('godGodCondition', this.nextConfig.lv);
    };
    return FeatherDeitySkillTipsView;
}(BaseEuiView));
__reflect(FeatherDeitySkillTipsView.prototype, "FeatherDeitySkillTipsView");
/**
 * 神羽套装tips
 */
var FeatherDeitySuitTipsView = (function (_super) {
    __extends(FeatherDeitySuitTipsView, _super);
    function FeatherDeitySuitTipsView() {
        var _this = _super.call(this) || this;
        _this.skinName = "FeatherDeitySuitTipsViewSkin";
        _this.uilayer = GameLayer.POPUP;
        return _this;
    }
    FeatherDeitySuitTipsView.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.addEventTouchEnd(this.bgClose, this.onClick);
        this.roleIndex = param[0];
        var mySuitLevel = featherControl.getGodWing(this.roleIndex).getSuitLevel();
        var nextSuitLevel = 0;
        if (mySuitLevel) {
            nextSuitLevel = featherControl.getNextLevel(mySuitLevel);
        }
        this.gwsConfig = DataCenter.ins().FeatherDeitySuitConfig[mySuitLevel];
        if (!this.gwsConfig) {
            for (var i in DataCenter.ins().FeatherDeitySuitConfig) {
                this.gwsConfig = DataCenter.ins().FeatherDeitySuitConfig[i];
                break;
            }
        }
        if (!mySuitLevel) {
            this.currentState = "unactive";
        }
        else {
            this.nextConfig = DataCenter.ins().FeatherDeitySuitConfig[nextSuitLevel];
            if (this.nextConfig) {
                this.currentState = "active";
            }
            else {
                this.currentState = "max";
            }
        }
        this.validateNow();
        this.updateDesc();
    };
    FeatherDeitySuitTipsView.prototype.close = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.removeEventTouchTap(this.bgClose, this.onClick);
        this.removeCustomEvents();
    };
    FeatherDeitySuitTipsView.prototype.onClick = function () {
        UIMgr.ins().close(this);
    };
    FeatherDeitySuitTipsView.prototype.updateDesc = function () {
        this.setCurDesc();
        this.setNextDesc();
    };
    /**
     * 当前
     */
    FeatherDeitySuitTipsView.prototype.setCurDesc = function () {
        if (this.currentState == "unactive") {
            var precent = Math.floor(this.gwsConfig.precent / 100);
            var totalSum = FeatherControl.GodWingMaxSlot;
            var mySum = featherControl.getGodWing(this.roleIndex).getSuitSum();
            this.content0.text = LangMgr.getValueByKey('godShow1', precent);
            this.activeLbl.text = LangMgr.getValueByKey('godShow2', 1, mySum, totalSum);
            this.name0.text = this.gwsConfig.suitname;
        }
        else if (this.currentState == "max") {
            var precent = Math.floor(this.gwsConfig.precent / 100);
            this.content0.text = LangMgr.getValueByKey('godShow1', precent);
            this.name0.text = this.gwsConfig.suitname;
        }
        else {
            var precent = Math.floor(this.gwsConfig.precent / 100);
            this.content0.text = LangMgr.getValueByKey('godShow1', precent);
            this.name0.text = this.gwsConfig.suitname;
        }
    };
    /**
     * 下一阶
     */
    FeatherDeitySuitTipsView.prototype.setNextDesc = function () {
        if (this.currentState == "active") {
            var precent = Math.floor(this.nextConfig.precent / 100);
            var totalSum = FeatherControl.GodWingMaxSlot;
            var slotData = featherControl.calcGodWingSlot(this.roleIndex);
            var mySum = 0;
            for (var i = 0; i < slotData.length; i++) {
                if (slotData[i].level >= this.nextConfig.lv) {
                    mySum++; //拥有>=该等级的部件数
                }
            }
            //获取套装部位信息
            var glc = DataCenter.ins().FeatherDeityLevelConfig[this.nextConfig.lv][1];
            var showLv = DataCenter.ins().FeatherItemConfig[glc.itemId].showlv;
            this.content1.text = LangMgr.getValueByKey('godShow1', precent);
            this.nextActiveLbl.text = LangMgr.getValueByKey('godShow2', showLv, mySum, totalSum);
            this.name1.text = this.nextConfig.suitname;
        }
    };
    return FeatherDeitySuitTipsView;
}(BaseEuiView));
__reflect(FeatherDeitySuitTipsView.prototype, "FeatherDeitySuitTipsView");
var FeatherDeityTipsView = (function (_super) {
    __extends(FeatherDeityTipsView, _super);
    function FeatherDeityTipsView() {
        var _this = _super.call(this) || this;
        _this.skinName = "FeatherDeityTipsViewSkin";
        _this.uilayer = GameLayer.POPUP;
        return _this;
    }
    FeatherDeityTipsView.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.addEventTouchEnd(this.bgClose, this.otherClose);
        this.gwConfig = param[0];
        this.updateTips();
    };
    FeatherDeityTipsView.prototype.close = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.removeEventTouchEnd(this.bgClose, this.otherClose);
    };
    FeatherDeityTipsView.prototype.otherClose = function (evt) {
        UIMgr.ins().close(FeatherDeityTipsView);
    };
    FeatherDeityTipsView.prototype.updateTips = function () {
        var cfg = DataCenter.ins().ItemConfig[this.gwConfig.itemId];
        this.nameLabel.text = cfg.name;
        this.type.text = featherControl.getNameFromSlot(this.gwConfig.slot);
        this.lv.text = LangMgr.getValueByKey('godShow3', this.gwConfig.level);
        var color = LangMgr.getColor('color22');
        for (var i = 0; i < heroControl.subRolesLen; i++) {
            var role = heroControl.getSubRoleByIndex(i);
            if (role && role.wingsData.lv + 1 >= this.gwConfig.level) {
                color = LangMgr.getColor('color43');
                break;
            }
        }
        this.lv.textColor = color;
        this.nameLabel.textColor = ItemUtils.getQualityColor(cfg);
        var arr = this.gwConfig.attr;
        var exarr = this.gwConfig.exattr;
        var attrStr = "";
        var exattrStr = "";
        var exPower = this.gwConfig.exPower;
        for (var i = 0; i < arr.length; i++) {
            attrStr += AttributeData.getAttrStrByType(arr[i].type) + ": ";
            attrStr += arr[i].value + "\n";
        }
        for (var i = 0; i < exarr.length; i++) {
            attrStr += AttributeData.getExtAttrStrByType(exarr[i].type) + ": ";
            var value = exarr[i].value;
            if (exarr[i].type == 26 /* eatMiss */ || exarr[i].type == 42 /* eatHit */) {
                value = value / 100;
                attrStr += value;
                attrStr += "%";
            }
            attrStr += "\n";
        }
        var index = attrStr.lastIndexOf("\n");
        attrStr = attrStr.substring(0, index);
        this.attr0.text = attrStr; //属性描述
        var totalAttr = arr; //arr.concat(exarr);
        var scorePower = Math.floor(BackpackControl.getAttrPower(totalAttr)) + exPower;
        this.score.text = LangMgr.getValueByKey('wingPingfen', scorePower);
        this.powerPanel.setPower(scorePower);
        this.itemIcon.data = this.gwConfig;
        this.itemIcon.setNameVisible(false);
        this.itemIcon.setCountVisible(false);
        this.quali.source = "quali" + ItemUtils.getQuality(cfg);
    };
    return FeatherDeityTipsView;
}(BaseEuiView));
__reflect(FeatherDeityTipsView.prototype, "FeatherDeityTipsView");
/**
 * 神羽转换界面
 */
var FeatherDeityTransferPanel = (function (_super) {
    __extends(FeatherDeityTransferPanel, _super);
    function FeatherDeityTransferPanel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FeatherDeityTransferPanel.prototype.close = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.removeEventTouchTap(this.transfer, this.onClick);
        this.removeEventTouchTap(this.have, this.onListTap);
        this.removeEventTouchTap(this.item0, this.onClick);
        this.removeCustomEvents();
        this.reset();
        for (var i = 1; i < FeatherControl.GodWingMaxSlot; i++) {
            this.removeEventTouchTap(this["item" + i], this.onTouchItem);
        }
    };
    FeatherDeityTransferPanel.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.addEventTouchEnd(this.transfer, this.onClick);
        this.addEventTouchTap(this.have, this.onListTap);
        this.addEventTouchTap(this.item0, this.onClick);
        this.addCustomEvent(266 /* BACKPACK_ITEM_ADD */, this.callbackUpdate);
        this.itemList = new eui.ArrayCollection();
        this.have.itemRenderer = FeatherDeityItemRenderer;
        this.have.dataProvider = new eui.ArrayCollection([]);
        this.updateGodWing();
    };
    FeatherDeityTransferPanel.prototype.reset = function () {
        //置换目标
        for (var i = 1; i < FeatherControl.GodWingMaxSlot; i++) {
            this.addEventTouchTap(this["item" + i], this.onTouchItem);
            this["item" + i].setCountVisible(false);
            this["item" + i].setNameVisible(false);
            this["item" + i].setImgIcon("");
            this["item" + i].setSelect(false);
            this["item" + i].data = null;
        }
        this.item0.setCountVisible(false);
        this.item0.setImgIcon("");
        this.item0.setNameVisible(false);
        this["item0"].data = null;
        this.updateBagList();
        this.warn.visible = this.itemList.length ? false : true;
        this.curItemId = 0;
        this.desId = 0;
    };
    FeatherDeityTransferPanel.prototype.updateBagList = function () {
        var itemData = backpackControl.getBagGoodsByType(16 /* TYPE_16 */);
        this.itemList.replaceAll(itemData);
        this.have.dataProvider = this.itemList;
    };
    FeatherDeityTransferPanel.prototype.callbackUpdate = function () {
        if (!this["item0"].itemId)
            return;
        var item = backpackControl.getBagItemById(this["item0"].itemId);
        if (!item) {
            this.reset();
        }
        this.updateBagList();
        this.updateCost();
    };
    /**
     * 转换
     */
    FeatherDeityTransferPanel.prototype.onClick = function (e) {
        switch (e.currentTarget) {
            case this.transfer:
                if (Boolean(backpackControl.getBagGoodsByType(16 /* TYPE_16 */))) {
                    if (this["item0"].itemId && this.desId)
                        featherControl.upResetGodWing(this["item0"].itemId, this.desId);
                    else
                        tipsControl.showTips(LangMgr.getValueByKey('godEnterRotation'));
                }
                else {
                    tipsControl.showTips(LangMgr.getValueByKey('godNoRotation'));
                }
                break;
            case this.item0://置换母本
                if (this.curItemId) {
                    var config = DataCenter.ins().FeatherItemConfig[this.curItemId];
                    UIMgr.ins().open(FeatherDeityTipsView, config);
                }
                break;
        }
    };
    /**
     * 选择转换目标
     */
    FeatherDeityTransferPanel.prototype.onTouchItem = function (e) {
        for (var i = 1; i < FeatherControl.GodWingMaxSlot; i++) {
            if (e.currentTarget == this["item" + i]) {
                if (e.currentTarget.itemId) {
                    this.desId = e.currentTarget.itemId;
                    this["item" + i].setSelect(true);
                }
            }
            else {
                this["item" + i].setSelect(false);
            }
        }
    };
    /**
     * 点击背包列表
     */
    FeatherDeityTransferPanel.prototype.onListTap = function (e) {
        if (e && e.currentTarget && this.have.selectedItem) {
            var itemdata = this.have.selectedItem;
            this.curItemId = itemdata.configID;
            var gwConfig = DataCenter.ins().FeatherItemConfig[this.curItemId];
            var cfg = DataCenter.ins().FeatherDeityLevelConfig[gwConfig.level]; //同一个等级
            this["item0"].data = gwConfig;
            this.item0.setNameVisible(true);
            var itemcfg = DataCenter.ins().ItemConfig[this.curItemId];
            this["item0"].setImgIcon(itemcfg.icon + "_png");
            var idx = 1;
            for (var i in cfg) {
                if (cfg[i].slot != gwConfig.slot) {
                    this["item" + idx].data = DataCenter.ins().FeatherItemConfig[cfg[i].itemId];
                    this["item" + idx].setNameVisible(true);
                    this["item" + idx].setSelect(false);
                    idx++;
                    if (idx > 3)
                        break; //1换3
                }
            }
            this.updateCost();
        }
    };
    /**UI*/
    FeatherDeityTransferPanel.prototype.updateGodWing = function () {
        this.reset();
        this.updateCost();
    };
    FeatherDeityTransferPanel.prototype.updateCost = function () {
        if (!this.curItemId) {
            this.costImg0.visible = this.cost.visible = false;
            return;
        }
        this.costImg0.visible = this.cost.visible = true;
        var config = DataCenter.ins().FeatherItemConfig[this.curItemId];
        this.cost.text = config.needMoney + "";
    };
    return FeatherDeityTransferPanel;
}(BasePanel));
__reflect(FeatherDeityTransferPanel.prototype, "FeatherDeityTransferPanel");
/**
 * 神羽
 */
var FeatherDeityView = (function (_super) {
    __extends(FeatherDeityView, _super);
    function FeatherDeityView() {
        var _this = _super.call(this) || this;
        _this.roleIndex = 0;
        _this.isTopLevel = true;
        _this.skinName = "FeatherDeityViewSkin";
        return _this;
    }
    FeatherDeityView.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.addEventChange(this.tab, this.onTabTouch);
        this.addEventChanging(this.tab, this.onTabTouching);
        this.addEventChange(this.roleSelect, this.onChange);
        this.addCustomEvent(582 /* FEATHER_DEITY_RED */, this.updateRedPoint);
        this.addCustomEvent(583 /* FEATHER_DEITY_ITEM_RED */, this.updateRedPoint);
        this.addCustomEvent(352 /* SUB_ROLE_CHANGE */, this.updateRedPoint);
        this.addCustomEvent(266 /* BACKPACK_ITEM_ADD */, this.updateRedPoint);
        this.addCustomEvent(268 /* BACKPACK_ITEM_DEL */, this.updateRedPoint);
        this.roleIndex = param[0] ? param[0] : 0;
        this.roleSelect.setCurRole(this.roleIndex);
        this.featherDeityPanel.curRole = this.roleIndex;
        this.setOpenIndex(0);
        this.updateRedPoint();
        if (FeatherControl.ins().checkIsOpen()) {
            if (this.viewStack.getChildIndex(this.godWingForgePanel) < 0) {
                this.viewStack.addChildAt(this.godWingForgePanel, 3);
                this.redPointGroup.addChildAt(this.redPoint2, 3);
            }
        }
        else {
            if (this.viewStack.getChildIndex(this.godWingForgePanel) >= 0) {
                this.viewStack.removeChild(this.godWingForgePanel);
                this.redPointGroup.removeChild(this.redPoint2);
            }
        }
    };
    FeatherDeityView.openCheck = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        var state = GameServer.serverOpenDay + 1 >= DataCenter.ins().FeatherCommonConfig.openDay ? true : false; //开服第五天
        if (!state) {
            tipsControl.showTips(LangMgr.getValueByKey('tipsOpenSeverDays', DataCenter.ins().FeatherCommonConfig.openDay));
        }
        return state;
    };
    FeatherDeityView.prototype.onTabTouching = function (e) {
        if (!this.checkIsOpen(this.tab.selectedIndex)) {
            e.preventDefault();
        }
    };
    /**
     * 各页签开启条件
     */
    FeatherDeityView.prototype.checkIsOpen = function (index) {
        return true;
    };
    FeatherDeityView.prototype.onChange = function (e) {
        this.setRoleId(this.roleSelect.getCurRole());
    };
    /**
     * 点击标签页按钮
     */
    FeatherDeityView.prototype.onTabTouch = function (e) {
        this.setOpenIndex(this.tab.selectedIndex);
    };
    FeatherDeityView.prototype.setRoleId = function (roleId) {
        this.featherDeityPanel.curRole = roleId;
        this.setOpenIndex(this.viewStack.selectedIndex);
    };
    FeatherDeityView.prototype.setOpenIndex = function (selectedIndex) {
        switch (selectedIndex) {
            case 0://装备
                this.roleSelect.openRole();
                this.featherDeityPanel.open();
                break;
            case 1://合成
                this.roleSelect.hideRole();
                this.featherDeityComposePanel.open();
                break;
            case 2://转换
                this.roleSelect.hideRole();
                this.featherDeityTransferPanel.open();
                break;
            case 3://仙炼
                this.roleSelect.openRole();
                this.godWingForgePanel.open(this.roleSelect.getCurRole());
                break;
        }
        this.tab.selectedIndex = this.viewStack.selectedIndex = selectedIndex;
        this.updateRedPoint();
    };
    FeatherDeityView.prototype.updateRedPoint = function () {
        if (!FeatherDeityRedPoint.ins().tabs)
            FeatherDeityRedPoint.ins().tabs = {};
        this.redPoint0.visible = FeatherDeityRedPoint.ins().tabs[0];
        this.redPoint1.visible = FeatherDeityRedPoint.ins().tabs[1];
        if (0 == this.tab.selectedIndex) {
            for (var i = 0; i < heroControl.subRolesLen; i++) {
                this.roleSelect.showRedPoint(i, FeatherDeityRedPoint.ins().roleTabs[this.tab.selectedIndex][i]);
            }
        }
        if (3 == this.tab.selectedIndex) {
            for (var i = 0; i < heroControl.subRolesLen; i++) {
                this.roleSelect.showRedPoint(i, this.getForeRedByRole(i + ""));
            }
        }
        this.redPoint2.visible = this.getForgeRed();
    };
    FeatherDeityView.prototype.getForeRedByRole = function (roleIndex) {
        var data = FeatherControl.ins().godWingForge;
        for (var role in data) {
            if (role == roleIndex) {
                for (var value in data[role]["data"]) {
                    var leve = data[role]["data"][value].lv;
                    var nextConfigData = DataCenter.ins().FeatherDeityForgeLvConfig[leve + 1];
                    var nextTupo = data[role]["data"][value].isTupo;
                    var itemId = nextTupo ? DataCenter.ins().FeatherCommonConfig.forgeExtraItemId : DataCenter.ins().FeatherCommonConfig.forgeItemId;
                    var bagCount = backpackControl.getBagGoodsCountById(0, itemId);
                    var exConfig = DataCenter.ins().FeatherDeityForgeExtraLvConfig[leve];
                    if (nextConfigData) {
                        if (nextTupo && exConfig && bagCount >= exConfig.cost) {
                            return true;
                        }
                        else if (!nextTupo && nextConfigData && bagCount >= nextConfigData.cost) {
                            return true;
                        }
                    }
                    else {
                        if (nextTupo && exConfig && bagCount >= exConfig.cost) {
                            return true;
                        }
                    }
                }
                break;
            }
        }
        return false;
    };
    FeatherDeityView.prototype.getForgeRed = function () {
        var data = FeatherControl.ins().godWingForge;
        for (var role in data) {
            for (var value in data[role]["data"]) {
                var leve = data[role]["data"][value].lv;
                var nextConfigData = DataCenter.ins().FeatherDeityForgeLvConfig[leve + 1];
                var nextTupo = data[role]["data"][value].isTupo;
                var itemId = nextTupo ? DataCenter.ins().FeatherCommonConfig.forgeExtraItemId : DataCenter.ins().FeatherCommonConfig.forgeItemId;
                var bagCount = backpackControl.getBagGoodsCountById(0, itemId);
                var exConfig = DataCenter.ins().FeatherDeityForgeExtraLvConfig[leve];
                if (nextConfigData) {
                    if (nextTupo && exConfig && bagCount >= exConfig.cost) {
                        return true;
                    }
                    else if (!nextTupo && nextConfigData && bagCount >= nextConfigData.cost) {
                        return true;
                    }
                }
                else {
                    if (nextTupo && exConfig && bagCount >= exConfig.cost) {
                        return true;
                    }
                }
            }
        }
        return false;
    };
    return FeatherDeityView;
}(BaseEuiView));
__reflect(FeatherDeityView.prototype, "FeatherDeityView");
/**
 * 神羽合成列表控件
 */
var FeatherDeityComposeItemRenderer = (function (_super) {
    __extends(FeatherDeityComposeItemRenderer, _super);
    function FeatherDeityComposeItemRenderer() {
        var _this = _super.call(this) || this;
        _this.skinName = 'FeatherDeityComposeItemRendererSkin';
        return _this;
    }
    FeatherDeityComposeItemRenderer.prototype.dataChanged = function () {
        if (!this.data)
            return;
        var suitConfig = this.data.suitConfig;
        var slot = this.data.slot;
        var gl = DataCenter.ins().FeatherDeityLevelConfig[suitConfig.lv][slot];
        var config = DataCenter.ins().ItemConfig[gl.itemId];
        this.nameTxt.text = config.name;
    };
    FeatherDeityComposeItemRenderer.prototype.setRedPoint = function (b) {
        this.redPoint.visible = b;
    };
    FeatherDeityComposeItemRenderer.prototype.destruct = function () {
    };
    return FeatherDeityComposeItemRenderer;
}(BaseItemRender));
__reflect(FeatherDeityComposeItemRenderer.prototype, "FeatherDeityComposeItemRenderer");
var FeatherDeityForgeItemRendrere = (function (_super) {
    __extends(FeatherDeityForgeItemRendrere, _super);
    function FeatherDeityForgeItemRendrere() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FeatherDeityForgeItemRendrere.prototype.dataChanged = function () {
        if (this.data) {
            var itemData = featherControl.getCurLevelItemId(this.data.roleId, this.data.slot);
            if (itemData) {
                var ItemConfig = DataCenter.ins().ItemConfig[itemData.itemId];
                this.itemIcon.imgIcon.source = ItemConfig.icon + "_png", this.itemIcon.imgBg.source = "quality" + ItemUtils.getQuality(ItemConfig);
            }
            else {
                this.setImgIcon("sybg" + this.data.slot), this.itemIcon.imgBg.source = "quality0";
            }
            var starData = FeatherControl.ins().getStarData(this.data.lv, this.data.isTupo);
            this.nameTxt.text = LangMgr.getValueByKey('forgeTips2', StringUtils.NumberToChinese(starData.level), starData.star), this.nameTxt.textColor = 16298305, this.setCountVisible(!1);
            this.itemIcon.imgIcon.visible = this.itemIcon.imgIcon.source ? !0 : !1;
        }
    };
    return FeatherDeityForgeItemRendrere;
}(FeatherDeityItemRenderer));
__reflect(FeatherDeityForgeItemRendrere.prototype, "FeatherDeityForgeItemRendrere");
var FeatherDeityItemItemRenderer = (function (_super) {
    __extends(FeatherDeityItemItemRenderer, _super);
    function FeatherDeityItemItemRenderer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FeatherDeityItemItemRenderer.prototype.dataChanged = function () {
        if (!this.data)
            return;
        var data = this.data;
        this.itemId = 0;
        this.itemIcon.imgJob.visible = false;
        this.itemIcon.imgIcon.source = "";
        var gitem = data;
        var itemConfig = DataCenter.ins().ItemConfig[gitem.itemId];
        this.itemIcon.imgIcon.source = itemConfig.icon + "_png";
        this.nameTxt.text = itemConfig.name;
        this.itemId = gitem.itemId;
        //隐藏数量
        this.itemIcon.imgBg.source = 'quality' + ItemUtils.getQuality(itemConfig);
        this.nameTxt.textColor = ItemUtils.getQualityColor(itemConfig);
        this.itemIcon.imgIcon.visible = this.itemIcon.imgIcon.source ? true : false;
    };
    return FeatherDeityItemItemRenderer;
}(FeatherDeityItemRenderer));
__reflect(FeatherDeityItemItemRenderer.prototype, "FeatherDeityItemItemRenderer");
var FeatherDeitySuitItemRenderer = (function (_super) {
    __extends(FeatherDeitySuitItemRenderer, _super);
    function FeatherDeitySuitItemRenderer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FeatherDeitySuitItemRenderer.prototype.dataChanged = function () {
        if (!this.data)
            return;
        var data = this.data;
        this.itemId = 0;
        this.itemIcon.imgJob.visible = false;
        this.itemIcon.imgIcon.source = "";
        //神羽技能tips用
        var config = data;
        if (!config.skillname) {
            for (var k in DataCenter.ins().FeatherDeitySuitConfig) {
                if (DataCenter.ins().FeatherDeitySuitConfig[k].skillname) {
                    config = DataCenter.ins().FeatherDeitySuitConfig[k];
                    this.data = config;
                    break;
                }
            }
        }
        this.itemIcon.imgIcon.source = config.skillicon;
        this.nameTxt.text = config.skillname;
        this.itemIcon.imgIcon.visible = this.itemIcon.imgIcon.source ? true : false;
    };
    return FeatherDeitySuitItemRenderer;
}(FeatherDeityItemRenderer));
__reflect(FeatherDeitySuitItemRenderer.prototype, "FeatherDeitySuitItemRenderer");
/**
 * 送花记录
 */
var FlowerLogView = (function (_super) {
    __extends(FlowerLogView, _super);
    function FlowerLogView() {
        var _this = _super.call(this) || this;
        _this.skinName = "FlowerLogViewSkin";
        _this.uilayer = GameLayer.POPUP;
        return _this;
    }
    FlowerLogView.prototype.childrenCreated = function () {
        _super.prototype.childrenCreated.call(this);
        this.list.itemRenderer = FlowerLogItemRenderer;
    };
    FlowerLogView.prototype.open = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this.addEventTouchTap(this.closeBtn, this.onTouch);
        this.addEventTouchTap(this.closeBtn0, this.onTouch);
        this.addCustomEvent(384 /* TEAM_DUN_FLOWER_RECORDS */, this.update);
        this.update();
    };
    FlowerLogView.prototype.close = function () {
        this.removeEventTouchTap(this.closeBtn, this.onTouch);
        this.removeEventTouchTap(this.closeBtn0, this.onTouch);
        this.removeCustomEvents();
        copyControl.clearTfFlowerRecords();
        var view = UIMgr.playFun;
        if (view) {
            view.removeFlower();
        }
    };
    FlowerLogView.prototype.update = function () {
        if (!this._collect) {
            this._collect = new ArrayCollection();
            this.list.dataProvider = this._collect;
        }
        var source = copyControl.tfFlowerRecords.concat();
        source.reverse();
        this._collect.source = source;
        var len = source.length;
        var total = 0;
        for (var i = 0; i < len; i++) {
            total += (source[i].count * DataCenter.ins().AsTeamCopyBaseConfig.flowerChiv);
        }
        this.charmCount.text = LangMgr.getValueByKey('equiCharmCount', total);
    };
    FlowerLogView.prototype.onTouch = function (e) {
        UIMgr.ins().close(this);
    };
    return FlowerLogView;
}(BaseEuiView));
__reflect(FlowerLogView.prototype, "FlowerLogView");
var FlowerPanel = (function (_super) {
    __extends(FlowerPanel, _super);
    function FlowerPanel() {
        var _this = _super.call(this) || this;
        _this.skinName = "FlowerShowSkin";
        return _this;
    }
    FlowerPanel.prototype.childrenCreated = function () {
        _super.prototype.childrenCreated.call(this);
        this._inited = true;
        this.showEffect();
    };
    FlowerPanel.prototype.onTouch = function (e) {
        UIMgr.ins().open(FlowerLogView);
        DisplayUtils.removeFromParent(this);
    };
    FlowerPanel.prototype.onRemove = function (e) {
        this.removeEventTouchTap(this.flowerImg, this.onTouch);
        this.removeEventRemovedFromStage(this, this.onRemove);
        if (this.mcEff) {
            this.mcEff.destroy();
            this.mcEff = null;
            this.isPlaying = false;
        }
    };
    FlowerPanel.prototype.showEffect = function () {
        if (!this._inited)
            return;
        if (this.isPlaying)
            return;
        this.flowerImg.alpha = 0;
        if (!this.mcEff) {
            this.mcEff = ObjectPool.pop("GameMovieClip");
            this.flowereff.addChild(this.mcEff);
        }
        this.mcEff.playFile(PATH_EFF + "flowereff", 1, this.playComplete.bind(this), true);
        this.isPlaying = true;
        if (!this.flowerImg.hasEventListener(egret.TouchEvent.TOUCH_TAP)) {
            this.addEventTouchTap(this.flowerImg, this.onTouch);
        }
        if (!this.hasEventListener(egret.TouchEvent.REMOVED_FROM_STAGE)) {
            this.addEventRemovedFromStage(this, this.onRemove);
        }
        this.flowerImg.source = null;
        this.flowerImg.source = "flower_openImg";
        this.imgBg.source = null;
        this.imgBg.source = "redPacket_mainEff_png";
    };
    FlowerPanel.prototype.playComplete = function () {
        this.mcEff.destroy();
        this.mcEff = null;
        this.flowerImg.alpha = 1;
        this.isPlaying = false;
    };
    return FlowerPanel;
}(BasePanel));
__reflect(FlowerPanel.prototype, "FlowerPanel");
/**
 * 送花
 */
var FlowerUseView = (function (_super) {
    __extends(FlowerUseView, _super);
    function FlowerUseView() {
        var _this = _super.call(this) || this;
        _this._sendCount = 1;
        _this._maxCount = 0;
        _this.skinName = "FlowerUseViewSkin";
        _this.uilayer = GameLayer.POPUP;
        return _this;
    }
    FlowerUseView.prototype.childrenCreated = function () {
        _super.prototype.childrenCreated.call(this);
        this.list.itemRenderer = FlowerUseTargetItemRenderer;
    };
    FlowerUseView.prototype.open = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this.addEventTouchTap(this, this.onTouch);
        this.addEventTouchTap(this.list, this.onTouchList);
        this.addCustomEvent(212 /* PARTNER_CHANGE */, this.update);
        this.addCustomEvent(266 /* BACKPACK_ITEM_ADD */, this.updateMaterial);
        this.addCustomEvent(267 /* BACKPACK_ITEM_CHANGE */, this.updateMaterial);
        this.addCustomEvent(268 /* BACKPACK_ITEM_DEL */, this.updateMaterial);
        this._sendCount = 1;
        this._friendID = 0;
        this.update();
        this.selectName.text = "";
    };
    FlowerUseView.prototype.close = function () {
        this.removeEventTouchTap(this, this.onTouch);
        this.removeEventTouchTap(this.list, this.onTouchList);
        this.removeCustomEvents();
        this.scroller.visible = false;
    };
    FlowerUseView.prototype.update = function () {
        if (!this._collect) {
            this._collect = new ArrayCollection();
            this.list.dataProvider = this._collect;
        }
        this._collect.source = partnerControl.friendsList.source;
        this.updateCount();
        this.updateMaterial();
    };
    FlowerUseView.prototype.updateMaterial = function () {
        var itemData = backpackControl.getBagItemById(DataCenter.ins().AsTeamCopyBaseConfig.itemId);
        this._maxCount = itemData ? itemData.count : 0;
        this.itemCount.text = LangMgr.getValueByKey('equiFlowerCount', this._maxCount);
    };
    FlowerUseView.prototype.onTouch = function (e) {
        switch (e.target) {
            case this.bgClose:
            case this.closeBtn:
                UIMgr.ins().close(this);
                break;
            case this.sendBtn:
                if (!this._friendID) {
                    tipsControl.showTips(LangMgr.getValueByKey('equiSendFlower'));
                    return;
                }
                if (this._maxCount <= 0 || this._maxCount < this._sendCount) {
                    tipsControl.showTips(LangMgr.getValueByKey('equiNoProp'));
                    return;
                }
                copyControl.upTfFlower(this._friendID, this._sendCount);
                break;
            case this.minBtn:
                if (this._sendCount != 1) {
                    this._sendCount = 1;
                    this.updateCount();
                }
                break;
            case this.maxBtn:
                if (this._sendCount != this._maxCount) {
                    this._sendCount = this._maxCount;
                    this.updateCount();
                }
                break;
            case this.sub1Btn:
                if (this._sendCount > 1) {
                    this._sendCount--;
                    this.updateCount();
                }
                break;
            case this.add1Btn:
                if (this._sendCount < this._maxCount) {
                    this._sendCount++;
                    this.updateCount();
                }
                break;
            case this.openListBtn:
                this.scroller.visible = !this.scroller.visible;
                break;
        }
    };
    FlowerUseView.prototype.onTouchList = function (e) {
        var selectedItem = this.list.selectedItem;
        if (selectedItem) {
            this._friendID = selectedItem.id;
            this.selectName.text = selectedItem.name;
            this.scroller.visible = !this.scroller.visible;
        }
    };
    FlowerUseView.prototype.updateCount = function () {
        this.numLabel.text = this._sendCount + "";
        this.charmPoint.text = LangMgr.getValueByKey('equiCharmValue') + (this._sendCount * DataCenter.ins().AsTeamCopyBaseConfig.flowerChiv);
    };
    return FlowerUseView;
}(BaseEuiView));
__reflect(FlowerUseView.prototype, "FlowerUseView");
/**
 * 送花记录
 */
var FlowerLogItemRenderer = (function (_super) {
    __extends(FlowerLogItemRenderer, _super);
    function FlowerLogItemRenderer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FlowerLogItemRenderer.prototype.dataChanged = function () {
        this.playerName.text = this.data.roleName;
        this.flowerCount.textFlow = TextUtils.generateTextFlow(LangMgr.getValueByKey('flowerShow1', LangMgr.getColor('color43'), this.data.count));
    };
    return FlowerLogItemRenderer;
}(BaseItemRender));
__reflect(FlowerLogItemRenderer.prototype, "FlowerLogItemRenderer");
/**
 * 送花对象
 */
var FlowerUseTargetItemRenderer = (function (_super) {
    __extends(FlowerUseTargetItemRenderer, _super);
    function FlowerUseTargetItemRenderer() {
        var _this = _super.call(this) || this;
        _this.touchChildren = false;
        _this.touchEnabled = true;
        return _this;
    }
    FlowerUseTargetItemRenderer.prototype.dataChanged = function () {
        this.nameTxt.text = this.data.name;
    };
    return FlowerUseTargetItemRenderer;
}(BaseItemRender));
__reflect(FlowerUseTargetItemRenderer.prototype, "FlowerUseTargetItemRenderer");
/**
 * 欢迎
 */
var Greet1View = (function (_super) {
    __extends(Greet1View, _super);
    function Greet1View() {
        var _this = _super.call(this) || this;
        _this.skinName = "Greet1ViewSkin";
        _this.uilayer = GameLayer.POPUP;
        return _this;
    }
    Greet1View.prototype.open = function () {
        this.addEventTouchTap(this.bgClose, this.onTap);
        this.addEventTouchTap(this.sureGroup, this.onTap);
        this.playEff();
        this.awardList.touchThrough = false;
        this.awardList.itemRenderer = ItemBase;
        this.awardList.dataProvider = new ArrayCollection(DataCenter.ins().ClientGlobalConfig.welcomeItem.reward);
    };
    Greet1View.prototype.onTap = function (e) {
        if (e.currentTarget == this.bgClose || e.currentTarget == this.sureGroup) {
            this.sureBtn.visible = false;
            var tween = egret.Tween.get(this.pic);
            var view = UIMgr.playFun;
            if (view && view.expTxt) {
                var expTxt = view.expTxt;
                if (expTxt) {
                    var self_4 = this;
                    var point = expTxt.localToGlobal();
                    this.sureGroup.globalToLocal(point.x, point.y, point);
                    tween.to({
                        scaleX: 0,
                        scaleY: 0,
                        x: point.x,
                        y: point.y
                    }, 500).call(function () {
                        HookControl.ins().start();
                        UIMgr.ins().close(self_4);
                    });
                    egret.Tween.get(this.awardList).to({
                        scaleX: 0,
                        scaleY: 0,
                        x: point.x,
                        y: point.y
                    }, 500).call(function () { });
                }
                if (this.eff) {
                    DisplayUtils.removeFromParent(this.eff);
                    this.eff = null;
                }
                promptControl.dispatchWelcome();
            }
        }
    };
    return Greet1View;
}(GreetView));
__reflect(Greet1View.prototype, "Greet1View");
/**
 * 引导
 */
var GuideControl = (function (_super) {
    __extends(GuideControl, _super);
    function GuideControl() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.step = 0;
        _this.part = 0;
        _this.wrongCount = 0;
        _this.maxWrongCount = 2;
        return _this;
    }
    GuideControl.ins = function () {
        return _super.ins.call(this);
    };
    GuideControl.prototype.init = function () {
        if (this.isInit)
            return;
        this.isInit = true;
        if (ServerStorage.currPart == 0) {
            this.part = 1;
            this.step = 1;
        }
        else {
            this.part = ServerStorage.currPart;
            this.step = ServerStorage.currStep;
        }
        this.cfg = [];
        var temp;
        for (var i in DataCenter.ins().GuideConfig) {
            temp = [];
            for (var j in DataCenter.ins().GuideConfig[i]) {
                temp.push(DataCenter.ins().GuideConfig[i][j]);
            }
            this.cfg.push(temp);
        }
        if (this.part <= this.cfg.length) {
            var len = this.cfg[this.part - 1].length - 1;
            this.overs = this.cfg[this.part - 1][len].overs;
        }
        if (this.part <= this.cfg.length) {
            EventMgr.addListener(91 /* TASK_TRACE */, this.updateByTask, this);
        }
    };
    /** 任务的引导 */
    GuideControl.prototype.updateByTask = function () {
        this.guideOver();
        this.update(1);
    };
    /**点击任务之后的引导 */
    GuideControl.prototype.updateByClick = function () {
        this.update(2);
    };
    /** 根据某些出现触发引导*/
    GuideControl.prototype.updateByAppear = function () {
        this.update(3);
    };
    GuideControl.prototype.canShow = function () {
        if (Assert(this.cfg, LangMgr.getValueByKey('guideError'))) {
            return false;
        }
        if (this.part > this.cfg.length) {
            EventMgr.ins().removeAll(this);
            return false;
        }
        if (this.view && this.view.parent)
            return false;
        return true;
    };
    GuideControl.prototype.checkShow = function () {
        if (!this.curCfg)
            return false;
        try {
            var displayObject = this.getDisplayObj(this.part, this.step);
            if (!displayObject) {
                return false;
            }
        }
        catch (e) {
            return false;
        }
        return true;
    };
    GuideControl.prototype.addTimeHandler = function () {
        if (!TimerMgr.ins().isExists(this.timeHandler, this)) {
            TimerMgr.ins().doTimer(50, 0, this.timeHandler, this);
        }
    };
    GuideControl.prototype.removeTimeHandler = function () {
        TimerMgr.ins().remove(this.timeHandler, this);
    };
    GuideControl.prototype.timeHandler = function () {
        if (this.canShow()) {
            if (this.checkShow()) {
                this.show(this.part, this.step);
            }
        }
        else {
            this.removeTimeHandler();
        }
    };
    /**
     * 根据任务状态判断引导是否结束
     */
    GuideControl.prototype.guideOver = function () {
        var data = taskControl.taskTrace;
        if (this.overs && data && data.state == 0) {
            var len = this.overs.length;
            for (var i = 0; i < len; i++) {
                var over = this.overs[i];
                if (over.type == 1 && over.value == data.id) {
                    this.readyForNext();
                    this.close();
                    return;
                }
            }
        }
    };
    GuideControl.prototype.update = function (type) {
        if (type === void 0) { type = 0; }
        if (this.canShow() == false)
            return;
        this.curCfg = this.cfg[this.part - 1][this.step - 1];
        if (!this.curCfg || !this.curCfg.start)
            return;
        if (type == 1) {
            if (this.curCfg.start.type == 1) {
                var data = taskControl.taskTrace;
                if (data.id == this.curCfg.start.value)
                    if (data.state == 0)
                        guideControl.show(this.part, this.step);
            }
            else if (this.curCfg.start.type == 3) {
                var data = taskControl.taskTrace;
                if (data.id == this.curCfg.start.value && data.state == 1)
                    guideControl.show(this.part, this.step);
            }
        }
        else if (type == 2) {
            if (this.curCfg.start.type == 2) {
                var data = taskControl.taskTrace;
                if (data.id == this.curCfg.start.value && data.state == 0)
                    guideControl.show(this.part, this.step);
            }
        }
        else if (type == 3) {
            if (this.curCfg.start.type == 4) {
                guideControl.show(this.part, this.step);
            }
        }
    };
    /**
     * 显示
     */
    GuideControl.prototype.show = function (part, step) {
        var _this = this;
        this.part = part;
        this.step = step;
        var cfg = this.cfg[this.part - 1];
        if (cfg) {
            this.curCfg = this.cfg[this.part - 1][this.step - 1];
        }
        else {
            this.curCfg = null;
        }
        if (!this.curCfg) {
            this.readyForNext();
            this.close();
            return;
        }
        if (!this.checkShow()) {
            this.close();
            this.addTimeHandler();
            return;
        }
        if (this.view == null) {
            this.view = new GuideView();
        }
        this.view.clickCD = true;
        if (!this.view.hasEventListener(egret.Event.CHANGE)) {
            this.view.addEventListener(egret.Event.CHANGE, this.next, this);
        }
        this.save();
        var displayObject;
        try {
            displayObject = this.getDisplayObj(part, step);
        }
        catch (e) {
            if (this.wrongCount >= this.maxWrongCount) {
                this.close();
                return;
            }
            else {
                this.wrongCount++;
                this.view.close();
                debug.log("guide:" + part + "," + step + "error,play back");
                TimerMgr.ins().doTimer(300, 1, function () {
                    _this.show(part, step - 1);
                }, this);
                return;
            }
        }
        if (displayObject) {
            debug.log("play guide:" + part + "," + step);
            TimerMgr.ins().doNext(function () {
                _this.view.show(displayObject);
                StageUtils.ins().getStage().addChild(_this.view);
            }, this);
        }
        else {
            this.readyForNext();
            this.close();
        }
    };
    GuideControl.prototype.clickOut = function () {
        if (this.curCfg && this.curCfg.type == 1) {
            this.readyForNext();
            this.close();
        }
    };
    GuideControl.prototype.readyForNext = function () {
        this.part++;
        this.step = 1;
        if (this.part <= this.cfg.length) {
            var len = this.cfg[this.part - 1].length - 1;
            this.overs = this.cfg[this.part - 1][len].overs;
        }
        else {
            this.overs = null;
        }
        this.curCfg = null;
    };
    GuideControl.prototype.close = function () {
        if (this.view) {
            DisplayUtils.removeFromParent(this.view);
            this.view.close();
            this.view.removeEventListener(egret.Event.CHANGE, this.next, this);
            this.wrongCount = 0;
        }
        this.removeTimeHandler();
    };
    //下一步
    GuideControl.prototype.next = function () {
        var _this = this;
        TimerMgr.ins().doNext(function () {
            _this.show(_this.part, _this.step + 1);
        }, this);
    };
    /**保存设置 */
    GuideControl.prototype.save = function () {
        if (this.step == 1) {
            ServerStorage.ins().setValue(0 /* guidePart */, this.part + 1);
            ServerStorage.ins().setValue(1 /* guideStep */, 1);
        }
    };
    /**获取焦点显示对象 */
    GuideControl.prototype.getDisplayObj = function (part, step) {
        var displayObject;
        var cfg;
        if (this.cfg[part - 1] && step <= this.cfg[part - 1].length) {
            cfg = this.cfg[part - 1][step - 1];
            //displayObject = eval('UIMgr.ins().getView(' + cfg.view + ')' + '.' + cfg.target);
            //兼容小游戏，小游戏没有eval
            var view = UIMgr.ins().getView(cfg.view);
            if (view) {
                var arrTarget = cfg.target.split(".");
                var curTarget = view;
                for (var _i = 0, arrTarget_1 = arrTarget; _i < arrTarget_1.length; _i++) {
                    var subTarget = arrTarget_1[_i];
                    var regArr = /(\w+)\(([\w,]*)\)/.exec(subTarget);
                    //是方法调用
                    if (regArr) {
                        var funName = regArr[1];
                        var funParams = regArr[2];
                        //参数可能没有
                        if (!funParams) {
                            curTarget = curTarget[funName].call(curTarget);
                        }
                        else {
                            //兼容多个参数，逗号分割
                            var funParamArr = funParams.split(",");
                            curTarget = curTarget[funName].apply(curTarget, funParamArr);
                        }
                    }
                    else {
                        curTarget = curTarget[subTarget];
                    }
                }
                displayObject = curTarget;
            }
        }
        return displayObject;
    };
    /**
     * 任务相关引导
     * @param id  任务id
     * @param taskType  任务类型  0 每日任务 1成就任务或任务追踪
     */
    GuideControl.taskGuidance = function (id, taskType) {
        var config;
        switch (taskType) {
            case 0:
                config = DataCenter.ins().GuideBasicConfig[id];
                break;
            case 1:
                config = taskControl.getAchieveConfById(id);
                promptControl.dispatchAchievementBef(config);
                break;
        }
        switch (config.control) {
            case 1 /* OpenWin */:
                if (id == 100082 && String(config.controlTarget[0]) == "LimitTaskView") {
                    if (taskControl.limitTaskEndTime > 0
                        && taskControl.limitTaskState != 0
                        && taskControl.limitTaskEndTime > 0
                        && (taskControl.limitTaskEndTime - Math.floor(GameServer.serverTime / 1000) > 0)) {
                        GuideControl.guidance(config.controlTarget[0], config.controlTarget[1]);
                    }
                    else {
                        GuideControl.guidance("RoleView", 1);
                    }
                }
                else {
                    GuideControl.guidance(config.controlTarget[0], config.controlTarget[1]);
                }
                break;
            case 2 /* ChallengeBoss */:
                this.challengeBoss();
                if (taskType == 1) {
                    var cfg = config;
                    promptControl.dispatchKillBoss(cfg);
                }
                break;
            case 3 /* ArtifactGuide */:
                artifactControl.setGuide();
                break;
            case 4 /* AtkMonster */:
                HookControl.ins().stop();
                var index = config.controlTarget[0];
                var x = copyControl.rPos[index][0].x * MapControl.CELL_SIZE;
                var y = copyControl.rPos[index][0].y * MapControl.CELL_SIZE;
                this.tempMainRole = UnitMgr.ins().getNoDieRole();
                MapControl.moveEntity(this.tempMainRole, x, y);
                TimerMgr.ins().doTimer(500, 0, this.guideFun, this);
                break;
            case 5 /* AutoPk */:
                copyControl.setAutoPk();
                break;
            case 7 /* GuideFb */:
                if (confrontControl.isEncounter()) {
                    tipsControl.showTips(LangMgr.getValueByKey('atkPlayerIng'));
                    return;
                }
                if (backpackControl.getSurplusCount() < BackpackControl.BAG_ENOUGH) {
                    UIMgr.ins().open("BackpackFullTipsView");
                    return;
                }
                copyControl.upIntoGuideFb(config.controlTarget[1]);
                break;
        }
    };
    GuideControl.guideFun = function () {
        if (this.tempMainRole.action == UnitAction.STAND) {
            HookControl.ins().start();
            TimerMgr.ins().remove(this.guideFun, this);
        }
    };
    /**
     * 引导
     */
    GuideControl.guidance = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        var tparam = param[1] != -1 ? param[1] : null;
        UIMgr.ins().open(param[0], tparam, param[2]);
    };
    GuideControl.challengeBoss = function (func) {
        if (backpackControl.getSurplusCount() < BackpackControl.BAG_ENOUGH) {
            UIMgr.ins().open("BackpackFullTipsView");
            return;
        }
        if (copyControl.currentEnergy >= copyControl.energy) {
            if (func && typeof (func) == "function") {
                func();
            }
            copyControl.autoPk();
        }
        else {
            tipsControl.showTips(LangMgr.getValueByKey('gameGuiderPower'));
        }
    };
    GuideControl.startTaskEffect = function () {
        if (!this.guideEffect) {
            this.guideEffect = new GuideEffectDisplay();
        }
        this.guideEffect.start();
    };
    GuideControl.stopTaskEffect = function () {
        if (this.guideEffect) {
            this.guideEffect.stop();
        }
    };
    return GuideControl;
}(SingleClass));
__reflect(GuideControl.prototype, "GuideControl");
var GuideConditionVo = (function () {
    function GuideConditionVo() {
    }
    return GuideConditionVo;
}());
__reflect(GuideConditionVo.prototype, "GuideConditionVo");
var GuideArrow = (function (_super) {
    __extends(GuideArrow, _super);
    function GuideArrow() {
        var _this = _super.call(this) || this;
        _this.skinName = "GuideArrowsSkin";
        return _this;
    }
    GuideArrow.prototype.update = function () {
        var curCfg = guideControl.curCfg;
        if (!curCfg)
            return;
        if (!curCfg.tips || curCfg.tips == "") {
            this.visible = false;
            return;
        }
        egret.Tween.removeTweens(this.parent);
        this.parent.x = 0;
        this.visible = true;
        if (curCfg.direction == 1) {
            this.currentState = "right";
            egret.Tween.get(this.parent, { loop: true }).to({ x: 40 }, 1000).to({ x: 0 }, 1000);
        }
        else {
            this.currentState = "left";
            egret.Tween.get(this.parent, { loop: true }).to({ x: -40 }, 1000).to({ x: 0 }, 1000);
        }
        this.lab.text = curCfg.tips;
    };
    GuideArrow.prototype.close = function () {
        if (this.parent) {
            egret.Tween.removeTweens(this.parent);
        }
    };
    return GuideArrow;
}(eui.Component));
__reflect(GuideArrow.prototype, "GuideArrow");
var GuideArrow2 = (function (_super) {
    __extends(GuideArrow2, _super);
    function GuideArrow2() {
        var _this = _super.call(this) || this;
        _this.skinName = "GuideArrowsSkin";
        return _this;
    }
    GuideArrow2.prototype.setDirection = function (direction) {
        egret.Tween.removeTweens(this);
        this.x = 0;
        this.visible = true;
        if (direction == 1) {
            this.currentState = "right";
            egret.Tween.get(this, { loop: true }).to({ x: 40 }, 1000).to({ x: 0 }, 1000);
        }
        else {
            this.currentState = "left";
            egret.Tween.get(this, { loop: true }).to({ x: -40 }, 1000).to({ x: 0 }, 1000);
        }
    };
    GuideArrow2.prototype.setTips = function (tips) {
        this.lab.text = tips;
    };
    GuideArrow2.prototype.removeTweens = function () {
        egret.Tween.removeTweens(this);
    };
    return GuideArrow2;
}(eui.Component));
__reflect(GuideArrow2.prototype, "GuideArrow2");
var GuideEffectDisplay = (function (_super) {
    __extends(GuideEffectDisplay, _super);
    function GuideEffectDisplay() {
        var _this = _super.call(this) || this;
        _this.ignoreLeak = true;
        _this.touchEnabled = false;
        _this.touchChildren = false;
        _this._effGroup = new eui.Group();
        _this.addChild(_this._effGroup);
        _this._arrowGroup = new eui.Group();
        _this.addChild(_this._arrowGroup);
        _this._effCir = new GameMovieClip();
        _this._effGroup.addChild(_this._effCir);
        _this._arrow = new GuideArrow2();
        _this._arrowGroup.addChild(_this._arrow);
        return _this;
    }
    GuideEffectDisplay.prototype.start = function () {
        TimerMgr.ins().remove(this.update, this);
        TimerMgr.ins().doTimer(500, 0, this.update, this);
    };
    GuideEffectDisplay.prototype.stop = function () {
        TimerMgr.ins().remove(this.update, this);
        this.hide();
    };
    GuideEffectDisplay.prototype.show = function (tips) {
        if (!this._isShow) {
            this._isShow = true;
            var view = UIMgr.playFun;
            if (!view) {
                this.hide();
                return;
            }
            egret.Tween.removeTweens(this);
            this.alpha = 0;
            egret.Tween.get(this).to({ alpha: 1 }, 300);
            var target = view['taskTraceBtn'];
            this.x = target.width >> 1;
            this.y = target.height >> 1;
            target.addChild(this);
            this._arrow.setDirection(0);
            this._effCir.playFile(PATH_EFF + "guideff", -1);
        }
        this._arrow.setTips(tips);
    };
    GuideEffectDisplay.prototype.hide = function () {
        if (this._isShow) {
            this._isShow = false;
            this._arrow.removeTweens();
            if (this.parent)
                this.parent.removeChild(this);
        }
    };
    GuideEffectDisplay.prototype.isShow = function () {
        return this._isShow;
    };
    GuideEffectDisplay.prototype.update = function () {
        var taskData = taskControl.taskTrace;
        if (taskData) {
            var config = taskControl.getAchieveConfById(taskData.id);
            var noShowWin = ["GreetView"];
            for (var _i = 0, noShowWin_1 = noShowWin; _i < noShowWin_1.length; _i++) {
                var win = noShowWin_1[_i];
                if (UIMgr.ins().getView(win)) {
                    this.hide();
                    return;
                }
            }
            if (config) {
                if (taskData.state == 0 && config.startwarning) {
                    this.show(config.startwarning);
                }
                else if (taskData.state == 1 && config.finishwarning) {
                    this.show(config.finishwarning);
                }
                else {
                    this.hide();
                }
            }
        }
    };
    return GuideEffectDisplay;
}(BaseLeakDisplay));
__reflect(GuideEffectDisplay.prototype, "GuideEffectDisplay");
/*
 * 引导升级
 */
var GuideUpgradeView = (function (_super) {
    __extends(GuideUpgradeView, _super);
    function GuideUpgradeView() {
        var _this = _super.call(this) || this;
        //描述 主面板类名 分页索引 星星数
        _this.gainWay = [];
        _this.uilayer = GameLayer.POPUP;
        _this.gainWay = [
            [LangMgr.getValueByKey('towerPassLevel'), "CyberPuzzle", 0, 3],
            [LangMgr.getValueByKey('towerName'), "CopyView", 2, 5],
            [LangMgr.getValueByKey('towerKill'), "LadderView", 0, 4],
            [LangMgr.getValueByKey('towerExp'), "CopyView", 1, 5]
        ];
        return _this;
    }
    GuideUpgradeView.prototype.initUI = function () {
        _super.prototype.initUI.call(this);
        this.skinName = "GuideUpgradeViewSkin";
        this.gainList.itemRenderer = GainGoodsItem;
    };
    GuideUpgradeView.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.addEventTouchTap(this.bgClose, this.onTap);
        this.addEventItemTap(this.gainList, this.onTouchList);
        this.gainList.dataProvider = new eui.ArrayCollection(this.gainWay);
        this.gainList.validateNow();
        for (var i = 0; i < this.gainList.numElements; i++) {
            var gitem = this.gainList.getElementAt(i);
            if (gitem) {
                var isOpen = false;
                var needLv = void 0;
                var needZs = void 0;
                var guanka = void 0;
                if (i <= 0) {
                    isOpen = true;
                }
                else if (i == 1) {
                    isOpen = reincarnateControl.lv >= DataCenter.ins().BabelLotteryConfig[1].zsLevelLimit && ActorControl.level >= DataCenter.ins().BabelLotteryConfig[1].levelLimit;
                    needLv = DataCenter.ins().BabelLotteryConfig[1].levelLimit;
                    needZs = DataCenter.ins().BabelLotteryConfig[1].zsLevelLimit;
                }
                else if (i == 2) {
                    isOpen = copyControl.guanqiaID >= DataCenter.ins().SkirmishBaseConfig.openLevel;
                    guanka = DataCenter.ins().SkirmishBaseConfig.openLevel;
                }
                else if (i == 3) {
                    isOpen = ActorControl.level >= DataCenter.ins().CopyExpBaseConfig.openLv;
                    needLv = DataCenter.ins().CopyExpBaseConfig.openLv;
                }
                gitem.gainData(isOpen, this.gainWay[i][3], { needLv: needLv, needZs: needZs, guanka: guanka });
            }
        }
    };
    GuideUpgradeView.prototype.close = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.removeEventTouchTap(this.bgClose, this.onTap);
        this.removeEventItemTap(this.gainList, this.onTouchList);
    };
    GuideUpgradeView.prototype.onTouchList = function (e) {
        var item = e.item;
        if (e.item == null) {
            return;
        }
        var openSuccess = UIMgr.ins().viewOpenCheck(item[1], item[2]);
        if (openSuccess) {
            UIMgr.ins().closeTopLevel();
            if (CommonFun.isCyberPuzzle(item[1])) {
                if (copyControl.guanqiaID < GameConst.AUTO_GUANQIA) {
                    copyControl.setAutoPk();
                    UIMgr.ins().close(this);
                    return;
                }
                portalControl.openAuto();
                GuideControl.challengeBoss();
                UIMgr.ins().close(this);
                return;
            }
            GuideControl.guidance(item[1], item[2]);
            UIMgr.ins().close(this);
        }
    };
    GuideUpgradeView.prototype.onTap = function (e) {
        switch (e.currentTarget) {
            case this.bgClose:
                UIMgr.ins().close(this);
                break;
        }
    };
    return GuideUpgradeView;
}(BaseEuiView));
__reflect(GuideUpgradeView.prototype, "GuideUpgradeView");
var GuideView = (function (_super) {
    __extends(GuideView, _super);
    function GuideView() {
        var _this = _super.call(this) || this;
        _this.rect = new egret.Rectangle(1, 1, 1, 1);
        _this.infoGroup = new eui.Group;
        _this.infoGroup.touchEnabled = false;
        _this.infoGroup.touchChildren = false;
        _this.addChild(_this.infoGroup);
        _this.mc = new GameMovieClip;
        _this.infoGroup.addChild(_this.mc);
        _this.arrowGroup = new eui.Group();
        _this.infoGroup.addChild(_this.arrowGroup);
        _this.arrow = new GuideArrow;
        _this.arrowGroup.addChild(_this.arrow);
        return _this;
    }
    /**
     * 设置显示数据
     * @param obj
     */
    GuideView.prototype.show = function (obj) {
        _super.prototype.show.call(this, obj);
        this.arrow.update();
        this.mc.playFile(PATH_EFF + "guideff", -1);
    };
    GuideView.prototype.close = function () {
        _super.prototype.close.call(this);
        this.arrow.close();
    };
    return GuideView;
}(GuideViewBase));
__reflect(GuideView.prototype, "GuideView");
var GuideSelectControl = (function (_super) {
    __extends(GuideSelectControl, _super);
    function GuideSelectControl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GuideSelectControl.ins = function () {
        return _super.ins.call(this);
    };
    GuideSelectControl.prototype.upNoGuide = function () {
    };
    __decorate([
        up(100)
    ], GuideSelectControl.prototype, "upNoGuide", null);
    GuideSelectControl = __decorate([
        protocolsId(41 /* PROTOCOL_41 */)
    ], GuideSelectControl);
    return GuideSelectControl;
}(BaseSystem));
__reflect(GuideSelectControl.prototype, "GuideSelectControl");
var GuideSelectView = (function (_super) {
    __extends(GuideSelectView, _super);
    function GuideSelectView() {
        var _this = _super.call(this) || this;
        _this.uilayer = GameLayer.TIPS;
        _this.skinName = "GuideSelectViewSkin";
        return _this;
    }
    GuideSelectView.prototype.open = function () {
        this.addEventTouchTap(this.sureBtn, this.onTap);
        this.addEventTouchTap(this.grpNoGuide, this.onTap);
        this.addEventTouchTap(this.grpGuide, this.onTap);
        this.selectGuideImg.visible = false;
        this.noSelectGuideImg.visible = true;
        this.guideImg.visible = false;
        this.guideImgGray.visible = true;
        this.noGuideImg.visible = true;
        this.noGuideImgGray.visible = false;
    };
    GuideSelectView.prototype.close = function () {
        this.removeEventTouchTap(this.sureBtn, this.onTap);
        this.removeEventTouchTap(this.grpNoGuide, this.onTap);
        this.removeEventTouchTap(this.grpGuide, this.onTap);
    };
    GuideSelectView.prototype.onTap = function (e) {
        if (e.target == this.grpGuide || e.target.parent == this.grpGuide) {
            this.selectGuideImg.visible = true;
            this.noSelectGuideImg.visible = false;
            this.guideImg.visible = true;
            this.guideImgGray.visible = false;
            this.noGuideImg.visible = false;
            this.noGuideImgGray.visible = true;
        }
        else if (e.target == this.grpNoGuide || e.target.parent == this.grpNoGuide) {
            this.selectGuideImg.visible = false;
            this.noSelectGuideImg.visible = true;
            this.guideImg.visible = false;
            this.guideImgGray.visible = true;
            this.noGuideImg.visible = true;
            this.noGuideImgGray.visible = false;
        }
        else if (e.target == this.sureBtn) {
            if (this.selectGuideImg.visible) {
                HookControl.ins().start();
                UIMgr.ins().close(this);
            }
            else {
                guideSelectControl.upNoGuide();
                HookControl.ins().start();
                UIMgr.ins().close(this);
            }
        }
    };
    return GuideSelectView;
}(BaseEuiView));
__reflect(GuideSelectView.prototype, "GuideSelectView");
var HelpControl = (function () {
    function HelpControl() {
    }
    HelpControl.openHelpWin = function (id) {
        if (typeof id == "string") {
            UIMgr.ins().open(HelpView, id);
        }
        else {
            UIMgr.ins().open(HelpView, this.getHelpStr(id));
        }
    };
    HelpControl.getHelpStr = function (id) {
        var helpInfoConfig = DataCenter.ins().HelpInfoConfig[id];
        if (Assert(helpInfoConfig, "HelpInfoConfig do not have HelpID:" + id)) {
            return "";
        }
        return helpInfoConfig.text;
    };
    return HelpControl;
}());
__reflect(HelpControl.prototype, "HelpControl");
var HelpView = (function (_super) {
    __extends(HelpView, _super);
    function HelpView() {
        var _this = _super.call(this) || this;
        _this.skinName = "HelpViewSkin";
        _this.uilayer = GameLayer.POPUP;
        return _this;
    }
    HelpView.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.addEventTouchEnd(this, this.otherClose);
        this.textInfo.textFlow = TextUtils.generateTextFlow(param[0]);
        this.textInfo.height = this.textInfo.textHeight;
        this.background.height = this.textInfo.textHeight + 60;
        this.anigroup.y = (StageUtils.ins().getHeight() - this.background.height) / 2;
    };
    HelpView.prototype.otherClose = function (evt) {
        UIMgr.ins().close(this);
    };
    return HelpView;
}(BaseEuiView));
__reflect(HelpView.prototype, "HelpView");
/**
 * 战灵技能
 */
var AshtarteSkillControl = (function (_super) {
    __extends(AshtarteSkillControl, _super);
    function AshtarteSkillControl() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.triggerInterval = {};
        return _this;
    }
    AshtarteSkillControl.ins = function () {
        return _super.ins.call(this);
    };
    /**
     * 检测战灵出现触发
     */
    AshtarteSkillControl.prototype.checkWarSpiritBubbleTrigger = function () {
        //战灵相关技能
        if (ashtarteControl.ZhanLingOpen()) {
            for (var key in DataCenter.ins().AshtarteBaseConfig) {
                var base = DataCenter.ins().AshtarteBaseConfig[key];
                var zlData = ashtarteControl.getZhanLingDataById(base.id);
                if (!zlData)
                    continue;
                switch (base.talent) {
                    case 0 /* TYPE0 */:
                        if (!DataCenter.ins().AshtarteLevelConfig[base.id][zlData.level])
                            break;
                        var talentLv = DataCenter.ins().AshtarteLevelConfig[base.id][zlData.level].talentLevel;
                        var dp = DataCenter.ins().AshtarteTalentConfig[base.talent][talentLv];
                        if (dp) {
                            if (GameControl.triggerValue(dp.rate)) {
                                skillControl.dispatchShowSkillWord(dp.showWords);
                                for (var i = 0; i < heroControl.subRolesLen; i++) {
                                    var myChar = UnitMgr.ins().getMainRole(i);
                                    if (myChar) {
                                        var buff = BuffModel.createBuff(dp.effId, myChar);
                                        myChar.addBuff(buff);
                                    }
                                }
                            }
                        }
                        break;
                    case 8 /* TYPE8 */:
                        talentLv = ashtarteControl.getZhanLingDataByTalentLv(base.id);
                        dp = DataCenter.ins().AshtarteTalentConfig[base.talent][talentLv];
                        if (GameControl.triggerValue(dp.rate)) {
                            for (var i = 0; i < heroControl.subRolesLen; i++) {
                                var myChar = UnitMgr.ins().getMainRole(i);
                                if (myChar) {
                                    var buff = BuffModel.createBuff(dp.effId, myChar);
                                    myChar.addBuff(buff);
                                }
                            }
                        }
                        break;
                }
            }
        }
    };
    /**
     * 检测合击触发
     */
    AshtarteSkillControl.prototype.checkHJTrigger = function (source, targets) {
        //战灵相关技能
        if (ashtarteControl.ZhanLingOpen()) {
            if (!source || !targets[0])
                return;
            var hp = source.getHP();
            var maxHp = source.infoModel.getAtt(2 /* atMaxHp */);
            var isTrigger = false;
            var isAttacck = source.infoModel.team == 0 /* My */ && source instanceof UnitRole;
            for (var key in DataCenter.ins().AshtarteBaseConfig) {
                var base = DataCenter.ins().AshtarteBaseConfig[key];
                var zlData = ashtarteControl.getZhanLingDataById(base.id);
                if (!zlData)
                    continue;
                switch (base.talent) {
                    case 6 /* TYPE6 */:
                        if (isAttacck) {
                            var talentLv = ashtarteControl.getZhanLingDataByTalentLv(base.id);
                            var dp_1 = DataCenter.ins().AshtarteTalentConfig[base.talent][talentLv];
                            if (!dp_1)
                                break;
                            //给队友添加造成伤害提升buff
                            for (var i = 0; i < heroControl.subRolesLen; i++) {
                                var myChar = UnitMgr.ins().getMainRole(i);
                                if (myChar) {
                                    var _loop_6 = function (passive) {
                                        if (!passive.type || passive.type == myChar.infoModel.job) {
                                            var skillDp = new SkillVo(passive.id);
                                            this_5.intervalDoFun(source.infoModel.handle + passive.id + base.talent, skillDp.cd, function () {
                                                HookControl.ins().tryUseAshtarteSkill(source, passive.id, true);
                                            });
                                        }
                                    };
                                    var this_5 = this;
                                    for (var _i = 0, _a = dp_1.passive; _i < _a.length; _i++) {
                                        var passive = _a[_i];
                                        _loop_6(passive);
                                    }
                                }
                            }
                        }
                        break;
                    case 7 /* TYPE7 */:
                        var dp = DataCenter.ins().AshtarteTalentConfig[base.talent][1];
                        GameControl.triggerValue(dp.rate);
                        break;
                }
            }
        }
    };
    /**
     * 检测死亡触发
     */
    AshtarteSkillControl.prototype.checkDieTrigger = function (source, targets) {
        //战灵相关技能
        if (ashtarteControl.ZhanLingOpen()) {
            if (!source || !targets[0])
                return;
            var hp = source.getHP();
            var maxHp = source.infoModel.getAtt(2 /* atMaxHp */);
            var isTrigger = false;
            var isAttacck = source.infoModel.team == 0 /* My */ && source instanceof UnitRole;
            for (var key in DataCenter.ins().AshtarteBaseConfig) {
                var base = DataCenter.ins().AshtarteBaseConfig[key];
                var zlData = ashtarteControl.getZhanLingDataById(base.id);
                if (!zlData)
                    continue;
                var talentLv = ashtarteControl.getZhanLingDataByTalentLv(base.id);
                var dp = DataCenter.ins().AshtarteTalentConfig[base.talent][talentLv];
                if (!dp)
                    continue;
                switch (base.talent) {
                    case 2 /* TYPE2 */:
                        if (isAttacck) {
                            //给队友添加造成伤害提升buff
                            for (var i = 0; i < heroControl.subRolesLen; i++) {
                                var myChar = UnitMgr.ins().getMainRole(i);
                                if (myChar && myChar.infoModel.handle != source.infoModel.handle) {
                                    var _loop_7 = function (passive) {
                                        if (!passive.type || passive.type == myChar.infoModel.job) {
                                            var skillDp = new SkillVo(passive.id);
                                            this_6.intervalDoFun(source.infoModel.handle + passive.id + base.id, skillDp.cd, function () {
                                                HookControl.ins().tryUseAshtarteSkill(source, passive.id, true);
                                            });
                                        }
                                    };
                                    var this_6 = this;
                                    for (var _i = 0, _a = dp.passive; _i < _a.length; _i++) {
                                        var passive = _a[_i];
                                        _loop_7(passive);
                                    }
                                }
                            }
                        }
                        break;
                    case 1 /* TYPE1 */:
                        if (!isAttacck && targets[0] && targets[0].infoModel.team == 0 /* My */) {
                            for (var _b = 0, _c = dp.passive; _b < _c.length; _b++) {
                                var passive = _c[_b];
                                if (!passive.type || targets[0].infoModel.job == passive.type) {
                                    var skillDp = new SkillVo(passive.id);
                                    //给队友添加造成伤害提升buff
                                    for (var i = 0; i < heroControl.subRolesLen; i++) {
                                        var myChar = UnitMgr.ins().getMainRole(i);
                                        if (!myChar || myChar.infoModel.handle == targets[0].infoModel.handle)
                                            break;
                                        var skillDp_1 = new SkillVo(passive.id);
                                        if (skillDp_1.tarEff && skillDp_1.tarEff.length > 0) {
                                            for (var _d = 0, _e = skillDp_1.tarEff; _d < _e.length; _d++) {
                                                var effid = _e[_d];
                                                var buff = BuffModel.createBuff(effid, myChar);
                                                myChar.addBuff(buff);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        break;
                    case 3 /* TYPE3 */:
                        if (!isAttacck && targets[0] && targets[0].infoModel.team == 0 /* My */ && targets[0].infoModel.job == 1 /* ZhanShi */) {
                            var _loop_8 = function (passive) {
                                if (!passive.type || passive.type == source.infoModel.job) {
                                    var skillDp = new SkillVo(passive.id);
                                    this_7.intervalDoFun(source.infoModel.handle + passive.id + base.id, skillDp.cd, function () {
                                        HookControl.ins().tryUseAshtarteSkill(source, passive.id, true);
                                    });
                                }
                            };
                            var this_7 = this;
                            for (var _f = 0, _g = dp.passive; _f < _g.length; _f++) {
                                var passive = _g[_f];
                                _loop_8(passive);
                            }
                        }
                        break;
                    case 5 /* TYPE5 */:
                        if (!isAttacck && targets[0] && targets[0].infoModel.team == 0 /* My */ && targets[0].infoModel.job == 2 /* FaShi */) {
                            var _loop_9 = function (passive) {
                                if (!passive.type || passive.type == source.infoModel.job) {
                                    var skillDp = new SkillVo(passive.id);
                                    this_8.intervalDoFun(source.infoModel.handle + passive.id + base.id, skillDp.cd, function () {
                                        HookControl.ins().tryUseAshtarteSkill(source, passive.id, true);
                                    });
                                }
                            };
                            var this_8 = this;
                            for (var _h = 0, _j = dp.passive; _h < _j.length; _h++) {
                                var passive = _j[_h];
                                _loop_9(passive);
                            }
                        }
                        break;
                }
            }
        }
    };
    /**
     * 检测血量触发
     */
    AshtarteSkillControl.prototype.checkHPTrigger = function (target, sourceTarget) {
        //战灵相关技能
        if (ashtarteControl.ZhanLingOpen()) {
            if (!target || !sourceTarget)
                return;
            var hp = target.getHP();
            var maxHp = target.infoModel.getAtt(2 /* atMaxHp */);
            var isTrigger = false;
            var isAttacck = target.infoModel.team == 0 /* My */ && target instanceof UnitRole;
            var _loop_10 = function (key) {
                var base = DataCenter.ins().AshtarteBaseConfig[key];
                var zlData = ashtarteControl.getZhanLingDataById(base.id);
                if (!zlData)
                    return "continue";
                switch (base.talent) {
                    case 4 /* TYPE4 */:
                        break;
                    case 9 /* TYPE9 */:
                        //基础战灵技能
                        if (isAttacck) {
                            var id = 0;
                            var skillList = ashtarteControl.getZhanLingDataBySkill(id);
                            var zlDt = ashtarteControl.getZhanLingDataById(id);
                            var passiveId_1 = 0;
                            for (var k in skillList) {
                                if (zlDt.level >= skillList[k].open) {
                                    if (skillList[k].id == 1) {
                                        //刃甲
                                        passiveId_1 = DataCenter.ins().AshtarteSkillConfig[skillList[k].id].passive;
                                    }
                                    else if (skillList[k].id == 4) {
                                        //称霸
                                        passiveId_1 = DataCenter.ins().AshtarteSkillConfig[skillList[k].id].passivePlus;
                                    }
                                }
                            }
                            if (passiveId_1 > 0) {
                                var skillDp = new SkillVo(passiveId_1);
                                if (hp / maxHp < skillDp.config.passive.p1 / 10000) {
                                    this_9.intervalDoFun(target.infoModel.handle + passiveId_1 + id, skillDp.cd, function () {
                                        HookControl.ins().tryUseAshtarteSkill(target, passiveId_1, true);
                                    });
                                }
                            }
                        }
                        break;
                }
            };
            var this_9 = this;
            for (var key in DataCenter.ins().AshtarteBaseConfig) {
                _loop_10(key);
            }
        }
    };
    /**
     * 间隔执行方法
     */
    AshtarteSkillControl.prototype.intervalDoFun = function (indx, cd, fun) {
        //间隔计算
        if (this.triggerInterval[indx] == undefined) {
            this.triggerInterval[indx] = egret.getTimer();
        }
        if (egret.getTimer() - this.triggerInterval[indx] >= 0) {
            this.triggerInterval[indx] = egret.getTimer() + cd;
            fun();
        }
    };
    return AshtarteSkillControl;
}(SingleClass));
__reflect(AshtarteSkillControl.prototype, "AshtarteSkillControl");
var HookControl = (function (_super) {
    __extends(HookControl, _super);
    function HookControl() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.aiList = {};
        _this.zhanlingTime = 0;
        _this.zhanlingdelayTime = 0;
        _this.isFindDrop = false;
        _this.pStarting = false;
        _this.isLog = false;
        return _this;
    }
    HookControl.ins = function () {
        return _super.ins.call(this);
    };
    HookControl.prototype.init = function () {
        this.stop();
        this.skillCD = {};
        this.attrCD = {};
        this.attrValue = {};
        this.inited = true;
    };
    /**
     * 开始挂机
     */
    HookControl.prototype.start = function () {
        this.pStarting = true;
        this.isStartAtk = false;
        gameControl.dispatchHookStateChange(GameControl.HOOK_STATE_FIND_ENMENY);
        this.teamAction = {};
        if (!this.starting) {
            if (!this.inited) {
                this.init();
            }
            this.addHookTimer();
        }
    };
    /**
     * 关闭挂机
     */
    HookControl.prototype.stop = function () {
        this.pStarting = false;
        if (this.inited) {
            this.stopHookTimer();
        }
        this.skillCD = {};
        for (var handle in this.curSkill) {
            if (this.curSkill[handle]) {
                ObjectPool.push(this.curSkill[handle]);
            }
        }
        this.curSkill = {};
        this.curTarget = {};
        this.lastTarget = {};
        this.skillCastType = {};
        this.skillTargetType = {};
        this.hashHpObj = {};
        this.attrCD = {};
        this.attrValue = {};
    };
    HookControl.prototype.clearTarget = function (target) {
        if (target && target.infoModel) {
            var handle = target.infoModel.handle;
            delete this.skillCD[handle];
            var skill = this.curSkill[handle];
            if (skill) {
                ObjectPool.push(skill);
            }
            delete this.curSkill[handle];
            delete this.curTarget[handle];
            delete this.lastTarget[handle];
            delete this.skillCastType[handle];
            delete this.skillTargetType[handle];
            for (var key in this.curTarget) {
                if (this.curTarget[key] == target) {
                    delete this.curTarget[key];
                }
            }
            for (var key in this.lastTarget) {
                if (key + "" == handle + "") {
                    delete this.lastTarget[key];
                }
            }
        }
    };
    HookControl.prototype.clearAIList = function () {
        this.aiList = {};
    };
    HookControl.prototype.clear = function () {
        this.stop();
        this.clearAIList();
        this.isFindDrop = false;
        TimerMgr.ins().removeAll(this);
    };
    HookControl.prototype.destruct = function () {
        this.skillCD = {};
        this.stop();
    };
    Object.defineProperty(HookControl.prototype, "starting", {
        get: function () {
            return TimerMgr.ins().isExists(this.startHook, this);
        },
        enumerable: true,
        configurable: true
    });
    HookControl.prototype.add = function (char) {
        this.aiList[char.infoModel.handle] = char;
    };
    HookControl.prototype.remove = function (char) {
        delete this.aiList[char.infoModel.handle];
    };
    HookControl.prototype.getAIList = function () {
        return this.aiList;
    };
    /**
     * 开始
     */
    HookControl.prototype.startHook = function () {
        var list = this.aiList;
        var master = UnitMgr.ins().getNoDieRole();
        var poxIndexCache = {};
        for (var i in list) {
            var selfTarget = list[i];
            var target = void 0;
            var isRole = selfTarget instanceof UnitRole;
            var handle = selfTarget.infoModel.handle;
            //buff伤害
            var selfBuffList = selfTarget.buffList;
            var isCannotHit = false;
            for (var groupID in selfBuffList) {
                //自己已经死亡
                if (selfTarget.AI_STATE == 3 /* Die */)
                    break;
                var buff = selfBuffList[groupID];
                if (buff.effConfig.type == 2 /* AddBlood */ ||
                    buff.effConfig.type == 1 /* AdditionalDamage */) {
                    if (buff.isExecute()) {
                        buff.step++;
                        var isDie = this.hramedDie(selfTarget, buff.value);
                        if (isDie) {
                            selfTarget.AI_STATE = 3 /* Die */;
                        }
                        this.showHram(isDie, 1 /* TYPE1 */, selfTarget, buff.source, buff.value, LangMgr.getValueByKey('zsType12') + buff.effConfig.id);
                        if (buff.step >= buff.count) {
                            selfTarget.removeBuff(buff);
                        }
                    }
                }
                if (buff.canRemove()) {
                    if (buff.isLift) {
                        UnitMgr.ins().removeByHandle(handle);
                    }
                    selfTarget.removeBuff(buff);
                }
                else if (buff.isCanotHit()) {
                    isCannotHit = true;
                }
            }
            if (isCannotHit)
                continue;
            //自己已经死亡
            if (selfTarget.AI_STATE == 3 /* Die */)
                continue;
            //如果是处于硬直状态 || 麻痹
            if (selfTarget.isHardStraight) {
                continue;
            }
            //使用合击技能
            if (selfTarget.infoModel.team == 0 /* My */ && skillControl.hejiLevel > 0 && skillControl.hejiEnable && (selfTarget.infoModel instanceof RoleModel)) {
                if (master && selfTarget.infoModel.handle == master.infoModel.handle) {
                    target = this.curTarget[handle];
                    var skill = skillControl.getHejiSkillId();
                    if (skillControl.fieldUse && skill.id != 0 && target && target.team != 0 /* My */ && target.AI_STATE != 3 /* Die */) {
                        var tempArr = UnitMgr.ins().screeningTargetByPos(selfTarget, false, skill.affectCount, skill.castRange, this.aiList);
                        if (tempArr.length) {
                            this.useSkill(selfTarget, target, skill);
                            AshtarteSkillControl.ins().checkHJTrigger(selfTarget, [target]);
                            skillControl.fieldUse = false;
                            var config = DataCenter.ins().SkillsEffectsConfig[skill.selfEff[0]] ? DataCenter.ins().SkillsEffectsConfig[skill.selfEff[0]] : null;
                            if (config) {
                                var len = heroControl.subRolesLen;
                                for (var i_2 = 0; i_2 < len; i_2++) {
                                    var roleData = UnitMgr.ins().getMainRole(i_2);
                                    if (roleData) {
                                        var buff = ObjectPool.pop('BuffModel');
                                        buff.effConfig = config;
                                        buff.addTime = egret.getTimer();
                                        buff.endTime = buff.addTime + config.duration;
                                        buff.count = (config.duration / config.interval) >> 0;
                                        buff.step = 0;
                                        buff.source = roleData;
                                        roleData.addBuff(buff);
                                        roleData.stopMove();
                                        if (roleData != master) {
                                            roleData.playAction(UnitAction.STAND);
                                        }
                                        roleData.AI_STATE = 0 /* Stand */;
                                    }
                                }
                            }
                            continue;
                        }
                    }
                }
            }
            else if (selfTarget.infoModel.team == 2 /* WillEntity */ && focusAttackControl.canUse()) {
                target = this.curTarget[handle];
                var enemyMaster = focusAttackControl.getMaster();
                if (target && target.team == 0 /* My */ && enemyMaster == selfTarget) {
                    var skill = focusAttackControl.getSkillData();
                    if (skill && target.AI_STATE != 3 /* Die */) {
                        var tempArr = UnitMgr.ins().screeningTargetByPos(selfTarget, false, skill.affectCount, skill.castRange, this.aiList);
                        if (tempArr.length) {
                            this.useSkill(selfTarget, target, skill);
                            focusAttackControl.useSuccess();
                            var config = DataCenter.ins().SkillsEffectsConfig[skill.selfEff[0]] ? DataCenter.ins().SkillsEffectsConfig[skill.selfEff[0]] : null;
                            if (config) {
                                var roles = focusAttackControl.getRoles();
                                var len = roles.length;
                                for (var i_3 = 0; i_3 < len; i_3++) {
                                    var roleData = UnitMgr.ins().getEntityByHandle(roles[i_3].handle);
                                    if (roleData) {
                                        var buff = ObjectPool.pop('BuffModel');
                                        buff.effConfig = config;
                                        buff.addTime = egret.getTimer();
                                        buff.endTime = buff.addTime + config.duration;
                                        buff.count = (config.duration / config.interval) >> 0;
                                        buff.step = 0;
                                        buff.source = roleData;
                                        roleData.addBuff(buff);
                                        roleData.stopMove();
                                        if (roleData != enemyMaster) {
                                            roleData.playAction(UnitAction.STAND);
                                        }
                                        roleData.AI_STATE = 0 /* Stand */;
                                    }
                                }
                            }
                            continue;
                        }
                    }
                }
            }
            if (!list[handle])
                continue;
            //是否在公共cd中
            if (isRole) {
                if (selfTarget.publicCD && egret.getTimer() - selfTarget.publicCD <= (DataCenter.ins().ClientGlobalConfig.skillCd || 800)) {
                    continue;
                }
            }
            else {
                if (selfTarget.publicCD && egret.getTimer() - selfTarget.publicCD <= (DataCenter.ins().ClientGlobalConfig.skillCd || 800)) {
                    continue;
                }
            }
            if (HookControl.ins().isFindDrop && selfTarget.team == 0 /* My */) {
                if (master && selfTarget.infoModel.handle == master.infoModel.handle) {
                    continue;
                }
            }
            switch (selfTarget.AI_STATE) {
                case 0 /* Stand */:
                    //选择技能
                    this.screeningSkill(handle);
                    var isNoUseSkill = false; //没有可使用的技能
                    var isFollowMaster = false; //是否跟随主人
                    if (!this.curSkill[handle]) {
                        isNoUseSkill = true;
                    }
                    //是否可选怪
                    if (!isNoUseSkill && this.checkCanScreeningTarget(selfTarget, this.curSkill[handle], this.curTarget[handle])) {
                        if (selfTarget.team == 2 /* WillEntity */) {
                            this.screeningTarget(selfTarget, 9); //野外玩家寻怪范围
                        }
                        else {
                            this.screeningTarget(selfTarget);
                        }
                    }
                    if (selfTarget.team == 0 /* My */ && selfTarget != master && master) {
                        if (MathUtils.getDistance(selfTarget.x, selfTarget.y, master.x, master.y) > 250) {
                            var masterTarget = this.curTarget[master.infoModel.handle];
                            if (masterTarget && masterTarget.AI_STATE != 3 /* Die */) {
                                if (this.curSkill[handle] && this.curSkill[handle].targetType == 2 /* Enemy */ && masterTarget.team != 0 /* My */) {
                                    this.curTarget[handle] = masterTarget;
                                }
                                else {
                                    isFollowMaster = true;
                                }
                            }
                            else {
                                isFollowMaster = true;
                            }
                        }
                    }
                    if (isNoUseSkill || isFollowMaster) {
                        if (selfTarget.team == 0 /* My */ && selfTarget != master && master) {
                            //跟随主人身后一到两个范围
                            var selfMaster = master;
                            if (selfTarget.infoModel.masterHandle) {
                                var ms = UnitMgr.ins().getEntityByHandle(selfTarget.infoModel.masterHandle);
                                if (ms) {
                                    selfMaster = ms;
                                }
                            }
                            var x = UnitMgr.ins().getMasterList(selfTarget.infoModel.masterHandle);
                            var dirs = [1, -1, 0];
                            if (x && x.length == 2) {
                                dirs = [0];
                            }
                            var poxIndex = poxIndexCache[selfTarget.infoModel.masterHandle] || 0;
                            var p = DirUtils.getGridByDir(selfMaster.dir + (dirs[poxIndex] || 0), MapControl.CELL_SIZE);
                            poxIndex += 1;
                            poxIndexCache[selfTarget.infoModel.masterHandle] = poxIndex;
                            MapControl.moveEntity(selfTarget, selfMaster.x + p.x, selfMaster.y + p.y);
                        }
                        continue;
                    }
                    if (!this.curTarget[handle]) {
                        continue;
                    }
                    if (this.tryUseSkill(selfTarget)) {
                        selfTarget.AI_STATE = 2 /* Atk */;
                    }
                    else {
                        if (selfTarget.team == 0 /* My */ ||
                            selfTarget.team == 2 /* WillEntity */ ||
                            selfTarget.team == 5 /* Faker */ ||
                            this.teamAction[selfTarget.team]) {
                            MapControl.moveEntity(selfTarget, this.curTarget[handle].x, this.curTarget[handle].y);
                            selfTarget.AI_STATE = 1 /* Run */;
                        }
                    }
                    break;
                case 1 /* Run */:
                    target = this.curTarget[handle];
                    if (selfTarget.team == 0 /* My */) {
                        copyControl.canChallengGuanQia = true;
                    }
                    if (!target || target.AI_STATE == 3 /* Die */) {
                        selfTarget.stopMove();
                        selfTarget.playAction(UnitAction.STAND);
                        selfTarget.AI_STATE = 0 /* Stand */;
                        delete this.curTarget[handle];
                        continue;
                    }
                    else {
                        if (selfTarget.team == 5 /* Faker */) {
                            //假人打完足够的怪 走到目的地 删除
                            var wildPlayerDataVo = confrontControl.wildPersonList[selfTarget.infoModel.masterHandle];
                            if (!wildPlayerDataVo)
                                continue;
                            //闯关的假人 杀到足够数量的怪返回终点 移除
                            var killNum = confrontControl.countKillNumByMarster(selfTarget.infoModel.masterHandle);
                            var juli = MathUtils.getDistance(selfTarget.x, selfTarget.y, wildPlayerDataVo.backX, wildPlayerDataVo.backY);
                            if (wildPlayerDataVo && wildPlayerDataVo.actionType == 1 && killNum >= wildPlayerDataVo.killNum) {
                                if (juli < 10) {
                                    UnitMgr.ins().removeByHandle(selfTarget.infoModel.masterHandle);
                                    confrontControl.RunAwary(selfTarget.infoModel.masterHandle);
                                    confrontControl.upCleanWildPeople(wildPlayerDataVo.index);
                                }
                                else {
                                    MapControl.moveEntity(selfTarget, wildPlayerDataVo.backX, wildPlayerDataVo.backY);
                                }
                                continue;
                            }
                        }
                        if (this.tryUseSkill(selfTarget)) {
                            selfTarget.stopMove();
                            selfTarget.AI_STATE = 2 /* Atk */;
                        }
                        //走到目的地了，但是怪物不在攻击距离
                        if (selfTarget.action == UnitAction.STAND) {
                            selfTarget.AI_STATE = 0 /* Stand */;
                        }
                    }
                    break;
                case 2 /* Atk */:
                    if (!this.isStartAtk) {
                        gameControl.dispatchHookStateChange(GameControl.HOOK_STATE_HOOK);
                    }
                    this.isStartAtk = true;
                    target = this.curTarget[handle];
                    if (!target || target.AI_STATE == 3 /* Die */) {
                        selfTarget.AI_STATE = 0 /* Stand */;
                        delete this.curTarget[handle];
                        continue;
                    }
                    this.teamAction[target.team] = true;
                    if (selfTarget.atking) {
                        continue;
                    }
                    var skill = this.curSkill[handle];
                    if (!skill) {
                        continue;
                    }
                    //保存最后一次使用技能的时间
                    this.skillCD[handle][skill.id] = egret.getTimer();
                    this.skillCastType[handle] = skill.castType;
                    this.skillTargetType[handle] = skill.targetType;
                    selfTarget.atking = true;
                    if (selfTarget.team == 0 /* My */) {
                        copyControl.canChallengGuanQia = false;
                    }
                    //记录最后一次公共cd时间
                    selfTarget.publicCD = egret.getTimer();
                    GameControl.skyBallCheck(selfTarget);
                    //使用攻击技能
                    this.useSkill(selfTarget, target, skill);
                    //清空当前技能
                    delete this.curSkill[handle];
                    break;
                case 4 /* Patrol */:
                    var configID = selfTarget.infoModel.configID;
                    var config = copyControl.guanqiaMonster[configID];
                    if (selfTarget.infoModel.isWander && config.attrange) {
                        this.screeningTarget(selfTarget, config.attrange);
                        if (this.curTarget[selfTarget.infoModel.handle]) {
                            selfTarget.AI_STATE = 0 /* Stand */;
                        }
                        else {
                            selfTarget.startPatrol();
                        }
                    }
                    else {
                        selfTarget.startPatrol();
                    }
                    break;
            }
        }
    };
    HookControl.prototype.checkCanScreeningTarget = function (selfTarget, skill, curTarget) {
        //目前不存在或已死亡
        if (!curTarget || !curTarget.parent || curTarget.AI_STATE == 3 /* Die */) {
            return true;
        }
        var handle = selfTarget.infoModel.handle;
        //上次没有使用技能
        if (this.skillCastType[handle] == undefined && this.skillTargetType[handle] == undefined) {
            return true;
        }
        //上次使用技能和本次技能类型不一样
        if (this.skillCastType[handle] != skill.castType || this.skillTargetType[handle] != skill.targetType) {
            return true;
        }
        return false;
    };
    /**
     * 使用技能
     */
    HookControl.prototype.useSkill = function (selfTarget, target, skill) {
        var _this = this;
        var isHeji = skillControl.isHejiSkill(skill.configID);
        var passive = skill.config.passive;
        if (passive && passive.cond == 8 /* heJi */) {
            if (passive.p1 && selfTarget.team == 0 /* My */) {
                skillControl.setHejiCD(-1, passive.p1);
            }
            return;
        }
        var selfSkillEff = skill.selfEff ? DataCenter.ins().SkillsEffectsConfig[skill.selfEff[0]] : null;
        var pTarget = skill.castType == 3 /* Self */ ? selfTarget : target;
        var tempArr;
        var critAdd = 0;
        var imbaData;
        var gwSkillConfig;
        var commSkillReviseConfig;
        var gwSkills;
        var isYlBullet = false; //是否烈焰戒指子弹
        var selfInfo = selfTarget.infoModel;
        if (selfTarget.team == 0 /* My */) {
            imbaData = artifactControl.getReviseBySkill(skill.id);
            if (imbaData && imbaData.crit) {
                critAdd = imbaData.crit;
            }
            gwSkills = godWeaponControl.getReviseBySkill(skill.id);
            if (gwSkills) {
                gwSkillConfig = gwSkills[0];
            }
            if (gwSkillConfig) {
                critAdd = gwSkillConfig.crit;
            }
            commSkillReviseConfig = SkillVo.reviseDp(skill.id + skill.lv, selfTarget.infoModel.index);
            if (commSkillReviseConfig) {
                critAdd = commSkillReviseConfig.crit || 0;
            }
        }
        var affectCount = skill.affectCount;
        if (imbaData && imbaData.affectCount) {
            affectCount += imbaData.affectCount;
        }
        if (gwSkillConfig && gwSkillConfig.affectCount) {
            affectCount += gwSkillConfig.affectCount;
        }
        if (commSkillReviseConfig && commSkillReviseConfig.affectCount) {
            affectCount += commSkillReviseConfig.affectCount;
        }
        //己方血最少
        if (skill.castType == 4 /* SelfHpLess */) {
            tempArr = UnitMgr.ins().screeningTargetByPos(selfTarget, true, 0, Number.MAX_VALUE, this.aiList);
            for (var m = 0; m < tempArr.length; m++) {
                if (tempArr[m].isCanAddBlood) {
                    tempArr[0] = tempArr[m];
                    break;
                }
            }
        }
        else {
            //施法目标是友方，但是作用目标是敌方的
            if (skill.castType != 2 /* Other */ && skill.targetType == 2 /* Enemy */) {
                tempArr = UnitMgr.ins().screeningTargetByPos(pTarget, false, affectCount, skill.affectRange, this.aiList);
            }
            else {
                tempArr = affectCount > 1 ? UnitMgr.ins().screeningTargetByPos(pTarget, pTarget.team == target.team, affectCount, skill.affectRange, this.aiList) : [target];
            }
            if (tempArr.length == 0) {
                tempArr = [target];
            }
        }
        if (skill.preId && DataCenter.ins().FlameMarkConfig.skillId.indexOf(skill.preId) >= 0) {
            isYlBullet = true;
        }
        var hasCrit = false; //是否有暴击
        var len = tempArr.length = Math.min(tempArr.length, affectCount);
        var hitTargetInfo = [];
        this._isTogetherCrit = false;
        var hasDevourTogether = false;
        if (isHeji) {
            if (isHeji && GameControl.triggerExAttr(selfTarget, 70 /* eatTogetherHitCrit */)) {
                this._isTogetherCrit = true;
            }
            if (selfInfo.getExAtt(83 /* eatDevourBuffId */)) {
                hasDevourTogether = true;
            }
        }
        var buffAddExAttrr = GameControl.calBuffAttribute(selfTarget); //buff列表加的基础或额外属性
        for (var j = 0; j < len; j++) {
            var ttarget = tempArr[j];
            var tarInfo = ttarget.infoModel;
            var isSiZhou = false;
            var isMainTar = j == 0; //是否主目标
            if (ttarget.team != selfTarget.team) {
                var effBuff = void 0;
                //麻痹
                if (GameControl.triggerAttr(selfTarget, 13 /* atStunPower */) || skill.id == 90005) {
                    effBuff = ObjectPool.pop('BuffModel');
                    effBuff.effConfig = DataCenter.ins().SkillsEffectsConfig[51001];
                    effBuff.value = selfInfo.getAtt(15 /* atStunTime */);
                    effBuff.addTime = egret.getTimer();
                    effBuff.endTime = effBuff.addTime + effBuff.value;
                    effBuff.source = selfTarget;
                    ttarget.addBuff(effBuff);
                    ttarget.stopMove();
                    ttarget.AI_STATE = 0 /* Stand */;
                }
                //神力
                if (GameControl.triggerExAttr(selfTarget, 5 /* eatDeathCurseProbability */)) {
                    effBuff = ObjectPool.pop('BuffModel');
                    effBuff.effConfig = DataCenter.ins().SkillsEffectsConfig[52001];
                    effBuff.addTime = egret.getTimer();
                    effBuff.endTime = effBuff.effConfig.args.d ? selfInfo.attributeExData[7 /* eatDeathCurseTime */] : effBuff.effConfig.duration;
                    effBuff.source = selfTarget;
                    ttarget.addBuff(effBuff);
                    selfTarget.addBubble(3);
                    isSiZhou = true;
                }
                //回血
                GameControl.triggerExAttr(selfTarget, 12 /* eatAttackAddHpProbability */);
            }
            var isCrit = false;
            var isLucky = false;
            var isMultipleCrit = false; //疾风斩
            var isMiss = false; //是否闪避
            var isWeishe = false; //是否威慑
            var isZhuiMing = false; //是否追命
            var isZhiMing = false; //是否致命一击
            var isGongMing = undefined; //是否共鸣效果
            var isHearth = undefined; //心法3效果
            var hramValue = 0;
            var isMasterProbability = false;
            var isHit = skill && skill.calcType == 6;
            var isDevour = false; //是否吞噬一击
            //不是合击就计算是否闪避R
            if (skill.calcType != 3 && skill.calcType != 0) {
                isMiss = GameControl.triggerMiss(selfTarget, ttarget);
            }
            if (skill.calcType == 0) {
                hramValue = 0;
            }
            else if (isMiss) {
                hramValue = 0;
            }
            else {
                //计算基础伤害
                hramValue = this.damageBaseCalculation(selfTarget, ttarget, skill);
                //非合击伤害
                if (skill.calcType != 3) {
                    hasDevourTogether = false;
                    isMultipleCrit = GameControl.triggerExAttr(selfTarget, 28 /* eatMultipleCrit */);
                    if (isMultipleCrit) {
                        hramValue = hramValue * (selfInfo.getExAtt(29 /* eatMultipleCritCoeff */) / 10000);
                        hramValue += selfInfo.getExAtt(30 /* atMultipleCritHurt */);
                        selfTarget.addBubble(21);
                    }
                    isCrit = GameControl.triggerCrit(selfTarget, ttarget, critAdd);
                    var useSkyBall = selfTarget.hasBuff(SkillConst.EFF_SKY_BALL);
                    if (useSkyBall) {
                        selfTarget.addBubble(6);
                        isCrit = true;
                    }
                    var addDamage = 0; //附加伤害
                    var addPer = 1; //伤害增加比例
                    if (isCrit) {
                        hasCrit = true;
                        var critDamage = selfInfo.getAtt(19 /* atCritEnhance */);
                        if (gwSkillConfig && gwSkillConfig.critDamage) {
                            critDamage += gwSkillConfig.critDamage;
                        }
                        //玉佩技能 目标生命低于百分比时候，暴击伤害增加
                        var critHp = selfInfo.getExAtt(54 /* eatCritHpLt */);
                        if (tarInfo.getAtt(0 /* atHp */) / tarInfo.getAtt(2 /* atMaxHp */) <= critHp / 10000) {
                            critDamage += selfInfo.getExAtt(55 /* eatCritHpLtAddDamage */);
                        }
                        addPer += critDamage / 10000;
                        addDamage += selfInfo.getAtt(17 /* atCritHurt */);
                    }
                    var exAttr = {}; //计算buff的概率
                    exAttr[67 /* atDeadLyPro */] = GameControl.calculateRealAttribute(selfTarget, 67 /* atDeadLyPro */, selfTarget);
                    isZhiMing = GameControl.triggerAttr(selfTarget, 67 /* atDeadLyPro */, exAttr);
                    if (isZhiMing) {
                        addPer += 0.5 + (selfInfo.getAtt(68 /* atDeadLyMaster */) - tarInfo.getAtt(69 /* atDeadLyResist */)) / 10000;
                    }
                    //共鸣
                    exAttr = {};
                    exAttr[79 /* atHunGuPro */] = GameControl.calculateRealAttribute(selfTarget, 79 /* atHunGuPro */, selfTarget);
                    isGongMing = this.tryTriggerHungu(selfTarget);
                    if (isGongMing) {
                        addPer += selfInfo.getAtt(80 /* atHunGuHurt */) / 10000;
                    }
                    //心法固定伤害 心法伤害率
                    isHearth = this.tryTriggerHeart(selfTarget);
                    if (isHearth) {
                        addPer += selfInfo.getAtt(83 /* atHearthHurt */) / 10000;
                        addDamage += selfInfo.getAtt(82 /* atHearthDamege */);
                    }
                    //主宰伤害
                    isMasterProbability = GameControl.triggerExAttr(selfTarget, 66 /* eatMasterProbability */);
                    if (isMasterProbability) {
                        addPer += selfInfo.getExAtt(67 /* eatMasterDamageInc */) / 10000;
                        this.triggerMaster(selfTarget, target);
                    }
                    //追命
                    isZhuiMing = GameControl.triggerAttr(selfTarget, 63 /* atZhuiMingPro */);
                    if (isZhuiMing) {
                        hramValue += selfInfo.getAtt(64 /* atZhuiMingVal */);
                    }
                    //是否吞噬一击
                    isDevour = GameControl.triggerExAttr(selfTarget, 81 /* eatDevourPro */, buffAddExAttrr.exAttr);
                    if (isDevour) {
                        addPer += selfInfo.getExAtt(82 /* eatDevourHurt */) / 10000;
                    }
                    hramValue = hramValue * addPer + addDamage;
                    if (isSiZhou) {
                        hramValue = hramValue * (1 + selfInfo.attributeExData[6 /* eatDeathCurseDamageIncrease */] / 10000);
                    }
                    //群攻，对非主面包伤害降低
                    if (!isMainTar && skill.targetType == 2 /* Enemy */) {
                        if (tarInfo.type == 1 /* ROLE */) {
                            hramValue = hramValue * (skill.herdPlayerRate / 100);
                        }
                        else {
                            hramValue = hramValue * (skill.herdMonRate / 100);
                        }
                    }
                    //只有我方作用与敌方才显示威慑飘字
                    if (selfTarget.isMy && selfInfo.type == 1 /* ROLE */ && target.infoModel.type == 1 /* ROLE */) {
                        if (confrontControl.isEncounter()) {
                            if (confrontFightControl.getIsWeiShe(selfTarget.isMy)) {
                                isWeishe = true;
                            }
                        }
                    }
                    //总伤害扣去敌方buff
                    hramValue = this.damageBuff(selfTarget, ttarget, hramValue);
                    //神圣伤害
                    hramValue = hramValue + selfInfo.getAtt(57 /* atHolyDamege */) * (1 + selfInfo.getAtt(58 /* atHolyMaster */) / 10000 - tarInfo.getAtt(59 /* atHolyResist */) / 10000);
                    //内功:(1-内功抵消伤害比例)
                    hramValue = hramValue * (1 - selfInfo.getAtt(27 /* neigongAbsorbHurt */) / 10000);
                }
                hramValue = hramValue >> 0;
                //不会对己方造成伤害
                if (selfTarget.team == ttarget.team && hramValue > 0) {
                    hramValue = 0;
                }
            }
            if (!(ttarget instanceof UnitRole)) {
                if (ttarget.AI_STATE == 4 /* Patrol */) {
                    ttarget.stopMove();
                    ttarget.playAction(UnitAction.STAND);
                    ttarget.AI_STATE = 0 /* Stand */;
                }
            }
            //本次攻击是否死亡
            var isDie = this.hramedDie(ttarget, hramValue);
            if (isDie) {
                ttarget.AI_STATE = 3 /* Die */;
                AshtarteSkillControl.ins().checkDieTrigger(selfTarget, [ttarget]);
            }
            var damageType = 0;
            if (selfTarget.team == 0 /* My */) {
                if (isHeji) {
                    damageType = 16 /* TYPE16 */;
                }
                else if (isMiss) {
                    damageType = 4 /* TYPE4 */;
                }
                else {
                    if (isLucky) {
                        damageType |= 8 /* TYPE8 */;
                    }
                    if (isCrit) {
                        damageType |= 2 /* TYPE2 */;
                    }
                    if (isHit) {
                        damageType |= 1 /* TYPE1 */;
                    }
                }
                if (isWeishe)
                    damageType |= 64 /* TYPE64 */;
                if (isZhuiMing)
                    damageType |= 256 /* TYPE256 */;
                if (isZhiMing)
                    damageType |= 512 /* TYPE512 */;
                if (isMasterProbability)
                    damageType |= 1024 /* TYPE1024 */;
                if (this._isTogetherCrit)
                    damageType |= 2048 /* TYPE2048 */;
                if (isDevour)
                    damageType |= 4096 /* TYPE4096 */;
                if (hasDevourTogether)
                    damageType |= 8192 /* TYPE8192 */;
            }
            if (selfTarget.team != ttarget.team && skill.calcType == 5) {
                var h5 = (hramValue / 5) >> 0;
                var h1 = (h5 * MathUtils.limit(0, 0.05)) >> 0;
                var h2 = (h5 * MathUtils.limit(0, 0.05)) >> 0;
                var hits = [h5 - h1, h5 + h1, h5 - h2, h5 + h2, hramValue - 4 * h5];
                var hitInfo = [];
                for (var i = 0; i < hits.length; i++) {
                    hitInfo.push({
                        isDie: isDie,
                        damageType: 32 /* TYPE32 */,
                        ttarget: ttarget,
                        hramValue: hits[i]
                    });
                }
                hitTargetInfo.push(hitInfo);
            }
            else {
                hitTargetInfo.push([{
                        isDie: isDie,
                        damageType: damageType,
                        ttarget: ttarget,
                        hramValue: hramValue
                    }]);
                //兵魂技能3
                if (selfTarget.team != ttarget.team && GameControl.triggerAttr(selfTarget, 54 /* atAttPerDamPan */)) {
                    isDie = this.hramedDie(ttarget, (hramValue >> 1));
                    selfTarget.addBubble(20);
                    var targetInfo = hitTargetInfo[hitTargetInfo.length - 1];
                    targetInfo.push({
                        isDie: isDie,
                        damageType: 32 /* TYPE32 */,
                        ttarget: ttarget,
                        hramValue: hramValue >> 1
                    });
                }
            }
            ttarget.myKill = ttarget.myKill || selfTarget.isMy;
            if (selfTarget.isMy || selfTarget.team == 2 /* WillEntity */) {
                ttarget.showBlood(true);
                ttarget.showName(true);
            }
            if (ttarget.isMy) {
                selfTarget.showBlood(true);
                selfTarget.showName(true);
            }
        }
        this._isTogetherCrit = false;
        var fbType = MapControl.copyType;
        var fbId = MapControl.copyId;
        //受击次数
        var hitTime = 0;
        gameControl.playSkillEff(skill, selfTarget, tempArr, function (probability) {
            //切换场景后不处理上次的伤害
            if (MapControl.copyType != fbType || fbId != MapControl.copyId)
                return;
            var pType = 0;
            for (var i in tempArr) {
                var ttarget = tempArr[i];
                var ttInfo = ttarget.infoModel;
                var targetIsDie = hitTargetInfo[i][hitTargetInfo[i].length - 1].isDie;
                if (pTarget == ttarget) {
                    pType = hitTargetInfo[i][0].damageType;
                }
                var hramValue = 0;
                for (var j = 0; j < hitTargetInfo[i].length; j++) {
                    var targetInfo = hitTargetInfo[i][j];
                    hramValue += targetInfo.hramValue;
                    _this.showHram(targetInfo.isDie, targetInfo.damageType, ttarget, selfTarget, targetInfo.hramValue, skill.name);
                }
                if (selfTarget.team == 0 /* My */ && ttarget.team == 2 /* WillEntity */ && confrontFightControl.willEntityFightTeam != 0 /* My */) {
                    confrontFightControl.willEntityFightTeam = 0 /* My */;
                    //将当前遭遇战实体对象攻击目标清空
                    var willList = UnitMgr.ins().getEntityByTeam(2 /* WillEntity */);
                    for (var _i = 0, willList_1 = willList; _i < willList_1.length; _i++) {
                        var char = willList_1[_i];
                        _this.curTarget[char.infoModel.handle] = null;
                        _this.lastTarget[char.infoModel.handle] = null;
                    }
                }
                ttarget.shakeIt();
                if (selfTarget.isMy && selfTarget instanceof UnitRole && !ttarget.isMy) {
                    _this.tryExtHarm(selfTarget, ttarget);
                    _this.tryExtSummoner(selfTarget, ttarget, skill);
                }
                //击中目标后，如果目标没死则添加技能效果附加
                if (!targetIsDie) {
                    var tarEff = skill.tarEff;
                    if (pTarget != ttarget && ttarget.infoModel.type == 1 /* ROLE */) {
                        tarEff = skill.otarEff || tarEff;
                    }
                    if (commSkillReviseConfig && commSkillReviseConfig.targetEff) {
                        for (var i_4 = 0; commSkillReviseConfig.targetEff && i_4 < commSkillReviseConfig.targetEff.length; i_4++) {
                            var args = _this.getArgs(commSkillReviseConfig.targetEff[i_4], imbaData, gwSkillConfig, commSkillReviseConfig);
                            var buff = BuffModel.createBuff(commSkillReviseConfig.targetEff[i_4], selfTarget, args);
                            ttarget.addBuff(buff);
                        }
                    }
                    for (var k = 0; tarEff && k < tarEff.length; k++) {
                        var args = _this.getArgs(tarEff[k], imbaData, gwSkillConfig, commSkillReviseConfig);
                        var buff = BuffModel.createBuff(tarEff[k], selfTarget, args);
                        ttarget.addBuff(buff);
                    }
                    //给敌方添加冰魂技能效果
                    if (imbaData) {
                        _this.addTargetReviseSkillEffect(ttarget, selfTarget, imbaData);
                    }
                    //给敌方添加神兵技能效果
                    if (gwSkillConfig) {
                        _this.addTargetReviseSkillEffect(ttarget, selfTarget, gwSkillConfig);
                    }
                    if (gwSkills && gwSkills[1]) {
                        _this.addTargetReviseSkillEffect(ttarget, selfTarget, gwSkills[1]);
                    }
                    if (commSkillReviseConfig) {
                        _this.addTargetReviseSkillEffect(ttarget, selfTarget, commSkillReviseConfig);
                    }
                    //被攻击触发羽翼技能
                    if (ttarget instanceof UnitRole) {
                        _this.tryUseWingSkill(ttarget, skill, true);
                    }
                    //被攻击使用被动技能
                    _this.tryUsePassiveSkill(selfTarget, ttarget, true, hitTargetInfo[i][0].damageType);
                    //是否触发冰魂技能
                    _this.tryUseWeaponSkill(ttarget, skill, true);
                    //秘籍不屈
                    _this.tryTriggerMijiBuqu(ttarget);
                    //雷霆技能
                    if (selfTarget instanceof UnitRole && selfTarget.isMy && !ttarget.isMy) {
                        _this.tryThunderSkill(selfTarget, ttarget, skill);
                    }
                }
                //计算buff伤害
                _this.showBuffHarm(selfTarget, ttarget, skill, hramValue);
            }
            if (commSkillReviseConfig && commSkillReviseConfig.selfEff) {
                for (var k = 0; commSkillReviseConfig.selfEff && k < commSkillReviseConfig.selfEff.length; k++) {
                    var args = _this.getArgs(commSkillReviseConfig.selfEff[k], imbaData, gwSkillConfig, commSkillReviseConfig);
                    var buff = BuffModel.createBuff(commSkillReviseConfig.selfEff[k], selfTarget, args);
                    selfTarget.addBuff(buff);
                }
            }
            //技能效果附加
            if (selfSkillEff && skill.selfEff) {
                for (var k = 0; k < skill.selfEff.length; k++) {
                    var args = _this.getArgs(skill.selfEff[k], imbaData, gwSkillConfig, commSkillReviseConfig);
                    var buff = BuffModel.createBuff(skill.selfEff[k], selfTarget, args);
                    selfTarget.addBuff(buff);
                }
            }
            if (imbaData) {
                _this.addSelfReviseSkillEffect(selfTarget, imbaData);
            }
            if (gwSkillConfig) {
                _this.addSelfReviseSkillEffect(selfTarget, gwSkillConfig);
            }
            if (gwSkills && gwSkills[1]) {
                _this.addSelfReviseSkillEffect(selfTarget, gwSkills[1]);
            }
            if (commSkillReviseConfig) {
                _this.addSelfReviseSkillEffect(selfTarget, commSkillReviseConfig);
            }
            //当前攻击对象是否可以检查羽翼技能
            if (selfTarget instanceof UnitRole) {
                _this.tryUseWingSkill(selfTarget, skill, false);
            }
            //攻击附带使用被动技能
            _this.tryUsePassiveSkill(selfTarget, pTarget, false, pType);
            //传世神装
            _this.tryTriggerHeirloomSkill(selfTarget, tempArr, hitTargetInfo);
            //**吞噬合击后加buff */
            if ((pType & 8192 /* TYPE8192 */) == 8192 /* TYPE8192 */) {
                var bid = selfTarget.infoModel.getExAtt(83 /* eatDevourBuffId */);
                if (bid && DataCenter.ins().SkillsEffectsConfig[bid]) {
                    pTarget.addBuff(BuffModel.createBuff(bid, selfTarget));
                }
            }
            //烈焰技能
            if (isYlBullet) {
                _this.tryUseYlPassiveSkill(selfTarget, pTarget, skill);
            }
            //宠物使用被动技能
            if (skill.configID == 80002 || crazyDogControl.isSummonerSkill(skill.configID)) {
                _this.petTryUsePassiveSkill(selfTarget, false);
            }
            //关联技能
            if (skill.otherSkills) {
                var skills = skill.otherSkills.concat();
                if (!skills[hitTime])
                    return;
                var skillVo = new SkillVo(skills[hitTime]);
                skillVo.preId = skill.configID;
                _this.useSkill(selfTarget, target, skillVo);
                hitTime += 1;
                return;
            }
        });
        if (!SoundUtils.PLAY_OPEN_VIEW && skill.sound && selfTarget.team == 0 /* My */) {
            SoundUtils.ins().playEffect(skill.sound);
        }
        selfTarget.AI_STATE = 0 /* Stand */;
        selfTarget.atking = false;
        //秘籍追魂 暴击后下一击伤害提示百分比
        if (hasCrit && selfInfo.getExAtt(59 /* eatMiJiZHDamPer */)) {
            this.checkTriggerAttr(selfTarget, 1, 60 /* eatMiJiZHTime */, 1);
        }
        //冲撞表现
        this.repel(selfTarget, target, skill);
    };
    HookControl.prototype.tryExtHarm = function (selfTarget, target) {
        var hramValue = 0;
        if (selfTarget.extHurmBuff) {
            for (var key in selfTarget.extHurmBuff) {
                var buff = selfTarget.extHurmBuff[key];
                hramValue += buff.a * selfTarget.infoModel.getAtt(buff.b) + buff.c;
            }
        }
        if (hramValue) {
            var isDie = this.hramedDie(target, hramValue);
            this.showHram(isDie, 32 /* TYPE32 */, target, selfTarget, hramValue);
        }
    };
    HookControl.prototype.tryExtSummoner = function (selfTarget, target, skill) {
        if (skill.config.ex_summoner) {
            var exSummoners = skill.config.ex_summoner;
            for (var i = 0; i < exSummoners.length; i++) {
                var exSummoner = exSummoners[i];
                var model = copyControl.createModel(DataCenter.ins().MonstersConfig[exSummoner]);
                model.x = target.x + 100 * Math.random();
                model.y = target.y + 100 * Math.random();
                model.masterHandle = selfTarget.infoModel.handle;
                model.setAtt(9 /* atMoveSpeed */, selfTarget.infoModel.getAtt(9 /* atMoveSpeed */));
                model.isMy = model.checkHandleIsMy(model.masterHandle);
                model.fixSkills = [exSummoner];
                var entityModel = gameControl.createEntityByModel(model, selfTarget.team);
                if (skill.config.esEff) {
                    var esEffs = skill.config.esEff;
                    for (var j = 0; j < esEffs.length; j++) {
                        var esEff = esEffs[j];
                        var buff = BuffModel.createBuff(esEff, target);
                        buff.isLift = true;
                        entityModel.addBuff(buff);
                    }
                }
            }
        }
    };
    //击退
    HookControl.prototype.repel = function (selfTarget, target, skill) {
        if (skill && skill.repelDistance) {
            target.stopMove();
            target.playAction(UnitAction.STAND);
            var atkHandle = target.infoModel.handle;
            //被冲时，丢弃原来的攻击目标
            delete this.curTarget[atkHandle];
            var jd = MathUtils.getAngle(MathUtils.getRadian2(selfTarget.x, selfTarget.y, target.x, target.y));
            var p = MathUtils.getDirMove(jd, skill.repelDistance);
            p.x = target.x + p.x;
            p.y = target.y + p.y;
            var data = Bresenham.canThrough(MapControl.aStar, MapControl.point2Grip(target.x), MapControl.point2Grip(target.y), MapControl.point2Grip(p.x), MapControl.point2Grip(p.y));
            if (data[0] == 0) {
                if (data[1] > 3) {
                    debug.error("Check if there are any exceptions by passing more than 3 cells" + data[2] + "," + data[3], p);
                }
                if (MapControl.point2Grip(target.x) == data[2] && MapControl.point2Grip(target.y) == data[3]) {
                    p.x = target.x;
                    p.y = target.y;
                }
                else {
                    p.x = MapControl.grip2Point(data[2]);
                    p.y = MapControl.grip2Point(data[3]);
                }
            }
            p.x = Math.max(Math.min(p.x, MapControl.MAX_WIDTH), 0);
            p.y = Math.max(Math.min(p.y, MapControl.MAX_HEIGHT), 0);
            var xbX = p.x - target.x;
            var xbY = p.y - target.y;
            var time = Math.sqrt(xbX * xbX + xbY * xbY) / (selfTarget.moveSpeed / 1000);
            var holdTime = DataCenter.ins().SkillsEffectsConfig[skill.tarEff[0]].duration;
            target.addHardStraight(holdTime);
            if (time > 0) {
                var t = egret.Tween.get(target.moveTweenObj);
                t.to({
                    "x": p.x,
                    "y": p.y
                }, time);
            }
            if (skill.teleport == 1) {
                if (skill && skill.actionType != "") {
                    selfTarget.playAction(skill.actionType);
                }
                selfTarget.stopMove();
                if (time > 0) {
                    var t = egret.Tween.get(selfTarget.moveTweenObj);
                    t.to({
                        "x": selfTarget.x - (target.x - p.x),
                        "y": selfTarget.y - (target.y - p.y)
                    }, time).call(function () {
                        selfTarget.stopMove();
                        selfTarget.resetStand();
                    });
                    selfTarget.addHardStraight(time);
                }
            }
        }
    };
    /**
     * 触发被动
     * @param selfTarget
     * @param type  0为AttributeType  1为ExAttributeType
     * @param attrType 属性cd
     * @param per 触发概率
     */
    HookControl.prototype.checkTriggerAttr = function (selfTarget, type, attrType, per, exValue) {
        if (per === void 0) { per = 1; }
        if (exValue === void 0) { exValue = 0; }
        if (Math.random() < per) {
            var selfInfo = selfTarget.infoModel;
            var handle = selfInfo.handle;
            var obj = this.attrCD[handle] = this.attrCD[handle] || {};
            var key = type + "_" + attrType;
            var value = exValue ? exValue : (type == 0 ? selfInfo.getAtt(attrType) : selfInfo.getExAtt(attrType));
            var lastTime = obj[key] || 0;
            var curTimer = egret.getTimer();
            if (lastTime && curTimer - lastTime < value) {
                return;
            }
            obj[key] = curTimer;
            var attrValue = this.attrValue[handle] = this.attrValue[handle] || {};
            attrValue[key] = 1;
        }
    };
    /**
     * 是否触发
     */
    HookControl.prototype.isTriggerAttr = function (selfTarget, type, attrType, def) {
        if (def === void 0) { def = 0; }
        var selfInfo = selfTarget.infoModel;
        var attrValue = this.attrValue[selfInfo.handle];
        if (attrValue) {
            var key = type + "_" + attrType;
            var last = attrValue[key];
            attrValue[key] = def;
            return last;
        }
        return 0;
    };
    /**
     * 给自身添加附加效果
     * @param selfTarget
     * @param ImbaData
     */
    HookControl.prototype.addSelfReviseSkillEffect = function (selfTarget, ImbaData) {
        if (ImbaData.selfEff) {
            for (var k in ImbaData.selfEff) {
                var config = DataCenter.ins().SkillsEffectsConfig[ImbaData.selfEff[k]];
                if (config) {
                    var args = this.getArgs(ImbaData.selfEff[k], ImbaData, null);
                    var buff = BuffModel.createBuff(ImbaData.selfEff[k], selfTarget, args);
                    selfTarget.addBuff(buff);
                }
            }
        }
    };
    /**
     * 给目标添加附加效果
     * @param target
     * @param source
     * @param ImbaData
     */
    HookControl.prototype.addTargetReviseSkillEffect = function (target, source, ImbaData) {
        if (ImbaData.targetEff) {
            for (var k in ImbaData.targetEff) {
                var config = DataCenter.ins().SkillsEffectsConfig[ImbaData.targetEff[k]];
                if (config) {
                    var args = this.getArgs(ImbaData.targetEff[k], ImbaData, null);
                    var buff = BuffModel.createBuff(ImbaData.targetEff[k], source, args);
                    target.addBuff(buff);
                }
            }
        }
    };
    /**
     * 被攻击触发被动
     */
    HookControl.prototype.tryUsePassiveSkill = function (selfTarget, target, isBeEffect, _type) {
        if (isBeEffect === void 0) { isBeEffect = false; }
        if (_type === void 0) { _type = 0; }
        var selfTar = isBeEffect ? target : selfTarget;
        var pTarget = isBeEffect ? selfTarget : target;
        if (selfTar instanceof UnitRole) {
            var canUseSkill = this.getCanUseSkillList(selfTar, false);
            if (!canUseSkill || canUseSkill.length == 0)
                return;
            var skills = [];
            for (var _i = 0, canUseSkill_1 = canUseSkill; _i < canUseSkill_1.length; _i++) {
                var skill = canUseSkill_1[_i];
                var passive = skill.config.passive;
                switch (passive.cond) {
                    case 0 /* attack */:
                        if (!isBeEffect) {
                            if (GameControl.triggerValue(passive.rate)) {
                                skills.push(skill);
                            }
                        }
                        break;
                    case 1 /* beAttack */:
                        if (isBeEffect) {
                            if (GameControl.triggerValue(passive.rate)) {
                                skills.push(skill);
                            }
                        }
                        break;
                    case 2 /* crit */:
                        if (!isBeEffect && (_type & 2 /* TYPE2 */) == 2 /* TYPE2 */) {
                            if (GameControl.triggerValue(passive.rate)) {
                                skills.push(skill);
                            }
                        }
                        break;
                    case 3 /* beCrit */:
                        if (isBeEffect && (_type & 2 /* TYPE2 */) == 2 /* TYPE2 */) {
                            if (GameControl.triggerValue(passive.rate)) {
                                skills.push(skill);
                            }
                        }
                    case 4 /* hpLess */:
                        if (selfTar.infoModel.getAtt(0 /* atHp */) / selfTar.infoModel.getAtt(2 /* atMaxHp */) <= passive.p1 / 10000 && GameControl.triggerValue(passive.rate)) {
                            skills.push(skill);
                        }
                        break;
                    case 8 /* heJi */:
                        if (!isBeEffect && (_type & 16 /* TYPE16 */) == 2 /* TYPE2 */) {
                            if (GameControl.triggerValue(passive.rate)) {
                                skills.push(skill);
                            }
                        }
                        break;
                }
            }
            if (!skills.length)
                return;
            for (var _a = 0, skills_1 = skills; _a < skills_1.length; _a++) {
                var skillVo = skills_1[_a];
                var tar = void 0;
                if (skillVo.targetType != 2 /* Enemy */) {
                    tar = selfTar;
                }
                else {
                    if (pTarget && pTarget.infoModel.getAtt(0 /* atHp */) > 0) {
                        tar = pTarget;
                    }
                    else {
                        var monsters = UnitMgr.ins().screeningTargetByPos(selfTar, false, 0, skillVo.affectRange, this.aiList);
                        tar = monsters && monsters[0];
                    }
                }
                if (tar) {
                    var handle = selfTar.infoModel.handle;
                    this.skillCD[handle] = this.skillCD[handle] || {};
                    this.skillCD[handle][skillVo.id] = egret.getTimer();
                    this.useSkill(selfTar, tar, skillVo);
                }
            }
        }
    };
    /**
     * 触发战灵被动技能
     */
    HookControl.prototype.tryUseAshtarteSkill = function (selfTarget, skillId, isBeEffect) {
        var skillVo = ObjectPool.pop('SkillVo');
        skillVo.configID = skillId;
        var tar;
        if (skillVo.targetType != 2 /* Enemy */) {
            tar = selfTarget;
        }
        else {
            var monsters = UnitMgr.ins().screeningTargetByPos(selfTarget, false, 0, skillVo.affectRange, this.aiList);
            tar = monsters[0];
        }
        if (tar) {
            var handle = selfTarget.infoModel.handle;
            this.skillCD[handle] = this.skillCD[handle] || {};
            this.skillCD[handle][skillVo.id] = egret.getTimer();
            this.useSkill(selfTarget, tar, skillVo);
        }
    };
    /**
     * 触发羽翼被动技能
     */
    HookControl.prototype.tryUseWingSkill = function (selfTarget, skill, isBeEffect) {
        var wingSkills = this.checkWingEffect(selfTarget, skill, isBeEffect);
        if (wingSkills.length) {
            for (var _i = 0, wingSkills_1 = wingSkills; _i < wingSkills_1.length; _i++) {
                var skillId = wingSkills_1[_i];
                var skillVo = ObjectPool.pop('SkillVo');
                skillVo.configID = skillId;
                var tar = void 0;
                if (skillVo.targetType != 2 /* Enemy */) {
                    tar = selfTarget;
                }
                else {
                    var monsters = UnitMgr.ins().screeningTargetByPos(selfTarget, false, 0, skillVo.affectRange, this.aiList);
                    tar = monsters[0];
                }
                if (tar) {
                    var handle = selfTarget.infoModel.handle;
                    this.skillCD[handle] = this.skillCD[handle] || {};
                    this.skillCD[handle][skillVo.id] = egret.getTimer();
                    this.useSkill(selfTarget, tar, skillVo);
                }
            }
        }
    };
    /**
     * 检查被动技能
     */
    HookControl.prototype.checkWingEffect = function (selfTarget, skill, isBeEffect) {
        if (isBeEffect === void 0) { isBeEffect = false; }
        var wingSkill = selfTarget.infoModel.wingSkillData;
        var triggerSkills = [];
        if (skill.isPassive) {
            return triggerSkills;
        }
        var skillCD = this.skillCD[selfTarget.infoModel.handle];
        for (var _i = 0, wingSkill_1 = wingSkill; _i < wingSkill_1.length; _i++) {
            var skillId = wingSkill_1[_i];
            var skillConfig = ObjectPool.pop('SkillVo');
            skillConfig.configID = skillId;
            if (skillCD && skillCD[skillConfig.id] && (egret.getTimer() - skillCD[skillConfig.id] < skillConfig.cd)) {
                continue;
            }
            if (skillConfig.config.passive.cond == 0 && !isBeEffect) {
                if (GameControl.triggerValue(skillConfig.config.passive.rate)) {
                    triggerSkills.push(skillId);
                }
            }
            else if (skillConfig.config.passive.cond == 1 && isBeEffect) {
                if (GameControl.triggerValue(skillConfig.config.passive.rate)) {
                    triggerSkills.push(skillId);
                }
            }
        }
        return triggerSkills;
    };
    /**
     * 烈焰技能附加效果
     */
    HookControl.prototype.tryUseYlPassiveSkill = function (selfTarget, target, skill) {
        var info = selfTarget.infoModel;
        if (info.lyMarkLv && info.lyMarkSkills) {
            for (var i = 0; i < info.lyMarkSkills.length; i++) {
                var lv = info.lyMarkSkills[i] || 0;
                if (lv) {
                    var config = DataCenter.ins().FlameMarkEffectConfig[i + 1][lv];
                    if (config.effId) {
                        var effConfig = DataCenter.ins().SkillsEffectsConfig[config.effId];
                        if (effConfig.probabilityBuff) {
                            if (GameControl.triggerValue(effConfig.probabilityBuff)) {
                                var buff = BuffModel.createBuff(config.effId, selfTarget);
                                target.addBuff(buff);
                            }
                        }
                    }
                    if (config.selfEffId) {
                        var effConfig = DataCenter.ins().SkillsEffectsConfig[config.selfEffId];
                        if (effConfig.probabilityBuff) {
                            if (GameControl.triggerValue(effConfig.probabilityBuff)) {
                                var buff = BuffModel.createBuff(config.selfEffId, selfTarget);
                                selfTarget.addBuff(buff);
                            }
                        }
                    }
                }
            }
        }
    };
    /**
     * 传世神装效果
     */
    HookControl.prototype.tryTriggerHeirloomSkill = function (selfTarget, tempArr, hitTargetInfo) {
        var buff80004 = null; //诅咒buff
        var _bfCurse = 80004; //诅咒id 组
        var shixueId = 6666601; //嗜血id，乱起，设置cd用
        var isTriggerShiXue = -1; //是否触发嗜血 1触发 其他不触发
        var shixueValue = 0;
        var selfHandle = selfTarget.infoModel.handle;
        for (var i in tempArr) {
            var ttarget = tempArr[i];
            var tarHandle = ttarget.infoModel.handle;
            if (selfTarget.team != ttarget.team) {
                //是否触发嗜血
                if (isTriggerShiXue == -1) {
                    isTriggerShiXue = 0;
                    if (!this.skillCD[selfHandle] || !this.skillCD[selfHandle][shixueId] || (egret.getTimer() - this.skillCD[selfHandle][shixueId] >= 5000)) {
                        if (GameControl.triggerAttr(selfTarget, 32 /* atVamirePro */)) {
                            isTriggerShiXue = 1;
                            this.skillCD[selfHandle] = this.skillCD[selfHandle] || {};
                            this.skillCD[selfHandle][shixueId] = egret.getTimer();
                        }
                    }
                }
                //判断对方是否触发诅咒
                if (ttarget instanceof UnitRole && !selfTarget.hasBuff(_bfCurse) && !buff80004) {
                    if (!this.skillCD[tarHandle] || !this.skillCD[tarHandle][_bfCurse] || (egret.getTimer() - this.skillCD[tarHandle][_bfCurse] >= 5000)) {
                        if (GameControl.triggerAttr(ttarget, 35 /* atCursePro */)) {
                            var lv = ttarget.infoModel.heirloom.getInfoBySolt(2).lv;
                            if (lv > 0) {
                                var ids = this.getEffectIdsByGroup(_bfCurse);
                                var buffId = ids[lv - 1];
                                buff80004 = ObjectPool.pop('BuffModel');
                                buff80004.effConfig = DataCenter.ins().SkillsEffectsConfig[buffId];
                                buff80004.value = buff80004.effConfig.args.a;
                                buff80004.addTime = egret.getTimer();
                                buff80004.endTime = buff80004.addTime + buff80004.effConfig.duration;
                                buff80004.source = ttarget;
                                selfTarget.addBuff(buff80004);
                                ttarget.addBubble(13);
                                this.skillCD[tarHandle] = this.skillCD[tarHandle] || {};
                                this.skillCD[tarHandle][_bfCurse] = egret.getTimer();
                            }
                        }
                    }
                }
            }
        }
        //显示嗜血
        if (isTriggerShiXue == 1) {
            selfTarget.addBubble(14);
            for (var _i = 0, hitTargetInfo_1 = hitTargetInfo; _i < hitTargetInfo_1.length; _i++) {
                var info = hitTargetInfo_1[_i];
                if (shixueValue == 0) {
                    shixueValue = Math.floor(selfTarget.infoModel.getAtt(33 /* atVamirePen */) / 10000 * info[0].hramValue);
                }
            }
            this.hramedDie(selfTarget, -shixueValue);
            this.showHram(false, 1, selfTarget, selfTarget, -shixueValue);
        }
    };
    /**
     * 触发冰魂效果
     */
    HookControl.prototype.tryUseWeaponSkill = function (target, skill, isBeHit) {
        if (target.AI_STATE == 3 /* Die */)
            return;
        if (target.getRealHp() <= 0)
            return;
        if (isBeHit) {
            var isAddHpPro = GameControl.triggerAttr(target, 39 /* atBeAttAddHpPro */);
            if (isAddHpPro) {
                target.addBubble(16);
                var addHp = target.infoModel.getAtt(40 /* atBeAttAddHpVal */);
                this.hramedDie(target, -addHp);
                this.showHram(false, 1, target, target, -addHp);
            }
            if (target.infoModel.getAtt(42 /* atHpLtAddBuff */) && (target.infoModel.getAtt(0 /* atHp */) / target.infoModel.getAtt(2 /* atMaxHp */)) < (target.infoModel.getAtt(42 /* atHpLtAddBuff */) / 10000)) {
                var skillCD = this.skillCD[target.infoModel.handle];
                var effConfig = DataCenter.ins().SkillsEffectsConfig[target.infoModel.getExAtt(40 /* eatHpLtAddBuffId */)];
                if (!effConfig) {
                    return;
                }
                if (skillCD && skillCD[40 /* eatHpLtAddBuffId */] && egret.getTimer() - skillCD[40 /* eatHpLtAddBuffId */] < target.infoModel.getExAtt(41 /* eatHpLtAddBuffCd */)) {
                    return;
                }
                target.addBubble(18);
                var buff = ObjectPool.pop('BuffModel');
                buff.effConfig = effConfig;
                buff.value = buff.effConfig.args.a;
                buff.addTime = egret.getTimer();
                buff.endTime = buff.addTime + buff.effConfig.duration;
                buff.source = target;
                target.addBuff(buff);
                this.skillCD[target.infoModel.handle] = this.skillCD[target.infoModel.handle] || {};
                this.skillCD[target.infoModel.handle][40 /* eatHpLtAddBuffId */] = egret.getTimer();
            }
        }
    };
    /**
     * 触发秘籍效果
     */
    HookControl.prototype.tryTriggerMijiBuqu = function (ttarget) {
        var ttInfo = ttarget.infoModel;
        if (!ttInfo.getExAtt(63 /* eatMiJiBQBuffId */))
            return;
        if (ttInfo.getAtt(0 /* atHp */) / ttInfo.getAtt(2 /* atMaxHp */) * 10000 < ttInfo.getExAtt(62 /* eatMiJiBQHpPer */)) {
            this.checkTriggerAttr(ttarget, 1, 61 /* eatMiJiBQHpTime */, 1);
            var isTrigger = this.isTriggerAttr(ttarget, 1, 61 /* eatMiJiBQHpTime */);
            if (isTrigger) {
                var buff = BuffModel.createBuff(ttInfo.getExAtt(63 /* eatMiJiBQBuffId */), ttarget);
                ttarget.addBuff(buff);
                ttarget.addBubble(23);
            }
        }
    };
    /**
     * 触发魂骨效果
     */
    HookControl.prototype.tryTriggerHungu = function (ttarget) {
        var ttInfo = ttarget.infoModel;
        var per = ttInfo.getAtt(79 /* atHunGuPro */);
        if (!per)
            return;
        this.checkTriggerAttr(ttarget, 0, 81 /* atHunGuCd */, per / 10000);
        var isTrigger = this.isTriggerAttr(ttarget, 0, 81 /* atHunGuCd */);
        if (isTrigger) {
            BubbleControl.ins().playBubbleEffect(24);
        }
        return isTrigger;
    };
    /**
     * 触发心法效果
     */
    HookControl.prototype.tryTriggerHeart = function (ttarget) {
        var ttInfo = ttarget.infoModel;
        if (!ttInfo.getAtt(84 /* atHearthCount */))
            return;
        var exValue = 1000;
        var job = ttInfo.job;
        switch (job) {
            case 1 /* ZhanShi */:
                exValue *= 15;
                break;
            case 2 /* FaShi */:
                exValue *= 17;
                break;
            case 3 /* DaoShi */:
                exValue *= 19;
        }
        this.checkTriggerAttr(ttarget, 0, 84 /* atHearthCount */, 1, exValue);
        var isTrigger = this.isTriggerAttr(ttarget, 0, 84 /* atHearthCount */);
        if (isTrigger) {
            BubbleControl.ins().playBubbleEffect(25);
        }
        return isTrigger;
    };
    /**
     * 触发主宰效果
     */
    HookControl.prototype.triggerMaster = function (selfTarget, target) {
        var hCode = selfTarget.infoModel.handle;
        var selfInfo = selfTarget.infoModel;
        this.skillCD[hCode] = this.skillCD[hCode] || {};
        var buffId = selfInfo.getExAtt(68 /* eatMasterBuffId */);
        if (!(this.skillCD[hCode][buffId] && egret.getTimer() - this.skillCD[hCode][buffId] < selfInfo.getExAtt(69 /* eatMasterBuffCd */))) {
            var effConfig = DataCenter.ins().SkillsEffectsConfig[buffId];
            if (effConfig) {
                var buff = ObjectPool.pop("BuffModel");
                buff.effConfig = effConfig;
                buff.value = buff.effConfig.args.a;
                buff.addTime = egret.getTimer();
                buff.endTime = buff.addTime + buff.effConfig.duration;
                buff.source = selfTarget;
                target.addBuff(buff);
                this.skillCD[hCode][buffId] = egret.getTimer();
                selfTarget.addBubble(26);
            }
        }
    };
    /**
     * 触发雷霆技能
     */
    HookControl.prototype.tryThunderSkill = function (selfTarget, target, skill) {
        if (thunderControl.isThunderSkill(skill.configID)) {
            return false;
        }
        var level = thunderControl.getCurThunderSkillLv(selfTarget.infoModel);
        if (level > 0) {
            var thunderSuitLevel = thunderControl.getThunderSuitLevelConfig(0 /* TYPE0 */, 2, level);
            var skillId = thunderSuitLevel.skillId[selfTarget.infoModel.job - 1];
            var skillsConfig = DataCenter.ins().SkillsConfig[skillId];
            var skillVo = new SkillVo(skillId);
            var hCode = selfTarget.infoModel.handle;
            this.skillCD[hCode] = this.skillCD[hCode] || {};
            if (this.skillCD[hCode][skillVo.id] && egret.getTimer() - this.skillCD[hCode][skillVo.id] < skillVo.cd) {
                return false;
            }
            if (GameControl.triggerValue(skillsConfig.passive.rate)) {
                this.skillCD[hCode][skillVo.id] = egret.getTimer();
                this.useSkill(selfTarget, target, skillVo);
                return true;
            }
        }
        return false;
    };
    /**
     * 宠物被动技能
     * @param selfTarget
     * @param isBeEffect
     */
    HookControl.prototype.petTryUsePassiveSkill = function (selfTarget, isBeEffect) {
        if (isBeEffect === void 0) { isBeEffect = true; }
        var masterHandle = selfTarget.infoModel.masterHandle;
        var role = UnitMgr.ins().getEntityByHandle(masterHandle);
        if (role && role.infoModel && role.infoModel.getExAtt(47 /* eatPetSkillLevel */)) {
            var skillId = 36000 + role.infoModel.getExAtt(47 /* eatPetSkillLevel */);
            var canUseSkill = [new SkillVo(skillId)];
            var skills = [];
            for (var _i = 0, canUseSkill_2 = canUseSkill; _i < canUseSkill_2.length; _i++) {
                var skill = canUseSkill_2[_i];
                if (skill.config.passive.cond == 0 && !isBeEffect) {
                    if (GameControl.triggerValue(skill.config.passive.rate)) {
                        skills.push(skill);
                    }
                }
                else if (skill.config.passive.cond == 1 && isBeEffect) {
                    if (GameControl.triggerValue(skill.config.passive.rate)) {
                        skills.push(skill);
                    }
                }
            }
            if (!skills.length)
                return;
            for (var _a = 0, skills_2 = skills; _a < skills_2.length; _a++) {
                var skillVo = skills_2[_a];
                var tar = void 0;
                if (skillVo.targetType != 2 /* Enemy */) {
                    tar = selfTarget;
                }
                else {
                    var monsters = UnitMgr.ins().screeningTargetByPos(selfTarget, false, 0, skillVo.affectRange, this.aiList);
                    tar = monsters[0];
                }
                if (tar) {
                    var handle = selfTarget.infoModel.handle;
                    this.skillCD[handle] = this.skillCD[handle] || {};
                    this.skillCD[handle][skillVo.id] = egret.getTimer();
                    this.useSkill(selfTarget, tar, skillVo);
                }
            }
        }
    };
    /**
     * 显示buff伤害
     */
    HookControl.prototype.showBuffHarm = function (selfTarget, target, skill, hramValue) {
        //攻击敌方，敌方有buff值，则给自己加血（烈焰戒指给目标释放了此buff，其他角色受到此目标攻击时，其他角色回血）
        var addValue = GameControl.calculateRealAttribute(target, 70 /* atAddEnemyHp */, selfTarget);
        if (addValue > 0) {
            addValue = -addValue;
            this.hramedDie(selfTarget, addValue);
            if (selfTarget instanceof UnitRole) {
                this.showHram(false, 0 /* TYPE0 */, selfTarget, selfTarget, addValue);
            }
        }
        //攻击敌方，敌方有buff值，则给自己受到万分比伤害（烈焰戒指给目标释放了此buff，其他角色受到此目标攻击时，此目标受到万分比反伤）
        var atHurtMyself = GameControl.calculateRealAttribute(selfTarget, 71 /* atHurtMyself */, target);
        if (atHurtMyself) {
            var value = Math.floor(hramValue * atHurtMyself / 10000);
            var isDie = this.hramedDie(selfTarget, value);
            this.showHram(isDie, 0 /* TYPE0 */, selfTarget, target, value);
        }
    };
    /**
     * 受击是否死亡
     */
    HookControl.prototype.hramedDie = function (target, val) {
        var value = target.infoModel.getAtt(0 /* atHp */) - val;
        if (val < 0) {
            var maxValue = target.infoModel.getAtt(2 /* atMaxHp */);
            value = value > maxValue ? maxValue : value;
        }
        target.infoModel.setAtt(0 /* atHp */, value);
        if (target.infoModel.getAtt(0 /* atHp */) <= 0) {
            return true;
        }
        return false;
    };
    /**
     * 伤害表现
     */
    HookControl.prototype.showHram = function (isDie, damageType, target, sourceTarget, hramValue, logStr) {
        var _this = this;
        if (logStr === void 0) { logStr = ""; }
        if (!target || !target.infoModel)
            return;
        this.trace(target.infoModel.name + " " + target.team + " " + LangMgr.getValueByKey('zsType13', target.infoModel.handle, hramValue, target.getHP(), logStr));
        //显示对象血条扣血
        target.hram(hramValue);
        //飘血
        gameControl.dispatchEntityHpChange(target, sourceTarget, damageType, hramValue);
        //死亡
        if (isDie) {
            target.removeAllFilters();
            target.stopMove();
            target.playAction(UnitAction.HIT);
            if (target.myKill && !(target instanceof UnitRole)) {
                var alrCensus = false;
                var data = taskControl.taskTrace;
                if (data) {
                    var config = taskControl.getAchieveConfById(data.id);
                    if (config && config.type == HookControl.SEND_TASK_TYPE) {
                        copyControl.upKillMonster(target.infoModel.configID);
                        alrCensus = true;
                    }
                    var spokesmanTask = spokesPersonTaskControl.getCfg();
                    if (!alrCensus && spokesmanTask && spokesmanTask.type == 68 /* killMonster */ && !spokesPersonTaskControl.getTaskPro()) {
                        copyControl.upKillMonster(target.infoModel.configID);
                    }
                }
            }
            //复活
            if (!target.hasBuff(52001) && GameControl.triggerExAttr(target, 3 /* eatGodBlessProbability */)) {
                target.AI_STATE = 0 /* Stand */;
                target.removeAllBuff();
                var r = target.infoModel.getAtt(2 /* atMaxHp */) * target.infoModel.attributeExData[4 /* eatGodBlessRate */] / 10000;
                target.infoModel.setAtt(0 /* atHp */, r);
                target.hram(-r);
                this.trace(LangMgr.getValueByKey('zsType14', target.getHP()));
                target.addBubble(7);
            }
            else {
                this.trace(LangMgr.getValueByKey('zsType15', target.infoModel.handle));
                if (sourceTarget && sourceTarget.team == 0 /* My */) {
                    this.checkPlayDieSound(target);
                }
                TimerMgr.ins().doTimer(500, 1, function () {
                    _this.trace(LangMgr.getValueByKey('zsType16', target.infoModel.handle));
                    UnitMgr.ins().removeByHandle(target.infoModel.handle, false, (target.myKill && target.infoModel.type == 2 /* MONSTER */));
                    //移除角色 检查是否还有其他同角色，没有则移除所有（包括烈焰戒指召唤怪）
                    if (target.infoModel.type == 1 /* ROLE */) {
                        var enti = UnitMgr.ins().getEntityBymasterhHandle(target.infoModel.masterHandle);
                        if (!enti) {
                            var list = UnitMgr.ins().getMasterList(target.infoModel.masterHandle);
                            if (list && list.length) {
                                for (var _i = 0, list_1 = list; _i < list_1.length; _i++) {
                                    var en = list_1[_i];
                                    UnitMgr.ins().removeByHandle(en.infoModel.handle);
                                }
                            }
                        }
                    }
                    delete _this.hashHpObj[target.hashCode];
                    target.onDead(function () {
                        target.deadDelay();
                        _this.clearTarget(target);
                        var t = egret.Tween.get(target.dieTweenObj);
                        t.wait(1000).to({ alpha: 0 }, 1000).call(function () {
                            if (target instanceof UnitMonster && !(target instanceof UnitRole)) {
                                target.destruct();
                            }
                            else {
                                DisplayUtils.removeFromParent(target);
                            }
                        });
                    });
                    if (target.team == 1 /* Monster */) {
                        var count = UnitMgr.ins().getTeamCount(1 /* Monster */);
                        if (count <= copyControl.rCount) {
                            gameControl.createGuanqiaMonster(false);
                        }
                    }
                    _this.checkAIend(sourceTarget, target);
                }, this);
                if (target.team == 1 /* Monster */) {
                    var count = UnitMgr.ins().getTeamCount(1 /* Monster */);
                    if (count <= copyControl.rCount) {
                        gameControl.createGuanqiaMonster(false);
                    }
                    if (sourceTarget.team == 0 /* My */) {
                        var master = UnitMgr.ins().getNoDieRole();
                        var isElite_1 = target.infoModel.configID == copyControl.eliteMonsterId;
                        if (master && (isElite_1 || sourceTarget.infoModel.handle == master.infoModel.handle) && MapControl.copyId == 0) {
                            //计算掉落
                            var x_Grid = Math.floor(target.x / MapControl.CELL_SIZE);
                            var y_Grid = Math.floor(target.y / MapControl.CELL_SIZE);
                            var waveDropDataVos = void 0;
                            if (!isElite_1) {
                                waveDropDataVos = copyControl.getRewardsPop();
                                copyControl.rewards = [];
                            }
                            else {
                                waveDropDataVos = copyControl.eliteRewards.shift();
                            }
                            if (waveDropDataVos && waveDropDataVos.length > 0) {
                                for (var j = 0; j < waveDropDataVos.length && j < 8; j++) {
                                    confrontControl.dispatchCreateDrop(x_Grid, y_Grid, waveDropDataVos[j].drops[0]);
                                }
                                var callback = function () {
                                    copyControl.upGetReward(isElite_1);
                                };
                                DropControl.addCompleteFunc(callback, this);
                                DropControl.start();
                            }
                            if (copyControl.exp > 0 && (!waveDropDataVos || waveDropDataVos.length == 0)) {
                                copyControl.upGetReward(isElite_1);
                                copyControl.exp = 0;
                            }
                        }
                        //怪物杀死完后站立动作
                        var nextList = UnitMgr.ins().screeningTargetByPos(sourceTarget, false, 0, Number.MAX_VALUE, this.aiList);
                        if (!nextList || nextList.length == 0) {
                            var mylist = UnitMgr.ins().getEntityByTeam(0 /* My */);
                            for (var _i = 0, mylist_2 = mylist; _i < mylist_2.length; _i++) {
                                var char = mylist_2[_i];
                                char.playAction(UnitAction.STAND);
                            }
                        }
                    }
                    for (var handle in this.curTarget) {
                        if (this.curTarget[handle] == target) {
                            var char = UnitMgr.ins().getEntityByHandle(handle);
                            if (char && char.infoModel) {
                                ++char.infoModel.killNum;
                            }
                            break;
                        }
                    }
                    if (sourceTarget.team == 5 /* Faker */) {
                        var wildPlayerDataVo = confrontControl.wildPersonList[sourceTarget.infoModel.masterHandle];
                        //闯关的假人 杀到足够数量的怪返回终点 移除
                        var killNum = confrontControl.countKillNumByMarster(sourceTarget.infoModel.masterHandle);
                        if (wildPlayerDataVo && wildPlayerDataVo.actionType == 1 && killNum >= wildPlayerDataVo.killNum) {
                            MapControl.moveEntity(sourceTarget, wildPlayerDataVo.backX, wildPlayerDataVo.backY);
                        }
                    }
                }
            }
        }
        else {
            if (target.AI_STATE != 3 /* Die */ && hramValue > 0) {
                //没抗反伤技能
            }
            //检测血量变更
            AshtarteSkillControl.ins().checkHPTrigger(target, sourceTarget);
        }
    };
    /**
     * 检查战斗是否结束
     * @param attacker 攻击方
     * @param defender 防守方
     */
    HookControl.prototype.checkAIend = function (attacker, defender) {
        if (attacker) {
            var count = UnitMgr.ins().getTeamCount(defender.team);
            this.trace(LangMgr.getValueByKey('shengyunum') + attacker.infoModel.name + " " + attacker.team
                + " " + defender.infoModel.name + " " + defender.team + " " + count);
            if (!count) {
                switch (attacker.team) {
                    case 0 /* My */:
                        //胜利
                        switch (defender.team) {
                            case 1 /* Monster */:
                                this.trace(LangMgr.getValueByKey('zsTips35'));
                                break;
                            case 3 /* WillBoss */:
                                confrontControl.upResult(true);
                                this.trace(LangMgr.getValueByKey('zsTips36'));
                                break;
                            case 2 /* WillEntity */:
                                this.trace(LangMgr.getValueByKey('zsTips37'));
                                if (UnitMgr.ins().getTeamCount(0 /* My */)) {
                                    confrontFightControl.sendFightResult(1);
                                }
                                else {
                                    return;
                                }
                                break;
                            case 5 /* Faker */:
                                //杀死假人
                                var wildPlayerDataVo_1 = confrontControl.wildPersonList[defender.infoModel.masterHandle];
                                if (wildPlayerDataVo_1) {
                                    confrontControl.upWildPeopleResult(wildPlayerDataVo_1.index, 1);
                                }
                                break;
                        }
                        if (confrontControl.isGuiding) {
                            confrontControl.isGuiding = false;
                            confrontControl.dispatchEncounterDataChange();
                        }
                        UnitMgr.ins().resetRole();
                        break;
                    //失败
                    case 3 /* WillBoss */:
                        confrontControl.upResult(false);
                        this.trace(LangMgr.getValueByKey('zsTips38'));
                        break;
                    case 2 /* WillEntity */:
                        if (defender.team != 0 /* My */)
                            return;
                        this.trace(LangMgr.getValueByKey('zsTips39'));
                        if (defender.team != 0 /* My */ || !UnitMgr.ins().getTeamCount(2 /* WillEntity */)) {
                            return;
                        }
                        confrontFightControl.sendFightResult(0);
                        break;
                    case 5 /* Faker */:
                        //被假人杀死
                        var wildPlayerDataVo = confrontControl.wildPersonList[attacker.infoModel.masterHandle];
                        if (wildPlayerDataVo && defender.team == 0 /* My */) {
                            confrontControl.upWildPeopleResult(wildPlayerDataVo.index, 0);
                        }
                        break;
                    case 1 /* Monster */:
                        UnitMgr.ins().resetRole();
                        break;
                }
                this.getPickAI();
            }
        }
    };
    /**
     * 怪物死亡音效
     */
    HookControl.prototype.checkPlayDieSound = function (monster) {
        var configID = monster.infoModel ? monster.infoModel.configID : 0;
        var config;
        if (!SoundUtils.PLAY_OPEN_VIEW && configID) {
            config = copyControl.guanqiaMonster[configID];
            if (config) {
                if (config.sound) {
                    SoundUtils.ins().playEffect(config.sound);
                }
            }
            else {
                config = DataCenter.ins().MonstersConfig[configID];
                if (config) {
                    if (config.sound) {
                        SoundUtils.ins().playEffect(config.sound);
                    }
                }
            }
        }
    };
    HookControl.prototype.getPickAI = function () {
        if (this.inited && !confrontControl.isEncounter()) {
            this.stopHookTimer();
        }
    };
    HookControl.prototype.getTeamCount = function (team, funs) {
        var count = 0;
        for (var handle in this.aiList) {
            var tar = this.aiList[handle];
            if (tar.team == team) {
                if (funs) {
                    var state = false;
                    for (var i = 0; i < funs.length; i++) {
                        var fun = funs[i];
                        if (fun(tar)) {
                            state = true;
                            break;
                        }
                    }
                    if (!state)
                        continue;
                }
                count += 1;
            }
        }
        return count;
    };
    HookControl.prototype.stopHookTimer = function () {
        TimerMgr.ins().remove(this.startHook, this);
        TimerMgr.ins().remove(this.startAshtarte, this);
    };
    HookControl.prototype.addHookTimer = function () {
        if (!TimerMgr.ins().isExists(this.startHook, this)) {
            TimerMgr.ins().doTimer(HookControl.AI_UPDATE_TIME, 0, this.startHook, this);
            this.addAshtarteTimer();
        }
    };
    HookControl.prototype.addAshtarteTimer = function () {
        this.zhanlingTime = egret.getTimer();
        this.zhanlingdelayTime = egret.getTimer();
        if (!TimerMgr.ins().isExists(this.startAshtarte, this)) {
            TimerMgr.ins().doTimer(1000, 0, this.startAshtarte, this);
        }
    };
    HookControl.prototype.getArgs = function (id, imbaData, gwSKill, commSkillReviseConfig) {
        var skillEff = DataCenter.ins().SkillsEffectsConfig[id];
        var addA = 0, addC = 0, addTime = 0;
        if (imbaData) {
            if (imbaData.args) {
                for (var _i = 0, _a = imbaData.args; _i < _a.length; _i++) {
                    var arg = _a[_i];
                    if (arg.type == 8 && arg.vals[0] == skillEff.group) {
                        addA += arg.vals[2] || 0;
                        addC += arg.vals[4] || 0;
                        addTime += arg.vals[1] || 0;
                    }
                    if (arg.type == 6) {
                        addA += arg.vals[0] || 0;
                    }
                }
            }
        }
        if (gwSKill) {
            if (gwSKill.args) {
                for (var _b = 0, _c = gwSKill.args; _b < _c.length; _b++) {
                    var arg = _c[_b];
                    if (arg.type == 8 && arg.vals[0] == skillEff.group) {
                        addA += arg.vals[2] || 0;
                        addC += arg.vals[4] || 0;
                        addTime += arg.vals[1] || 0;
                    }
                    if (arg.type == 6) {
                        addA += arg.vals[0] || 0;
                    }
                }
            }
        }
        if (commSkillReviseConfig) {
            if (commSkillReviseConfig.args) {
                for (var _d = 0, _e = commSkillReviseConfig.args; _d < _e.length; _d++) {
                    var arg = _e[_d];
                    if (arg.type == 8 && arg.vals[0] == skillEff.group) {
                        addA += arg.vals[2] || 0;
                        addC += arg.vals[4] || 0;
                        addTime += arg.vals[1] || 0;
                    }
                    if (arg.type == 6) {
                        addA += arg.vals[0] || 0;
                    }
                }
            }
        }
        return { a: addA, b: 0, c: addC, time: addTime };
    };
    HookControl.prototype.skillEffValue = function (selfTarget, skillEff, args) {
        var effValue = 0;
        var addA = 0;
        var addC = 0;
        if (args) {
            addA = args.a || 0;
            addC = args.c || 0;
        }
        if (skillEff) {
            if (skillEff.args) {
                switch (skillEff.type) {
                    //中毒
                    case 1 /* AdditionalDamage */:
                        effValue = selfTarget.infoModel.getAtt(skillEff.args.b) * (skillEff.args.a + addA) + (skillEff.args.c || 0) + addC;
                        break;
                    //加血所以是负数
                    case 2 /* AddBlood */:
                        effValue = selfTarget.infoModel.getAtt(skillEff.args.b) * (skillEff.args.a + addA) + (skillEff.args.c || 0) + addC;
                        effValue = -effValue;
                        break;
                    //附加属性
                    case 3 /* AdditionalAttributes */:
                    case 7 /* HostAddAttributes */:
                        effValue = selfTarget.infoModel.getAtt(skillEff.args.b) * (skillEff.args.a + addA) + (skillEff.args.c || 0) + addC;
                        break;
                    //附加状态
                    case 4 /* AdditionalState */:
                        if (skillEff.args.i == 2) {
                            effValue = selfTarget.infoModel.getAtt(skillEff.args.b) * (skillEff.args.a + addA) + (skillEff.args.c || 0) + addC;
                        }
                        else {
                            var value = !skillEff.args.c ? 1 + addC : (skillEff.args.c || 0) + addC;
                            effValue = selfTarget.infoModel.getAtt(skillEff.args.b) * value;
                        }
                        break;
                }
            }
            effValue = effValue >> 0;
        }
        return effValue;
    };
    /**
     * 技能范围内
     */
    HookControl.prototype.tryUseSkill = function (selfTarget) {
        var hCode = selfTarget.infoModel.handle;
        var skill = this.curSkill[hCode];
        var target = this.curTarget[hCode];
        if (!skill) {
            return false;
        }
        //计算距离
        var dist = MathUtils.getDistance(selfTarget.x, selfTarget.y, target.x, target.y);
        //距离在技能范围内，攻击目标
        return dist < skill.castRange * MapControl.CELL_SIZE;
    };
    /**
     * 筛选技能
     */
    HookControl.prototype.screeningSkill = function (hCode) {
        var selfTarget = this.aiList[hCode];
        var isRole = selfTarget instanceof UnitRole;
        this.skillCD[hCode] = this.skillCD[hCode] || {};
        if (selfTarget.team == 0 /* My */) {
            var master = UnitMgr.ins().getNoDieRole();
            if (master && master != selfTarget && !this.checkDistance(selfTarget, master, 10)) {
                this.curSkill[hCode] = null; //距离主角太远就不释放技能 会跑向主角
                return;
            }
        }
        var mSkill = this.curSkill[hCode];
        if (mSkill && egret.getTimer() - this.skillCD[hCode][mSkill.id] < mSkill.cd) {
            this.curSkill[hCode] = null;
        }
        if (this.curSkill[hCode]) {
            return;
        }
        var canUseSkill = this.getCanUseSkillList(selfTarget);
        if (!canUseSkill)
            return;
        var skillEff;
        var skillIndex = 0;
        var skill = canUseSkill[skillIndex];
        skillEff = (skill && skill.tarEff) ? DataCenter.ins().SkillsEffectsConfig[skill.tarEff[0]] : null;
        //如果是召唤技能
        if (skillEff && skillEff.type == 5 /* Summon */) {
            //如果已经使用技能了，再取一个技能
            if (selfTarget.hasBuff(skillEff.group))
                skill = canUseSkill[++skillIndex];
        }
        skillEff = (skill && skill.tarEff) ? DataCenter.ins().SkillsEffectsConfig[skill.tarEff[0]] : null;
        //如果是加血技能
        if (skillEff && skillEff.type == 2 /* AddBlood */) {
            //如果没有加血对象，再取一个技能
            if (!UnitMgr.ins().checkCanAddBlood(selfTarget.team))
                skill = canUseSkill[++skillIndex];
        }
        //抗拒火环
        if (skill && skill.id == 25000) {
            //遭遇战不放群攻 没有可攻击的对象，获取下一个技能
            var tar = this.curTarget[selfTarget.infoModel.handle];
            if (!tar || tar.AI_STATE == 3 /* Die */)
                tar = selfTarget;
            if (confrontControl.isEncounter() || !UnitMgr.ins().checkCount(tar, skill.affectRange, 2, tar.team != selfTarget.team))
                skill = canUseSkill[++skillIndex];
        }
        //半月弯刀
        if (skill && skill.id == 13000) {
            //遭遇战不放群攻 没有可攻击的对象，获取下一个技能
            if (confrontControl.isEncounter() || !UnitMgr.ins().checkCount(selfTarget, skill.affectRange, 2))
                skill = canUseSkill[++skillIndex];
        }
        this.curSkill[hCode] = skill;
    };
    /**
     * 检查距离
     */
    HookControl.prototype.checkDistance = function (selfTarget, master, range) {
        if (range === void 0) { range = 5; }
        //计算距离
        var dist = MathUtils.getDistance(selfTarget.x, selfTarget.y, master.x, master.y);
        return dist < range * MapControl.CELL_SIZE;
    };
    /**
     * 获取释放技能列表
     */
    HookControl.prototype.getCanUseSkillList = function (selfTarget, isActive) {
        if (isActive === void 0) { isActive = true; }
        var skills = [];
        if (selfTarget instanceof UnitRole && selfTarget.infoModel) {
            if (Assert(selfTarget.infoModel.skillsData, "Character skills are empty\uFF0CisMy:" + selfTarget.isMy + ",fbType:" + MapControl.copyType + ",fubenId:" + MapControl.copyId)) {
                return;
            }
            //获取子角色当前等级的技能id
            skills = selfTarget.infoModel.skillsData.concat();
            if (selfTarget.team == 0 /* My */) {
                var gwSkills = godWeaponControl.getJobGWNewSkill(selfTarget.infoModel.job);
                if (gwSkills) {
                    skills = skills.concat(gwSkills);
                }
                //玉佩被动技能
                var roleId = selfTarget.infoModel.index;
                var jadeData = experienceJadeNewControl.getJadeDataByID(roleId);
                if (jadeData) {
                    skills = skills.concat(jadeData.getSkillList());
                }
                //图腾
                skills = skills.concat(TotemSkillControl.ins().getSkillID(roleId));
                //霸主装备
                var passiveSkills = reincarnateStarEquipControl.getPassiveSkills(roleId);
                if (passiveSkills && passiveSkills.length) {
                    skills = skills.concat(passiveSkills);
                }
                //吞噬6件套技能
                var devourSkill = DevourEquipContorl.ins().getSuitSkills(selfTarget.infoModel);
                devourSkill && (skills = skills.concat(devourSkill));
                //觉醒合击 
                // let punchAwakePassiveSkills = skillControl.getPunchAwakePassiveSkills();
                // if (punchAwakePassiveSkills && punchAwakePassiveSkills.length) {
                //     skills = skills.concat(punchAwakePassiveSkills);
                // } 
            }
            else {
                //玉佩被动技能
                var jadeData = selfTarget.infoModel.jadeData;
                if (jadeData)
                    skills = skills.concat(jadeData.getSkillList());
            }
            skills = skills.concat(uitrasoneEquipControl.getZhiZunSkills(selfTarget.infoModel));
        }
        else {
            //怪物技能
            if (selfTarget.team == 0 /* My */) {
                //烈焰戒指怪技能
                if (superRingControl.isFireRing(selfTarget.infoModel.handle)) {
                    var skillId = superRingControl.getRingSkill();
                    if (skillId) {
                        var skillVo = ObjectPool.pop('SkillVo');
                        skillVo.configID = skillId;
                        skills.push(skillVo);
                    }
                    skillId = flameMarkControl.getCurSkillID(); //烈焰印记
                    if (skillId) {
                        var skillVo = ObjectPool.pop('SkillVo');
                        skillVo.specialCD = flameMarkControl.getCurSkillCD();
                        skillVo.configID = skillId;
                        skills.push(skillVo);
                    }
                }
                else if (selfTarget.infoModel.fixSkills.length) {
                    var fixSkills = selfTarget.infoModel.fixSkills;
                    for (var i = 0; i < fixSkills.length; i++) {
                        var skillId = fixSkills[i];
                        var skillVo = ObjectPool.pop("SkillVo");
                        skillVo.configID = skillId;
                        skills.push(skillVo);
                    }
                }
                else {
                    var summonerType = 1;
                    //道士召唤怪技能
                    var skillVo = ObjectPool.pop('SkillVo');
                    skillVo.configID = 80001; //怪物通用技能
                    //神兵 道士召唤白虎技能
                    var gwSkills = godWeaponControl.getReviseBySkill(35000);
                    if (gwSkills && gwSkills.length) {
                        summonerType = 2;
                        skillVo.configID = 80002; //白虎技能
                    }
                    //神宠技能
                    if (crazyDogControl.skinId) {
                        skillVo.configID = crazyDogControl.getSummonerSkill(summonerType);
                    }
                    skills.push(skillVo);
                }
            }
            else {
                var skillVo = ObjectPool.pop('SkillVo');
                skillVo.configID = 50001; //怪物通用技能
                skills.push(skillVo);
            }
        }
        if (!skills || skills.length == 0)
            return;
        var hCode = selfTarget.infoModel.handle;
        this.skillCD[hCode] = this.skillCD[hCode] || {};
        var len = skills.length;
        if (len == 0)
            return;
        var canUseSkill = [];
        for (var i = 0; i < len; i++) {
            if (!skills[i].canUse)
                continue;
            if (isActive == skills[i].isPassive)
                continue;
            var reduceCD = 0;
            //神器影响技能CD
            if (selfTarget.team == 0 /* My */) {
                var imbaData = artifactControl.getReviseBySkill(skills[i].id);
                if (imbaData && imbaData.cd) {
                    reduceCD += imbaData.cd;
                }
                var gwSkills = godWeaponControl.getReviseBySkill(skills[i].id);
                var gwSkill = void 0;
                if (gwSkills) {
                    gwSkill = gwSkills[0];
                }
                if (gwSkill && gwSkill.cd) {
                    reduceCD += gwSkill.cd;
                }
                var commSkillReviseConfig = SkillVo.reviseDp(skills[i].id + skills[i].lv, selfTarget.infoModel.index);
                if (commSkillReviseConfig) {
                    reduceCD += commSkillReviseConfig.cd || 0;
                }
            }
            //是否还在上次cd中
            if (egret.getTimer() - this.skillCD[hCode][skills[i].id] < (skills[i].cd - reduceCD))
                continue;
            //添加到可使用列表中
            canUseSkill.push(skills[i]);
        }
        //排序优先级
        canUseSkill.sort(this.sortFunc);
        return canUseSkill;
    };
    HookControl.prototype.sortFunc = function (a, b) {
        var job = a.job;
        var conf = DataCenter.ins().SkillsSorderConfig[job];
        if (!conf)
            return 0;
        var arr = conf.skillorder;
        var ap = arr.length; //默认优先级最低
        var bp = arr.length; //默认优先级最低
        for (var i in arr) {
            if (arr[i] == a.id)
                ap = +i;
            if (arr[i] == b.id)
                bp = +i;
        }
        if (ap > bp)
            return 1;
        if (ap < bp)
            return -1;
        return 0;
    };
    /**
     * 基础伤害
     */
    HookControl.prototype.damageBaseCalculation = function (selfTarget, target, skill) {
        //攻击
        var attrValue = 0;
        //敌方防御
        var tempValue = 0;
        var damage = 0;
        var buff;
        //攻击方职业
        var sJob = 0 /* None */;
        //防守方职业
        var tJob = 0 /* None */;
        var selfIsActor = false;
        var targetIsActor = false;
        var selfInfo = selfTarget.infoModel;
        var attArga = 0;
        var attArgb = 0;
        var attArgc = 0;
        var toMonAdd = 0;
        var addValue = 0;
        if (selfTarget.team == 0 /* My */) {
            var imbaData = artifactControl.getReviseBySkill(skill.id);
            if (imbaData) {
                attArga = imbaData.a || 0;
                attArgb = imbaData.b || 0;
                toMonAdd = imbaData.d || 0;
                if (imbaData.selfEff) {
                    for (var k in imbaData.selfEff) {
                        buff = selfTarget.buffList[imbaData.selfEff[k]];
                        if (buff && buff.effConfig.type == 3) {
                            addValue += buff.value;
                        }
                    }
                }
            }
            var gwSkills = godWeaponControl.getReviseBySkill(skill.id);
            var gwSkill = void 0;
            if (gwSkills) {
                gwSkill = gwSkills[0];
            }
            if (gwSkill) {
                attArga += gwSkill.a || 0;
                attArgb += gwSkill.b || 0;
                toMonAdd += gwSkill.d || 0;
                if (gwSkill.selfEff) {
                    for (var k in gwSkill.selfEff) {
                        buff = selfTarget.buffList[gwSkill.selfEff[k]];
                        if (buff && buff.effConfig.type == 3) {
                            addValue += buff.value;
                        }
                    }
                }
            }
        }
        //烈焰技能等级
        if (skill.preId && DataCenter.ins().FlameMarkConfig.skillId.indexOf(skill.preId) >= 0) {
            var lv = selfInfo.lyMarkLv || 0;
            if (lv) {
                var config = DataCenter.ins().FlameMarkLvConfig[lv];
                if (config) {
                    attArga += config.bulletDamage.a;
                    attArgb += config.bulletDamage.b;
                }
            }
            var lySkills = selfInfo.lyMarkSkills || [];
            lv = lySkills[7 - 1] || 0;
            if (lv) {
                var config = DataCenter.ins().FlameMarkEffectConfig[7][lv];
                if (config.bulletDamage) {
                    attArga += config.bulletDamage.a || 0;
                    attArgb += config.bulletDamage.b || 0;
                }
            }
        }
        if (selfTarget instanceof UnitRole) {
            selfIsActor = true;
        }
        else {
            selfIsActor = false;
        }
        if (target instanceof UnitRole) {
            targetIsActor = true;
        }
        else {
            targetIsActor = false;
        }
        if (selfIsActor && sJob) {
            if (sJob == 1 /* ZhanShi */) {
                attrValue = GameControl.calculateRealAttribute(target, 5 /* atDef */, selfTarget);
            }
            else {
                attrValue = GameControl.calculateRealAttribute(target, 6 /* atRes */, selfTarget);
            }
        }
        else {
            attrValue = GameControl.calculateRealAttribute(target, 5 /* atDef */, selfTarget);
        }
        tempValue = attrValue * (1 - selfInfo.getAtt(20 /* atPenetrate */) / 10000);
        //skill.calcType  0、没有伤害1、正常伤害（可触发麻痹） 2、加血	3、合击伤害	4、固定伤害
        if (skill.calcType == 3) {
            //攻击技能
            if (skill.args) {
                var attack = 0;
                if (selfTarget.team == 0 /* My */) {
                    var len = heroControl.subRolesLen;
                    for (var i = 0; i < len; i++) {
                        var roleData = heroControl.getSubRoleByIndex(i);
                        if (roleData)
                            attack += roleData.getAtt(4 /* atAttack */);
                    }
                }
                else if (selfTarget.team == 2 /* WillEntity */) {
                    var roles = focusAttackControl.getRoles();
                    var len = roles.length;
                    for (var i = 0; i < len; i++) {
                        var roleData = roles[i];
                        if (roleData)
                            attack += roleData.getAtt(4 /* atAttack */);
                    }
                }
                attack = Math.max((attack - tempValue), 0.05 * attack);
                var argb = !skill.args.b ? 0 + attArgb : skill.args.b + attArgb;
                damage = attack * (skill.args.a + attArga) + argb + attArgc;
                damage = Math.max(damage, 0.05 * attack);
                if (target instanceof UnitRole) {
                    damage = Math.floor(damage * (1.0 + selfInfo.getExAtt(22 /* eatTogetherHitRoleDamageInc */) / 10000));
                }
                else {
                    damage = Math.floor(damage * (1.0 + selfInfo.getExAtt(21 /* eatTogetherHitMonDamageInc */ + toMonAdd) / 10000));
                }
                //守方对合击伤害减免比例
                damage = Math.floor(damage * (1.0 - selfInfo.getExAtt(20 /* eatTogetherHitFree */) / 10000));
                //合击暴击
                if (this._isTogetherCrit) {
                    damage = Math.floor(damage * (1 + Math.max(0.2, 0.2 + (selfInfo.getExAtt(71 /* eatTogetherHitCritEnhance */) - target.infoModel.getExAtt(72 /* eatTogetherHitCritResist */)) / 10000)));
                }
                //伤害加深百分比
                var damageAddRate = GameControl.calculateRealAttribute(selfTarget, 21 /* atRoleDamageEnhance */, selfTarget);
                //伤害加少百分比
                damageAddRate -= GameControl.calculateRealAttribute(target, 22 /* atRoleDamageReduction */, selfTarget);
                //伤害减免百分比
                damageAddRate -= GameControl.calculateRealAttribute(target, 16 /* atDamageReduction */, selfTarget);
                //守方对玩家/怪物伤害减免
                damage = Math.floor(damage * (1.0 + damageAddRate / 10000));
                //应受伤害+神圣攻击*(1+神圣精通率-神圣抵抗率)
                damage = damage + selfInfo.getAtt(60 /* atTogetherHolyDamege */) * (1 + selfInfo.getAtt(61 /* atTogetherHolyMaster */) / 10000 - target.infoModel.getAtt(62 /* atTogetherHolyResist */) / 10000);
            }
        }
        else {
            if (skill.targetType == 2 /* Enemy */) {
                //攻击技能
                if (skill.args) {
                    var exArg = 0;
                    var skillBaseId = Math.floor(skill.id / 1000) % 100;
                    for (var i = 0; i < SkillConst.BASE_SKILL_INDEX.length; i++) {
                        if (skillBaseId == SkillConst.BASE_SKILL_INDEX[i])
                            exArg = selfInfo.attributeExData[27 /* eatBaseSkillExArg */];
                    }
                    var attack = selfInfo.getAtt(4 /* atAttack */);
                    var tempAttack = GameControl.calculateRealAttribute(selfTarget, 4 /* atAttack */, selfTarget);
                    //宠物技能释放 判断有没有角色死亡加成攻击力
                    if (skill.configID == 80002 || crazyDogControl.isSummonerSkill(skill.configID)) {
                        var add = this.gePetSkillAdd(selfTarget);
                        tempAttack += Math.floor(attack * add / 10000);
                    }
                    //冰魂技能 星耀
                    var isAddDamPro = GameControl.triggerAttr(selfTarget, 37 /* atAttAddDamPro */);
                    var addDamProVal = 0;
                    if (isAddDamPro) {
                        addDamProVal = selfInfo.getAtt(38 /* atAttAddDamVal */);
                        selfTarget.addBubble(15);
                    }
                    //冰魂技能 蛊毒冰魂 对麻痹的敌人额外伤害
                    var addDamPen = 0;
                    if (target.hasBuff(51001) && selfInfo.getAtt(41 /* atAttMbAddDamPen */)) {
                        addDamPen = selfInfo.getAtt(41 /* atAttMbAddDamPen */);
                        selfTarget.addBubble(17);
                    }
                    //冰魂技能 战神冰魂
                    var hpAddDamPen = 0;
                    if (selfInfo.getAtt(43 /* atAttHpLtPenAddDam */) && (target.infoModel.getAtt(0 /* atHp */) / target.infoModel.getAtt(2 /* atMaxHp */) < selfInfo.getAtt(43 /* atAttHpLtPenAddDam */) / 10000)) {
                        hpAddDamPen = selfInfo.getAtt(44 /* atAttHpLtAddDamPen */);
                        //只飘一次气泡
                        if (!this.hashHpObj[target.hashCode]) {
                            selfTarget.addBubble(19);
                            this.hashHpObj[target.hashCode] = 1;
                        }
                    }
                    var weishe = 0;
                    if (selfInfo.type == 1 /* ROLE */ && target.infoModel.type == 1 /* ROLE */) {
                        if (confrontControl.isEncounter()) {
                            weishe = confrontFightControl.getWeiSheHurt(selfTarget.isMy);
                        }
                    }
                    //秘籍狂怒
                    var mijiAdd = 0;
                    if (selfInfo.getExAtt(56 /* eatMiJiKNHpPer */)) {
                        var hpPer = selfInfo.getAtt(0 /* atHp */) / selfInfo.getAtt(2 /* atMaxHp */) * 10000;
                        if (hpPer < selfInfo.getExAtt(56 /* eatMiJiKNHpPer */)) {
                            mijiAdd = Math.floor((selfInfo.getExAtt(56 /* eatMiJiKNHpPer */) - hpPer) / selfInfo.getExAtt(57 /* eatMiJiKNHpSubPer */))
                                * selfInfo.getExAtt(58 /* eatMiJiKNDamPer */);
                        }
                    }
                    //秘籍追魂 暴击后下一击伤害增加
                    if (selfInfo.getExAtt(59 /* eatMiJiZHDamPer */) && this.isTriggerAttr(selfTarget, 1, 60 /* eatMiJiZHTime */)) {
                        mijiAdd += selfInfo.getExAtt(59 /* eatMiJiZHDamPer */);
                    }
                    var argb = !skill.args.b ? 0 + attArgb : skill.args.b + attArgb;
                    //根据敌方最高血量算伤害
                    if (targetIsActor && skill.args.c) {
                        attArgc += skill.args.c * target.infoModel.getAtt(0 /* atHp */);
                    }
                    tempAttack = Math.max((tempAttack - tempValue), 0.05 * tempAttack);
                    damage = tempAttack * (skill.args.a + exArg + attArga) + argb + attArgc + addDamProVal;
                    damage = Math.floor(damage * (1.0 + ((toMonAdd + addDamPen + hpAddDamPen + weishe + mijiAdd) / 10000)));
                    //伤害加深百分比
                    var damageAddRate = GameControl.calculateRealAttribute(selfTarget, 21 /* atRoleDamageEnhance */, selfTarget);
                    //伤害加少百分比
                    damageAddRate -= GameControl.calculateRealAttribute(target, 22 /* atRoleDamageReduction */, selfTarget);
                    //伤害减免百分比
                    damageAddRate -= GameControl.calculateRealAttribute(target, 16 /* atDamageReduction */, selfTarget);
                    //守方对玩家/怪物伤害减免
                    damage = Math.floor(damage * (1.0 + damageAddRate / 10000));
                    damage = Math.max(damage, 0.05 * attack);
                }
            }
        }
        var ranNumber = (105 - Math.random() * 10) / 100;
        damage *= ranNumber;
        return Math.floor(damage);
    };
    /**
     * 宠物技能加成
     */
    HookControl.prototype.gePetSkillAdd = function (selfTarget) {
        var masterHandle = selfTarget.infoModel.masterHandle;
        var master = UnitMgr.ins().getEntityByHandle(masterHandle);
        if (master && master.infoModel && master.infoModel.getExAtt(48 /* eatPetAttackInc */)) {
            var add = master.infoModel.getExAtt(48 /* eatPetAttackInc */);
            var dieCount = 0; //死亡人数
            var teamCount = UnitMgr.ins().getTeamCount(selfTarget.team);
            if (selfTarget.team == 0 /* My */) {
                dieCount = heroControl.subRolesLen + 1 - teamCount;
            }
            else if (selfTarget.team == 2 /* WillEntity */) {
                if (confrontControl.isEncounter()) {
                    dieCount = confrontFightControl.getRoles().length + 1 - teamCount;
                }
            }
            return add * dieCount;
        }
        return 0;
    };
    /**
     * 伤害减去buff抵挡
     */
    HookControl.prototype.damageBuff = function (selfTarget, target, damage) {
        //挂机的怪物 和  遭遇boss 打人不掉血  神兽打人有伤害
        if (selfTarget instanceof UnitMonster) {
            if (selfTarget.team == 1 /* Monster */ || selfTarget.team == 3 /* WillBoss */) {
                //神兽的攻击掉血
                if (selfTarget.infoModel.name != LangMgr.getValueByKey('charMonsterSS')) {
                    damage = 0;
                }
            }
        }
        //魔法盾buff，抵消伤害
        var buff = target.buffList[19001];
        if (buff) {
            var skillEff = buff.effConfig;
            var dxValue = Math.floor(damage * skillEff.args.a); //抵消的伤害
            buff.value -= dxValue; //扣抵伤值
            if (buff.value <= 0) {
                target.removeBuff(buff);
            }
            damage = damage - dxValue + (buff.value < 0 ? -buff.value : 0); //实际伤害
        }
        //魔法盾buff，抵消伤害
        buff = target.buffList[60002];
        if (buff) {
            var skillEff = buff.effConfig;
            var dxValue = Math.floor(damage * (skillEff.args.c / 10000)); //抵消的伤害
            damage = damage - dxValue;
        }
        //羽翼技能，闪避
        buff = target.buffList[60004];
        if (buff) {
            damage = 0;
        }
        if (target instanceof UnitRole && target.infoModel && target.infoModel.exRingsData && target.infoModel.exRingsData[1] == 1) {
            var mp = target.infoModel.getAtt(1 /* atMp */);
            if (mp > 0) {
                var oldMp = mp - damage;
                target.infoModel.setAtt(1 /* atMp */, oldMp > 0 ? oldMp : 0);
                damage = damage - mp >= 0 ? damage - mp : 0;
            }
        }
        //固定伤害
        buff = target.buffList[80001];
        if (buff && damage > 0) {
            damage -= buff.value;
            damage = damage > 0 ? damage : 0;
        }
        return damage;
    };
    /**
     * 筛选对象
     */
    HookControl.prototype.screeningTarget = function (selfTarget, range, isSameTeam) {
        if (range === void 0) { range = Number.MAX_VALUE; }
        if (isSameTeam === void 0) { isSameTeam = false; }
        var hCode = selfTarget.infoModel.handle;
        var skill = this.curSkill[hCode];
        var targetType = 0;
        if (skill)
            targetType = skill.targetType;
        if (!isSameTeam) {
            isSameTeam = targetType == 1 /* Friendly */;
        }
        if (!isSameTeam) {
            if (this.lastTarget[hCode]) {
                var monster = UnitMgr.ins().getEntityByHandle(this.lastTarget[hCode]);
                if (monster && monster.parent && monster.AI_STATE != 3 /* Die */) {
                    this.curTarget[hCode] = monster;
                    return;
                }
            }
        }
        var tempArr = UnitMgr.ins().screeningTargetByPos(selfTarget, isSameTeam, 0, range, this.aiList);
        switch (selfTarget.team) {
            case 0 /* My */:
                var charMonster = this.checkMySubInList(tempArr, false, 5 /* Faker */);
                this.curTarget[hCode] = charMonster;
                break;
            case 5 /* Faker */:
                var monster = this.checkMySubInList(tempArr);
                this.curTarget[hCode] = monster;
                break;
            default:
                this.curTarget[hCode] = tempArr ? tempArr[0] : null;
        }
        if (!isSameTeam && this.curTarget[hCode]) {
            this.lastTarget[hCode] = this.curTarget[hCode].infoModel.handle;
        }
    };
    HookControl.prototype.checkMySubInList = function (list, isSameTeam, team) {
        if (isSameTeam === void 0) { isSameTeam = false; }
        if (team === void 0) { team = 0 /* My */; }
        for (var i = 0; i < list.length; i++) {
            if (isSameTeam) {
                if (list[i].team == team)
                    return list[i];
            }
            else {
                if (list[i].team != team)
                    return list[i];
            }
        }
        return null;
    };
    HookControl.prototype.startAshtarte = function () {
        if (this.zhanlingdelayTime && egret.getTimer() - this.zhanlingdelayTime > DataCenter.ins().AshtarteConfig.delayTime) {
            this.zhanlingdelayTime = 0;
            this.checkShowZhanling();
        }
        if (egret.getTimer() - this.zhanlingTime > 10000) {
            this.checkShowZhanling();
        }
    };
    HookControl.prototype.checkShowZhanling = function () {
        this.zhanlingTime = egret.getTimer();
        if (!MapControl.sceneInHook())
            return;
        var skinId = ashtarteControl.ZhanLingSkinId;
        if (ashtarteControl.getZhanLingDataById(0)) {
            var role = UnitMgr.ins().getNoDieRole();
            if (role) {
                var lv = ashtarteControl.getZhanLingDataById(0).level;
                if (role.showZhanling(skinId, lv)) {
                    AshtarteSkillControl.ins().checkWarSpiritBubbleTrigger();
                }
            }
        }
    };
    HookControl.prototype.getEffectIdsByGroup = function (group) {
        var ids = [];
        for (var key in DataCenter.ins().SkillsEffectsConfig) {
            var config = DataCenter.ins().SkillsEffectsConfig[key];
            if (config.group == group) {
                ids.push(config.id);
            }
        }
        ids.sort();
        return ids;
    };
    HookControl.prototype.trace = function (str) {
        if (this.isLog)
            console.warn(str);
    };
    /** AI循环时间 */
    HookControl.AI_UPDATE_TIME = 100;
    HookControl.SEND_TASK_TYPE = 68;
    return HookControl;
}(SingleClass));
__reflect(HookControl.prototype, "HookControl");
/**
 * 图腾技能
 */
var TotemSkillControl = (function (_super) {
    __extends(TotemSkillControl, _super);
    function TotemSkillControl() {
        var _this = _super.call(this) || this;
        _this.skillJob = {};
        _this.skillIndex = {};
        _this.addCustomEvent(354 /* CREATE_OTHER_ENTITY */, _this.onCreate);
        return _this;
    }
    TotemSkillControl.ins = function () {
        return _super.ins.call(this);
    };
    TotemSkillControl.prototype.getSkillID = function (roleId) {
        return this.skillIndex && this.skillIndex[roleId] ? [this.skillIndex[roleId]] : [];
    };
    TotemSkillControl.prototype.onCreate = function (model) {
        if (model instanceof RoleModel && model.isMy && model.job == 2 /* FaShi */) {
            this.initEff(model.job);
        }
    };
    TotemSkillControl.prototype.initEff = function (job) {
        if (this.skillJob[job]) {
            var selfEff = this.skillJob[job].selfEff;
            if (selfEff && selfEff.length) {
                var args = DataCenter.ins().SkillsEffectsConfig[selfEff[0]].args;
                if (args && args.d) {
                    var mainRole = UnitMgr.ins().getMainRoleByJob(job);
                    if (mainRole) {
                        mainRole.addEffect(0, args.i, args.d);
                    }
                }
            }
        }
    };
    TotemSkillControl.prototype.init = function () {
        for (var i = 0; i < heroControl.subRolesLen; i++) {
            var role = heroControl.getSubRoleByIndex(i);
            var id = totemControl.getSkillID(role.index);
            if (id) {
                this.skillJob[role.job] = new SkillVo(id);
                this.skillIndex[role.index] = this.skillJob[role.job];
                this.initEff(role.job);
            }
        }
    };
    TotemSkillControl.prototype.checkActedFHJT = function (self, targets) {
        if (self && self instanceof UnitRole && self.infoModel.job == 2 /* FaShi */) {
            var ballNum = self.hasSkillBall();
            var effectConfig = DataCenter.ins().EffectConfig[7 /* TUTENG_SKILL */];
            for (var i = 0; i < targets.length; i++) {
                var target = targets[i];
                if (self.infoModel.masterHandle == target.infoModel.masterHandle) {
                    return;
                }
                if (ballNum > 0 && self.skillBallReady()) {
                    SkillEffPlayDisplay.play(effectConfig.fileName, self, [target]);
                }
            }
            if (HookControl.ins().pStarting) {
                if (ballNum > 0) {
                    if (self.skillBallReady()) {
                        self.addEffect(7 /* TUTENG_SKILL */, 11 /* StatusType_ActExDam */, ballNum - 1);
                    }
                }
                else {
                    self.removeEffect(7 /* TUTENG_SKILL */);
                }
            }
        }
    };
    return TotemSkillControl;
}(BaseSystem));
__reflect(TotemSkillControl.prototype, "TotemSkillControl");
var SkillBallMgt = (function () {
    function SkillBallMgt(target, ballMax, resName) {
        if (ballMax === void 0) { ballMax = 8; }
        if (resName === void 0) { resName = PATH_SKILLEFF + "skill209"; }
        this.nX = 90;
        this.nY = 60;
        this._angle = 0.1;
        this.runing = false;
        this.readly = false;
        this.target = target;
        this.max = ballMax;
        this.ballRes = resName;
        this.ballContainer = target.getBody().parent;
        this.creatBall(ballMax);
    }
    SkillBallMgt.prototype.reset = function (ballMax) {
        this.max = ballMax;
        this.readly = true;
        this.remove();
        this.creatBall(this.max);
    };
    SkillBallMgt.prototype.starAddBall = function (time) {
        if (time === void 0) { time = 3000; }
        if (this._balls) {
            this.readly = false;
            this.remove();
            var delay = time / (this.max + 1);
            TimerMgr.ins().remove(this.pushBall, this);
            TimerMgr.ins().doTimer(delay, this.max, this.pushBall, this);
        }
    };
    SkillBallMgt.prototype.pushBall = function () {
        if (!(this._balls.length >= this.max)) {
            var mc = ObjectPool.pop("GameMovieClip");
            mc.playFile(this.ballRes, -1);
            this.ballContainer.addChild(mc);
            this._balls.push(mc);
            this.resetPos();
        }
    };
    SkillBallMgt.prototype.creatBall = function (num) {
        this._balls = [];
        this._angles = [];
        var mc;
        var fixAngle = 2 * Math.PI / num;
        for (var i = 0; i < num; i++) {
            mc = ObjectPool.pop("GameMovieClip");
            this.ballContainer.addChild(mc);
            this._angles[i] = fixAngle * i;
            mc.x = this.nX * Math.cos(this._angles[i]);
            mc.y = this.nY * Math.sin(this._angles[i]) - 40;
            this._balls.push(mc);
            mc.playFile(this.ballRes, -1);
        }
        this.startRun();
    };
    SkillBallMgt.prototype.resetPos = function () {
        var mc;
        var fixAngle = 2 * Math.PI / this._balls.length;
        for (var i = 0; i < this._balls.length; i++) {
            mc = this._balls[i];
            this._angles[i] = fixAngle * i;
            mc.x = this.nX * Math.cos(this._angles[i]);
            mc.y = this.nY * Math.sin(this._angles[i]) - 40;
        }
    };
    SkillBallMgt.prototype.refPos = function () {
        var self = this;
        this.runing = false;
        var len = this._balls.length;
        var fixAngle = 2 * Math.PI / len;
        for (var i = 0; len > i; i++) {
            this._angles[i] = fixAngle * i + 4.7 * len;
            var ball = this._balls[i];
            var x = this.nX * Math.cos(this._angles[i]);
            var y = this.nY * Math.sin(this._angles[i]) - 40;
            egret.Tween.get(ball).to({
                x: x,
                y: y
            }, 250).call(function () {
                self.runing = true;
            });
        }
    };
    SkillBallMgt.prototype.startRun = function () {
        this.runing = true;
        if (!TimerMgr.ins().isExists(this.runCircle, this)) {
            TimerMgr.ins().doTimer(100, 0, this.runCircle, this);
        }
    };
    SkillBallMgt.prototype.stop = function () {
        this.runing = false;
        TimerMgr.ins().removeAll(this);
    };
    SkillBallMgt.prototype.getBallNum = function () {
        return this._balls.length;
    };
    SkillBallMgt.prototype.isReady = function () {
        return this.readly;
    };
    SkillBallMgt.prototype.attackT = function (point, val) {
        var _this = this;
        if (this._balls.length) {
            var func = function (e) {
                var ball = _this._balls.pop();
                DisplayUtils.removeFromParent(ball);
                if (point) {
                    _this.target.parent.addChild(ball);
                    ball.x = _this.target.x + ball.x;
                    ball.y = _this.target.y - 40 + ball.y;
                    var time = 0.6;
                    var dist = MathUtils.getDistance(point.x, point.y, ball.x, ball.y);
                    var speed = dist / time;
                    egret.Tween.get(ball).to({
                        x: point.x,
                        y: point.y - 60
                    }, speed).call(function () {
                        DisplayUtils.removeFromParent(ball);
                    });
                }
                else {
                    DisplayUtils.removeFromParent(ball);
                }
            };
            var len = this._balls.length - val;
            for (var i = 0; len > i; i++) {
                func(i);
            }
            this.refPos();
        }
    };
    SkillBallMgt.prototype.runCircle = function () {
        var ball;
        var parent;
        var len = this._balls.length;
        var bodyIndex = 0;
        var ballIndex = 0;
        for (var i = 0; len > i; i++) {
            ball = this._balls[i];
            ball.x = this.nX * Math.cos(this._angles[i]);
            ball.y = this.nY * Math.sin(this._angles[i]) - 40;
            this._angles[i] += this._angle;
            this._angles[i] = this._angles[i] % (2 * Math.PI);
            parent = ball.parent;
            bodyIndex = parent.getChildIndex(this.target.getBody());
            ballIndex = parent.getChildIndex(ball);
            if (this._angles[i] >= 2.5 && this._angles[i] <= 6) {
                if (ballIndex > bodyIndex) {
                    parent.addChildAt(ball, bodyIndex);
                }
            }
            else {
                if (bodyIndex > ballIndex) {
                    parent.addChildAt(ball, parent.numChildren);
                }
            }
        }
    };
    SkillBallMgt.prototype.remove = function () {
        if (this._balls) {
            while (this._balls.length) {
                var ball = this._balls.shift();
                ball.stop();
                DisplayUtils.removeFromParent(ball);
                ball = null;
            }
        }
        this._balls = [];
    };
    SkillBallMgt.prototype.destroy = function () {
        this.stop();
        if (this._balls) {
            while (this._balls.length) {
                var ball = this._balls.shift();
                ball.destroy();
                ball = null;
            }
            this._balls = null;
        }
        this.target = null;
        this._angles = null;
        this.ballContainer = null;
    };
    return SkillBallMgt;
}());
__reflect(SkillBallMgt.prototype, "SkillBallMgt");
var InviteControl = (function (_super) {
    __extends(InviteControl, _super);
    function InviteControl() {
        var _this = _super.call(this) || this;
        _this.inviteDatas = [];
        _this.allInviteNum = 0;
        _this.rewardStatus = 0;
        //统计各个奖励类型当前阶段id
        _this.typeCurIdDatas = {};
        //统计各个id达标人数情况[达标人数，是否达标]
        _this.idsStandardDict = {};
        return _this;
    }
    InviteControl.ins = function () {
        return _super.ins.call(this);
    };
    /**
     * 邀请数据下行
     * 81-2
     */
    InviteControl.prototype.downAllInfo = function (datas, allNum) {
        this.inviteDatas.length = 0;
        for (var i = 0; i < datas.length; ++i) {
            this.inviteDatas.push({
                actorId: datas[i][0],
                sid: datas[i][1],
                level: datas[i][2],
                zsLevel: datas[i][3],
                recharge: datas[i][4],
            });
        }
        this.allInviteNum = allNum;
        this.calStandardDatas();
        EventMgr.ins().dispatch(766 /* INVITE_INFO */);
    };
    /**
     * 奖励数据下行
     * 81-3
     */
    InviteControl.prototype.downRewardInfo = function (status) {
        this.rewardStatus = status;
        this.calCurIdDatas();
        EventMgr.ins().dispatch(767 /* INVITE_REWARD_INFO */);
    };
    /**
     * 上行邀请人数据
     * 81-1
     */
    InviteControl.prototype.upInviteInfo = function (inviterId, inviterSid) {
        return [inviterId, inviterSid];
    };
    /**
     * 领奖
     * 81-3
     */
    InviteControl.prototype.upReward = function (rewardId) {
        return [rewardId];
    };
    InviteControl.prototype.getInviteData = function () {
        return this.inviteDatas;
    };
    InviteControl.prototype.getTotalInviteNum = function () {
        return this.allInviteNum;
    };
    InviteControl.prototype.getCurCountById = function (id) {
        return this.idsStandardDict[id] ? this.idsStandardDict[id][0] : 0;
    };
    InviteControl.prototype.isRewardDone = function (id) {
        var binaryStr = this.rewardStatus.toString(2).split("").reverse().join("");
        return binaryStr[id - 1] == "1";
    };
    InviteControl.prototype.calStandardDatas = function () {
        var count = 0;
        for (var id in DataCenter.ins().InviteRewardConfig) {
            var cfg = DataCenter.ins().InviteRewardConfig[id];
            switch (cfg.type) {
                case 1:
                    this.idsStandardDict[cfg.id] = [this.inviteDatas.length, this.inviteDatas.length >= cfg.standard];
                    break;
                case 2:
                    count = 0;
                    for (var _i = 0, _a = this.inviteDatas; _i < _a.length; _i++) {
                        var inviteData = _a[_i];
                        var lvArr = CommonFun.backZsAndLv(cfg.par);
                        if (inviteData.zsLevel > lvArr[0]) {
                            count++;
                        }
                        else if (inviteData.zsLevel == lvArr[0] && inviteData.level >= lvArr[1]) {
                            count++;
                        }
                    }
                    this.idsStandardDict[cfg.id] = [count, count >= cfg.standard];
                    break;
                case 3:
                    count = 0;
                    for (var _b = 0, _c = this.inviteDatas; _b < _c.length; _b++) {
                        var inviteData = _c[_b];
                        var par = cfg.par ? cfg.par : 0; //充值多少,配置表没就取0
                        if (inviteData.recharge >= par) {
                            count++;
                        }
                    }
                    this.idsStandardDict[cfg.id] = [count, count >= cfg.standard];
                    break;
            }
        }
    };
    InviteControl.prototype.calCurIdDatas = function () {
        var typeCfgDict = this.getTypesCfgDict();
        for (var type in typeCfgDict) {
            var ids = typeCfgDict[type];
            var find = false;
            for (var _i = 0, ids_1 = ids; _i < ids_1.length; _i++) {
                var id = ids_1[_i];
                if (!this.isRewardDone(id)) {
                    this.typeCurIdDatas[type] = id;
                    find = true;
                    break;
                }
            }
            if (!find) {
                this.typeCurIdDatas[type] = ids[ids.length - 1];
            }
        }
    };
    InviteControl.prototype.getCurIdByType = function (type) {
        var typeCfgDict = this.getTypesCfgDict();
        return this.typeCurIdDatas[type] != null ? this.typeCurIdDatas[type] : typeCfgDict[type][0];
    };
    InviteControl.prototype.getTypesCfgDict = function () {
        if (!this.typeToIdsCfgDict) {
            this.typeToIdsCfgDict = {};
            for (var id in DataCenter.ins().InviteRewardConfig) {
                var cfg = DataCenter.ins().InviteRewardConfig[id];
                if (!this.typeToIdsCfgDict[cfg.type]) {
                    this.typeToIdsCfgDict[cfg.type] = [];
                }
                this.typeToIdsCfgDict[cfg.type].push(cfg.id);
            }
            //排序下
            for (var type in this.typeToIdsCfgDict) {
                this.typeToIdsCfgDict[type].sort();
            }
        }
        return this.typeToIdsCfgDict;
    };
    InviteControl.prototype.checkRed = function () {
        return this.checkRewardRed() || !this.checkAllStandard();
    };
    InviteControl.prototype.checkRewardRed = function () {
        for (var id in DataCenter.ins().InviteRewardConfig) {
            if (this.checkRewardRedById(Number(id))) {
                return true;
            }
        }
        return false;
    };
    InviteControl.prototype.checkRewardRedById = function (id) {
        if (this.idsStandardDict[id]) {
            return this.idsStandardDict[id][1] && !this.isRewardDone(id);
        }
        return false;
    };
    InviteControl.prototype.checkAllStandard = function () {
        for (var id in DataCenter.ins().InviteRewardConfig) {
            if (!(this.idsStandardDict[id] && this.idsStandardDict[id][1])) {
                return false;
            }
        }
        return true;
    };
    __decorate([
        down(2, [[3 /* Int */, 3 /* Int */, 3 /* Int */, 3 /* Int */, 3 /* Int */], 3 /* Int */])
    ], InviteControl.prototype, "downAllInfo", null);
    __decorate([
        down(3, [3 /* Int */])
    ], InviteControl.prototype, "downRewardInfo", null);
    __decorate([
        up(1, [3 /* Int */, 3 /* Int */])
    ], InviteControl.prototype, "upInviteInfo", null);
    __decorate([
        up(3, [1 /* Byte */])
    ], InviteControl.prototype, "upReward", null);
    InviteControl = __decorate([
        protocolsId(81 /* PROTOCOL_81 */)
    ], InviteControl);
    return InviteControl;
}(BaseSystem));
__reflect(InviteControl.prototype, "InviteControl");
var InviteBonusPanel = (function (_super) {
    __extends(InviteBonusPanel, _super);
    function InviteBonusPanel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    InviteBonusPanel.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.initAllEvents();
        this.updateView();
    };
    InviteBonusPanel.prototype.close = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.removeAllEvents();
    };
    InviteBonusPanel.prototype.initAllEvents = function () {
        this.addEventTouchTap(this.shareButton, this.onTap);
    };
    InviteBonusPanel.prototype.removeAllEvents = function () {
        this.removeCustomEvents();
        this.removeEventTouchTap(this.shareButton, this.onTap);
    };
    InviteBonusPanel.prototype.onTap = function (e) {
        switch (e.currentTarget) {
            case this.shareButton:
                SDKManager.ins().SDKShowShare({
                    callback: null,
                    query: "inviterId=" + ActorControl.actorID + "&inviterSid=" + GlobalModel.srvid,
                });
                break;
        }
    };
    InviteBonusPanel.prototype.updateView = function () {
        this.blGold.text = DataCenter.ins().ShareConfig.inviteGoldRatio;
        this.blExp.text = DataCenter.ins().ShareConfig.inviteVipRatio;
    };
    return InviteBonusPanel;
}(BasePanel));
__reflect(InviteBonusPanel.prototype, "InviteBonusPanel");
var InvitePanel = (function (_super) {
    __extends(InvitePanel, _super);
    function InvitePanel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    InvitePanel.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.rewardList.dataProvider = new eui.ArrayCollection();
        this.rewardList.itemRenderer = InviteRewardItemRenderer;
        this.initAllEvents();
        this.updateView();
    };
    InvitePanel.prototype.close = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.removeAllEvents();
    };
    InvitePanel.prototype.initAllEvents = function () {
        this.addEventTouchTap(this.shareButton, this.onTap);
        this.addCustomEvent(766 /* INVITE_INFO */, this.updateView);
        this.addCustomEvent(767 /* INVITE_REWARD_INFO */, this.updateView);
    };
    InvitePanel.prototype.removeAllEvents = function () {
        this.removeCustomEvents();
        this.removeEventTouchTap(this.shareButton, this.onTap);
    };
    InvitePanel.prototype.onTap = function (e) {
        switch (e.currentTarget) {
            case this.shareButton:
                SDKManager.ins().SDKShowShare({
                    callback: null,
                    query: "inviterId=" + ActorControl.actorID + "&inviterSid=" + GlobalModel.srvid,
                });
                break;
        }
    };
    InvitePanel.prototype.updateView = function () {
        var inviteDatas = inviteControl.getInviteData();
        this.dayNumLbl.text = LangMgr.getValueByKey("commonPeopleNum", inviteDatas.length);
        this.totalNumLbl.text = LangMgr.getValueByKey("commonPeopleNum", inviteControl.getTotalInviteNum());
        this.shareRed.visible = !inviteControl.checkAllStandard();
        var typeCfgDict = inviteControl.getTypesCfgDict();
        var datas = [];
        for (var type in typeCfgDict) {
            var curId = inviteControl.getCurIdByType(Number(type));
            datas.push({
                type: Number(type),
                id: curId,
                isRed: inviteControl.checkRewardRedById(curId),
                isDone: inviteControl.isRewardDone(curId),
                count: inviteControl.getCurCountById(curId),
                totalCount: DataCenter.ins().InviteRewardConfig[curId].standard,
                rewardList: DataCenter.ins().InviteRewardConfig[curId].reward.concat(),
            });
        }
        this.rewardList.dataProvider.replaceAll(datas);
    };
    return InvitePanel;
}(BasePanel));
__reflect(InvitePanel.prototype, "InvitePanel");
var InviteRewardItemRenderer = (function (_super) {
    __extends(InviteRewardItemRenderer, _super);
    function InviteRewardItemRenderer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    InviteRewardItemRenderer.prototype.childrenCreated = function () {
        _super.prototype.childrenCreated.call(this);
        this.rewardList.itemRenderer = ItemBase;
        this.listData = new eui.ArrayCollection;
        this.rewardList.dataProvider = this.listData;
        this.addEventTouchTap(this.getButton, this.onTap);
    };
    InviteRewardItemRenderer.prototype.dataChanged = function () {
        _super.prototype.dataChanged.call(this);
        if (this.data) {
            this.listData.replaceAll(this.data.reward);
            var rewardRed = this.data.isRed;
            var rewardDone = this.data.isDone;
            var color = (rewardRed || rewardDone) ? ColorUtils.GREEN : ColorUtils.RED;
            var args = void 0;
            if (this.data.type == 2) {
                var cfg = DataCenter.ins().InviteRewardConfig[this.data.id];
                args = [cfg.par, color, this.data.count, this.data.totalCount];
            }
            else {
                args = [color, this.data.count, this.data.totalCount];
            }
            this.targetLbl.textFlow = TextUtils.generateTextFlow1(LangMgr.getValueByKey.apply(LangMgr, ["inviteTip" + this.data.type].concat(args)));
            this.getButton.enabled = rewardRed;
            this.redPoint.visible = rewardRed;
            if (rewardRed) {
                this.getButton.label = LangMgr.getValueByKey("activitGet");
            }
            else if (rewardDone) {
                this.getButton.label = LangMgr.getValueByKey("activitAlreadingGet");
            }
            else {
                this.getButton.label = LangMgr.getValueByKey("activitNoFinsh");
            }
            this.listData.replaceAll(this.data.rewardList);
        }
    };
    InviteRewardItemRenderer.prototype.onTap = function (e) {
        switch (e.target) {
            case this.getButton:
                if (this.data) {
                    inviteControl.upReward(this.data.id);
                }
                break;
        }
    };
    return InviteRewardItemRenderer;
}(BaseItemRender));
__reflect(InviteRewardItemRenderer.prototype, "InviteRewardItemRenderer");
var LeaseControl = (function (_super) {
    __extends(LeaseControl, _super);
    function LeaseControl() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.weaponId = 0;
        return _this;
    }
    LeaseControl.ins = function () {
        return _super.ins.call(this);
    };
    LeaseControl.prototype.checkOpen = function (showTips) {
        if (showTips === void 0) { showTips = false; }
        if (ActorControl.level < DataCenter.ins().LeaseRentBaConfig.openLevel) {
            if (showTips) {
                tipsControl.warnTips(LangMgr.getValueByKey("levelOpen", DataCenter.ins().LeaseRentBaConfig.openLevel));
            }
            return false;
        }
        else if (GameServer.serverOpenDay + 1 < DataCenter.ins().LeaseRentBaConfig.openDay) {
            if (showTips) {
                tipsControl.warnTips(LangMgr.getValueByKey("serverDayOpen", DataCenter.ins().LeaseRentBaConfig.openDay));
            }
            return false;
        }
        else if (GameServer.serverOpenDay + 1 >= DataCenter.ins().LeaseRentBaConfig.afterNoBuyDay) {
            if (showTips) {
                tipsControl.warnTips(LangMgr.getValueByKey("doubleEndActivity"));
            }
            return false;
        }
        else if (leaseControl.getBuyEndTime() <= 0) {
            if (showTips) {
                tipsControl.warnTips(LangMgr.getValueByKey("doubleEndActivity"));
            }
            return false;
        }
        return true;
    };
    LeaseControl.prototype.getRedPoint = function (id, state) {
        if (state === void 0) { state = true; }
        if (!ServerStorage.ins().isInit) {
            return false;
        }
        var godWeaponLevel = DataCenter.ins().LeaseLvConfig[this.weaponId];
        var len = CommonUtils.getObjectLength(DataCenter.ins().LeaseLvConfig);
        if (this.weaponId >= len) {
            return false;
        }
        for (var key in DataCenter.ins().LeaseLvConfig) {
            var data = DataCenter.ins().LeaseLvConfig[key];
            if ((isNaN(id) || data.id == id) && !(godWeaponLevel && godWeaponLevel.recharge >= data.recharge)) {
                if (state && vipControl.exp >= data.recharge && !this.firstRedPoint) {
                    return true;
                }
                if (vipControl.exp >= data.recharge && ActorControl.yb >= data.yb) {
                    return true;
                }
            }
        }
        return false;
    };
    LeaseControl.prototype.getBuyEndTime = function () {
        var afterNoBuyDay = DataCenter.ins().LeaseRentBaConfig.afterNoBuyDay;
        var endTime = DateUtils.formatMiniDateTime(GameServer._serverZeroTime) + (afterNoBuyDay - 1) * DateUtils.MS_PER_DAY;
        var time = endTime - GameServer.serverTime;
        if (0 >= time) {
            time = 0;
        }
        return time;
    };
    LeaseControl.prototype.getTime = function () {
        var day = DataCenter.ins().LeaseRentBaConfig.closeTime[0];
        var hour = DataCenter.ins().LeaseRentBaConfig.closeTime[1];
        var minute = DataCenter.ins().LeaseRentBaConfig.closeTime[2];
        var second = DataCenter.ins().LeaseRentBaConfig.closeTime[3];
        var endTime = DateUtils.formatMiniDateTime(GameServer._serverZeroTime) + (day - 1) * DateUtils.MS_PER_DAY + hour * DateUtils.MS_PER_HOUR + minute * DateUtils.MS_PER_MINUTE + second * DateUtils.MS_PER_SECOND;
        var time = endTime - GameServer.serverTime;
        if (0 >= time) {
            time = 0;
        }
        return time;
    };
    LeaseControl.prototype.dispatchFirstRedPoint = function () {
        EventMgr.ins().dispatch(682 /* LEASE_FIRST_RED */);
    };
    /**
     * 租赁
     * 41-26
     */
    LeaseControl.prototype.upGodWeaponRent = function (id) {
        return [id];
    };
    /**
     * 租赁
     * 41-26
     */
    LeaseControl.prototype.downGodWeaponRent = function (weaponId) {
        this.weaponId = weaponId;
        EventMgr.ins().dispatch(173 /* LEASE_RENT */);
    };
    __decorate([
        up(26, [1 /* Byte */])
    ], LeaseControl.prototype, "upGodWeaponRent", null);
    __decorate([
        down(26, [4 /* UByte */])
    ], LeaseControl.prototype, "downGodWeaponRent", null);
    LeaseControl = __decorate([
        protocolsId(41 /* PROTOCOL_41 */)
    ], LeaseControl);
    return LeaseControl;
}(BaseSystem));
__reflect(LeaseControl.prototype, "LeaseControl");
var LeaseView = (function (_super) {
    __extends(LeaseView, _super);
    function LeaseView() {
        var _this = _super.call(this) || this;
        _this.maxItem = 3;
        _this.skinName = "LeaseViewSkin";
        _this.isTopLevel = true;
        _this.canVis = true;
        return _this;
    }
    LeaseView.prototype.close = function () {
        TimerMgr.ins().remove(this.setTime, this);
    };
    LeaseView.prototype.open = function () {
        this.roleSelect0.hideRole();
        this.addCustomEvent(173 /* LEASE_RENT */, this.updateView);
        this.addCustomEvent(466 /* SERVER_OPEN_DAY */, this.updateView);
        this.addCustomEvent(467 /* ZERO_UPDATE_SETTING */, this.updateView);
        this.addEventTouchTap(this.closeBtn, this.onClick);
        for (var i = 0; i < this.maxItem; i++) {
            if (this["lease" + (i + 1)]) {
                this.addEventTouchTap(this["lease" + (i + 1)], this.onClick);
            }
            if (this["eff" + (i + 1)]) {
                this.addEventTouchTap(this["eff" + (i + 1)], this.onTouch);
            }
        }
        if (!this.arr) {
            this.arr = [];
            for (var key in DataCenter.ins().LeaseLvConfig) {
                this.arr.push(DataCenter.ins().LeaseLvConfig[key]);
            }
            this.arr.sort(function (a, b) {
                return a.sort < b.sort ? -1 : 1;
            });
        }
        this.updateView();
        if (!TimerMgr.ins().isExists(this.setTime, this)) {
            TimerMgr.ins().doTimer(1000, 0, this.setTime, this);
        }
        if (!leaseControl.firstRedPoint) {
            leaseControl.firstRedPoint = true;
            leaseControl.dispatchFirstRedPoint();
        }
    };
    LeaseView.prototype.onTouch = function (e) {
        for (var i = 0; i < this.maxItem; i++) {
            if (this["eff" + (i + 1)] && this["eff" + (i + 1)] == e.currentTarget) {
                if (!this.arr) {
                    break;
                }
                var zhuangbanId = this.arr[i].zhuangbanId;
                var zhuangBanIdData = DataCenter.ins().FashionIdConfig[zhuangbanId];
                if (!zhuangBanIdData || !zhuangBanIdData.cost) {
                    break;
                }
                var itemConfig = DataCenter.ins().ItemConfig[zhuangBanIdData.cost.itemId];
                UIMgr.ins().open("FashionTipsView", itemConfig, true);
                break;
            }
        }
    };
    LeaseView.prototype.onClick = function (e) {
        switch (e.currentTarget) {
            case this.closeBtn:
                UIMgr.ins().close(this);
                break;
            default:
                if (!this.isOpen) {
                    tipsControl.warnTips(LangMgr.getValueByKey("doubleEndActivity"));
                    return;
                }
                for (var i = 0; i < this.maxItem; i++) {
                    if (this["lease" + (i + 1)] && this["lease" + (i + 1)] == e.currentTarget) {
                        if (!this.arr) {
                            break;
                        }
                        if (vipControl.exp < this.arr[i].recharge) {
                            if (leaseControl.weaponId) {
                                tipsControl.warnTips(LangMgr.getValueByKey("lease1", this.arr[i].recharge - vipControl.exp));
                            }
                            else {
                                tipsControl.warnTips(LangMgr.getValueByKey("lease2", this.arr[i].recharge));
                            }
                            break;
                        }
                        var godWeaponLevel = DataCenter.ins().LeaseLvConfig[leaseControl.weaponId];
                        var yb = godWeaponLevel ? godWeaponLevel.yb : 0;
                        var ybVal = this.arr[i].yb - yb;
                        if (0 >= ybVal) {
                            tipsControl.warnTips(LangMgr.getValueByKey("lease3", this.arr[i].id, leaseControl.weaponId));
                            return;
                        }
                        if (ActorControl.yb < ybVal) {
                            tipsControl.warnTips(LangMgr.getValueByKey("osaNoMoney"));
                            return;
                        }
                        leaseControl.upGodWeaponRent(this.arr[i].id);
                        break;
                    }
                }
        }
    };
    LeaseView.prototype.updateView = function () {
        this.isOpen = leaseControl.checkOpen();
        this.actInfo.textFlow = TextUtils.generateTextFlow1(DataCenter.ins().LeaseRentBaConfig.desc);
        this.setTime();
        this.updateEff();
        this.updateBtn();
        this.updateRedPoint();
    };
    LeaseView.prototype.updateRedPoint = function () {
        if (this.arr) {
            for (var i = 0; i < this.maxItem; i++) {
                var index = i + 1;
                if (this["redPoint" + index]) {
                    this["redPoint" + index].visible = this.isOpen && leaseControl.getRedPoint(this.arr[i].id, false);
                }
            }
        }
    };
    LeaseView.prototype.updateBtn = function () {
        var godWeaponLevel = DataCenter.ins().LeaseLvConfig[leaseControl.weaponId];
        var yb = godWeaponLevel ? godWeaponLevel.yb : 0;
        var id = godWeaponLevel ? godWeaponLevel.id : 0;
        for (var i = 0; i < this.maxItem; i++) {
            if (this["lease" + (i + 1)] && this["already" + (i + 1)] && this["moneyGroup" + (i + 1)] && this["countDownGroup" + (i + 1)]) {
                this["lease" + (i + 1)].enable = false;
                this["countDownGroup" + (i + 1)].visible = this["dlease" + (i + 1)].visible = this["lease" + (i + 1)].visible = this["already" + (i + 1)].visible = this["moneyGroup" + (i + 1)].visible = false;
                if (this.isOpen) {
                    var val = this.arr[i].yb;
                    if (yb > val) {
                        this["already" + (i + 1)].visible = true;
                        this["already" + (i + 1)].text = DataCenter.ins().LeaseRentBaConfig.rentTips;
                    }
                    else if (id && id == this.arr[i].id) {
                        this["countDownGroup" + (i + 1)].visible = true;
                        var day = Math.floor(leaseControl.getTime() / DateUtils.MS_PER_DAY);
                        this["dayCountDown" + (i + 1)].text = 0 >= day ? LangMgr.getValueByKey('jinstr') : "" + day;
                        this["price" + (i + 1)].text = "" + val;
                    }
                    else {
                        this["moneyGroup" + (i + 1)].visible = true;
                        this["lease" + (i + 1)].visible = true;
                        this["dlease" + (i + 1)].visible = true;
                        this["lease" + (i + 1)].enable = true;
                        val -= yb;
                    }
                    this["dy" + (i + 1)].text = "" + val;
                    this["nowMoney" + (i + 1)].text = "" + val;
                }
            }
        }
    };
    LeaseView.prototype.updateEff = function () {
        for (var i = 0; i < this.arr.length; i++) {
            var index = i + 1;
            if (!this["mc" + index]) {
                this["mc" + index] = new GameMovieClip;
            }
            if (!this["mc" + index].parent) {
                this["eff" + index].addChild(this["mc" + index]);
                this["mc" + index].playFile(PATH_EFF + ("" + this.arr[i].eff), -1);
            }
        }
    };
    LeaseView.prototype.setTime = function () {
        if (!this.isOpen) {
            this.actTime.text = LangMgr.getValueByKey("doubleEndActivity");
            TimerMgr.ins().remove(this.setTime, this);
            return;
        }
        var time = leaseControl.getBuyEndTime();
        if (0 >= time) {
            this.actTime.text = LangMgr.getValueByKey("doubleEndActivity");
            TimerMgr.ins().remove(this.setTime, this);
            this.isOpen = false;
        }
        else {
            time = Math.floor(time / DateUtils.MS_PER_SECOND);
            this.actTime.text = DateUtils.getFormatBySecond(time, DateUtils.TIME_FORMAT_5, 3);
        }
    };
    LeaseView.openCheck = function () {
        return leaseControl.checkOpen(true) ? true : false;
    };
    return LeaseView;
}(BaseEuiView));
__reflect(LeaseView.prototype, "LeaseView");
var MeridiansControl = (function (_super) {
    __extends(MeridiansControl, _super);
    function MeridiansControl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MeridiansControl.ins = function () {
        return _super.ins.call(this);
    };
    /**
     * 冲脉
     * 12-1
     */
    MeridiansControl.prototype.upBoost = function (roleId) {
        return [roleId];
    };
    /**
     * 提升
     * 12-2
     */
    MeridiansControl.prototype.upUpgrade = function (roleId) {
        return [roleId];
    };
    /**
     * 冲脉
     * 12-1
     */
    MeridiansControl.prototype.downUpData = function (index) {
        var param = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            param[_i - 1] = arguments[_i];
        }
        heroControl.getSubRoleByIndex(index).jingMaiData.init(param);
        EventMgr.ins().dispatch(233 /* MERIDIANS_DATA */);
    };
    /**
     * 直升
     * 12-4
     */
    MeridiansControl.prototype.upBigUpLevel = function (roleId) {
        return [roleId];
    };
    /**
     * 直升
     * 12-4
     */
    MeridiansControl.prototype.downBigUpLevel = function (result, type) {
        var str;
        if (!result) {
            if (!type) {
                str = LangMgr.getValueByKey('roleTips10');
            }
        }
        else {
            str = LangMgr.getValueByKey('roleTips11');
        }
        if (str) {
            tipsControl.showTips(str);
        }
    };
    /**
     * 是否可以提升经脉
     */
    MeridiansControl.prototype.canGradeupJingMai = function () {
        var boolList = [false, false, false];
        var config;
        var costNum = 0;
        var itemNum = 0;
        var len = heroControl.subRolesLen;
        for (var i = 0; i < len; i++) {
            var role = heroControl.getSubRoleByIndex(i);
            config = DataCenter.ins().MeridiansLevelConfig[role.jingMaiData.level];
            costNum = config.count;
            if (costNum) {
                //直升丹
                var num = backpackControl.getBagGoodsCountById(0, 200103);
                if (num) {
                    boolList[i] = true;
                    break;
                }
                itemNum = backpackControl.getBagGoodsCountById(0, config.itemId);
                boolList[i] = (itemNum >= costNum);
            }
            else {
                boolList[i] = false;
            }
        }
        return boolList;
    };
    __decorate([
        up(1, [2 /* Short */])
    ], MeridiansControl.prototype, "upBoost", null);
    __decorate([
        up(2, [2 /* Short */])
    ], MeridiansControl.prototype, "upUpgrade", null);
    __decorate([
        down(1, [2 /* Short */].concat(ByteConst.MeridiansVos))
    ], MeridiansControl.prototype, "downUpData", null);
    __decorate([
        up(4, [3 /* Int */])
    ], MeridiansControl.prototype, "upBigUpLevel", null);
    __decorate([
        down(4, [3 /* Int */, 3 /* Int */])
    ], MeridiansControl.prototype, "downBigUpLevel", null);
    MeridiansControl = __decorate([
        protocolsId(12 /* PROTOCOL_12 */)
    ], MeridiansControl);
    return MeridiansControl;
}(BaseSystem));
__reflect(MeridiansControl.prototype, "MeridiansControl");
var MeridiansVo = (function () {
    function MeridiansVo() {
    }
    MeridiansVo.prototype.init = function (datas) {
        this.level = datas[0];
        this.stage = datas[1];
    };
    MeridiansVo.prototype.jingMaiCanUp = function () {
        var stagesConfig = DataCenter.ins().MeridiansStageConfig[this.stage];
        if (stagesConfig.stage >= DataCenter.ins().MeridiansCommonConfig.stageMax) {
            return false;
        }
        var lvConfig = DataCenter.ins().MeridiansLevelConfig[this.level];
        var count = backpackControl.getBagGoodsCountById(0, lvConfig.itemId);
        return count >= lvConfig.count;
    };
    return MeridiansVo;
}());
__reflect(MeridiansVo.prototype, "MeridiansVo");
/**
 * 经脉窗口
 */
var MeridiansPanel = (function (_super) {
    __extends(MeridiansPanel, _super);
    function MeridiansPanel() {
        var _this = _super.call(this) || this;
        _this.cursorLocation = [
            [132, 131],
            [92, 186],
            [165, 177],
            [138, 252],
            [84, 231],
            [96, 316],
            [152, 339],
            [126, 431]
        ];
        _this.curRole = 0;
        _this.canClick = true;
        _this.name = LangMgr.getValueByKey('equipment16');
        return _this;
    }
    MeridiansPanel.prototype.childrenCreated = function () {
        this.init();
    };
    MeridiansPanel.prototype.init = function () {
        this.danItemID = DataCenter.ins().MeridiansCommonConfig.levelItemid;
        this.cursor = new GameMovieClip;
        this.cursor.visible = false;
    };
    MeridiansPanel.prototype.open = function () {
        this.addEventTouchTap(this.boostBtn, this.onTap);
        this.addEventTouchTap(this.bigUpLevelBtn, this.onTap);
        this.addCustomEvent(233 /* MERIDIANS_DATA */, this.setForgeData);
        this.addCustomEvent(266 /* BACKPACK_ITEM_ADD */, this.setForgeData); //道具添加
        this.cursor.playFile(PATH_EFF + "jingmaiCursor", -1);
        this.setForgeData(false);
    };
    MeridiansPanel.prototype.close = function () {
        this.removeEventTouchTap(this.boostBtn, this.onTap);
        this.removeEventTouchTap(this.bigUpLevelBtn, this.onTap);
        this.canClick = true;
        this.removeCustomEvents();
    };
    MeridiansPanel.prototype.onTap = function (e) {
        var _this = this;
        switch (e.currentTarget) {
            case this.boostBtn:
                var config = DataCenter.ins().MeridiansLevelConfig[this._data.level];
                if (!this.canClick)
                    return;
                if (this._data.level % 10 == 0 && this._data.level / 10 > this._data.stage && this._data.level != 0) {
                    this.canClick = false;
                    this.showUpgradeEffect();
                    TimerMgr.ins().doTimer(1000, 1, function () {
                        meridiansControl.upUpgrade(_this.curRole);
                        SoundUtils.ins().playEffect(SoundUtils.SKILL_UPGRADE);
                        _this.canClick = true;
                    }, this);
                }
                else {
                    if (backpackControl.getBagGoodsCountById(0, config.itemId) >= config.count) {
                        meridiansControl.upBoost(this.curRole);
                        SoundUtils.ins().playEffect(SoundUtils.SKILL_UPGRADE);
                    }
                    else {
                        warnControl.setBuyGoodsWarn(config.itemId);
                    }
                }
                break;
            case this.bigUpLevelBtn:
                var itemName = DataCenter.ins().ItemConfig[this.danItemID].name;
                warnControl.show(LangMgr.getValueByKey('jingMaiShow1', itemName, DataCenter.ins().MeridiansCommonConfig.levelItemidStage, DataCenter.ins().MeridiansCommonConfig.levelItemChange, DataCenter.ins().ItemConfig[DataCenter.ins().MeridiansCommonConfig.itemid].name), function () {
                    meridiansControl.upBigUpLevel(_this.curRole);
                }, this);
                break;
        }
    };
    /**
     * 显示亮光
     */
    MeridiansPanel.prototype.showLight = function (lv, flag) { };
    /**
     * 显示升阶特效
     */
    MeridiansPanel.prototype.showUpgradeEffect = function () {
        for (var i = 0; i <= 9; i++) {
            this["jinmai_" + i].setLights(4);
        }
    };
    MeridiansPanel.prototype.setForgeData = function (levelUp) {
        if (levelUp === void 0) { levelUp = true; }
        this._data = heroControl.getSubRoleByIndex(this.curRole).jingMaiData;
        var stagesConfig = DataCenter.ins().MeridiansStageConfig[this._data.stage];
        var lvConfig = DataCenter.ins().MeridiansLevelConfig[this._data.level];
        this.jinmaiStage.data = LangMgr.getValueByKey("stageNumberTxt", stagesConfig.level);
        this.jinMaiName.text = stagesConfig.name;
        this.attr.text = AttributeData.getAttStr(AttributeData.AttrAddition(stagesConfig.attr, lvConfig.attr), 0.75);
        this._totalPower = BackpackControl.getAttrPower(AttributeData.AttrAddition(stagesConfig.attr, lvConfig.attr));
        this.powerPanel.setPower(this._totalPower);
        var flag = this._data.level / 10 - stagesConfig.stage;
        if (stagesConfig.stage < DataCenter.ins().MeridiansCommonConfig.stageMax) {
            var nextStagesConfig = void 0;
            var nextLvConfig = void 0;
            var count_1 = backpackControl.getBagGoodsCountById(0, lvConfig.itemId);
            this.redPoint0.visible = count_1 >= lvConfig.count;
            if (this._data.level > 0 && this._data.level % 10 == 0 && flag) {
                nextStagesConfig = DataCenter.ins().MeridiansStageConfig[this._data.stage + 1];
                nextLvConfig = lvConfig;
            }
            else {
                nextStagesConfig = stagesConfig;
                nextLvConfig = DataCenter.ins().MeridiansLevelConfig[this._data.level + 1];
            }
            if (this.nextAttr.visible == false) {
                this.nextAttr.visible = true;
                this.countLabel.x = 2;
                this.countLabel.y = 497;
            }
            this.nextAttr.text = AttributeData.getAttStr(AttributeData.AttrAddition(nextStagesConfig.attr, nextLvConfig.attr), 0, 1, "+", false, true);
            this.boostBtn.visible = true;
            if (this._data.level > 0 && this._data.level % 10 == 0 && flag) {
                this.boostBtn.label = LangMgr.getValueByKey('jingMaiUpdate');
                this.countLabel.text = LangMgr.getValueByKey('jingMaiCanUpdate');
                this.cursor.visible = false;
            }
            else {
                this.boostBtn.label = LangMgr.getValueByKey('jingMaiCM');
                var colorStr = "";
                if (count_1 >= lvConfig.count)
                    colorStr = "|C:" + ColorUtils.GREEN + "&T:";
                else
                    colorStr = "|C:" + ColorUtils.RED + "&T:";
                this.countLabel.textFlow = TextUtils.generateTextFlow(LangMgr.getValueByKey('jingMaiCount', colorStr + count_1, lvConfig.count));
            }
            this.cursor.x = this.cursorLocation[this._data.level % 8][0];
            this.cursor.y = this.cursorLocation[this._data.level % 8][1];
            this.showLight(this._data.level, flag);
        }
        else {
            this.nextAttr.visible = false;
            this.boostBtn.visible = false;
            this.countLabel.x = this.nextAttr.x - 60;
            this.countLabel.y = this.nextAttr.y;
            this.redPoint0.visible = false;
            if (this.cursor.parent) {
                this.removeChild(this.cursor);
            }
            this.countLabel.text = LangMgr.getValueByKey('jingMaiMacLevel');
        }
        for (var i = 0; i < 9; i++) {
            this["nadis" + i].source = "jingmailine" + ((flag == 1 || (i + 1 < this._data.level % 10) ? "1" : "2"));
        }
        var hasGuang = true;
        var jmItem;
        for (var i = 0; i <= 9; i++) {
            jmItem = this["jinmai_" + i];
            jmItem.item.visible = ((flag == 1 || (i + 1 <= this._data.level % 10) ? true : false));
            jmItem.bgImg.visible = !jmItem.item.visible;
            if (jmItem.item.visible) {
                jmItem.setLights(2);
            }
            else {
                if (levelUp && hasGuang && (i - 1 >= 0)) {
                    this["jinmai_" + (i - 1)].setLights(3);
                }
                jmItem.setLights(hasGuang ? 1 : 0);
                hasGuang = false;
            }
        }
        var count = backpackControl.getBagGoodsCountById(0, this.danItemID);
        if (this.bigUpLevelBtn["redPoint"]) {
            this.bigUpLevelBtn['redPoint'].visible = count > 0;
        }
        if (this.bigUpLevelBtn["txt"]) {
            this.bigUpLevelBtn['txt'].text = count;
        }
    };
    return MeridiansPanel;
}(BasePanel));
__reflect(MeridiansPanel.prototype, "MeridiansPanel");
/**
 * 经脉窗口
 */
var MeridiansItemRenderer = (function (_super) {
    __extends(MeridiansItemRenderer, _super);
    function MeridiansItemRenderer() {
        var _this = _super.call(this) || this;
        _this.skinName = "MeridiansItemRendererSkin";
        _this.guang.visible = false;
        return _this;
    }
    MeridiansItemRenderer.prototype.setLights = function (type) {
        var _this = this;
        if (type == 0 && this.mc) {
            this.mc.stop();
            this.mc.visible = false;
            return;
        }
        if (this.mc == null) {
            this.mc = new GameMovieClip();
            this.mc.x = this.mc.y = 20;
            this.addChild(this.mc);
        }
        this.mc.visible = true;
        if (!this.mc.parent)
            this.addChild(this.mc);
        if (type == 1)
            this.mc.playFile(PATH_EFF + "bally1", -1);
        else if (type == 2)
            this.mc.playFile(PATH_EFF + "bally2", -1);
        else if (type == 3) {
            var t = egret.Tween.get(this);
            this.mc.playFile(PATH_EFF + "bally3", 1, null, false);
            t.wait(800).call(function () {
                _this.mc.playFile(PATH_EFF + "bally2", -1);
            });
        }
        else if (type == 4)
            this.mc.playFile(PATH_EFF + "bally3", 1, function () {
                DisplayUtils.removeFromParent(_this.mc);
                _this.mc = null;
            }, true);
    };
    return MeridiansItemRenderer;
}(BaseItemRender));
__reflect(MeridiansItemRenderer.prototype, "MeridiansItemRenderer");
var MerryshopView = (function (_super) {
    __extends(MerryshopView, _super);
    function MerryshopView() {
        var _this = _super.call(this) || this;
        _this.curIndex = 0;
        _this.chargeRate = 0;
        _this.barbc = new ProgressBarEff();
        _this.isTopLevel = true;
        _this.skinName = "MerryshopViewSkin";
        return _this;
    }
    MerryshopView.prototype.initUI = function () {
        _super.prototype.initUI.call(this);
        this.barbc.setWidth(400);
        this.barbc.x = 48;
        this.barbc.y = 60;
        this.topGroup.addChild(this.barbc);
        this.list.itemRenderer = ItemBase;
    };
    MerryshopView.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.addEventTouchTap(this.closeBtn0, this.onTap);
        this.addEventTouchTap(this.leftBtn, this.onTap);
        this.addEventTouchTap(this.rightBtn, this.onTap);
        this.addEventTouchTap(this.buyBtn, this.onTap);
        this.addCustomEvent(448 /* PAY_HAPPY_SHOP */, this.changeExpBar);
        this.addCustomEvent(448 /* PAY_HAPPY_SHOP */, this.changeAwards);
        this.chargeRate = GlobalModel.chargeRate;
        this.barbc.reset();
        this.time = this.getLeftTime();
        this.runTime();
        TimerMgr.ins().doTimer(1000, 0, this.runTime, this);
        this.changeExpBar();
        this.changeAwards();
    };
    MerryshopView.prototype.getLeftTime = function () {
        return Math.floor((payControl.happyShopCountdown - GameServer.serverTime) / DateUtils.MS_PER_SECOND);
    };
    MerryshopView.prototype.runTime = function () {
        var time = this.time;
        this.time -= 1;
        if (time > 0) {
            if (this.cdTime) {
                this.cdTime.textFlow = TextUtils.generateTextFlow("|S:17&C:" + LangMgr.getColor('color42') + "&T:" + DateUtils.getFormatBySecond(time, DateUtils.TIME_FORMAT_12) + "|");
            }
        }
        else {
            TimerMgr.ins().remove(this.runTime, this);
            if (this.cdTime) {
                this.cdTime.textFlow = TextUtils.generateTextFlow("");
            }
            this.changeAwards();
        }
    };
    /**经验进度条改变 */
    MerryshopView.prototype.changeExpBar = function () {
        var data = DataCenter.ins().RechargeHappyConfig[this.getRechargeIndex()];
        var discountRmb = data.val / this.chargeRate;
        if (this.time > 0)
            discountRmb = discountRmb / 2;
        this.barbc.setData(payControl.happyShopRechargeToltal / this.chargeRate, discountRmb);
        this.barbc.setLbValueText(payControl.happyShopRechargeToltal / this.chargeRate + "/" + discountRmb);
    };
    MerryshopView.prototype.getRechargeIndex = function () {
        var len = CommonUtils.getObjectLength(DataCenter.ins().RechargeHappyConfig);
        var index = len;
        for (var i = 1; i <= len; i++) {
            var discountRmb = DataCenter.ins().RechargeHappyConfig[i].val / this.chargeRate;
            if (this.time > 0)
                discountRmb = discountRmb / 2;
            if (payControl.happyShopRechargeToltal < discountRmb * this.chargeRate) {
                index = i;
                break;
            }
        }
        return index;
    };
    /**奖励改变 */
    MerryshopView.prototype.changeAwards = function () {
        var config;
        this.curIndex = this.getRechargeIndex();
        if (this.curIndex > 0) {
            for (var i = 1; i <= this.curIndex; i++) {
                if (!payControl.getRemindByIndex(i)) {
                    config = DataCenter.ins().RechargeHappyConfig[i];
                    this.curIndex = i;
                    this.setAwards((config) ? config : config = DataCenter.ins().RechargeHappyConfig[--this.curIndex]);
                    this.changeBtn();
                    return;
                }
            }
            config = DataCenter.ins().RechargeHappyConfig[++this.curIndex];
            this.setAwards((config) ? config : config = DataCenter.ins().RechargeHappyConfig[--this.curIndex]);
            this.changeBtn();
        }
    };
    /**设置领取奖励按钮状态 */
    MerryshopView.prototype.setAwards = function (config) {
        var isDiscount = this.time > 0;
        var discountRmb = config.val / this.chargeRate;
        if (isDiscount) {
            discountRmb = Number(config.val / this.chargeRate / 2);
            this.discountLabel.textFlow = TextUtils.generateTextFlow(LangMgr.getValueByKey('happyShopSaleTile', config.val / this.chargeRate, discountRmb));
        }
        else {
            this.discountLabel.textFlow = TextUtils.generateTextFlow("");
        }
        if (GlobalModel.isHw) {
            this.rmbTxt.text = config.val + "";
        }
        else {
            this.rmbTxt.text = discountRmb.toString();
        }
        this.desImg.source = "hlg" + config.id + "_png";
        this.list.dataProvider = new eui.ArrayCollection(config.rewards);
        if (payControl.getRemindByIndex(config.id)) {
            this.buyBtn.enabled = false;
            this.buyBtn.filters = FilterUtils.ARRAY_GRAY_FILTER;
            this.buyBtn.label = LangMgr.getValueByKey('activitAlreadingGet');
        }
        else {
            if (payControl.happyShopRechargeToltal / this.chargeRate >= discountRmb) {
                this.buyBtn.enabled = true;
                this.buyBtn.filters = [];
                this.buyBtn.label = LangMgr.getValueByKey('activitGet');
            }
            else {
                this.buyBtn.enabled = true;
                this.buyBtn.filters = [];
                this.buyBtn.label = LangMgr.getValueByKey('happyRechrga');
            }
        }
    };
    MerryshopView.prototype.changeBtn = function () {
        if (this.curIndex > 1) {
            this.leftBtn.visible = true;
            this.rightBtn.visible = true;
            if (this.curIndex >= CommonUtils.getObjectLength(DataCenter.ins().RechargeHappyConfig)) {
                this.rightBtn.visible = false;
            }
        }
        else if (this.curIndex <= 1) {
            this.leftBtn.visible = false;
            this.rightBtn.visible = true;
        }
    };
    MerryshopView.prototype.close = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        TimerMgr.ins().remove(this.runTime, this);
        this.removeEventTouchTap(this.closeBtn0, this.onTap);
        this.removeEventTouchTap(this.leftBtn, this.onTap);
        this.removeEventTouchTap(this.rightBtn, this.onTap);
        this.removeEventTouchTap(this.buyBtn, this.onTap);
    };
    MerryshopView.prototype.onTap = function (e) {
        switch (e.currentTarget) {
            case this.closeBtn0:
                UIMgr.ins().close(this);
                break;
            case this.leftBtn://左切页按钮
                var leftConfig = DataCenter.ins().RechargeHappyConfig[--this.curIndex];
                this.showVipInfo(leftConfig);
                break;
            case this.rightBtn://右切页按钮
                var rightConfig = DataCenter.ins().RechargeHappyConfig[++this.curIndex];
                this.showVipInfo(rightConfig);
                break;
            case this.buyBtn:
                var discountRmb = DataCenter.ins().RechargeHappyConfig[this.curIndex].val / this.chargeRate;
                if (this.time > 0)
                    discountRmb = discountRmb / 2;
                if (payControl.happyShopRechargeToltal / this.chargeRate >= discountRmb) {
                    if (!payControl.getRemindByIndex(this.curIndex)) {
                        payControl.upGetHappyShopAwards(this.curIndex);
                    }
                }
                else {
                    UIMgr.ins().close(this);
                    payControl.checkOpenWin();
                }
                break;
        }
    };
    MerryshopView.prototype.showVipInfo = function (config) {
        if (config) {
            this.setAwards(config);
        }
        else {
            this.curIndex = this.getRechargeIndex();
        }
        this.changeBtn();
    };
    return MerryshopView;
}(BaseEuiView));
__reflect(MerryshopView.prototype, "MerryshopView");
var MythEquipControl = (function (_super) {
    __extends(MythEquipControl, _super);
    function MythEquipControl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MythEquipControl.ins = function () {
        return _super.ins.call(this);
    };
    /**
     * 神话是否开放
     */
    MythEquipControl.prototype.checkLegendForgeIsOpen = function () {
        return SwitchMgr.ins().checkOpen(72 /* LEGENDFORGE */);
    };
    /**
     * 神话战力
     */
    MythEquipControl.prototype.getLegendForgePower = function (role, slot) {
        var attrs = [];
        if (role.mythForgeVo) {
            var legendSlotData = role.mythForgeVo.getSlotData(slot);
            if (legendSlotData.level) {
                var legendEnhanceLevel = DataCenter.ins().MythLevelConfig[slot][legendSlotData.level];
                attrs = legendEnhanceLevel.attr.concat();
                var equipsData = role.getEquipByIndex(slot);
                if (equipsData.item.configID) {
                    var itemConfig = DataCenter.ins().ItemConfig[equipsData.item.configID];
                    var quality = ItemUtils.getQuality(itemConfig);
                    if (quality == 5) {
                        var baseAttrDatas = ItemUtils.getBaseAttrData(itemConfig);
                        var totalAttrDatas = [];
                        for (var i = 0; i < equipsData.item.att.length; i++) {
                            var attributeData = equipsData.item.att[i];
                            if (attributeData && attributeData.value > 0) {
                                totalAttrDatas.push(new AttributeData(attributeData.type, attributeData.value));
                            }
                        }
                        baseAttrDatas = AttributeData.AttrAddition(totalAttrDatas, baseAttrDatas);
                        for (var j = 0; j < baseAttrDatas.length; j++) {
                            baseAttrDatas[j].value = Math.floor(baseAttrDatas[j].value * legendEnhanceLevel.percent / 10000);
                        }
                        attrs = AttributeData.AttrAddition(attrs, baseAttrDatas);
                    }
                }
            }
        }
        return BackpackControl.getAttrPower(attrs);
    };
    /**
     * 神话套装战力
     */
    MythEquipControl.prototype.getLegendForgeTZPower = function (role) {
        var power = 0;
        var skillLv = this.getSkillLv(role);
        if (skillLv) {
            var legendEnhanceSuit = DataCenter.ins().MythSuitConfig[skillLv];
            power += BackpackControl.getAttrPower(legendEnhanceSuit.attrs);
            power += legendEnhanceSuit.expower || 0;
            var equipsDataWeapon = role.getEquipByIndex(0 /* WEAPON */);
            var equipsDataClothes = role.getEquipByIndex(2 /* CLOTHES */);
            var attrs = [];
            if (equipsDataWeapon.item.configID) {
                var itemConfig = DataCenter.ins().ItemConfig[equipsDataWeapon.item.configID];
                var qyality = ItemUtils.getQuality(itemConfig);
                if (qyality == 5) {
                    var weaponAttrData = ItemUtils.getBaseAttrData(itemConfig);
                    var weaponItemAttrData = [];
                    for (var i = 0; i < equipsDataWeapon.item.att.length; i++) {
                        var att = equipsDataWeapon.item.att[i];
                        if (att && att.value > 0) {
                            weaponItemAttrData.push(new AttributeData(att.type, att.value));
                        }
                    }
                    weaponAttrData = AttributeData.AttrAddition(weaponItemAttrData, weaponAttrData);
                    for (var j = 0; j < weaponAttrData.length; j++) {
                        weaponAttrData[j].value = Math.floor(weaponAttrData[j].value * legendEnhanceSuit.percent / 10000);
                    }
                    attrs = attrs.concat(weaponAttrData);
                }
            }
            if (equipsDataClothes.item.configID) {
                var itemConfig = DataCenter.ins().ItemConfig[equipsDataClothes.item.configID];
                var qyality = ItemUtils.getQuality(itemConfig);
                if (qyality == 5) {
                    var clothesAttrData = ItemUtils.getBaseAttrData(itemConfig);
                    var clothesItemAttrData = [];
                    for (var i = 0; i < equipsDataClothes.item.att.length; i++) {
                        var att = equipsDataClothes.item.att[i];
                        if (att && att.value > 0) {
                            clothesItemAttrData.push(new AttributeData(att.type, att.value));
                        }
                    }
                    clothesAttrData = AttributeData.AttrAddition(clothesItemAttrData, clothesAttrData);
                    for (var j = 0; j < clothesAttrData.length; j++) {
                        clothesAttrData[j].value = Math.floor(clothesAttrData[j].value * legendEnhanceSuit.percent / 10000);
                    }
                    attrs = AttributeData.AttrAddition(attrs, clothesAttrData);
                }
            }
            power += BackpackControl.getAttrPower(attrs);
        }
        return power;
    };
    /**
     * 神话数据变更
     * 7-9
     */
    MythEquipControl.prototype.upLegendSlotForge = function (roleId, slot) {
        return [roleId, slot];
    };
    /**
     * 神话数据变更
     * 7-9
     */
    MythEquipControl.prototype.downLegendSlot = function (roleId, slot, level) {
        var data = this.getMythForgeVo(roleId);
        data.updateSlotData(slot, level);
        EventMgr.ins().dispatch(174 /* MYTHEQUIP_UPDATE */, [roleId, slot, level]);
    };
    /**
     * 神话数据
     */
    MythEquipControl.prototype.getMythForgeVo = function (roleId) {
        var data = heroControl.getSubRoleByIndex(roleId).mythForgeVo;
        if (!data) {
            data = new MythForgeVo;
            data.roleId = roleId;
            heroControl.getSubRoleByIndex(roleId).mythForgeVo = data;
        }
        return data;
    };
    /**
     * 神话技能等级
     */
    MythEquipControl.prototype.getSkillLv = function (role) {
        var weaponLv = role.mythForgeVo ? role.mythForgeVo.getSlotData(0 /* WEAPON */).level : 0;
        var clothesLv = role.mythForgeVo ? role.mythForgeVo.getSlotData(2 /* CLOTHES */).level : 0;
        var configIDWeapon = role.getEquipByIndex(0 /* WEAPON */).item.configID || 0;
        var configIDClothes = role.getEquipByIndex(2 /* CLOTHES */).item.configID || 0;
        var weaponSkillLv = 0;
        var clothesSkillLv = 0;
        if (configIDWeapon && ItemUtils.getQuality(DataCenter.ins().ItemConfig[configIDWeapon]) == 5) {
            weaponSkillLv = configIDWeapon % 100;
        }
        if (configIDClothes && ItemUtils.getQuality(DataCenter.ins().ItemConfig[configIDClothes]) == 5) {
            clothesSkillLv = configIDClothes % 100;
        }
        return Math.min(weaponLv, clothesLv, weaponSkillLv, clothesSkillLv);
    };
    /**
     * 是否满足升级
     */
    MythEquipControl.prototype.getLegendForgeNextIsEnough = function (roleId, slot) {
        var role = heroControl.getSubRoleByIndex(roleId);
        if (!role.mythForgeVo)
            return false;
        var legendSlotData = role.mythForgeVo.getSlotData(slot);
        var level = legendSlotData.level + 1;
        var legendEnhanceLevel = DataCenter.ins().MythLevelConfig[legendSlotData.slot][level];
        if (legendEnhanceLevel) {
            var bagNum = backpackControl.getBagGoodsCountById(0, legendEnhanceLevel.costItem);
            var costNum = legendEnhanceLevel.costNum;
            return bagNum >= costNum;
        }
        return false;
    };
    MythEquipControl.prototype.dispatchLegendSelected = function (slot) {
        EventMgr.ins().dispatch(633 /* MYTH_EQUIP_SELECTED */, slot);
    };
    __decorate([
        up(9, [1 /* Byte */, 1 /* Byte */])
    ], MythEquipControl.prototype, "upLegendSlotForge", null);
    __decorate([
        down(9, [1 /* Byte */, 1 /* Byte */, 3 /* Int */])
    ], MythEquipControl.prototype, "downLegendSlot", null);
    MythEquipControl = __decorate([
        protocolsId(7 /* PROTOCOL_7 */)
    ], MythEquipControl);
    return MythEquipControl;
}(BaseSystem));
__reflect(MythEquipControl.prototype, "MythEquipControl");
/**
 * 神话装备
 */
var MythEquipRedPoint = (function (_super) {
    __extends(MythEquipRedPoint, _super);
    function MythEquipRedPoint() {
        var _this = _super.call(this) || this;
        _this.redPoint = false;
        _this.forgeRoleRed = [false, false, false];
        _this.forgeRed = false;
        _this.legendRoleRed = [false, false, false];
        _this.legendRed = false;
        _this.addCustomEventMany(_this.dispatchRedPoint, 570 /* MYTH_EQUIP_FORGE_RED */, 569 /* MYTH_EQUIP_UP_RED */);
        _this.addCustomEventMany(_this.dispatchLegendUpRed, 267 /* BACKPACK_ITEM_CHANGE */, 266 /* BACKPACK_ITEM_ADD */, 268 /* BACKPACK_ITEM_DEL */);
        _this.addCustomEventMany(_this.dispatchLegendForgeRed, 174 /* MYTHEQUIP_UPDATE */, 267 /* BACKPACK_ITEM_CHANGE */, 266 /* BACKPACK_ITEM_ADD */);
        return _this;
    }
    MythEquipRedPoint.ins = function () {
        return _super.ins.call(this);
    };
    MythEquipRedPoint.prototype.getRoleRed = function (roleId) {
        return this.legendRoleRed[roleId] || this.forgeRoleRed[roleId];
    };
    MythEquipRedPoint.prototype.dispatchRedPoint = function () {
        var oldPoint = this.redPoint;
        this.redPoint = this.legendRed || this.forgeRed;
        EventMgr.ins().dispatch(568 /* MYTH_EQUIP_RED */, oldPoint != this.redPoint);
    };
    MythEquipRedPoint.prototype.dispatchLegendUpRed = function () {
        var state = false;
        var oldLegendRed = this.legendRed;
        this.legendRed = false;
        for (var i = 0; i < heroControl.subRolesLen; i++) {
            var itemUpState = equipControl.setLegendEquipItemUpState(0 /* WEAPON */, heroControl.getSubRoleByIndex(i));
            if (!itemUpState) {
                itemUpState = equipControl.setLegendEquipItemUpState(2 /* CLOTHES */, heroControl.getSubRoleByIndex(i));
            }
            if (!itemUpState) {
                itemUpState = equipControl.setLegendEquipItemState(0 /* WEAPON */, heroControl.getSubRoleByIndex(i));
            }
            if (!itemUpState) {
                itemUpState = equipControl.setLegendEquipItemState(2 /* CLOTHES */, heroControl.getSubRoleByIndex(i));
            }
            if (this.legendRoleRed[i] != itemUpState) {
                this.legendRoleRed[i] = itemUpState;
                state = true;
            }
            if (!itemUpState) {
                itemUpState = equipControl.checkRedPointEx(5, i);
            }
            this.legendRed = this.legendRed || this.legendRoleRed[i] || itemUpState;
        }
        if (!this.legendRed) {
            var itemDatas = backpackControl.getLegendOutEquips();
            this.legendRed = itemDatas.length > 0;
        }
        EventMgr.ins().dispatch(569 /* MYTH_EQUIP_UP_RED */, state || this.legendRed != oldLegendRed);
    };
    MythEquipRedPoint.prototype.dispatchLegendForgeRed = function () {
        if (!mythEquipControl.checkLegendForgeIsOpen()) {
            EventMgr.ins().dispatch(570 /* MYTH_EQUIP_FORGE_RED */, false);
            return;
        }
        var state = false;
        this.forgeRed = false;
        for (var i = 0; i < heroControl.subRolesLen; i++) {
            var isEnough = mythEquipControl.getLegendForgeNextIsEnough(i, 0 /* WEAPON */);
            if (!isEnough) {
                isEnough = mythEquipControl.getLegendForgeNextIsEnough(i, 2 /* CLOTHES */);
            }
            if (this.forgeRoleRed[i] != isEnough) {
                this.forgeRoleRed[i] = isEnough;
                state = true;
            }
            this.forgeRed = this.forgeRed || this.forgeRoleRed[i];
        }
        EventMgr.ins().dispatch(570 /* MYTH_EQUIP_FORGE_RED */, state);
    };
    return MythEquipRedPoint;
}(BaseSystem));
__reflect(MythEquipRedPoint.prototype, "MythEquipRedPoint");
var MythForgeVo = (function () {
    function MythForgeVo() {
        this.slotData = [];
    }
    MythForgeVo.prototype.init = function (datas) {
        this.slotData = [];
        for (var i = 0; i < datas.length; i++) {
            this.slotData.push(new MythSlotVo(i, datas[i]));
        }
    };
    MythForgeVo.prototype.getSlotData = function (slot) {
        for (var i = 0; i < this.slotData.length; i++) {
            var data_1 = this.slotData[i];
            if (data_1.slot == slot) {
                return data_1;
            }
        }
        var data = new MythSlotVo(slot, 0);
        this.slotData.push(data);
        return data;
    };
    MythForgeVo.prototype.updateSlotData = function (slot, level) {
        this.getSlotData(slot).level = level;
    };
    return MythForgeVo;
}());
__reflect(MythForgeVo.prototype, "MythForgeVo");
var MythSlotVo = (function () {
    function MythSlotVo(slot, level) {
        this.slot = slot;
        this.level = level;
    }
    return MythSlotVo;
}());
__reflect(MythSlotVo.prototype, "MythSlotVo");
var MythEquipPanel = (function (_super) {
    __extends(MythEquipPanel, _super);
    function MythEquipPanel() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._roleId = 0;
        _this._curIndex = 0;
        _this.curSkillLv = 0;
        _this.curSelectedLv = 0;
        _this.states = ["forge", "taozhuang"];
        _this.needCount = 0;
        return _this;
    }
    MythEquipPanel.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.addEventTouchTap(this.sword, this.onTap);
        this.addEventTouchTap(this.amor, this.onTap);
        this.addEventTouchTap(this.taozhuangImg, this.onTap);
        this.addEventTouchTap(this.executeBtn, this.onTap);
        this.addEventTouchTap(this.turnBeforeBtn, this.onTap);
        this.addEventTouchTap(this.turnNextBtn, this.onTap);
        for (var i = 1; 4 >= i; i++) {
            this.addEventTouchTap(this.getLabel(i), this.onTap);
        }
        this.addCustomEvent(174 /* MYTHEQUIP_UPDATE */, this.updateView);
        this.setRoleId(param[0] || 0);
    };
    MythEquipPanel.prototype.updateView = function (param) {
        if (!param || param[0] == this._roleId) {
            var role = heroControl.getSubRoleByIndex(this._roleId);
            if (role.mythForgeVo) {
                var weaponSlotData = role.mythForgeVo.getSlotData(0 /* WEAPON */);
                var equipSlotData = role.mythForgeVo.getSlotData(2 /* CLOTHES */);
                this.sword.setData(this._roleId, weaponSlotData);
                this.amor.setData(this._roleId, equipSlotData);
            }
            this.updatePower();
            if (param) {
                this.setSelectedIndex(param[1]);
            }
            else {
                this.setSelectedSkill();
            }
        }
    };
    MythEquipPanel.prototype.setRoleId = function (roleId) {
        this._roleId = roleId;
        this.curSelectedLv = 0;
        this.updateView();
    };
    MythEquipPanel.prototype.setSelectedIndex = function (slot) {
        if (this.currentState != this.states[0]) {
            this.amor.showBall(true);
            this.sword.showBall(true);
        }
        this.currentState = this.states[0];
        this.validateNow();
        this.swordEquipImg.visible = this.amorEquipImg.visible = false;
        if (this._curIndex != slot) {
            this.getItem(this._curIndex).setSelected(false);
            this._curIndex = slot;
            this.getItem(this._curIndex).setSelected(true);
        }
        else if (!this.getItem(this._curIndex).isSelected) {
            this.getItem(this._curIndex).setSelected(true);
        }
        this.setSelectSkillEff(false);
        var role = heroControl.getSubRoleByIndex(this._roleId);
        if (!role.mythForgeVo)
            return;
        var legendSlotData = role.mythForgeVo.getSlotData(this._curIndex);
        if (legendSlotData.level) {
            var legendEnhanceLevel = DataCenter.ins().MythLevelConfig[legendSlotData.slot][legendSlotData.level];
            this.curState.text = legendEnhanceLevel.firstName;
            var attrTips = "\n" + LangMgr.getValueByKey('hijiBasic') + legendEnhanceLevel.percent / 100 + "%";
            this.curAttr.text = AttributeData.getAttStr(legendEnhanceLevel.attr, 0, 1, ":") + attrTips;
            var nextLegendEnhanceLevel = DataCenter.ins().MythLevelConfig[legendSlotData.slot][legendSlotData.level + 1];
            if (nextLegendEnhanceLevel) {
                this.nextState.text = nextLegendEnhanceLevel.firstName;
                var nextAttrTips = "\n" + LangMgr.getValueByKey('hijiBasic') + nextLegendEnhanceLevel.percent / 100 + "%";
                this.nextAttr.text = AttributeData.getAttStr(nextLegendEnhanceLevel.attr, 0, 1, ":") + nextAttrTips;
            }
            else {
                this.nextState.text = "";
                this.nextAttr.text = "";
            }
        }
        else {
            this.curState.text = LangMgr.getValueByKey('notmyths');
            var attrTips = legendSlotData.slot == 0 /* WEAPON */ ? LangMgr.getValueByKey('atkhpbasesx') : LangMgr.getValueByKey('wufangmofanghp');
            this.curAttr.text = attrTips;
            var legendEnhanceLevel = DataCenter.ins().MythLevelConfig[legendSlotData.slot][legendSlotData.level + 1];
            this.nextState.text = legendEnhanceLevel.firstName;
            var nextAttrTips = "\n" + LangMgr.getValueByKey('hijiBasic') + legendEnhanceLevel.percent / 100 + "%";
            this.nextAttr.text = AttributeData.getAttStr(legendEnhanceLevel.attr, 0, 1, ":") + nextAttrTips;
        }
        this.updateNextNeed();
    };
    MythEquipPanel.prototype.updateNextNeed = function () {
        var role = heroControl.getSubRoleByIndex(this._roleId);
        var legendSlotData = role.mythForgeVo.getSlotData(this._curIndex);
        var level = legendSlotData.level + 1;
        var legendEnhanceLevel = DataCenter.ins().MythLevelConfig[legendSlotData.slot][level];
        if (legendEnhanceLevel) {
            this.curState.horizontalCenter = -110;
            this.curAttr.horizontalCenter = -110;
            this.arrow.visible = true;
            this.costGroup.visible = this.executeBtn.visible = true;
            this.maxDesc.visible = false;
            var costItem = legendEnhanceLevel.costItem;
            var constItemConfig = DataCenter.ins().ItemConfig[costItem];
            this.icon.source = constItemConfig.icon + "_png";
            var bagNum = backpackControl.getBagGoodsCountById(0, costItem);
            var costNum = legendEnhanceLevel.costNum;
            var str = "|C:" + (bagNum >= costNum ? 65280 : 16711680) + "&T:" + bagNum + "|/" + costNum;
            this.countLabel.textFlow = TextUtils.generateTextFlow1(str);
            this.setBtnEff(bagNum >= costNum);
            this.needItem = costItem;
            this.needCount = costNum - bagNum;
        }
        else {
            this.curState.horizontalCenter = 0;
            this.curAttr.horizontalCenter = 0;
            this.arrow.visible = false;
            this.costGroup.visible = this.executeBtn.visible = false;
            this.maxDesc.visible = true;
            this.setBtnEff(false);
        }
    };
    MythEquipPanel.prototype.setSelectedSkill = function () {
        if (this.currentState != this.states[1]) {
            this.amor.showBall(false);
            this.sword.showBall(false);
        }
        this.currentState = this.states[1];
        this.validateNow();
        this.getItem(this._curIndex).setSelected(false);
        this.setSelectSkillEff(true);
        this.setBtnEff(false);
        this.curSkillLv = mythEquipControl.getSkillLv(heroControl.getSubRoleByIndex(this._roleId));
        this.setSkillLv(this.curSelectedLv || this.curSkillLv || 1);
    };
    MythEquipPanel.prototype.setSkillLv = function (lv) {
        if (this.curSkillLv == 0) {
            this.turnNextBtn.visible = this.turnBeforeBtn.visible = false;
        }
        else if (lv == 1) {
            this.turnBeforeBtn.visible = false;
            this.turnNextBtn.visible = true;
        }
        else {
            var legendEnhanceSuit = DataCenter.ins().MythSuitConfig[lv];
            if (!legendEnhanceSuit)
                lv -= 1;
            legendEnhanceSuit = DataCenter.ins().MythSuitConfig[lv + 1];
            if (legendEnhanceSuit) {
                if (lv >= this.curSkillLv + 1) {
                    this.turnNextBtn.visible = false;
                }
                else {
                    this.turnNextBtn.visible = true;
                }
            }
            else {
                this.turnNextBtn.visible = false;
            }
            this.turnBeforeBtn.visible = true;
        }
        this.curSelectedLv = lv;
        var legendEnhanceSuit = DataCenter.ins().MythSuitConfig[lv];
        this.curState0.text = legendEnhanceSuit.name;
        var percentValue = legendEnhanceSuit.percent / 100;
        var attrTips = LangMgr.getValueByKey('bloodexcalibur', percentValue, percentValue);
        attrTips += "|C:" + LangMgr.getColor('qualityColor5') + "&T:" + AttributeData.getAttStr(legendEnhanceSuit.attrs, 0, 1, ":");
        this.curAttr0.textFlow = TextUtils.generateTextFlow1(attrTips);
        this.taozhuangImg.source = legendEnhanceSuit.iconImg;
        var weaponSkillName = LangMgr.getValueByKey('excaliburpartsupto') + DataCenter.ins().MythLevelConfig[0 /* WEAPON */][lv].firstName;
        var clothesSkillName = LangMgr.getValueByKey('godspartsupto') + DataCenter.ins().MythLevelConfig[2 /* CLOTHES */][lv].firstName;
        var needWeaponName = LangMgr.getValueByKey('nEquipTips3') + DataCenter.ins().ItemConfig[legendEnhanceSuit.itemId[0]].name;
        var needClothesName = LangMgr.getValueByKey('nEquipTips3') + DataCenter.ins().ItemConfig[legendEnhanceSuit.itemId[1]].name;
        var role = heroControl.getSubRoleByIndex(this._roleId);
        var weaponLevel = role.mythForgeVo ? role.mythForgeVo.getSlotData(0 /* WEAPON */).level : 0;
        var clothesLevel = role.mythForgeVo ? role.mythForgeVo.getSlotData(2 /* CLOTHES */).level : 0;
        var configWeaponID = role.getEquipByIndex(0 /* WEAPON */).item.configID || 0;
        var configClothesID = role.getEquipByIndex(2 /* CLOTHES */).item.configID || 0;
        var weaponValue = 0;
        var clothesValue = 0;
        if (configWeaponID && ItemUtils.getQuality(DataCenter.ins().ItemConfig[configWeaponID]) == 5) {
            weaponValue = configWeaponID % 100;
        }
        if (configClothesID && ItemUtils.getQuality(DataCenter.ins().ItemConfig[configClothesID]) == 5) {
            clothesValue = configClothesID % 100;
        }
        this.swordEquipImg.visible = this.amorEquipImg.visible = false;
        var color = 65280;
        color = weaponLevel >= lv ? 65280 : 16711680;
        this.getLabel(1).textFlow = TextUtils.generateTextFlow1("|U:&C:" + color + "&T:" + weaponSkillName + "|");
        color = clothesLevel >= lv ? 65280 : 16711680;
        this.getLabel(2).textFlow = TextUtils.generateTextFlow1("|U:&C:" + color + "&T:" + clothesSkillName + "|");
        if (lv > weaponValue) {
            color = 16711680;
        }
        else {
            color = 65280;
            this.swordEquipImg.visible = true;
        }
        this.getLabel(3).textFlow = TextUtils.generateTextFlow1("|U:&C:" + color + "&T:" + needWeaponName + "|");
        if (lv > clothesValue) {
            color = 16711680;
        }
        else {
            color = 65280;
            this.amorEquipImg.visible = true;
        }
        this.getLabel(4).textFlow = TextUtils.generateTextFlow1("|U:&C:" + color + "&T:" + needClothesName + "|");
    };
    MythEquipPanel.prototype.getLabel = function (index) {
        return this["require" + index];
    };
    MythEquipPanel.prototype.setSelectSkillEff = function (val) {
        if (val) {
            this.skillSelMc = this.skillSelMc || new GameMovieClip;
            this.skillSelectEff.addChild(this.skillSelMc);
            this.skillSelMc.playFile(PATH_EFF + "quaeff5", -1);
        }
        else if (this.skillSelMc && this.skillSelMc.parent) {
            this.skillSelMc.parent.removeChild(this.skillSelMc);
        }
    };
    MythEquipPanel.prototype.setBtnEff = function (val) {
        if (val) {
            this.btnMc = this.btnMc || new GameMovieClip;
            this.btnMc.scaleX = 1.05;
            this.btnMc.scaleY = 1;
            this.btnMc.x = this.executeBtn.x + this.executeBtn.width / 2;
            this.btnMc.y = this.executeBtn.y + this.executeBtn.height / 2;
            this.addChild(this.btnMc);
            this.btnMc.playFile(PATH_EFF + "chargeff1", -1);
        }
        else if (this.btnMc && this.btnMc.parent) {
            this.btnMc.parent.removeChild(this.btnMc);
        }
    };
    MythEquipPanel.prototype.onTap = function (e) {
        if (e.currentTarget == this.sword || e.currentTarget == this.require1) {
            this.setSelectedIndex(0 /* WEAPON */);
        }
        else if (e.currentTarget == this.amor || e.currentTarget == this.require2) {
            this.setSelectedIndex(2 /* CLOTHES */);
        }
        else if (e.currentTarget == this.taozhuangImg) {
            this.setSelectedSkill();
        }
        else if (e.currentTarget == this.turnBeforeBtn) {
            this.setSkillLv(this.curSelectedLv - 1);
        }
        else if (e.currentTarget == this.turnNextBtn) {
            this.setSkillLv(this.curSelectedLv + 1);
        }
        else if (e.currentTarget == this.executeBtn) {
            if (this.needCount <= 0) {
                mythEquipControl.upLegendSlotForge(this._roleId, this._curIndex);
            }
            else {
                warnControl.setBuyGoodsWarn(this.needItem, this.needCount);
            }
        }
        else if (e.currentTarget == this.require3) {
            mythEquipControl.dispatchLegendSelected(0 /* WEAPON */);
        }
        else if (e.currentTarget == this.require4) {
            mythEquipControl.dispatchLegendSelected(2 /* CLOTHES */);
        }
    };
    MythEquipPanel.prototype.getItem = function (pos) {
        if (0 /* WEAPON */ == pos) {
            return this.sword;
        }
        else if (2 /* CLOTHES */ == pos) {
            return this.amor;
        }
        return undefined;
    };
    MythEquipPanel.prototype.updatePower = function () {
        var power = 0;
        var role = heroControl.getSubRoleByIndex(this._roleId);
        power += mythEquipControl.getLegendForgePower(role, 0 /* WEAPON */);
        power += mythEquipControl.getLegendForgePower(role, 2 /* CLOTHES */);
        power += mythEquipControl.getLegendForgeTZPower(role);
        this.powerPanel.setPower(power);
    };
    MythEquipPanel.prototype.close = function () {
        this.removeCustomEvents();
    };
    return MythEquipPanel;
}(BasePanel));
__reflect(MythEquipPanel.prototype, "MythEquipPanel");
var MythEquipView = (function (_super) {
    __extends(MythEquipView, _super);
    function MythEquipView() {
        var _this = _super.call(this) || this;
        _this.selectIndex = -1;
        _this.skinName = "MythEquipViewSkin";
        _this.isTopLevel = true;
        return _this;
    }
    MythEquipView.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        var selectedIndex = param[0] || 0;
        var roleIndex = param[1] || 0;
        this.roleSelect.setCurRole(roleIndex);
        this.tab.selectedIndex = this.viewStack.selectedIndex = selectedIndex;
        this.addCustomEvent(569 /* MYTH_EQUIP_UP_RED */, this.updateRed);
        this.addCustomEvent(570 /* MYTH_EQUIP_FORGE_RED */, this.updateRed);
        this.addCustomEvent(633 /* MYTH_EQUIP_SELECTED */, this.setSelected);
        this.addEventChange(this.tab, this.onTabTouch);
        this.addEventChanging(this.tab, this.onTabTouching);
        this.addEventTouchTap(this.closeBtn, this.onTap);
        this.addEventTouchTap(this.help, this.onTap);
        this.addEventChange(this.roleSelect, this.switchRole);
        this.setSelectedIndex(selectedIndex);
        this.updateRed();
    };
    MythEquipView.prototype.onTap = function (e) {
        if (e.currentTarget == this.closeBtn) {
            UIMgr.ins().close(this);
        }
        else if (e.currentTarget == this.help) {
            HelpControl.openHelpWin(50 /* ID_50 */);
        }
    };
    MythEquipView.prototype.onTabTouch = function (e) {
        this.setSelectedIndex(this.tab.selectedIndex);
    };
    MythEquipView.prototype.onTabTouching = function (e) {
    };
    MythEquipView.prototype.switchRole = function () {
        var roleIndex = this.roleSelect.getCurRole();
        this.viewStack.getChildAt(this.tab.selectedIndex).setRoleId(roleIndex);
    };
    MythEquipView.prototype.setSelected = function (param) {
        this.viewStack.selectedIndex = this.tab.selectedIndex = 0;
        this.setSelectedIndex(0, param);
    };
    MythEquipView.prototype.setSelectedIndex = function (selectIndex, param) {
        if (this.selectIndex >= 0) {
            this.viewStack.getChildAt(this.selectIndex).close();
        }
        this.selectIndex = selectIndex;
        var view = this.viewStack.getChildAt(selectIndex);
        view.open(this.roleSelect.getCurRole(), param);
        this.help.visible = this.selectIndex == 1;
        this.updateRed();
    };
    MythEquipView.prototype.updateRed = function () {
        this.redPoint0.visible = MythEquipRedPoint.ins().legendRed;
        this.redPoint1.visible = MythEquipRedPoint.ins().forgeRed;
        for (var i = 0; i < heroControl.subRolesLen; i++) {
            if (this.viewStack.selectedIndex == 0) {
                this.roleSelect.showRedPoint(i, MythEquipRedPoint.ins().legendRoleRed[i]);
            }
            else if (this.viewStack.selectedIndex == 1) {
                this.roleSelect.showRedPoint(i, MythEquipRedPoint.ins().forgeRoleRed[i]);
            }
        }
    };
    MythEquipView.prototype.close = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        if (this.viewStack.selectedIndex >= 0) {
            this.viewStack.getElementAt(this.viewStack.selectedIndex).close();
        }
    };
    return MythEquipView;
}(BaseEuiView));
__reflect(MythEquipView.prototype, "MythEquipView");
var MythEquipSlotItemRenderer = (function (_super) {
    __extends(MythEquipSlotItemRenderer, _super);
    function MythEquipSlotItemRenderer() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.effs = [];
        _this._isSelected = false;
        return _this;
    }
    MythEquipSlotItemRenderer.prototype.childrenCreated = function () {
        _super.prototype.childrenCreated.call(this);
        this.setSelected(false);
    };
    MythEquipSlotItemRenderer.prototype.setData = function (roleId, slotData) {
        slotData.slot == 0 /* WEAPON */ ? this.currentState = "sword" : this.currentState = "amor";
        this.validateNow();
        for (var i = 0; 7 > i; i++) {
            this.setPointOpen(i, i < slotData.level, slotData.level);
        }
        var equipsData = heroControl.getSubRoleByIndex(roleId).getEquipByIndex(slotData.slot);
        if (equipsData.item.configID && ItemUtils.getQuality(DataCenter.ins().ItemConfig[equipsData.item.configID]) == 5) {
            var itemConfig = DataCenter.ins().ItemConfig[equipsData.item.configID];
            this.swordLevel.text = itemConfig.name;
            if (!this.mc) {
                this.mc = new GameMovieClip;
            }
            if (!this.mc.parent) {
                this.weaponEff.addChild(this.mc);
                this.mc.playFile(PATH_EFF + "chuanqizbeff", -1);
            }
        }
        else {
            if (this.mc && this.mc.parent) {
                this.mc.parent.removeChild(this.mc);
            }
            this.swordLevel.text = LangMgr.getValueByKey('noequipment');
        }
        this.redPoint.visible = mythEquipControl.getLegendForgeNextIsEnough(roleId, slotData.slot);
    };
    MythEquipSlotItemRenderer.prototype.setSelected = function (value) {
        this._isSelected = value;
        this.Select.visible = value;
    };
    MythEquipSlotItemRenderer.prototype.showBall = function (value) {
        this.level.visible = value;
        if (value) {
            this.level.alpha = 0;
            egret.Tween.get(this.level).to({
                alpha: 1
            }, 1000);
        }
        else {
            this.level.alpha = 0;
            egret.Tween.removeTweens(this.level);
        }
    };
    Object.defineProperty(MythEquipSlotItemRenderer.prototype, "isSelected", {
        get: function () {
            return this._isSelected;
        },
        enumerable: true,
        configurable: true
    });
    MythEquipSlotItemRenderer.prototype.getPoint = function (index) {
        return this["point_" + index];
    };
    MythEquipSlotItemRenderer.prototype.setPointOpen = function (index, open, level) {
        var point = this.getPoint(index);
        point.source = open ? "le_point2" : "le_point1";
        var eff = this.effs[index];
        var zs = level / 7 >> 0;
        var ys = level % 7;
        var resIndex = zs ? (ys == 0 ? zs - 1 : zs) : "";
        resIndex = resIndex ? resIndex : "";
        if (open) {
            this.effs[index] = eff = eff || new GameMovieClip;
            eff.x = point.x + 20;
            eff.y = point.y + 18;
            eff.scaleX = eff.scaleY = 0.7;
            eff.parent || this.level.addChild(eff);
            eff.playFile(PATH_EFF + ("feishengfire" + resIndex), -1);
        }
        else {
            if (eff && eff.parent) {
                eff.parent.removeChild(eff);
            }
        }
    };
    return MythEquipSlotItemRenderer;
}(eui.Component));
__reflect(MythEquipSlotItemRenderer.prototype, "MythEquipSlotItemRenderer");
var OfficeControl = (function (_super) {
    __extends(OfficeControl, _super);
    function OfficeControl() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.officeDatas = [];
        _this.titles = [];
        return _this;
    }
    OfficeControl.ins = function () {
        return _super.ins.call(this);
    };
    /**
     * 官职数据
     * 31-1
     */
    OfficeControl.prototype.downInfo = function (job, idx, dailyAward) {
        var role = heroControl.getSubRoleByJob(job);
        if (role) {
            role.guanZhiLv = idx;
        }
        this.officeDatas[job] = {
            job: job,
            idx: idx,
            dailyAward: dailyAward
        };
        EventMgr.ins().dispatch(176 /* OFFICE_INFO */, job);
    };
    /**
     * 官职升级
     * 31-2
     */
    OfficeControl.prototype.upUpgrade = function (job) {
        return [job];
    };
    /**
     * 领取官职奖励
     * 31-3
     */
    OfficeControl.prototype.upGetDaiylyAward = function (job) {
        return [job];
    };
    OfficeControl.prototype.open = function () {
        return reincarnateControl.lv >= DataCenter.ins().OfficeBaseConfig.zsLevel && GameServer.serverOpenDay >= DataCenter.ins().OfficeBaseConfig.openDay - 1;
    };
    OfficeControl.prototype.getAttrStr = function (job, idx, sign) {
        if (sign === void 0) { sign = "+"; }
        var guanzhiLevelConfig = DataCenter.ins().OfficeLevelConfig[job][idx];
        var attrs = guanzhiLevelConfig.attr;
        var str = "";
        var exStr = "";
        for (var i = 0; i < attrs.length; i++) {
            var attributeData = attrs[i];
            if (attributeData.type == 86 /* atDamagePro */ || attributeData.type == 16 /* atDamageReduction */) {
                if (exStr != "") {
                    exStr += "\n";
                }
                exStr += AttributeData.getAttStrByType(attributeData, 0, sign);
            }
            else {
                if (str != "") {
                    str += "\n";
                }
                str += AttributeData.getAttStrByType(attributeData, 0, sign);
            }
        }
        return { str: str, exStr: exStr };
    };
    OfficeControl.prototype.getPower = function (role) {
        if (!role.guanZhiLv)
            return 0;
        var guanzhiLevelConfig = DataCenter.ins().OfficeLevelConfig[role.job][role.guanZhiLv];
        return BackpackControl.getAttrPower(guanzhiLevelConfig.attr) + ItemUtils.calculateRelatePower(guanzhiLevelConfig.attr, role);
    };
    OfficeControl.prototype.checkItemIdCanDestroy = function (id) {
        if (heroControl.subRolesLen < GlobalModel.roleNum) {
            return false;
        }
        var roles = heroControl.roles;
        var guanzhiLevelConfigs = DataCenter.ins().OfficeLevelConfig;
        for (var i = 0; i < roles.length; i++) {
            var role = roles[i];
            if (role.guanZhiLv == 0) {
                return false;
            }
            var jobDatas = guanzhiLevelConfigs[role.job];
            var lv = role.guanZhiLv + 1;
            while (jobDatas[lv]) {
                if (jobDatas[lv].costId == id) {
                    return false;
                }
                lv += 1;
            }
        }
        return true;
    };
    OfficeControl.prototype.getTitle = function (role) {
        var idx = this.getTitleIdx(role);
        var guanzhiLevelConfig = DataCenter.ins().OfficeLevelConfig[role.job][idx];
        return guanzhiLevelConfig && guanzhiLevelConfig.title ? titleControl.getTitleByItemId(guanzhiLevelConfig.title) : null;
    };
    OfficeControl.prototype.getRoleTitles = function (job) {
        if (this.titles.length == 0) {
            for (var job_1 in DataCenter.ins().OfficeLevelConfig) {
                var guanzhiLevelConfigs = DataCenter.ins().OfficeLevelConfig[job_1];
                this.titles[+job_1] = this.titles[+job_1] || [];
                for (var idx in guanzhiLevelConfigs) {
                    if (guanzhiLevelConfigs[idx].title) {
                        this.titles[+job_1].push(guanzhiLevelConfigs[idx].idx);
                    }
                }
                this.titles[+job_1].sort(function (a, b) {
                    return b > a ? -1 : 1;
                });
            }
        }
        return this.titles[job];
    };
    OfficeControl.prototype.getTitleIdx = function (role, isNext) {
        if (isNext === void 0) { isNext = 0; }
        var idxs = this.getRoleTitles(role.job);
        var id = 0;
        for (var i = 0; i < idxs.length; i++) {
            var idx = idxs[i];
            if (idx > role.guanZhiLv) {
                if (isNext == 1) {
                    id = idx;
                }
                break;
            }
            id = idx;
        }
        return id;
    };
    __decorate([
        down(1, [3 /* Int */, 3 /* Int */, 3 /* Int */])
    ], OfficeControl.prototype, "downInfo", null);
    __decorate([
        up(2, [3 /* Int */])
    ], OfficeControl.prototype, "upUpgrade", null);
    __decorate([
        up(3, [3 /* Int */])
    ], OfficeControl.prototype, "upGetDaiylyAward", null);
    OfficeControl = __decorate([
        protocolsId(31 /* PROTOCOL_31 */)
    ], OfficeControl);
    return OfficeControl;
}(BaseSystem));
__reflect(OfficeControl.prototype, "OfficeControl");
var OfficeRedPoint = (function (_super) {
    __extends(OfficeRedPoint, _super);
    function OfficeRedPoint() {
        var _this = _super.call(this) || this;
        _this.isOpen = false;
        _this.isRed = {};
        _this.upgradeRed = {};
        _this.awardRed = {};
        _this.addCustomEventMany(_this.dispatchOpen, 466 /* SERVER_OPEN_DAY */, 112 /* REINCARNATE_DATA */);
        _this.addCustomEventMany(_this.dispatchRedPoint, 635 /* OFFICE_DAILY_AWARD_RED */, 636 /* OFFICE_UPGRADE_RED */);
        _this.addCustomEvent(176 /* OFFICE_INFO */, _this.update);
        _this.addCustomEventMany(_this.update, 700 /* OFFICE_OPEN */);
        _this.addCustomEventMany(_this.dispatchUpgradeRed, 267 /* BACKPACK_ITEM_CHANGE */, 266 /* BACKPACK_ITEM_ADD */, 268 /* BACKPACK_ITEM_DEL */);
        return _this;
    }
    OfficeRedPoint.ins = function () {
        return _super.ins.call(this);
    };
    OfficeRedPoint.prototype.update = function (job) {
        if (this.isOpen) {
            this.dispatchDailyAwardRed(job);
            this.dispatchUpgradeRed(job);
        }
    };
    Object.defineProperty(OfficeRedPoint.prototype, "redPoint", {
        get: function () {
            for (var key in this.isRed) {
                if (this.isRed[key]) {
                    return true;
                }
            }
            return false;
        },
        enumerable: true,
        configurable: true
    });
    OfficeRedPoint.prototype.getRed = function (key) {
        return !!this.isRed[key];
    };
    OfficeRedPoint.prototype.getAwardRP = function (key) {
        return !!this.awardRed[key];
    };
    OfficeRedPoint.prototype.getUpgradeRP = function (key) {
        return !!this.upgradeRed[key];
    };
    OfficeRedPoint.prototype.dispatchOpen = function () {
        var oldRed = this.isOpen;
        if (!this.isOpen) {
            this.isOpen = officeControl.open();
        }
        oldRed != this.isOpen && EventMgr.ins().dispatch(700 /* OFFICE_OPEN */, true);
    };
    OfficeRedPoint.prototype.dispatchRedPoint = function () {
        var roles = heroControl.roles;
        for (var i = 0; i < roles.length; i++) {
            var role = roles[i];
            if (role) {
                this.isRed[role.job] = this.upgradeRed[role.job] || this.awardRed[role.job];
            }
        }
        EventMgr.ins().dispatch(634 /* OFFICE_RED */);
    };
    OfficeRedPoint.prototype.dispatchDailyAwardRed = function (job) {
        if (!this.isOpen)
            return false;
        if (job != undefined) {
            var oldRed = this.awardRed[job];
            this.awardRed[job] = this.getDailyAwardRed(job);
            if (oldRed != this.awardRed[job]) {
                EventMgr.ins().dispatch(635 /* OFFICE_DAILY_AWARD_RED */, true);
                return;
            }
        }
        var state = false;
        var roles = heroControl.roles;
        for (var i = 0; i < roles.length; i++) {
            var role = roles[i];
            if (role) {
                var oldRed = this.awardRed[role.job];
                this.awardRed[role.job] = this.getDailyAwardRed(role.job);
                if (oldRed != this.awardRed[role.job]) {
                    state = true;
                }
            }
        }
        state && EventMgr.ins().dispatch(635 /* OFFICE_DAILY_AWARD_RED */, state);
    };
    OfficeRedPoint.prototype.getDailyAwardRed = function (job) {
        if (!this.isOpen)
            return false;
        var officialData = officeControl.officeDatas[job];
        if (!officialData) {
            return false;
        }
        var guanzhiLevelConfig = DataCenter.ins().OfficeLevelConfig[job][officialData.idx];
        if (guanzhiLevelConfig) {
            var guanzhiDayAwardConfig = DataCenter.ins().OfficeDayAwardConfig[guanzhiLevelConfig.stage];
            if (officialData.dailyAward == 0 && guanzhiDayAwardConfig && guanzhiDayAwardConfig.award && guanzhiDayAwardConfig.award.length) {
                return true;
            }
        }
        return false;
    };
    OfficeRedPoint.prototype.dispatchUpgradeRed = function (job) {
        if (!this.isOpen)
            return false;
        if (job != undefined) {
            var oldRed = this.upgradeRed[job];
            this.upgradeRed[job] = this.getUpgradeRed(job);
            if (oldRed != this.upgradeRed[job]) {
                EventMgr.ins().dispatch(636 /* OFFICE_UPGRADE_RED */, true);
                return;
            }
        }
        var state = false;
        var roles = heroControl.roles;
        for (var i = 0; i < roles.length; i++) {
            var role = roles[i];
            if (role) {
                var oldRed = this.upgradeRed[role.job];
                this.upgradeRed[role.job] = this.getUpgradeRed(role.job);
                if (oldRed != this.upgradeRed[role.job]) {
                    state = true;
                }
            }
        }
        state && EventMgr.ins().dispatch(636 /* OFFICE_UPGRADE_RED */, state);
    };
    OfficeRedPoint.prototype.getUpgradeRed = function (job) {
        if (!this.isOpen)
            return false;
        var officialData = officeControl.officeDatas[job];
        if (!officialData)
            return false;
        var guanzhiLevelConfig = DataCenter.ins().OfficeLevelConfig[job][officialData.idx + 1];
        return guanzhiLevelConfig && backpackControl.getBagItemCount(BackpackControl.BAG_TYPE_OTHTER, guanzhiLevelConfig.costId) >= guanzhiLevelConfig.costCount ? true : false;
    };
    return OfficeRedPoint;
}(BaseSystem));
__reflect(OfficeRedPoint.prototype, "OfficeRedPoint");
var OfficeDailyAwardView = (function (_super) {
    __extends(OfficeDailyAwardView, _super);
    function OfficeDailyAwardView() {
        var _this = _super.call(this) || this;
        _this.curJob = 0;
        _this.skinName = "OfficeDailyAwardViewSkin";
        _this.uilayer = GameLayer.POPUP;
        return _this;
    }
    OfficeDailyAwardView.prototype.open = function (job) {
        this.curJob = job;
        this.addEventTouchTap(this.getBtn, this.onTap);
        this.addEventTouchTap(this.bgClose, this.onTap);
        var officialData = officeControl.officeDatas[job];
        var titles = officeControl.getRoleTitles(job);
        var datas = [];
        for (var i = 0; i < titles.length; i++) {
            var idx = titles[i];
            var guanzhiLevelConfig = DataCenter.ins().OfficeLevelConfig[job][idx];
            if (DataCenter.ins().OfficeDayAwardConfig[guanzhiLevelConfig.stage]) {
                datas.push({
                    job: job,
                    idx: idx
                });
            }
            if (idx > officialData.idx) {
                break;
            }
        }
        this.displayList.itemRenderer = OfficeDailyAwardItemRenderer;
        this.displayList.dataProvider = new eui.ArrayCollection(datas);
        if (officialData.dailyAward == 0) {
            this.getBtn.enabled = true;
            this.getBtn.label = LangMgr.getValueByKey("activitGet1");
        }
        else {
            this.getBtn.enabled = false;
            this.getBtn.label = LangMgr.getValueByKey("activitAlreadingGet");
        }
    };
    OfficeDailyAwardView.prototype.onTap = function (e) {
        if (e.currentTarget == this.getBtn) {
            if (backpackControl.getSurplusCount() < BackpackControl.BAG_ENOUGH) {
                UIMgr.ins().open("BackpackFullTipsView", BackpackControl.BAG_ENOUGH);
                return;
            }
            officeControl.upGetDaiylyAward(this.curJob);
            UIMgr.ins().close(this);
        }
        else if (e.currentTarget == this.bgClose) {
            UIMgr.ins().close(this);
        }
    };
    return OfficeDailyAwardView;
}(BaseEuiView));
__reflect(OfficeDailyAwardView.prototype, "OfficeDailyAwardView");
var OfficePositionView = (function (_super) {
    __extends(OfficePositionView, _super);
    function OfficePositionView() {
        var _this = _super.call(this) || this;
        _this.curRole = 0;
        _this.curJob = 1;
        _this.isEnought = false;
        _this.lastObj = { job: 0, stage: 0 };
        _this.isTopLevel = true;
        _this.skinName = "OfficePositionViewSkin";
        _this.getLabel.textFlow = (new egret.HtmlTextParser).parser("<u>" + _this.getLabel.text + "</u>");
        return _this;
    }
    OfficePositionView.prototype.open = function (roleId) {
        if (roleId === void 0) { roleId = 0; }
        this.curRole = roleId || 0;
        this.roleSelect.setCurRole(roleId);
        this.addEventChange(this.roleSelect, this.setSelected);
        this.addEventTouchTap(this.closeBtn, this.onTap);
        this.addEventTouchTap(this.practiseBtn2, this.onTap);
        this.addEventTouchTap(this.upGradeBtn0, this.onTap);
        this.addEventTouchTap(this.titleName, this.onTap);
        this.addEventTouchTap(this.icon0, this.onTap);
        this.addEventTouchTap(this.countLabel0, this.onTap);
        this.addEventTouchTap(this.getLabel, this.onTap);
        this.addCustomEvent(634 /* OFFICE_RED */, this.updateRed);
        this.addCustomEvent(636 /* OFFICE_UPGRADE_RED */, this.updateRed);
        this.addCustomEvent(176 /* OFFICE_INFO */, this.updateView);
        this.updateView();
        this.updateRed();
    };
    OfficePositionView.prototype.updateView = function () {
        this.curJob = heroControl.getSubRoleByIndex(this.curRole).job;
        var officialData = officeControl.officeDatas[this.curJob];
        if (officialData) {
            var curGuanzhiLevelConfig = DataCenter.ins().OfficeLevelConfig[this.curJob][officialData.idx];
            var nextGuanzhiLevelConfig = DataCenter.ins().OfficeLevelConfig[this.curJob][officialData.idx + 1];
            if (this.lastObj.job == this.curJob && this.lastObj.stage && this.lastObj.stage < curGuanzhiLevelConfig.stage) {
                this.onUpgrade();
            }
            this.lastObj.job = this.curJob;
            this.lastObj.stage = curGuanzhiLevelConfig.stage;
            if (officialData.idx == 0) {
                if (!this.nextGroup.parent && this.nowGroup.parent) {
                    this.nowGroup.parent.addChild(this.nextGroup);
                    RecycleMgr.ins().reloadContainer(this.nextGroup);
                }
                DisplayUtils.removeFromParent(this.nowGroup);
                this.arrow.visible = false;
            }
            else {
                if (!this.nowGroup.parent) {
                    this.nextGroup.parent.addChildAt(this.nowGroup, 0);
                    RecycleMgr.ins().reloadContainer(this.nowGroup);
                }
                this.arrow.visible = true;
            }
            if (curGuanzhiLevelConfig) {
                this.lvlNow.text = LangMgr.getValueByKey("stageNumberTxt", StringUtils.NumberToChinese(curGuanzhiLevelConfig.stage)) + LangMgr.getValueByKey("numberLevel", StringUtils.NumberToChinese(curGuanzhiLevelConfig.level));
                var tips = "";
                if (curGuanzhiLevelConfig.attr && curGuanzhiLevelConfig.attr.length) {
                    var attrStr = officeControl.getAttrStr(this.curJob, officialData.idx);
                    tips += attrStr.str + "\n" + ("|C:0xee00ff&T:" + attrStr.exStr + "|");
                }
                this.attrNow.textFlow = TextUtils.generateTextFlow1(tips);
            }
            if (nextGuanzhiLevelConfig) {
                if (!this.nextGroup.parent) {
                    this.nowGroup.parent.addChild(this.nextGroup);
                    RecycleMgr.ins().reloadContainer(this.nextGroup);
                }
                this.upInfo.visible = this.nextTitleGroup.visible = true;
                this.lvlNext.text = LangMgr.getValueByKey("stageNumberTxt", StringUtils.NumberToChinese(nextGuanzhiLevelConfig.stage)) + LangMgr.getValueByKey("numberLevel", StringUtils.NumberToChinese(nextGuanzhiLevelConfig.level));
                var tips = "";
                if (nextGuanzhiLevelConfig.attr && nextGuanzhiLevelConfig.attr.length) {
                    var attrStr = officeControl.getAttrStr(this.curJob, officialData.idx + 1);
                    tips += attrStr.str + "\n" + ("|C:0xee00ff&T:" + attrStr.exStr + "|");
                }
                this.attrNext.textFlow = TextUtils.generateTextFlow1(tips);
                var bagCount = backpackControl.getBagItemCount(BackpackControl.BAG_TYPE_OTHTER, nextGuanzhiLevelConfig.costId);
                var color = 0x35E62D;
                if (bagCount < nextGuanzhiLevelConfig.costCount) {
                    color = 0xFD000A;
                }
                this.isEnought = bagCount >= nextGuanzhiLevelConfig.costCount;
                this.countLabel0.textFlow = TextUtils.generateTextFlow1("|C:" + color + "&T:" + bagCount + "|/" + nextGuanzhiLevelConfig.costCount);
                this.icon0.source = DataCenter.ins().ItemConfig[nextGuanzhiLevelConfig.costId].icon + "_png";
                this.lbOver.visible = false;
            }
            else {
                DisplayUtils.removeFromParent(this.nextGroup);
                this.upInfo.visible = this.nextTitleGroup.visible = false;
                this.lbOver.visible = true;
            }
            this.nextTitleIdx = officeControl.getTitleIdx(heroControl.getSubRoleByIndex(this.curRole), 1);
            var guanzhiLevelConfig = DataCenter.ins().OfficeLevelConfig[this.curJob][this.nextTitleIdx];
            this.tpisLevel.text = LangMgr.getValueByKey("stageNumberTxt", StringUtils.NumberToChinese(guanzhiLevelConfig.stage)) + LangMgr.getValueByKey("numberLevel", StringUtils.NumberToChinese(guanzhiLevelConfig.level));
            var titleConf = titleControl.getTitleByItemId(guanzhiLevelConfig.title);
            this.titleName.text = "【" + titleConf.name + "】";
            if (titleConf.img) {
                this.title.source = titleConf.img;
                this.titleEff.visible = false;
                this.title.visible = true;
                this.addEventTouchTap(this.title, this.onTap);
            }
            else {
                this.titleMc = this.titleMc || new GameMovieClip;
                this.titleMc.playFile(PATH_EFF + titleConf.eff, -1);
                this.titleEff.addChild(this.titleMc);
                this.titleEff.visible = true;
                this.title.visible = false;
                this.titleMc.touchEnabled = true;
                this.addEventTouchTap(this.titleMc, this.onTap);
            }
            this.dailyRedPoint.visible = OfficeRedPoint.ins().getDailyAwardRed(this.curJob);
            this.btnRedPoint.visible = OfficeRedPoint.ins().getUpgradeRed(this.curJob);
            this.powerPanel.setPower(officeControl.getPower(heroControl.getSubRoleByIndex(this.curRole)));
        }
    };
    OfficePositionView.prototype.setSelected = function (e) {
        if (e.data != this.curRole) {
            this.curRole = e.data;
            this.updateView();
        }
    };
    OfficePositionView.prototype.onTap = function (e) {
        switch (e.currentTarget) {
            case this.closeBtn:
                UIMgr.ins().close(this);
                break;
            case this.practiseBtn2:
                var curOfficialData = officeControl.officeDatas[this.curJob];
                var curGuanzhiLevelConfig = DataCenter.ins().OfficeLevelConfig[this.curJob][curOfficialData.idx];
                if (DataCenter.ins().OfficeDayAwardConfig[curGuanzhiLevelConfig.stage] && DataCenter.ins().OfficeDayAwardConfig[curGuanzhiLevelConfig.stage].award.length) {
                    UIMgr.ins().open(OfficeDailyAwardView, this.curJob);
                }
                else {
                    var title = DataCenter.ins().OfficeLevelConfig[this.curJob][this.nextTitleIdx].title;
                    var titleConf = titleControl.getTitleByItemId(title);
                    tipsControl.showTips(LangMgr.getValueByKey("office1", titleConf.name));
                }
                break;
            case this.upGradeBtn0:
                if (!this.isEnought) {
                    tipsControl.showTips(LangMgr.getValueByKey("materialEnought"));
                    return;
                }
                officeControl.upUpgrade(this.curJob);
                break;
            case this.titleName:
            case this.titleMc:
            case this.title:
                var levelConfig = DataCenter.ins().OfficeLevelConfig[this.curJob][this.nextTitleIdx];
                if (levelConfig && levelConfig.title) {
                    var itemBase = new ItemBase;
                    itemBase.data = levelConfig.title;
                    itemBase.onClick();
                }
                break;
            case this.icon0:
            case this.countLabel0:
                var data = officeControl.officeDatas[this.curJob];
                if (data) {
                    var config = DataCenter.ins().OfficeLevelConfig[this.curJob][data.idx + 1];
                    if (config) {
                        var itemBase = new ItemBase;
                        itemBase.data = config.costId;
                        itemBase.onClick();
                    }
                }
                break;
            case this.getLabel:
                var officialData = officeControl.officeDatas[this.curJob];
                var guanzhiLevelConfig = DataCenter.ins().OfficeLevelConfig[this.curJob][officialData.idx + 1];
                if (guanzhiLevelConfig) {
                    UIMgr.ins().open(ShopWarnView).setData(guanzhiLevelConfig.costId);
                }
                break;
        }
    };
    OfficePositionView.prototype.onUpgrade = function () {
        var titleConf = officeControl.getTitle(heroControl.getSubRoleByIndex(this.curRole));
        if (titleConf) {
            CommonFun.show(1, titleConf.name, titleConf.img, titleConf.eff, true, null, 0, -100);
        }
    };
    OfficePositionView.prototype.updateRed = function () {
        for (var i = 0; i < heroControl.subRolesLen; i++) {
            var role = heroControl.getSubRoleByIndex(i);
            this.roleSelect.showRedPoint(role.index, OfficeRedPoint.ins().getRed(role.job));
        }
        this.dailyRedPoint.visible = OfficeRedPoint.ins().getAwardRP(this.curJob);
        this.btnRedPoint.visible = OfficeRedPoint.ins().getUpgradeRP(this.curJob);
    };
    return OfficePositionView;
}(BaseEuiView));
__reflect(OfficePositionView.prototype, "OfficePositionView");
var OfficeDailyAwardItemRenderer = (function (_super) {
    __extends(OfficeDailyAwardItemRenderer, _super);
    function OfficeDailyAwardItemRenderer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    OfficeDailyAwardItemRenderer.prototype.dataChanged = function () {
        var guanzhiLevelConfig = DataCenter.ins().OfficeLevelConfig[this.data.job][this.data.idx];
        var guanzhiDayAwardConfig = DataCenter.ins().OfficeDayAwardConfig[guanzhiLevelConfig.stage];
        var titleConf = titleControl.getTitleByItemId(guanzhiLevelConfig.title);
        this.levelName.text = titleConf.name;
        this.rewardList.itemRenderer = ItemBase;
        this.rewardList.dataProvider = new eui.ArrayCollection(guanzhiDayAwardConfig.award.concat());
        var officialData = officeControl.officeDatas[this.data.job];
        this.currentGroup.visible = DataCenter.ins().OfficeLevelConfig[officialData.job][officialData.idx].stage == guanzhiLevelConfig.stage;
    };
    return OfficeDailyAwardItemRenderer;
}(BaseItemRender));
__reflect(OfficeDailyAwardItemRenderer.prototype, "OfficeDailyAwardItemRenderer");
var OfflineRewardView = (function (_super) {
    __extends(OfflineRewardView, _super);
    function OfflineRewardView() {
        var _this = _super.call(this) || this;
        _this.arr = [];
        _this.skinName = "OfflineRewardViewSkin";
        _this.uilayer = GameLayer.MAIN2;
        return _this;
    }
    OfflineRewardView.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.addEventTouchTap(this.okBtn, this.onClick);
        this.addCustomEvent(466 /* SERVER_OPEN_DAY */, this.updateYBText);
        this.arr = param[0];
        this.coin = param[1];
        for (var i = 0; i < this.coin.length; i++) {
            if (this.coin[i].id == 4 /* TYPE_4 */) {
                this.arr.push(this.coin[i].count);
                break;
            }
        }
        this.update();
    };
    OfflineRewardView.prototype.updateYBText = function () {
        this.ybTextGroup.visible = smeltControl.checkOpenSystem();
    };
    OfflineRewardView.prototype.update = function () {
        this.time.text = LangMgr.getValueByKey('offLineTime', DateUtils.getFormatBySecond(this.arr[0], DateUtils.TIME_FORMAT_9));
        this.equipNum.text = "" + (this.arr[3] + this.arr[4]);
        this.jinglianshiNum.text = "" + (this.arr[6] ? this.arr[6] : 0);
        if (this.arr[4] == 0) {
            this.bagFull.visible = false;
        }
        else {
            this.bagFull.visible = true;
            this.bagFull.textFlow = (new egret.HtmlTextParser).parser(LangMgr.getValueByKey('smeltingAuto', this.arr[4]));
        }
        var exp = this.arr[1];
        var money = this.arr[2];
        if (this.arr[5].length > 0) {
            for (var i = 0; i < this.arr[5].length; i++) {
                var obj = this.arr[5][i];
                if (obj["type"] == 1) {
                    this.label4.text = obj["gold"];
                    this.label6.text = obj["exp"];
                }
                else if (obj["type"] == 2) {
                    this.label3.text = obj["gold"];
                    this.label5.text = obj["exp"];
                }
                else if (obj["type"] == 3) {
                    exp += obj["exp"];
                    money += obj["gold"];
                }
                else if (obj["type"] == 4) {
                    exp += obj["exp"];
                    money += obj["gold"];
                }
                else if (obj["type"] == 5) {
                    exp += obj["exp"];
                    money += obj["gold"];
                }
            }
            this.exp.text = "" + exp;
            this.money.text = "" + money;
        }
    };
    OfflineRewardView.prototype.onClick = function () {
        UIMgr.ins().close(this);
    };
    return OfflineRewardView;
}(BaseEuiView));
__reflect(OfflineRewardView.prototype, "OfflineRewardView");
var RambleBlackControl = (function (_super) {
    __extends(RambleBlackControl, _super);
    function RambleBlackControl() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._blackList = [];
        return _this;
    }
    RambleBlackControl.ins = function () {
        return _super.ins.call(this);
    };
    RambleBlackControl.prototype.checkIsBlack = function (roleId) {
        for (var i = 0; i < this._blackList.length; i++) {
            var black = this._blackList[i];
            if (black.roleId == roleId) {
                return true;
            }
        }
        return false;
    };
    RambleBlackControl.prototype.getBlackList = function () {
        return this._blackList;
    };
    /**
     * 30-10
     */
    RambleBlackControl.prototype.downBlackList = function (datas) {
        this._blackList.length = datas.length;
        for (var i = 0; datas.length > i; i++) {
            this._blackList[i] = this._blackList[i] || new RambleKfBlackVo;
            this._blackList[i].init(datas[i]);
            this._blackList[i].index = i + 1;
        }
        this._blackList.sort(function (a, b) {
            return a.time < b.time ? 1 : -1;
        });
        EventMgr.ins().dispatch(637 /* RAMBLE_BLACK_LIST */);
    };
    /**
     * 30-10
     */
    RambleBlackControl.prototype.upAddBlackRole = function (data) {
        return [data.id, data.servId, data.name, data.job, data.sex, data.zsLevel, data.lv];
    };
    /**
     * 30-11
     */
    RambleBlackControl.prototype.upDelBlackRole = function (index) {
        return [index];
    };
    __decorate([
        down(10, [ByteConst.RambleKfBlackVos])
    ], RambleBlackControl.prototype, "downBlackList", null);
    __decorate([
        up(10, [6 /* UInt */, 3 /* Int */, 8 /* String */, 1 /* Byte */, 1 /* Byte */, 1 /* Byte */, 2 /* Short */])
    ], RambleBlackControl.prototype, "upAddBlackRole", null);
    __decorate([
        up(11, [2 /* Short */])
    ], RambleBlackControl.prototype, "upDelBlackRole", null);
    RambleBlackControl = __decorate([
        protocolsId(30 /* PROTOCOL_30 */)
    ], RambleBlackControl);
    return RambleBlackControl;
}(BaseSystem));
__reflect(RambleBlackControl.prototype, "RambleBlackControl");
var RambleControl = (function (_super) {
    __extends(RambleControl, _super);
    function RambleControl() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /** 聊天tip显示状态 */
        _this.isShowTip = false;
        /**聊天数据 */
        _this.chatInterval = 5000;
        _this.charMax = 50;
        _this.canSpeak = true;
        _this.UpSpeak = "";
        _this._chatListData = new eui.ArrayCollection(); //世界
        _this._systemListData = new eui.ArrayCollection(); //系统
        _this._chatListData2 = new eui.ArrayCollection(); //综合
        _this._kfListData = new eui.ArrayCollection(); //跨服
        _this.curListData = new eui.ArrayCollection();
        _this.canSpeakTime = 0; //可以聊天的时间戳 单位秒
        _this.kfNoReadMsgList = [];
        _this.allChatOpen = true;
        _this.chatPoolDic = {};
        return _this;
    }
    RambleControl.prototype.initLogin = function () {
        var _this = this;
        egret.callLater(function () {
            _this.removeAllChatByType(8 /* ciChannelCamp */);
        }, this);
    };
    RambleControl.ins = function () {
        return _super.ins.call(this);
    };
    RambleControl.prototype.upChatInfo = function (type, str, pointId) {
        if (pointId === void 0) { pointId = 0; }
        if (str.length <= 0) {
            tipsControl.showTips(LangMgr.getValueByKey('customChatContent1'));
            return;
        }
        if (str.charAt(0) == "@") {
            this.upGm(str);
            return;
        }
        if (!this.checkCanSpeak()) {
            this.chatLimit(type, str);
            return;
        }
        this.upChat(type, str, pointId);
        if (type == 7 /* ciChannelAll */ || type == 10 /* ciChannelKuafu */) {
            if (this.isCanSpeak()) {
                this.checkChatSend(str, 1, true);
            }
        }
    };
    /**
     * 30-0
     */
    RambleControl.prototype.upGm = function (str) {
        return [str];
    };
    /**
     * 30-1
     */
    RambleControl.prototype.upChat = function (type, str, pointId) {
        return [type, pointId, str];
    };
    /**
     * 收到新的新的聊天消息
     * 30-1
     */
    RambleControl.prototype.downNewChatMsg = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        var message = new RambleInfoVo();
        message.init(param);
        if (partnerControl.indexOfBlackList(message.id) == -1) {
            this.insertChatMsg(message);
        }
        if (message.id == ActorControl.actorID) {
            this.checkChatSend(message.str, 1, false);
        }
    };
    RambleControl.prototype.insertChatMsg = function (message) {
        if (message.type == 10 /* ciChannelKuafu */) {
            if (rambleBlackControl.checkIsBlack(message.id)) {
                return;
            }
            this.insertMsg(this._kfListData, message);
            this.kfNoReadMsgList.push(message);
        }
        else {
            this.insertMsg(this._chatListData, message);
        }
        if (message.id == ActorControl.actorID) {
            rambleControl.startInterval();
        }
        this.dispatchNewChatMsg(message);
    };
    RambleControl.prototype.insertMsg = function (list, message, maxNum) {
        if (maxNum == undefined) {
            maxNum = this.charMax;
        }
        if (list.length >= maxNum) {
            var item = list.removeItemAt(0);
            this.removeAllChatMsg(item);
        }
        this.addWorldChat(message);
    };
    RambleControl.prototype.sortAllChatMsg = function () {
        this._chatListData2.refresh();
    };
    RambleControl.prototype.removeAllChatMsg = function (message) {
        var index = this._chatListData2.getItemIndex(message);
        if (index >= 0) {
            this._chatListData2.removeItemAt(index);
        }
        if (UIMgr.ins().isShow(RambleMainView)) {
            var view = UIMgr.ins().getView(RambleMainView);
            view.updateNewChatMsg();
        }
    };
    /**移除某id的聊天 */
    RambleControl.prototype.removeChatWithId = function (userId) {
        this.removeChatById(this._chatListData, userId);
        this.removeChatById(this._chatListData2, userId);
        this.removeChatById(this._kfListData, userId);
    };
    RambleControl.prototype.removeChatById = function (listData, userId) {
        if (listData && listData.length) {
            var source = [];
            for (var i = 0; i < listData.length; i++) {
                var cData = listData.getItemAt(i);
                if (cData instanceof UnionMessageInfoVo) {
                    if (cData.roleId != userId) {
                        source.push(cData);
                    }
                }
                else {
                    if (cData.id != userId) {
                        source.push(cData);
                    }
                }
            }
            listData.source = source;
            listData.refresh();
        }
    };
    /**
     * 一条聊天消息
     */
    RambleControl.prototype.dispatchNewChatMsg = function (message) {
        EventMgr.ins().dispatch(226 /* RAMBLE_NEW_MSG */, message);
    };
    /**
     * 30-2
     */
    RambleControl.prototype.downSystemInfo = function () {
    };
    /**
     * 30-3
     */
    RambleControl.prototype.downIsSendSuccess = function (result) {
        if (result) {
            this.dispatchSendInfoSuccess();
        }
    };
    /**
     * 新发送消息成功
     */
    RambleControl.prototype.dispatchSendInfoSuccess = function () {
        EventMgr.ins().dispatch(643 /* RAMBLE_SEND_INFO_SUCCESS */);
    };
    /**
     * 30-4
     */
    RambleControl.prototype.downSystemMessage = function (level, type, str) {
        if (level == 0 || ActorControl.level >= level) {
            switch (type) {
                case 512:
                    tipsControl.showBottomCenterTips(str);
                    if (crossArenaControl.isKFArena) {
                        var chatSystemData = new RambleSystemVo(0, str);
                        copyControl.chatCampDtList.addItem(chatSystemData);
                        this.dispatchNewChatMsg(chatSystemData);
                    }
                    break;
                case 8:
                    tipsControl.showCenterTips2(str);
                    break;
                case 4:
                    ErrorUtils.ins().show(str);
                    break;
                case 2:
                    tipsControl.showCenterTips(str);
                    break;
                default:
                    tipsControl.showTips(str);
                    break;
            }
        }
    };
    /**
     * 禁言
     * 30-5
     */
    RambleControl.prototype.downCannotSpeak = function (canSpeakTime) {
        this.canSpeakTime = canSpeakTime;
    };
    /**
     * 30-6
     */
    RambleControl.prototype.downRemoveRoleChat = function (userId) {
        this.removeRoleChat(userId);
    };
    RambleControl.prototype.removeRoleChat = function (userId) {
        this.removeChatWithId(userId);
        unionControl.removeMsgWithId(userId);
        partnerControl.removeMsgWithId(userId);
    };
    /**
     * 30-8
     */
    RambleControl.prototype.downAllChatMsg = function (datas) {
        var source = [];
        for (var i = 0; i < datas.length; i++) {
            var chatInfoData = new RambleInfoVo();
            chatInfoData.init(datas[i]);
            if (partnerControl.indexOfBlackList(chatInfoData.id) == -1 && !RambleBlackControl.ins().checkIsBlack(chatInfoData.id)) {
                source.push(chatInfoData);
            }
        }
        this.initWorldChat(source);
        if (this.chatListData.length) {
            this.dispatchNewChatMsg(this.chatListData.getItemAt(this.chatListData.length - 1));
        }
    };
    /**
     * 是否禁言中
     */
    RambleControl.prototype.isCanSpeak = function () {
        if (this.canSpeakTime && this.canSpeakTime > GameServer.serverTime / DateUtils.MS_PER_SECOND) {
            return false;
        }
        return true;
    };
    Object.defineProperty(RambleControl.prototype, "chatListData", {
        get: function () {
            return this._chatListData;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RambleControl.prototype, "chatListData2", {
        get: function () {
            return this._chatListData2;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RambleControl.prototype, "kfListData", {
        get: function () {
            return this._kfListData;
        },
        enumerable: true,
        configurable: true
    });
    RambleControl.prototype.setCurListData = function (data) {
        this.curListData = data;
        var view;
        if (UIMgr.ins().isShow(RambleUIView)) {
            view = UIMgr.ins().getView(RambleUIView);
            view.updataList();
        }
        if (UIMgr.ins().isShow(RambleMainView)) {
            view = UIMgr.ins().getView(RambleMainView);
            view.updataList();
        }
    };
    Object.defineProperty(RambleControl.prototype, "chatListTip", {
        get: function () {
            //截取末尾数据
            var len = this._chatListData.length;
            var start;
            var end;
            var showNum = GlobalModel.chatShowNum;
            if (len > showNum) {
                start = len - showNum;
                end = len;
            }
            else {
                start = 0;
                end = len;
            }
            return this._chatListData.source.slice(start, end);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RambleControl.prototype, "chatListTip2", {
        /**用于主界面聊天频道 */
        get: function () {
            var chatListData2 = this._chatListData2;
            if (copyControl.isFBChatChannle()) {
                chatListData2 = copyControl.chatCampDtList;
            }
            if (!chatListData2) {
                chatListData2 = new eui.ArrayCollection([]);
            }
            //截取末尾数据
            var len = chatListData2.length;
            var start;
            var end;
            var showNum = GlobalModel.chatShowNum;
            if (len > showNum) {
                start = len - showNum;
                end = len;
            }
            else {
                start = 0;
                end = len;
            }
            return chatListData2.source.slice(start, end);
        },
        enumerable: true,
        configurable: true
    });
    RambleControl.prototype.startInterval = function () {
        this.canSpeak = false;
        TimerMgr.ins().doTimer(this.chatInterval, 1, this.timeDo, this);
    };
    RambleControl.prototype.timeDo = function () {
        this.canSpeak = true;
    };
    RambleControl.prototype.dispatchSysChatMsg = function (message) {
        if (this._systemListData.length >= this.charMax) {
            var msg = this._systemListData.removeItemAt(0);
            this.removeAllChatMsg(msg);
        }
        this.addSystemNotice(message);
        EventMgr.ins().dispatch(227 /* RAMBLE_SYS_MSG */, message);
    };
    Object.defineProperty(RambleControl.prototype, "systemListData", {
        get: function () {
            return this._systemListData;
        },
        enumerable: true,
        configurable: true
    });
    RambleControl.prototype.checkRepeatString = function (str) {
        var len = str.length;
        if (len <= 10) {
            return true;
        }
        var repeatNum = 0;
        for (var i = 0; i < len; i++) {
            var strIndex = str.charAt(i);
            if (this.UpSpeak.lastIndexOf(strIndex) != -1) {
                ++repeatNum;
            }
        }
        if (repeatNum >= 10) {
            tipsControl.showTips(LangMgr.getValueByKey('customChatRepeatContent'));
            return false;
        }
        return true;
    };
    /**
     * 获取世界字
     */
    RambleControl.prototype.getWorldStr = function () {
        return crossFieldControl.isCross || crossBossControl.isKFBossBattle ? LangMgr.getValueByKey('chatMenu2') : LangMgr.getValueByKey('chatMenu1');
    };
    RambleControl.prototype.checkChatSend = function (content, type, up) {
        if (up === void 0) { up = false; }
        var poolDic = this.chatPoolDic[type] = this.chatPoolDic[type] || [];
        if (up) {
            poolDic.push(content);
        }
        else {
            var index = poolDic.indexOf(content);
            if (index >= 0) {
                ReportData.getIns().reportChatInfo(type, content);
                poolDic.splice(0, index + 1);
            }
            else if (poolDic.length > 0) {
                ReportData.getIns().reportChatInfo(type, content);
                poolDic.splice(0, 1);
            }
        }
    };
    RambleControl.prototype.checkChatIsOpen = function (showMsg) {
        if (showMsg === void 0) { showMsg = true; }
        return true;
    };
    /**
     * 30-7
     */
    RambleControl.prototype.upFace = function (type, emojis) {
        if (emojis && emojis.length) {
            if (!this.checkCanSpeak()) {
                var str = "";
                for (var i = 0; i < emojis.length; i++) {
                    var emoji = emojis[i];
                    str += "#" + emoji + "#";
                }
                this.chatLimit(type, str);
                return false;
            }
            return [type, emojis];
        }
        return false;
    };
    RambleControl.prototype.checkFaces = function (type, msg) {
        if (!msg && !msg.length) {
            return false;
        }
        if (!rambleControl.canSpeak) {
            tipsControl.showTips(LangMgr.getValueByKey('customChatFirst'));
            return true;
        }
        if (msg.indexOf("@") != -1) {
            return false;
        }
        if (copyControl.isFBChatChannle()) {
            return false;
        }
        var emojis = msg.match(RambleEmojiRiceTextVo.CHAT_EMOJI);
        if (!emojis || !emojis.length) {
            return false;
        }
        var len = emojis.length;
        var emojiLen = 0;
        var faces = [];
        for (var i = 0; i < len; i++) {
            var emoji = emojis[i];
            emojiLen += emoji.length;
            faces.push(Number(emoji.match(StringUtils.REG_NUM)));
        }
        if (emojiLen == msg.length) {
            if (faces.length > DataCenter.ins().RambleConstConfig.emojiMax) {
                tipsControl.showTips(LangMgr.getValueByKey('chatEmojisMax'));
                return true;
            }
            var tag = 0;
            if (type == 4 /* guild */) {
                tag = 3 /* ciChannelGuild */;
            }
            else {
                tag = type == 2 /* kuafu */ ? 10 /* ciChannelKuafu */ : 7 /* ciChannelAll */;
                rambleControl.UpSpeak = msg;
            }
            this.upFace(tag, faces);
            return true;
        }
        return false;
    };
    RambleControl.prototype.checkSendMsg = function (value) {
        return true;
    };
    RambleControl.prototype.canKfNoReadTip = function () {
        return this.kfNoReadMsgList.length > 0 && ServerStorage.ins().getBitBool(ClientSetBit.kf_chat_tips) && crossBossControl.isOpen();
    };
    RambleControl.prototype.checkAllChatOpen = function (showMsg) {
        if (showMsg === void 0) { showMsg = true; }
        if (!this.allChatOpen && showMsg) {
            tipsControl.showTips(LangMgr.getValueByKey('chatCloseFunc'));
        }
        return this.allChatOpen;
    };
    RambleControl.prototype.checkCanSpeak = function () {
        return rambleControl.isCanSpeak();
    };
    RambleControl.prototype.chatLimit = function (type, msg, userId) {
        switch (type) {
            case 10 /* ciChannelKuafu */:
            case 7 /* ciChannelAll */:
                this.insertWorldChat(type, msg);
                break;
            case 3 /* ciChannelGuild */:
                this.insertGuildChat(msg);
                break;
            case 0 /* ciChannelSecret */:
                partnerControl.paserChatMsg(1, userId, DateUtils.formatServerTime(GameServer.serverTime), msg);
                partnerControl.dispatchFriendChange();
                break;
            case 8 /* ciChannelCamp */:
                this.insertCampChat(userId, msg);
                break;
        }
    };
    RambleControl.prototype.insertWorldChat = function (type, msg) {
        var role = heroControl.getSubRoleByIndex(0);
        var chatData = new RambleInfoVo;
        chatData.type = type;
        chatData.id = ActorControl.actorID;
        chatData.servId = GlobalModel.srvid;
        chatData.name = ActorControl.myName;
        chatData.job = role.job;
        chatData.sex = role.sex;
        chatData.vip = vipControl.lv;
        chatData.monthCard = 0;
        chatData.ladderLevel = 0;
        chatData.isFirst = 0;
        chatData.zsLevel = reincarnateControl.lv;
        chatData.lv = ActorControl.level;
        chatData.guild = unionControl.guildName;
        chatData.pointId = 0;
        chatData.str = msg;
        chatData.setNowTime();
        rambleControl.insertChatMsg(chatData);
    };
    RambleControl.prototype.insertGuildChat = function (msg) {
        var role = heroControl.getSubRoleByIndex(0);
        var guildData = new UnionMessageInfoVo;
        guildData.type = 1;
        guildData.roleId = ActorControl.actorID;
        guildData.name = ActorControl.myName;
        guildData.job = role.job;
        guildData.sex = role.sex;
        guildData.office = unionControl.myOffice;
        guildData.vipLevel = vipControl.lv;
        guildData.monthCard = 0;
        guildData.zsLevel = reincarnateControl.lv;
        guildData.lv = ActorControl.level;
        guildData.guildName = unionControl.guildName;
        guildData.str = msg;
        guildData.setNowTime();
        unionControl.addChatMsg(guildData);
        rambleControl.startInterval();
    };
    RambleControl.prototype.insertCampChat = function (userId, msg) {
        var chatData = new RambleCampVo;
        chatData.str = msg;
        chatData.type = userId;
        chatData.name = ActorControl.myName;
        chatData.servId = GlobalModel.srvid;
        chatData.setNowTime();
        copyControl.insertFbChat(chatData);
    };
    Object.defineProperty(RambleControl.prototype, "guildChatList", {
        get: function () {
            return unionControl.guildMessageInfoData;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RambleControl.prototype, "campChatList", {
        get: function () {
            return copyControl.chatCampDtList;
        },
        enumerable: true,
        configurable: true
    });
    RambleControl.prototype.initWorldChat = function (messages) {
        for (var i = 0; i < messages.length; i++) {
            var message = messages[i];
            this.insertWorldChatMessage(message);
        }
        this.chatListData.refresh();
        this.chatListData2.refresh();
    };
    RambleControl.prototype.initGuildChat = function (messages) {
        for (var i = 0; i < messages.length; i++) {
            var message = messages[i];
            this.insertGuildChatMessage(message);
        }
        this.guildChatList.refresh();
        this.chatListData2.refresh();
    };
    RambleControl.prototype.initSystemNotice = function (messages) {
        for (var i = 0; i < messages.length; i++) {
            var message = messages[i];
            this.insertSystemNoticeMessage(message);
        }
        this.systemListData.refresh();
        this.chatListData2.refresh();
    };
    RambleControl.prototype.addWorldChat = function (message) {
        if (message.type == 10 /* ciChannelKuafu */) {
            this.kfListData.addItem(message);
        }
        else {
            this.chatListData.addItem(message);
        }
        this.chatListData2.addItem(message);
    };
    RambleControl.prototype.addGuildChat = function (message) {
        this.guildChatList.addItem(message);
        this.chatListData2.addItem(message);
    };
    RambleControl.prototype.addCampChat = function (message) {
        this.campChatList.addItem(message);
        this.chatListData2.addItem(message);
    };
    RambleControl.prototype.addSystemNotice = function (message) {
        this.systemListData.addItem(message);
        this.chatListData2.addItem(message);
    };
    RambleControl.prototype.removeAllChatByType = function (type) {
        var len = this.chatListData2.length;
        for (var i = len - 1; i > -1; i--) {
            var message = this.chatListData2.getItemAt(i);
            if (message.type == type) {
                this.chatListData2.removeItemAt(i);
            }
        }
        if (type == 8 /* ciChannelCamp */ && this.campChatList) {
            this.campChatList.removeAll();
        }
    };
    RambleControl.prototype.insertWorldChatMessage = function (message) {
        if (message.type == 10 /* ciChannelKuafu */) {
            message = rambleBlackControl.checkIsBlack(message.id) ? null : this.insertItemToList(this.kfListData, message);
        }
        else {
            message = this.insertItemToList(this.chatListData, message);
        }
        if (message) {
            message = this.insertItemToList(this.chatListData2, message, false);
        }
        return message;
    };
    RambleControl.prototype.insertGuildChatMessage = function (message) {
        message = this.insertItemToList(this.guildChatList, message);
        if (message) {
            message = this.insertItemToList(this.chatListData2, message, false);
        }
        return message;
    };
    RambleControl.prototype.insertSystemNoticeMessage = function (message) {
        message = this.insertItemToList(this.systemListData, message);
        if (message) {
            message = this.insertItemToList(this.chatListData2, message, false);
        }
        return message;
    };
    RambleControl.prototype.binFunc = function (a, b) {
        return a.time < b.time ? -1 : a.time > b.time ? 1 : 0;
    };
    RambleControl.prototype.insertItemToList = function (list, message, state) {
        if (state === void 0) { state = true; }
        var source = list.source;
        var index = CommonUtils.searchIndex(source, message, this.binFunc);
        if (state) {
            for (var i = index - 1; i >= 0;) {
                var data = source[i];
                if (data.time != message.time) {
                    break;
                }
                if (data.type == message.type) {
                    if (message.str) {
                        if (data.str == message.str) {
                            return;
                        }
                    }
                    else if (message.content && data.content == message.content) {
                        return;
                    }
                }
                i -= 1;
            }
        }
        source.splice(index, -1, message);
        return message;
    };
    __decorate([
        up(0, [8 /* String */])
    ], RambleControl.prototype, "upGm", null);
    __decorate([
        up(1, [1 /* Byte */, 6 /* UInt */, 8 /* String */])
    ], RambleControl.prototype, "upChat", null);
    __decorate([
        down(1, ByteConst.RambleInfoVos.slice())
    ], RambleControl.prototype, "downNewChatMsg", null);
    __decorate([
        down(2)
    ], RambleControl.prototype, "downSystemInfo", null);
    __decorate([
        down(3, [0 /* Boolean */])
    ], RambleControl.prototype, "downIsSendSuccess", null);
    __decorate([
        down(4, [3 /* Int */, 3 /* Int */, 8 /* String */])
    ], RambleControl.prototype, "downSystemMessage", null);
    __decorate([
        down(5, [3 /* Int */])
    ], RambleControl.prototype, "downCannotSpeak", null);
    __decorate([
        down(6, [3 /* Int */])
    ], RambleControl.prototype, "downRemoveRoleChat", null);
    __decorate([
        down(8, [ByteConst.RambleInfoVos])
    ], RambleControl.prototype, "downAllChatMsg", null);
    __decorate([
        up(7, [1 /* Byte */, [3 /* Int */]])
    ], RambleControl.prototype, "upFace", null);
    RambleControl = __decorate([
        protocolsId(30 /* PROTOCOL_30 */)
    ], RambleControl);
    return RambleControl;
}(BaseSystem));
__reflect(RambleControl.prototype, "RambleControl");
var RambleCampVo = (function (_super) {
    __extends(RambleCampVo, _super);
    function RambleCampVo() {
        var _this = _super.call(this) || this;
        _this.type = 8 /* ciChannelCamp */;
        return _this;
    }
    RambleCampVo.prototype.initData = function (campType, servId, name, str, time) {
        this.campType = campType;
        this.servId = servId;
        this.name = name;
        this.str = str;
        this.str = RambleHlpVo.checkVMsg(this.str);
        this.setTime(time);
    };
    return RambleCampVo;
}(RambleBaseVo));
__reflect(RambleCampVo.prototype, "RambleCampVo");
var RambleEmojiRiceTextVo = (function (_super) {
    __extends(RambleEmojiRiceTextVo, _super);
    function RambleEmojiRiceTextVo(e) {
        var _this = _super.call(this) || this;
        _this.emojiMaxH = 0;
        _this.emojiSize = 1;
        _this.curHight = 0;
        _this.curForceY = 0;
        _this.curForceX = 0;
        _this.curLine = 1;
        _this._autoWrapLine = true;
        _this._fontSize = 16;
        _this._lineSpacing = 2;
        _this._textColor = 16777215;
        _this._emojiAlignment = 2 /* MIDDLE */;
        _this.useDpEmojiSize = false;
        _this.canLink = false;
        _this.outLineSpacing = 0;
        _this.EMOJI_INTERVAL = 3;
        _this.EMOJI_DATA = {
            "80": {
                width: 39,
                height: 21,
                soure: "xvip_v2_png",
                scale: 0.8
            },
            "81": {
                width: 53,
                height: 24,
                soure: "sxvip_v2_png",
                scale: 0.8
            }
        };
        _this.txtPool = [];
        _this.lineEmojiArr = [];
        _this.lineTextArr = [];
        if (e) {
            _this.addEventListener(egret.Event.ADDED_TO_STAGE, _this.onAddToStage, _this);
        }
        return _this;
    }
    RambleEmojiRiceTextVo.filterSpecEmojiStr = function (content) {
        if (!content) {
            return content;
        }
        return content.replace(/#80#/g, "#*#");
    };
    RambleEmojiRiceTextVo.prototype.startTouchBg = function () {
        if (!this.touchBg) {
            this.touchBg = new eui.Rect;
            this.addChild(this.touchBg);
        }
    };
    RambleEmojiRiceTextVo.prototype.onAddToStage = function (t) {
        this.removeEventListener(egret.Event.ADDED_TO_STAGE, this.onAddToStage, this);
        this.addEventListener(egret.Event.REMOVED_FROM_STAGE, this.onRemoveFromStage, this);
    };
    RambleEmojiRiceTextVo.prototype.onRemoveFromStage = function () {
        this.removeEventListener(egret.Event.REMOVED_FROM_STAGE, this.onAddToStage, this);
        this.addEventListener(egret.Event.ADDED_TO_STAGE, this.onAddToStage, this);
        this.reset();
    };
    Object.defineProperty(RambleEmojiRiceTextVo.prototype, "richText", {
        set: function (str) {
            this.reset();
            if (str) {
                var data = this.splitFace(str);
                if (!data.emojis) {
                    this.insertTxt(data.msgs[0]);
                    return;
                }
                var len = data.msgs.length;
                for (var i = 0; len > i; i++) {
                    this.insertTxt(data.msgs[i]);
                    if (data.emojis[i]) {
                        this.insertEmoji(data.emojis[i]);
                    }
                }
                this.invalidateLayoutY();
                if (this.touchBg) {
                    this.touchBg.graphics.clear();
                    this.touchBg.graphics.beginFill(0, 0);
                    this.touchBg.graphics.drawRect(0, 0, this.width, this.uHeight + this._lineSpacing + this.outLineSpacing);
                }
                this.height = this.uHeight;
            }
        },
        enumerable: true,
        configurable: true
    });
    RambleEmojiRiceTextVo.prototype.insertTxt = function (str) {
        if (str) {
            var textField = this.addText(str);
            if (!this.lineTextArr[this.curLine]) {
                this.lineTextArr[this.curLine] = [];
            }
            this.lineTextArr[this.curLine].push(textField);
            var line = this.curLine;
            if (this.lineTextArr[line]) {
                var curTextField = this.lineTextArr[line][this.lineTextArr[line].length - 1];
                if (curTextField.textWidth + curTextField.x > this.width) {
                    curTextField.width = this.width - curTextField.x;
                    curTextField.height = this._fontSize;
                    if (curTextField.width < this._fontSize) {
                        this.addPool(curTextField);
                        this.lineTextArr[this.curLine].splice(this.lineTextArr[this.curLine].indexOf(curTextField), 1);
                    }
                    if (!this._autoWrapLine) {
                        return;
                    }
                    this.invalidateLayoutY();
                    this.curLine++;
                    this.curForceX = 0;
                    this.curForceY += (this.emojiMaxH > this._fontSize ? this.emojiMaxH : this._fontSize) + this._lineSpacing;
                    this.emojiMaxH = 0;
                    var content = "";
                    var start = curTextField.width < this._fontSize ? 0 : 1;
                    for (var i = start; i < curTextField.numLines; i++) {
                        var elements = curTextField.$getLinesArr()[i].elements;
                        while (elements.length > 0) {
                            var element = elements.shift();
                            var href = element.style.href ? "|E:" + element.style.href.slice(6) : "";
                            var splitSymbol = href ? "&" : "|";
                            var color = element.style.textColor ? splitSymbol + ("C:" + element.style.textColor + "&T:") : "";
                            splitSymbol = color ? "&" : "|";
                            var underline = element.style.underline ? splitSymbol + "U:" : "";
                            var endSymbol = color || href ? "|" : "";
                            content += href + underline + color + element.text + endSymbol;
                        }
                    }
                    this.insertTxt(content);
                }
            }
        }
    };
    RambleEmojiRiceTextVo.prototype.addText = function (str) {
        var textField = this.getTxt();
        textField.verticalAlign = egret.VerticalAlign.TOP;
        textField.size = this._fontSize;
        var textElements = TextUtils.generateTextFlow1(str);
        if (textElements && !this.canLink) {
            var eventStr = "event:" + 8 /* linkItem */ + ",";
            for (var i = 0; i < textElements.length; i++) {
                var textElement = textElements[i];
                if (textElement.style && textElement.style.href && textElement.style.href.indexOf(eventStr) >= 0) {
                    this.canLink = true;
                    break;
                }
            }
        }
        textField.textFlow = textElements;
        textField.textColor = this._textColor;
        textField.width = textField.height = 0 / 0;
        textField.touchEnabled = true;
        textField.addEventListener(egret.TextEvent.LINK, this.onLink, this);
        this.addChild(textField);
        textField.x = this.curForceX;
        textField.y = this.curForceY;
        this.curForceX += textField.textWidth;
        this.curHight = this.curHight > textField.y + textField.textHeight ? this.curHight : textField.y + textField.textHeight;
        return textField;
    };
    RambleEmojiRiceTextVo.prototype.insertEmoji = function (str) {
        var emojiId = str.replace(RambleEmojiRiceTextVo.CHAT_EMOJI_ID, "");
        var emojiConfig = this.getEmojiInfo(+emojiId);
        if (!emojiConfig) {
            this.insertTxt(str);
            return;
        }
        if (!(this.curForceX + this.EMOJI_INTERVAL > this.width)) {
            var soure = emojiConfig.soure ? emojiConfig.soure : "emoji_" + emojiId + "_png";
            if (RambleEmojiRiceTextVo.VIP_IMG == str) {
                emojiConfig.width = 45;
            }
            if (this.useDpEmojiSize && emojiConfig.scale) {
                this.emojiSize = emojiConfig.scale;
            }
            var emojiScaleWidth = emojiConfig.width * this.emojiSize;
            var emojiScaleHeight = emojiConfig.height * this.emojiSize;
            if (this.emojiMaxH < emojiScaleHeight) {
                this.emojiMaxH = emojiScaleHeight;
            }
            var offsetWidth = 50;
            if (this.curForceX + emojiScaleWidth > this.width + offsetWidth) {
                if (!this._autoWrapLine) {
                    return;
                }
                this.invalidateLayoutY();
                this.curLine++;
                this.curForceX = 0;
                this.curForceY += this.emojiMaxH + this._lineSpacing;
                this.emojiMaxH = 0;
            }
            var emoji = this.addEmoji(soure);
            if (emoji) {
                if (!this.lineEmojiArr[this.curLine]) {
                    this.lineEmojiArr[this.curLine] = {};
                }
                this.lineEmojiArr[this.curLine][emoji.hashCode] = emoji;
                emoji.width = emojiScaleWidth;
                emoji.height = emojiScaleHeight;
                emoji.y = this.getEmojiY(emojiScaleHeight);
                emoji.x = this.curForceX + this.EMOJI_INTERVAL;
                this.curHight = this.curHight > emoji.y + emojiScaleHeight ? this.curHight : emoji.y + emojiScaleHeight;
                this.curForceX = emoji.x + emojiScaleWidth;
            }
        }
    };
    RambleEmojiRiceTextVo.prototype.addEmoji = function (resName) {
        var emoji = ObjectPool.pop("RambleEmojiVo");
        emoji.setData(resName);
        emoji.scaleX = emoji.scaleY = this.emojiSize;
        this.addChild(emoji);
        return emoji;
    };
    Object.defineProperty(RambleEmojiRiceTextVo.prototype, "autoWrapLine", {
        set: function (value) {
            this._autoWrapLine = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RambleEmojiRiceTextVo.prototype, "emojiAlignment", {
        set: function (value) {
            this._emojiAlignment = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RambleEmojiRiceTextVo.prototype, "textColor", {
        set: function (value) {
            this._textColor = value;
            for (var key in this.lineTextArr) {
                if (this.lineTextArr[key]) {
                    var lineTexts = this.lineTextArr[key];
                    for (var i = 0; i < lineTexts.length; i++) {
                        var lineText = lineTexts[i];
                        lineText.textColor = value;
                    }
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RambleEmojiRiceTextVo.prototype, "size", {
        set: function (value) {
            this._fontSize = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RambleEmojiRiceTextVo.prototype, "lineSpacing", {
        set: function (value) {
            this._lineSpacing = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RambleEmojiRiceTextVo.prototype, "uHeight", {
        get: function () {
            return this.curHight > this.height ? this.curHight : this.height;
        },
        enumerable: true,
        configurable: true
    });
    RambleEmojiRiceTextVo.prototype.setEmojiSize = function (value) {
        this.emojiSize = value;
    };
    RambleEmojiRiceTextVo.prototype.reset = function () {
        this.emojiMaxH = 0;
        this.curHight = 20;
        this.curForceX = 0;
        this.curForceY = 0;
        this.curLine = 1;
        this.height = 20;
        this.canLink = false;
        this.removeText();
        this.removeEmoji();
    };
    RambleEmojiRiceTextVo.prototype.removeText = function () {
        for (var key in this.lineTextArr) {
            var lineTexts = this.lineTextArr[key];
            for (var i = 0; i < lineTexts.length; i++) {
                var lineText = lineTexts[i];
                this.addPool(lineText);
            }
            this.lineTextArr[key] = [];
        }
        this.lineTextArr = [];
    };
    RambleEmojiRiceTextVo.prototype.removeEmoji = function () {
        for (var i in this.lineEmojiArr) {
            if (this.lineEmojiArr[i]) {
                for (var j in this.lineEmojiArr[i]) {
                    var lineEmoji = this.lineEmojiArr[i][j];
                    DisplayUtils.removeFromParent(lineEmoji);
                    lineEmoji.reset();
                    ObjectPool.push(lineEmoji);
                }
                this.lineEmojiArr[i] = null;
            }
        }
        this.lineEmojiArr = [];
    };
    RambleEmojiRiceTextVo.prototype.getEmojiInfo = function (id) {
        return DataCenter.ins().RambleEmojiConfig && DataCenter.ins().RambleEmojiConfig[id]
            ? DataCenter.ins().RambleEmojiConfig[id] : this.EMOJI_DATA[id] ? this.EMOJI_DATA[id] : null;
    };
    RambleEmojiRiceTextVo.prototype.getEmojiY = function (value) {
        var size = value - this._fontSize;
        switch (this._emojiAlignment) {
            case 1 /* TOP */:
                return this.curForceY;
            case 2 /* MIDDLE */:
                return this.curForceY - (size >> 1);
            case 3 /* BOTTOM */:
                return this.curForceY - size;
            default:
                return this.curForceY;
        }
    };
    RambleEmojiRiceTextVo.prototype.splitFace = function (str) {
        return {
            emojis: str.match(RambleEmojiRiceTextVo.CHAT_EMOJI),
            msgs: str.split(RambleEmojiRiceTextVo.CHAT_EMOJI)
        };
    };
    RambleEmojiRiceTextVo.prototype.invalidateLayoutY = function () {
        if (this.lineTextArr[this.curLine]) {
            var lineTexts = this.lineTextArr[this.curLine];
            for (var i = 0; i < lineTexts.length; i++) {
                var lineText = lineTexts[i];
                lineText.y = this.curForceY;
            }
        }
        if (this.lineEmojiArr[this.curLine]) {
            for (var key in this.lineEmojiArr[this.curLine]) {
                var lineEmoji = this.lineEmojiArr[this.curLine][key];
                this.emojiMaxH > lineEmoji.height;
                lineEmoji.y = this.getEmojiY(lineEmoji.height);
            }
        }
    };
    RambleEmojiRiceTextVo.prototype.onLink = function (e) {
        if (this.canLink) {
            LinkUtils.textLink(e.text);
            RambleEmojiRiceTextVo.isLinkRich = true;
            TimerMgr.ins().once(60, function () {
                RambleEmojiRiceTextVo.isLinkRich = false;
            }, this);
        }
    };
    RambleEmojiRiceTextVo.prototype.getTxt = function () {
        return this.txtPool.pop() || new egret.TextField;
    };
    RambleEmojiRiceTextVo.prototype.addPool = function (target) {
        target.removeEventListener(egret.TextEvent.LINK, this.onLink, this);
        DisplayUtils.removeFromParent(target);
        if (this.txtPool.indexOf(target) < 0) {
            this.txtPool.push(target);
        }
    };
    RambleEmojiRiceTextVo.CHAT_EMOJI = /#[0-9][0-9]#/g;
    RambleEmojiRiceTextVo.CHAT_EMOJI_ID = /#/g;
    RambleEmojiRiceTextVo.isLinkRich = false;
    RambleEmojiRiceTextVo.EMOJI_MAX_ID = 36;
    RambleEmojiRiceTextVo.MAX_ID = 100;
    RambleEmojiRiceTextVo.VIP_IMG = "#80#";
    RambleEmojiRiceTextVo.SVIP_IMG = "#81#";
    return RambleEmojiRiceTextVo;
}(egret.Sprite));
__reflect(RambleEmojiRiceTextVo.prototype, "RambleEmojiRiceTextVo");
var RambleEmojiVo = (function (_super) {
    __extends(RambleEmojiVo, _super);
    function RambleEmojiVo() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RambleEmojiVo.prototype.setData = function (resName, isMc) {
        if (isMc === void 0) { isMc = false; }
        this.reset();
        if (isMc) {
            if (!this.emojiMc) {
                this.emojiMc = new GameMovieClip;
            }
            this.emojiMc.playFile(PATH_EFF + resName, -1);
            this.addChild(this.emojiMc);
        }
        else {
            if (!this.emojiImg) {
                this.emojiImg = new eui.Image;
            }
            this.emojiImg.source = resName;
            this.addChild(this.emojiImg);
        }
    };
    RambleEmojiVo.prototype.reset = function () {
        if (this.emojiImg) {
            this.emojiImg.source = "";
            DisplayUtils.removeFromParent(this.emojiImg);
        }
        else if (this.emojiMc) {
            this.emojiMc.stop();
            DisplayUtils.removeFromParent(this.emojiMc);
        }
    };
    RambleEmojiVo.prototype.dispose = function () {
        this.reset();
    };
    return RambleEmojiVo;
}(egret.Sprite));
__reflect(RambleEmojiVo.prototype, "RambleEmojiVo");
var RambleHlpVo = (function () {
    function RambleHlpVo() {
    }
    RambleHlpVo.checkVMsg = function (target, e) {
        return target;
    };
    RambleHlpVo.regInputEvt = function (target, btn, hasFace) {
        if (target) {
            var code = target instanceof eui.TextInput ? target.textDisplay.hashCode : target.hashCode;
            this.sourceObj[code] = {};
            this.sourceObj[code].input = target;
            this.sourceObj[code].btn = btn;
            this.sourceObj[code].hasFace = hasFace;
            target.addEventListener(egret.FocusEvent.FOCUS_IN, this.inputIn, this);
            target.addEventListener(egret.Event.REMOVED_FROM_STAGE, this.onRemovedFromStage, this);
        }
        else {
            debug.log(LangMgr.getValueByKey('chatDescTips1'), target);
        }
    };
    RambleHlpVo.inputIn = function (e) {
        if (!(document.body.scrollTop > 0)) {
            var hashCode = e.target.hashCode;
            if (this.sourceObj[hashCode]) {
                UIMgr.ins().open(RambleInputView, this.sourceObj[hashCode].input, this.sourceObj[hashCode].btn, this.sourceObj[hashCode].hasFace);
            }
            else {
                debug.log(LangMgr.getValueByKey('chatDescTips2'), e.target);
            }
        }
    };
    RambleHlpVo.onRemovedFromStage = function (e) {
        var hashCode = e.target instanceof eui.TextInput ? e.target.textDisplay.hashCode : e.target.hashCode;
        if (this.sourceObj[hashCode]) {
            this.sourceObj[hashCode].input.removeEventListener(egret.FocusEvent.FOCUS_IN, this.inputIn, this);
            this.sourceObj[hashCode].input.removeEventListener(egret.Event.REMOVED_FROM_STAGE, this.onRemovedFromStage, this), delete this.sourceObj[hashCode];
        }
    };
    RambleHlpVo.sourceObj = {};
    __decorate([
        callLater
    ], RambleHlpVo, "inputIn", null);
    return RambleHlpVo;
}());
__reflect(RambleHlpVo.prototype, "RambleHlpVo");
var RambleInfoVo = (function (_super) {
    __extends(RambleInfoVo, _super);
    function RambleInfoVo() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = 0;
        _this.id = 0;
        _this.servId = 0;
        _this.name = "";
        _this.job = 0;
        _this.sex = 0;
        _this.vip = 0;
        _this.monthCard = 0;
        _this.ladderLevel = 0;
        _this.pointId = 0;
        _this.str = "";
        _this.isFirst = 0;
        _this.zsLevel = 0;
        _this.lv = 0;
        _this.guild = "";
        _this.titleId = 0;
        return _this;
    }
    RambleInfoVo.prototype.init = function (datas) {
        this.type = datas[0];
        this.id = datas[1];
        this.servId = datas[2];
        this.name = datas[3];
        this.job = datas[4];
        this.sex = datas[5];
        this.vip = datas[6];
        this.monthCard = datas[7];
        this.ladderLevel = datas[8];
        this.isFirst = datas[9];
        this.zsLevel = datas[10];
        this.lv = datas[11];
        this.guild = datas[12];
        this.pointId = datas[13];
        this.str = datas[14];
        this.str = RambleHlpVo.checkVMsg(this.str, this.type);
        this.setTime(datas[15]);
    };
    return RambleInfoVo;
}(RambleBaseVo));
__reflect(RambleInfoVo.prototype, "RambleInfoVo");
var RambleKfBlackVo = (function () {
    function RambleKfBlackVo() {
        this.index = 1;
    }
    RambleKfBlackVo.prototype.init = function (datas) {
        this.roleId = datas[0];
        this.serId = datas[1];
        this.roleName = datas[2];
        this.job = datas[3];
        this.sex = datas[4];
        this.zsLevel = datas[5];
        this.level = datas[6];
        this.time = datas[7];
    };
    return RambleKfBlackVo;
}());
__reflect(RambleKfBlackVo.prototype, "RambleKfBlackVo");
var RambleSystemVo = (function (_super) {
    __extends(RambleSystemVo, _super);
    function RambleSystemVo(type, str) {
        var _this = _super.call(this) || this;
        _this.type = type;
        _this.str = str;
        _this.setNowTime();
        return _this;
    }
    return RambleSystemVo;
}(RambleBaseVo));
__reflect(RambleSystemVo.prototype, "RambleSystemVo");
var RambleEmojiView = (function (_super) {
    __extends(RambleEmojiView, _super);
    function RambleEmojiView() {
        var _this = _super.call(this) || this;
        _this.uilayer = GameLayer.POPUP;
        return _this;
    }
    RambleEmojiView.prototype.initUI = function () {
        _super.prototype.initUI.call(this);
        this.skinName = "RambleEmojiViewSkin";
    };
    RambleEmojiView.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.addEventTouchTap(this.emoji, this.onChooseEmoji);
        this.addEventTouchTap(this.closeBg, this.onTouch);
        this.chatInput = param[0];
    };
    RambleEmojiView.prototype.close = function () {
        this.chatInput = null;
    };
    RambleEmojiView.prototype.onChooseEmoji = function (e) {
        if (e.target instanceof eui.Image) {
            if (!this.chatInput) {
                UIMgr.ins().close(this);
                return;
            }
            var name = e.target.name;
            var emojiName = name.replace(/emoji_/g, "");
            if (this.chatInput.text == LangMgr.getValueByKey('customChatContent')) {
                this.chatInput.text = "#" + emojiName + "#";
            }
            else {
                this.chatInput.text = this.chatInput.text.concat("#" + emojiName + "#");
            }
            UIMgr.ins().close(this);
        }
    };
    RambleEmojiView.prototype.onTouch = function (e) {
        UIMgr.ins().close(this);
    };
    return RambleEmojiView;
}(BaseEuiView));
__reflect(RambleEmojiView.prototype, "RambleEmojiView");
var RambleInputView = (function (_super) {
    __extends(RambleInputView, _super);
    function RambleInputView() {
        var _this = _super.call(this) || this;
        _this.historyMsg = "";
        _this.skinName = "RambleInputViewSkin";
        _this.uilayer = GameLayer.POPUP;
        return _this;
    }
    RambleInputView.prototype.open = function (input, btn, hashCode) {
        this.sourceInput = input;
        this.sourceSendBtn = btn;
        if (btn) {
            this.sendBtn.label = this.sourceSendBtn.label;
        }
        else {
            this.sendBtn.visible = false;
        }
        this.addEventChange(input, this.onChange);
        this.addEventTouchTap(this.chatInput, this.onTouch);
        this.addEventTouchTap(this.sendBtn, this.onTouch);
        this.addEventTouchTap(this.faceBtn, this.onTouch);
        this.addEventFocusOut(this.sourceInput, this.onSFocusOut);
        this.addEventFocusOut(this.chatInput, this.onFocusOut);
        this.addEventFocusIn(this.chatInput, this.onFocusIn);
        this.chatInput.text = input.text;
        this.historyMsg = input.text;
        this.isSourceFocus = true;
        btn || DisplayUtils.removeFromParent(this.sendBtn);
        hashCode || DisplayUtils.removeFromParent(this.faceBtn);
        GameLayer.POPUP.parent || GameLayer.MAIN1.addChild(this);
        this.showFocus();
        egret.Tween.get(this.lineImg, {
            loop: true
        }).wait(400).to({
            visible: false
        }).wait(400).to({
            visible: true
        });
    };
    RambleInputView.prototype.close = function () {
        this.removeEventChange(this.sourceInput, this.onChange);
        this.removeEventTouchTap(StageUtils.ins().getStage(), this.onTouch);
        this.removeEventFocusOut(this.sourceInput, this.onSFocusOut);
        this.removeEventFocusOut(this.chatInput, this.onFocusOut);
        this.removeEventFocusIn(this.chatInput, this.onFocusIn);
        egret.Tween.removeTweens(this.lineImg);
        TimerMgr.ins().removeAll(this.sourceInput);
    };
    RambleInputView.prototype.onFocusOut = function () {
        UIMgr.ins().close(RambleInputView);
    };
    RambleInputView.prototype.onSFocusOut = function () {
        TimerMgr.ins().once(210, function () {
            UIMgr.ins().close(RambleInputView);
        }, this.sourceInput);
    };
    RambleInputView.prototype.onFocusIn = function () {
        this.removeEventFocusOut(this.sourceInput, this.onSFocusOut);
        TimerMgr.ins().removeAll(this.sourceInput);
    };
    RambleInputView.prototype.onChange = function () {
        if (this.isSourceFocus) {
            this.chatInput.text = this.sourceInput.text;
            this.chatInput.$invalidateTextField();
            this.showFocus();
        }
        else {
            this.sourceInput.text = this.chatInput.text;
        }
    };
    RambleInputView.prototype.showFocus = function () {
        if (this.sourceInput instanceof eui.TextInput) {
            this.lineImg.x = this.sourceInput.textDisplay.textWidth + 25;
        }
        else if (this.sourceInput instanceof eui.EditableText) {
            this.lineImg.x = this.sourceInput.textWidth + 25;
        }
    };
    RambleInputView.prototype.onTouch = function (t) {
        switch (t.target) {
            case this.chatInput:
                egret.Tween.removeTweens(this.lineImg);
                this.lineImg.visible = false;
                this.isSourceFocus = false;
                this.addEventChange(this.chatInput, this.onChange);
                break;
            case this.sendBtn:
                this.sourceSendBtn.dispatchEventWith(egret.TouchEvent.TOUCH_TAP, true);
                break;
            case this.faceBtn:
                UIMgr.ins().open(RambleEmojiView, this.sourceInput);
                break;
        }
    };
    RambleInputView.openCheck = function () {
        return DeviceUtils.IsIPhone;
    };
    return RambleInputView;
}(BaseEuiView));
__reflect(RambleInputView.prototype, "RambleInputView");
var RamblePlayerTipsView = (function (_super) {
    __extends(RamblePlayerTipsView, _super);
    function RamblePlayerTipsView() {
        var _this = _super.call(this) || this;
        _this.currId = 0;
        _this.serverId = 0;
        _this.skinName = "RamblePlayerTipsViewSkin";
        _this.uilayer = GameLayer.POPUP;
        return _this;
    }
    RamblePlayerTipsView.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.data = param[0];
        if (!this.data) {
            UIMgr.ins().close(RamblePlayerTipsView);
            return;
        }
        this.currId = 0;
        this.addEventTouchTap(this.btnIgnore, this.onTap);
        this.addEventTouchTap(this.btnChat, this.onTap);
        this.addEventTouchTap(this.btnFriend, this.onTap);
        this.addEventTouchTap(this.btnInfo, this.onTap);
        this.addEventTouchTap(this.rect, this.onTap);
        this.addCustomEvent(478 /* PLAYER_RESULT */, this.openOtherPlayerView);
        this.initView();
    };
    RamblePlayerTipsView.prototype.onTap = function (e) {
        switch (e.target) {
            case this.btnChat:
                if (!rambleControl.checkAllChatOpen()) {
                    return;
                }
                var index = partnerControl.getFriendIndex(this.currId);
                if (index != -1) {
                    UIMgr.ins().close(this);
                    partnerControl.selectedRoleId = this.currId;
                    UIMgr.ins().open("PartnerBgView", 0);
                }
                else {
                    tipsControl.showTips(LangMgr.getValueByKey('chatTips1'));
                }
                break;
            case this.btnInfo:
                rankOtherUserControl.upFindPlayer(this.currId, this.serverId);
                break;
            case this.btnIgnore:
                if (!this.data) {
                    return;
                }
                if (this.data.servId && GlobalModel.srvid != this.data.servId) {
                    if (DataCenter.ins().RambleConstConfig.crossShieldListSize <= rambleBlackControl.getBlackList().length) {
                        warnControl.show(LangMgr.getValueByKey("chatBlackMsg1"), function () {
                            UIMgr.ins().open("PartnerBgView", 3, 1);
                        }, this);
                    }
                    else if (rambleBlackControl.checkIsBlack(this.data.roleId)) {
                        tipsControl.showTips(LangMgr.getValueByKey("chatBlackMsg2"));
                    }
                    else {
                        rambleBlackControl.upAddBlackRole(this.data);
                        tipsControl.showTips(LangMgr.getValueByKey("chatBlackMsg3"));
                        UIMgr.ins().close(this);
                    }
                }
                else {
                    partnerControl.upAddBlackList(this.currId, this.data.name);
                }
                break;
            case this.btnFriend:
                partnerControl.upAddFriend(this.currId, this.data.name);
                break;
            case this.rect:
                UIMgr.ins().close(RamblePlayerTipsView);
                break;
        }
    };
    RamblePlayerTipsView.prototype.initView = function () {
        if (CommonFun.instanceofByName(this.data, "PartnerVo")) {
            var data = this.data;
            this.labelName.text = data.name;
            if (data.zs) {
                this.labelLv.text = LangMgr.getValueByKey('numberRotation', data.zs) + LangMgr.getValueByKey('numberLevel', data.lv);
            }
            else {
                this.labelLv.text = LangMgr.getValueByKey('numberLevel', this.data.lv);
            }
            this.labelGuild.text = data.guildName;
            this.imgBg.source = RambleListItemRenderer.HEAD_BG[data.sex];
            this.imgHead.source = "head_" + data.job + data.sex;
            this.currId = data.id;
            this.serverId = 0;
        }
        else if (this.data instanceof UnionMemberInfoVo) {
            this.labelName.text = this.data.name;
            if (this.data.zsLevel) {
                this.labelLv.text = LangMgr.getValueByKey('numberRotation', this.data.zsLevel) + LangMgr.getValueByKey('numberLevel', this.data.level);
            }
            else {
                this.labelLv.text = LangMgr.getValueByKey('numberLevel', this.data.level);
            }
            this.labelGuild.text = unionControl.guildName ? unionControl.guildName : "";
            this.imgBg.source = RambleListItemRenderer.HEAD_BG[this.data.sex];
            this.imgHead.source = "head_" + this.data.job + this.data.sex;
            this.currId = this.data.roleID;
            this.serverId = 0;
        }
        else if (this.data instanceof UnionMessageInfoVo) {
            this.labelName.text = this.data.name;
            if (this.data.zsLevel) {
                this.labelLv.text = LangMgr.getValueByKey('numberRotation', this.data.zsLevel) + LangMgr.getValueByKey('numberLevel', this.data.lv);
            }
            else {
                this.labelLv.text = LangMgr.getValueByKey('numberLevel', this.data.lv);
            }
            this.labelGuild.text = this.data.guildName;
            this.imgBg.source = RambleListItemRenderer.HEAD_BG[this.data.sex];
            this.imgHead.source = "head_" + this.data.job + this.data.sex;
            this.currId = this.data.roleId;
            this.serverId = 0;
        }
        else {
            this.labelName.text = this.data.name;
            if (this.data.zsLevel) {
                this.labelLv.text = LangMgr.getValueByKey('numberRotation', this.data.zsLevel) + LangMgr.getValueByKey('numberLevel', this.data.lv);
            }
            else {
                this.labelLv.text = LangMgr.getValueByKey('numberLevel', this.data.lv);
            }
            this.labelGuild.text = this.data.guild;
            this.imgBg.source = RambleListItemRenderer.HEAD_BG[this.data.sex];
            this.imgHead.source = "head_" + this.data.job + this.data.sex;
            this.currId = this.data.id;
            this.serverId = this.data.servId ? this.data.servId : 0;
        }
        this.btnInfo.enabled = !crossFieldControl.isCrossServer;
        if (this.data.servId) {
            this.btnChat.enabled = this.btnFriend.enabled = !crossFieldControl.isCrossServer;
        }
    };
    /**
     * 查看角色界面
     */
    RamblePlayerTipsView.prototype.openOtherPlayerView = function (otherPlayerData) {
        UIMgr.ins().close(this);
        UIMgr.ins().close("PartnerBgView");
        var view = UIMgr.ins().open("RankRoleView", otherPlayerData);
        if (crossFieldControl.isCross) {
            view.hideEx(2);
        }
    };
    return RamblePlayerTipsView;
}(BaseEuiView));
__reflect(RamblePlayerTipsView.prototype, "RamblePlayerTipsView");
var RambleTipsView = (function (_super) {
    __extends(RambleTipsView, _super);
    function RambleTipsView() {
        var _this = _super.call(this) || this;
        _this.showOver = false;
        _this.skinName = "RambleTipsViewSkin";
        return _this;
    }
    RambleTipsView.prototype.setData = function (msg) {
        this.lab.textFlow = TextUtils.generateTextFlow(msg.str);
        this.setshowTime();
    };
    RambleTipsView.prototype.setshowTime = function () {
        if (!this.showOver) {
            TimerMgr.ins().remove(this.showOverInfo, this);
        }
        TimerMgr.ins().doTimer(5000, 1, this.showOverInfo, this);
    };
    RambleTipsView.prototype.showOverInfo = function () {
        this.showOver = true;
        DisplayUtils.removeFromParent(this);
    };
    return RambleTipsView;
}(eui.Component));
__reflect(RambleTipsView.prototype, "RambleTipsView");
var RambleUIView = (function (_super) {
    __extends(RambleUIView, _super);
    function RambleUIView() {
        var _this = _super.call(this) || this;
        _this.exclusionWins = [];
        return _this;
    }
    return RambleUIView;
}(RambleMainView));
__reflect(RambleUIView.prototype, "RambleUIView");
var RambleView = (function (_super) {
    __extends(RambleView, _super);
    function RambleView() {
        var _this = _super.call(this) || this;
        _this.cruIndex = 0;
        _this.fistOpenGuild = true;
        /** 界面是否展开 */
        _this.isStretch = false;
        _this.curTabType = [];
        _this._curTabType = 0 /* all */;
        _this.uilayer = GameLayer.POPUP;
        _this.isTopLevel = true;
        _this.canDestroy = false;
        return _this;
    }
    RambleView.prototype.initUI = function () {
        _super.prototype.initUI.call(this);
        this.skinName = "RambleViewSkin";
        this.defaultText = LangMgr.getValueByKey('customZx');
        this.chatInput.maxChars = 30;
        this.input.maxChars = 100;
        this.tabData = new eui.ArrayCollection();
        this.tab.dataProvider = this.tabData;
        this.chatList.touchEnabled = false;
    };
    RambleView.prototype.isShowWorld = function () {
        return !crossFieldControl.isCrossServer;
    };
    RambleView.prototype.refTab = function () {
        if (copyControl.isFBChatChannle()) {
            this.curTabType = [3 /* team */];
            this.tab.horizontalCenter = 0;
        }
        else {
            if (this.isShowWorld()) {
                if (!SwitchMgr.ins().checkOpen(1001 /* CLOSE_KFCHAT */) && crossBossControl.isOpen() && GameServer.smallKFServOpenDay) {
                    this.curTabType = [0 /* all */, 1 /* world */, 2 /* kuafu */, 4 /* guild */, 5 /* system */];
                }
                else {
                    this.curTabType = [0 /* all */, 1 /* world */, 4 /* guild */, 5 /* system */];
                }
            }
            else {
                this.curTabType = [0 /* all */, 2 /* kuafu */, 4 /* guild */, 5 /* system */];
                this.tab.horizontalCenter = 0;
            }
        }
        var arr = [];
        for (var i = 0; i < this.curTabType.length; i++) {
            var tabType = this.curTabType[i];
            var tabText = LangMgr.getValueByKey("chatMenu" + tabType);
            arr.push(tabText);
        }
        this.tabData.replaceAll(arr);
        this.tab.validateNow();
        for (var i = 0; i < this.curTabType.length; i++) {
            var tabItem = this.tab.getVirtualElementAt(i);
            if (tabItem) {
                tabItem["redPoint"].visible = false;
            }
        }
    };
    RambleView.prototype.getChatType = function (index) {
        return this.curTabType[index];
    };
    Object.defineProperty(RambleView.prototype, "curType", {
        get: function () {
            return this.curTabType[this.cruIndex];
        },
        enumerable: true,
        configurable: true
    });
    RambleView.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        if (this.input.text.length == 0) {
            this.input.text = this.defaultText;
            this.input.textColor = 0x6C6C6C;
        }
        else {
            this.input.textColor = 0xDFD1B5;
        }
        this.addEventTouchTap(this.faceBtn, this.onTap);
        this.addEventTouchTap(this.chatList, this.onListTap);
        this.addEventTouchTap(this.upBtn, this.onTap);
        this.addEventTouchTap(this.closeBtn0, this.onTap);
        this.addEventTouchTap(this.sendBtn, this.onTap);
        this.addEventTouchTap(this.allReceiveBtn, this.onTap);
        this.addCustomEvent(226 /* RAMBLE_NEW_MSG */, this.getNewOne);
        this.addCustomEvent(643 /* RAMBLE_SEND_INFO_SUCCESS */, this.textInOn);
        this.addEventChange(this.tab, this.selectIndexChange);
        this.addEventChanging(this.tab, this.checkIsOpen);
        this.addEventTouchTap(this.sendBtn0, this.onTap);
        this.addCustomEvent(644 /* GET_NEW_UNION_MESSAGE */, this.getNewOneGuild);
        this.addCustomEvent(30 /* UNION_ALL_INFO */, this.updataList);
        this.addCustomEvent(216 /* EMAIL_DETAIL */, this.setOpenMail);
        this.addCustomEvent(215 /* EMAIL_DATA */, this.onSendMail);
        this.addCustomEvent(12 /* UNION_QUIT */, this.updateMsgRedPoint);
        this.addCustomEvent(353 /* ENTER_MAP */, this.updateMsgRedPoint);
        this.addEventTouchTap(this.chatList, this.onSendMail);
        this.addEventTouchTap(this.unReadGroup, this.refListBottom);
        this.addEventFocusIn(this.chatInput, this.textInOn);
        this.addEventFocusIn(this.input, this.updateInput);
        this.addEventChangeStart(this.barList, this.scrollChangeStart);
        this.addEventChangeEnd(this.barList, this.scrollChangeEnd);
        this.refTab();
        var index = param[0];
        if (index == undefined) {
            index = this._curTabType;
        }
        for (var i = 0; i < this.curTabType.length; i++) {
            if (index == this.curTabType[i]) {
                this.cruIndex = i;
                break;
            }
        }
        if (this.curType == 4 /* guild */) {
            if (unionControl.guildID) {
                if (this.curType > 4 /* guild */ || copyControl.isFBChatChannle()) {
                    this.cruIndex = 0;
                }
            }
            else {
                this.cruIndex = 0;
            }
        }
        if (this.cruIndex == undefined || this.cruIndex >= this.curTabType.length) {
            this.cruIndex = 0;
        }
        this.backSelect(this.cruIndex);
        this.selectIndexChange(null);
        RambleHlpVo.regInputEvt(this.chatInput, this.sendBtn, true);
    };
    RambleView.prototype.close = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.removeEventFocusIn(this.chatInput, this.textInOn);
        this.removeEventFocusIn(this.input, this.updateInput);
        this.removeEventChangeStart(this.barList, this.scrollChangeStart);
        this.removeEventChangeEnd(this.barList, this.scrollChangeEnd);
        WatcherUtil.removeFromArrayCollection(rambleControl.chatListData);
        WatcherUtil.removeFromArrayCollection(unionControl.guildMessageInfoData);
        WatcherUtil.removeFromArrayCollection(rambleControl.systemListData);
        WatcherUtil.removeFromArrayCollection(this.tab.dataProvider);
        this.chatList.dataProvider = null;
        this.isStopRef = false;
    };
    RambleView.prototype.updateInput = function () {
        if (this.input.text == this.defaultText) {
            this.input.text = "";
            this.input.textColor = 0xDFD1B5;
        }
    };
    RambleView.prototype.checkIsOpen = function (e) {
        var tab = e.target;
        if (this.getChatType(tab.selectedIndex) == 4 /* guild */ && !unionControl.guildID) {
            tipsControl.showTips(LangMgr.getValueByKey('customFristJoin'));
            e.preventDefault();
        }
    };
    RambleView.prototype.selectIndexChange = function (e) {
        this.oldChangle = this.cruIndex;
        this.cruIndex = this.tab.selectedIndex;
        this._curTabType = this.curType;
        this.autoStopRefStatus(false);
        this.updataList(true);
        if (this.curType == 4 /* guild */ && this.fistOpenGuild) {
            this.fistOpenGuild = false;
            unionControl.getAllGuildMessage();
        }
        if (this.curType == 2 /* kuafu */) {
            rambleControl.kfNoReadMsgList = [];
        }
    };
    RambleView.prototype.backSelect = function (id) {
        this.tab.selectedIndex = id;
        this._curTabType = this.curType;
    };
    /** 点击请求一个邮件详情 */
    RambleView.prototype.onSendMail = function (e) {
        if (e && this.curType == 7 /* mail */) {
            var item = e.target.parent;
            if (item) {
                var mailData = item.data;
                if (mailData) {
                    emailUserControl.upMailContentData(mailData.handle);
                }
            }
        }
    };
    /** 更新邮件状态 */
    RambleView.prototype.setOpenMail = function (mailData) {
        if (this.curType == 7 /* mail */) {
            for (var i = 0; i < this.chatList.numChildren; i++) {
                var item = this.chatList.getChildAt(i);
                if (item.data.handle == mailData.handle) {
                    item.data = mailData;
                    break;
                }
            }
        }
    };
    /** 更新list列表 */
    RambleView.prototype.updataList = function (barChange) {
        if (barChange === void 0) { barChange = false; }
        var listData;
        switch (this.curType) {
            case 0 /* all */://综合
                this.currentState = 'all';
                this.validateNow();
                this.chatList.itemRenderer = RambleListItem3Renderer;
                listData = rambleControl.chatListData2;
                break;
            case 1 /* world */: //世界
            case 2 /* kuafu */: //跨服
            case 3 /* team */://组队
                this.currentState = 'world';
                this.validateNow();
                this.chatList.itemRendererSkinName = "RambleListItemRendererSkin";
                this.chatList.itemRenderer = RambleListItemRenderer;
                switch (this.curType) {
                    case 1 /* world */:
                        listData = rambleControl.chatListData;
                        break;
                    case 2 /* kuafu */:
                        listData = rambleControl.kfListData;
                        break;
                    case 3 /* team */:
                        listData = copyControl.chatCampDtList;
                        break;
                }
                break;
            case 4 /* guild */://公会
                this.currentState = 'guild';
                this.validateNow();
                this.chatList.itemRendererSkinName = "RambleListItemRendererSkin";
                this.chatList.itemRenderer = RambleGuildItemRenderer;
                unionControl.refTimeOutList();
                listData = unionControl.guildMessageInfoData;
                break;
            case 5 /* system */://系统
                this.currentState = 'sys';
                this.validateNow();
                this.chatList.itemRenderer = RambleSystemItemRenderer;
                listData = rambleControl.systemListData;
                break;
            case 6 /* kefu */://客服
                this.currentState = 'customService';
                this.validateNow();
                break;
        }
        if (listData) {
            this.chatList.dataProvider = listData;
        }
        this.barList.stopAnimation();
        egret.Tween.removeTweens(this.barList.viewport);
        this.refushBarListTop();
        this.listDataChange(barChange);
        this.updateMsgRedPoint();
    };
    RambleView.prototype.autoStopRefStatus = function (isStopRef) {
        if (this.chatList.dataProvider) {
            this.curDataLen = this.chatList.dataProvider.length;
            this.isStopRef = isStopRef;
        }
    };
    RambleView.prototype.scrollChangeStart = function () {
        this.autoStopRefStatus(true);
    };
    RambleView.prototype.refListBottom = function () {
        this.barList.stopAnimation();
        this.autoStopRefStatus(false);
        this.refushBar();
    };
    RambleView.prototype.scrollChangeEnd = function () {
        var scrollV = this.barList.viewport.contentHeight - this.barList.viewport.scrollV;
        if (scrollV == this.barList.viewport.height) {
            this.autoStopRefStatus(false);
            this.refNoMsgTip();
        }
    };
    RambleView.prototype.refNoMsgTip = function () {
        this.unReadGroup.visible = false;
        if (this.chatList.dataProvider && this.isStopRef) {
            var num = this.chatList.dataProvider.length - this.curDataLen;
            this.unReadLabel.text = LangMgr.getValueByKey('chatNoMsg', num);
            this.unReadGroup.visible = num > 0;
        }
    };
    RambleView.prototype.updateMsgRedPoint = function () {
        if (this.getChatType(this.tab.selectedIndex) == 4 /* guild */) {
            unionControl.noReadMsgList = [];
            unionControl.dispatchGuildChatRed();
        }
        this.updateTabTypeRed(4 /* guild */, unionControl.noReadMsgList.length > 0 && !crossFieldControl.isCross);
    };
    RambleView.prototype.getRedPoint = function (tabType) {
        var index = this.curTabType.indexOf(tabType);
        if (index >= 0) {
            var element = this.tab.getVirtualElementAt(index);
            if (element) {
                return element.redPoint;
            }
        }
        return null;
    };
    RambleView.prototype.updateTabTypeRed = function (tabType, isShow) {
        var tabElement = this.getRedPoint(tabType);
        if (tabElement) {
            tabElement.visible = isShow;
        }
    };
    RambleView.prototype.getNewOne = function (msg) {
        if (partnerControl.indexOfBlackList(msg.id) == -1) {
            this.refushBar();
            this.updateMsgRedPoint();
        }
    };
    RambleView.prototype.getNewOneGuild = function (msg) {
        if (partnerControl.indexOfBlackList(msg.id) == -1) {
            this.refushBar();
        }
    };
    RambleView.prototype.listDataChange = function (isScroll) {
        if (this.chatList.dataProvider) {
            var data = this.chatList.dataProvider.getItemAt(this.chatList.dataProvider.length - 1);
            if (data && data.id && data.id == ActorControl.actorID) {
                this.autoStopRefStatus(false);
            }
            if (this.curType != 6 /* kefu */) {
                if (this.curType == 7 /* mail */) {
                    this.refushBarListTop();
                }
                else {
                    this.refushBar(isScroll);
                }
            }
        }
    };
    RambleView.prototype.refushBar = function (isScroll) {
        var _this = this;
        this.refNoMsgTip();
        if (!this.isStopRef) {
            if (isScroll) {
                egret.Tween.get(this.barList.viewport).wait(110).call(function () {
                    DisplayUtils.scrollerToBottom(_this.barList, null, true);
                }, this);
            }
            DisplayUtils.scrollerToBottom(this.barList);
        }
    };
    /** 设置滚动到列表定部 */
    RambleView.prototype.refushBarListTop = function () {
        this.barList.viewport.scrollV = 0;
    };
    RambleView.prototype.textInOn = function () {
        if (this.chatInput.text == LangMgr.getValueByKey('customChatContent')) {
            this.chatInput.text = "";
        }
    };
    /** 设置界面展开/收起 */
    RambleView.prototype.setStretchWin = function () {
        if (this.isStretch) {
            this.isStretch = false;
            this.upBtn.scaleY = 1;
            this.winGroup.height = RambleView.LITTLE_HEIGHT;
        }
        else {
            this.isStretch = true;
            this.upBtn.scaleY = -1;
            this.winGroup.height = RambleView.BIG_HEIGHT;
        }
        this.autoStopRefStatus(false);
        this.updataList();
    };
    /** 邮件一键领取 */
    RambleView.prototype.allReceiveMail = function () {
        var list = [];
        var mailList = emailUserControl.getMailByReceive();
        for (var i = 0; i < mailList.length; i++) {
            list.push(mailList[i].handle);
        }
        emailUserControl.upGetItem(list);
    };
    RambleView.prototype.onListTap = function () {
        var selectedItem = this.chatList.selectedItem;
        if (selectedItem && (selectedItem instanceof RambleInfoVo || selectedItem instanceof UnionMessageInfoVo || selectedItem instanceof RambleSystemVo)) {
            if (selectedItem instanceof RambleSystemVo || selectedItem instanceof UnionMessageInfoVo) {
                var str = selectedItem.str;
                if (str && str.indexOf("|E:") >= 0) {
                    this.onLink(str, selectedItem);
                    return;
                }
            }
            if (selectedItem.lv != undefined) {
                UIMgr.ins().open(RamblePlayerTipsView, selectedItem);
            }
        }
    };
    RambleView.prototype.onLink = function (str, selectedItem) {
        if (!RambleEmojiRiceTextVo.isLinkRich) {
            var index = str.indexOf("|E:");
            str = str.slice(index + 3, Number.MAX_VALUE);
            LinkUtils.textLink(str, selectedItem);
        }
    };
    RambleView.prototype.onTap = function (e) {
        switch (e.currentTarget) {
            case this.faceBtn:
                UIMgr.ins().open(RambleEmojiView, this.chatInput);
                break;
            case this.upBtn://收缩窗口按钮
                this.setStretchWin();
                this.refushBar();
                break;
            case this.closeBtn0://关闭按钮
                UIMgr.ins().close(this);
                break;
            case this.sendBtn://发送聊天按钮
                //GM命令
                if (this.chatInput.text.indexOf("@") > -1) {
                    gameControl.upGMCommad(this.chatInput.text);
                    return;
                }
                if (!rambleControl.checkAllChatOpen())
                    return;
                if (this.curType != 4 /* guild */ && !rambleControl.checkChatIsOpen()) {
                    return;
                }
                if (!rambleControl.canSpeak) {
                    tipsControl.showTips(LangMgr.getValueByKey('customChatFirst'));
                    return;
                }
                if (this.chatInput.text == LangMgr.getValueByKey('customChatContent') || "" == this.chatInput.text) {
                    tipsControl.showTips(LangMgr.getValueByKey('customChatContent1'));
                    return;
                }
                if (!rambleControl.checkSendMsg(this.chatInput.text)) {
                    return;
                }
                if (this.curType == 4 /* guild */) {
                    if (copyControl.isFBChatChannle()) {
                        copyControl.upFbChat(ActorControl.camp, this.chatInput.text);
                    }
                    else {
                        unionControl.upGuildMessage(this.chatInput.text);
                    }
                    this.chatInput.text = "";
                }
                else {
                    if (!SwitchMgr.ins().checkOpen(43 /* CHAT */, true)) {
                        return;
                    }
                    if (rambleControl.checkRepeatString(this.chatInput.text)) {
                        if (copyControl.isFBChatChannle() || this.curType == 3 /* team */) {
                            copyControl.upFbChat(ActorControl.camp, this.chatInput.text);
                        }
                        else if (this.curType == 2 /* kuafu */) {
                            rambleControl.upChatInfo(10 /* ciChannelKuafu */, this.chatInput.text);
                        }
                        else if (this.curType == 1 /* world */) {
                            rambleControl.upChatInfo(7 /* ciChannelAll */, this.chatInput.text);
                        }
                        else if (this.curTabType.indexOf(1 /* world */) == -1 && this.curTabType.indexOf(2 /* kuafu */) > -1) {
                            rambleControl.upChatInfo(10 /* ciChannelKuafu */, this.chatInput.text);
                        }
                        else {
                            rambleControl.upChatInfo(7 /* ciChannelAll */, this.chatInput.text);
                        }
                        rambleControl.UpSpeak = this.chatInput.text;
                        this.chatInput.text = "";
                    }
                }
                break;
            case this.sendBtn0://客服按钮
                if (this.input.text.length == 0 || this.input.text == this.defaultText) {
                    tipsControl.showTips(LangMgr.getValueByKey('customNoEmpty'));
                    return;
                }
                break;
        }
    };
    /** 窗口展开时高度 */
    RambleView.BIG_HEIGHT = 850;
    /** 窗口收起时高度 */
    RambleView.LITTLE_HEIGHT = 370;
    return RambleView;
}(BaseEuiView));
__reflect(RambleView.prototype, "RambleView");
var RambleGuildItemRenderer = (function (_super) {
    __extends(RambleGuildItemRenderer, _super);
    function RambleGuildItemRenderer() {
        var _this = _super.call(this) || this;
        _this.emojiTxt = new RambleEmojiRiceTextVo;
        _this.emojiTxt.x = 0;
        _this.emojiTxt.y = 8;
        _this.emojiTxt.lineSpacing = 8;
        _this.emojiTxt.outLineSpacing = 12;
        _this.emojiTxt.textColor = 13746831;
        _this.emojiTxt.startTouchBg();
        _this.emojiTxt.y = 8;
        _this.addChild(_this.emojiTxt);
        return _this;
    }
    RambleGuildItemRenderer.prototype.dataChanged = function () {
        this.height = 0;
        this.showHead.visible = false;
        this.showText.visible = false;
        this.chatVip.visible = false;
        if (this.data instanceof UnionMessageInfoVo) {
            var guildMessageInfo = this.data;
            var channel = "";
            var vip = "";
            var name_4 = "";
            var content = "";
            if (guildMessageInfo.type == 1) {
                if (guildMessageInfo.office) {
                    channel = "|C:" + LangMgr.getValueByKey("officeColor" + guildMessageInfo.office) + "&T:[" + LangMgr.getValueByKey("officeName" + guildMessageInfo.office) + "]|";
                }
                vip = vipControl.getVipEmoji(guildMessageInfo.vipLevel);
                if (guildMessageInfo.name) {
                    name_4 = "|C:0x16B2FF&T:[" + guildMessageInfo.name + "]|";
                }
                content = "|C:0xDFD1B5&T:" + guildMessageInfo.str + "|";
            }
            else {
                content = "|C:0xDFD1B5&T:" + guildMessageInfo.str + "|";
            }
            content = RambleEmojiRiceTextVo.filterSpecEmojiStr(content);
            this.emojiTxt.width = this.textGroup.width;
            this.emojiTxt.richText = channel + vip + name_4 + " " + content;
            this.height = this.emojiTxt.uHeight + 14;
        }
    };
    return RambleGuildItemRenderer;
}(BaseItemRender));
__reflect(RambleGuildItemRenderer.prototype, "RambleGuildItemRenderer");
var RambleKfBlackItemRenderer = (function (_super) {
    __extends(RambleKfBlackItemRenderer, _super);
    function RambleKfBlackItemRenderer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RambleKfBlackItemRenderer.prototype.childrenCreated = function () {
        var _this = this;
        _super.prototype.childrenCreated.call(this);
        this.addEventTouchTap(this.btn_delete, function (e) {
            rambleBlackControl.upDelBlackRole(_this.data.index);
        });
    };
    RambleKfBlackItemRenderer.prototype.dataChanged = function () {
        this.label_name.text = this.data.roleName + "(" + (this.data.zsLevel > 0 ? LangMgr.getValueByKey('numberRotation', this.data.zsLevel) : "") + LangMgr.getValueByKey('numberLevel', this.data.level);
        this.img_userIcon.source = "head_" + this.data.job + this.data.sex;
        this.labelGuild.text = "";
        this.headBg.source = RambleListItemRenderer.HEAD_BG[this.data.sex];
        this.severId.text = "S" + this.data.serId;
    };
    return RambleKfBlackItemRenderer;
}(BaseItemRender));
__reflect(RambleKfBlackItemRenderer.prototype, "RambleKfBlackItemRenderer");
var RambleListItem2Renderer = (function (_super) {
    __extends(RambleListItem2Renderer, _super);
    function RambleListItem2Renderer() {
        var _this = _super.call(this) || this;
        _this.emojiTxt = new RambleEmojiRiceTextVo;
        _this.emojiTxt.textColor = 13746831;
        _this.emojiTxt.autoWrapLine = false;
        _this.addChild(_this.emojiTxt);
        return _this;
    }
    RambleListItem2Renderer.prototype.dataChanged = function () {
        this.textGroup.visible = false;
        var _data = this.data;
        var maxWidth = 0;
        if (this.$parent) {
            maxWidth = this.$parent["$explicitWidth"] || (this.$parent["$getExplicitWidth"] && this.$parent["$getExplicitWidth"]());
        }
        var channel = "";
        var content = "";
        var vip = "";
        //公会
        if (_data instanceof UnionMessageInfoVo) {
            channel = LangMgr.getValueByKey('chatGuild');
            content = _data.str;
            vip = vipControl.getVipEmoji(_data.vipLevel);
        }
        else if (_data instanceof RambleCampVo) {
            channel = LangMgr.getValueByKey('chatMenuType1');
            ;
            content = _data.str;
        }
        else if (_data instanceof RambleSystemVo) {
            channel = LangMgr.getValueByKey('chatSystem');
            content = _data.str;
        }
        else {
            var world = LangMgr.getValueByKey("chatMenu" + (_data.type == 7 /* ciChannelAll */ ? 1 : 2));
            channel = "|C:0xDD6717&T:[" + world + "]|";
            content = _data.str;
            vip = vipControl.getVipEmoji(_data.vipLevel);
        }
        var server = _data.type == 10 /* ciChannelKuafu */ ? "S" + _data.servId : "";
        var name = _data.name ? "|C:0x16B2FF&T:[" + _data.name + server + "]|" : "";
        content = RambleEmojiRiceTextVo.filterSpecEmojiStr(content);
        this.emojiTxt.x = this.showChannel.x;
        this.emojiTxt.y = this.showChannel.y;
        this.emojiTxt.width = this.width;
        this.emojiTxt.height = this.showChannel.height;
        this.emojiTxt.useDpEmojiSize = true;
        this.emojiTxt.richText = "" + channel + vip + name + content;
        this.emojiTxt.textColor = 14668213;
    };
    return RambleListItem2Renderer;
}(BaseItemRender));
__reflect(RambleListItem2Renderer.prototype, "RambleListItem2Renderer");
var RambleListItem3Renderer = (function (_super) {
    __extends(RambleListItem3Renderer, _super);
    function RambleListItem3Renderer() {
        var _this = _super.call(this) || this;
        _this.emojiTxt = new RambleEmojiRiceTextVo;
        _this.emojiTxt.x = 0;
        _this.emojiTxt.y = 8;
        _this.emojiTxt.lineSpacing = 8;
        _this.emojiTxt.outLineSpacing = 12;
        _this.emojiTxt.textColor = 13746831;
        _this.emojiTxt.startTouchBg();
        _this.emojiTxt.y = 8;
        _this.addChild(_this.emojiTxt);
        return _this;
    }
    RambleListItem3Renderer.prototype.dataChanged = function () {
        this.height = 0;
        this.showHead.visible = false;
        this.showText.visible = false;
        this.chatVip.visible = false;
        var _data = this.data;
        var maxWidth = 0;
        if (this.$parent) {
            maxWidth = this.$parent["$explicitWidth"] || (this.$parent["$getExplicitWidth"] && this.$parent["$getExplicitWidth"]());
        }
        var channel = "";
        var desc = "";
        var vip = "";
        var name = "";
        //公会
        if (_data instanceof UnionMessageInfoVo) {
            channel = LangMgr.getValueByKey('chatGuild');
            desc = _data.str;
            vip = vipControl.getVipEmoji(_data.vipLevel);
        }
        else if (_data instanceof RambleCampVo) {
            channel = LangMgr.getValueByKey('chatMenuType1');
            desc = _data.str;
        }
        else if (_data instanceof RambleSystemVo) {
            channel = LangMgr.getValueByKey('chatSystem');
            desc = _data.str;
        }
        else {
            var world = LangMgr.getValueByKey("chatMenu" + (_data.type == 7 /* ciChannelAll */ ? 1 : 2));
            channel = "|C:0xDD6717&T:[" + world + "]|";
            desc = _data.str;
            vip = vipControl.getVipEmoji(_data.vip);
        }
        desc = RambleEmojiRiceTextVo.filterSpecEmojiStr(desc);
        if (_data.name) {
            var server = _data.type == 10 /* ciChannelKuafu */ ? "S" + _data.servId : "";
            name = "|C:0x16B2FF&T:[" + _data.name + server + "]|";
        }
        var content = "|C:0xDFD1B5&T:" + desc + "|";
        this.emojiTxt.width = maxWidth || this.textGroup.width;
        this.emojiTxt.richText = "" + channel + vip + name + " " + content;
        this.height = this.emojiTxt.uHeight + 14;
    };
    return RambleListItem3Renderer;
}(BaseItemRender));
__reflect(RambleListItem3Renderer.prototype, "RambleListItem3Renderer");
var RambleListItemRenderer = (function (_super) {
    __extends(RambleListItemRenderer, _super);
    function RambleListItemRenderer() {
        var _this = _super.call(this) || this;
        _this.emojiTxt = new RambleEmojiRiceTextVo;
        _this.emojiTxt.x = 0;
        _this.emojiTxt.y = 8;
        _this.emojiTxt.lineSpacing = 8;
        _this.emojiTxt.lineSpacing = 20;
        _this.emojiTxt.textColor = 14668213;
        _this.emojiTxt.startTouchBg();
        _this.emojiTxt.y = 8;
        _this.addChild(_this.emojiTxt);
        return _this;
    }
    RambleListItemRenderer.prototype.dataChanged = function () {
        this.showHead.visible = false;
        this.showText.visible = false;
        this.chatVip.visible = false;
        this.height = 0;
        var _data = null;
        if (this.data.type == 7 /* ciChannelAll */) {
            _data = this.data;
        }
        else {
            _data = this.data;
        }
        var channel = "";
        var content = "";
        var server = this.data.type == 10 /* ciChannelKuafu */ ? "S" + _data.servId : "";
        var str = "";
        var vip = "";
        str = _data.str;
        str = RambleEmojiRiceTextVo.filterSpecEmojiStr(str);
        vip = vipControl.getVipEmoji(_data.vip);
        channel = _data.name ? "|C:0x16B2FF&T:[" + _data.name + server + "]|" : "";
        content = "|C:0xDFD1B5&T:" + str + "|";
        this.emojiTxt.width = this.textGroup.width;
        this.emojiTxt.richText = "" + vip + channel + " " + content;
        this.height = this.emojiTxt.uHeight + 14;
    };
    RambleListItemRenderer.HEAD_BG = ["touxiangkuang0", "touxiangkuang1"];
    return RambleListItemRenderer;
}(BaseItemRender));
__reflect(RambleListItemRenderer.prototype, "RambleListItemRenderer");
var RambleSystemItemRenderer = (function (_super) {
    __extends(RambleSystemItemRenderer, _super);
    function RambleSystemItemRenderer() {
        var _this = _super.call(this) || this;
        _this.skinName = "RambleSystemItemRendererSkin";
        _this.addEventTextLink(_this.str, _this.onLink);
        return _this;
    }
    RambleSystemItemRenderer.prototype.dataChanged = function () {
        if (this.data.type == 1) {
            this.str.textFlow = TextUtils.generateTextFlow("|C:0xFD2F2F&T:" + this.data.str + "|");
            this.type.source = "lt_01";
        }
        else {
            this.str.textFlow = TextUtils.generateTextFlow(this.data.str);
            this.type.source = "lt_02";
        }
    };
    RambleSystemItemRenderer.prototype.onLink = function (e) {
        LinkUtils.textLink(e.text);
    };
    return RambleSystemItemRenderer;
}(BaseItemRender));
__reflect(RambleSystemItemRenderer.prototype, "RambleSystemItemRenderer");
/**
 * 回归面板
 */
var RegressionView = (function (_super) {
    __extends(RegressionView, _super);
    function RegressionView() {
        var _this = _super.call(this) || this;
        _this.skinName = "RegressionViewSKin";
        return _this;
    }
    RegressionView.prototype.initUI = function () {
        _super.prototype.initUI.call(this);
        this.list.itemRenderer = ItemBase;
    };
    RegressionView.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.addEventTouchTap(this.bgClose, this.onClick);
        this.addEventTouchTap(this.sure, this.onClick);
        var data = DataCenter.ins().RegressionConfig.leaveReward;
        this.list.dataProvider = new eui.ArrayCollection(data);
        this.scaleX = this.scaleY = 1;
    };
    RegressionView.prototype.oncloseEff = function () {
        egret.Tween.get(this).to({
            scaleX: 0.4,
            scaleY: 0.4
        }, 400).call(function () {
            UIMgr.ins().close(RegressionView);
        });
    };
    RegressionView.prototype.onClick = function (e) {
        switch (e.currentTarget) {
            case this.bgClose:
            case this.sure:
                this.oncloseEff();
                break;
        }
    };
    return RegressionView;
}(BaseEuiView));
__reflect(RegressionView.prototype, "RegressionView");
/**
 * 改名
 */
var RenameView = (function (_super) {
    __extends(RenameView, _super);
    function RenameView() {
        var _this = _super.call(this) || this;
        _this.skinName = 'RenameViewSkin';
        _this.uilayer = GameLayer.POPUP;
        return _this;
    }
    RenameView.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.addEventTouchTap(this.bgClose, this.onTap);
        this.addEventTouchTap(this.sureBtn, this.onTap);
    };
    RenameView.prototype.onTap = function (e) {
        switch (e.currentTarget) {
            case this.bgClose:
                UIMgr.ins().close(this);
                break;
            case this.sureBtn:
                if (this.input.text.length == 0) {
                    tipsControl.showTips(LangMgr.getValueByKey('reNameTips1'));
                }
                else if (backpackControl.getBagItemById(450001 /* RENAME */) != null) {
                    gameControl.upRename(this.input.text);
                }
                break;
        }
    };
    RenameView.prototype.close = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.removeEventTouchTap(this.bgClose, this.onTap);
        this.removeEventTouchTap(this.sureBtn, this.onTap);
        this.input.text = '';
    };
    return RenameView;
}(BaseEuiView));
__reflect(RenameView.prototype, "RenameView");
/**
 * 前端存储
 */
var ClientStorage = (function (_super) {
    __extends(ClientStorage, _super);
    function ClientStorage() {
        var _this = _super.call(this) || this;
        _this._storage = {};
        _this._tempStorage = {};
        _this.init();
        return _this;
    }
    ClientStorage.ins = function () {
        return _super.ins.call(this);
    };
    ClientStorage.prototype.setItem = function (key, value, type) {
        if (type === void 0) { type = SetValueType.default; }
        if (this._storage[type][key] != value) {
            this._storage[type][key] = value;
            if (!TimerMgr.ins().isExists(this.storage, this)) {
                TimerMgr.ins().doNext(this.storage, this);
            }
        }
    };
    ClientStorage.prototype.getItem = function (key, type) {
        if (type === void 0) { type = SetValueType.default; }
        return this._storage[type][key];
    };
    ClientStorage.prototype.delItem = function (key, type) {
        if (type === void 0) { type = SetValueType.default; }
        delete this._storage[type][key];
        if (!TimerMgr.ins().isExists(this.storage, this)) {
            TimerMgr.ins().doNext(this.storage, this);
        }
    };
    ClientStorage.prototype.setBool = function (key, value, type) {
        if (type === void 0) { type = SetValueType.default; }
        this.setItem(key, value ? 1 : 0, type);
    };
    ClientStorage.prototype.getBool = function (key, type) {
        if (type === void 0) { type = SetValueType.default; }
        return !!this.getItem(key, type);
    };
    ClientStorage.prototype.setValue = function (key, value) {
        this._tempStorage[key] = value;
    };
    ClientStorage.prototype.getValue = function (key) {
        return this._tempStorage[key];
    };
    ClientStorage.prototype.init = function () {
        try {
            var str = egret.localStorage.getItem(this.getStorageKey());
            if (str) {
                this._storage = JSON.parse(str) || {};
            }
            else {
                this._storage = {};
            }
        }
        catch (e) {
            debug.log(e);
            this._storage = {};
        }
        this.initValue();
    };
    ClientStorage.prototype.initValue = function () {
        if (!this._storage[SetValueType.default]) {
            this._storage[SetValueType.default] = {};
        }
        if (!this._storage[SetValueType.special]) {
            this._storage[SetValueType.special] = {};
        }
    };
    ClientStorage.prototype.storage = function () {
        try {
            var str = JSON.stringify(this._storage);
            egret.localStorage.setItem(this.getStorageKey(), str);
        }
        catch (e) {
        }
    };
    ClientStorage.prototype.getStorageKey = function () {
        return "" + ActorControl.actorID || "game_dragon_lin";
    };
    return ClientStorage;
}(SingleClass));
__reflect(ClientStorage.prototype, "ClientStorage");
var SetValueType = (function () {
    function SetValueType() {
    }
    SetValueType.default = "defaultValue";
    SetValueType.special = "specialValue";
    return SetValueType;
}());
__reflect(SetValueType.prototype, "SetValueType");
/**
 * 后端存储
 */
var ServerStorage = (function (_super) {
    __extends(ServerStorage, _super);
    function ServerStorage() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.map = {};
        _this.isInit = false;
        return _this;
    }
    ServerStorage_1 = ServerStorage;
    ServerStorage.ins = function () {
        return _super.ins.call(this);
    };
    Object.defineProperty(ServerStorage, "currPart", {
        get: function () {
            return ServerStorage_1.ins().getValue(0 /* guidePart */);
        },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(ServerStorage, "currStep", {
        get: function () {
            return ServerStorage_1.ins().getValue(1 /* guideStep */);
        },
        enumerable: true,
        configurable: true
    });
    ;
    ServerStorage.setSpecialGuild = function (index) {
        var value = ServerStorage_1.ins().getValue(22 /* guideSpecialPart */);
        if (this.getSpecialGuild(index)) {
            value += 1 << index - 1;
        }
        else {
            value -= 1 << index - 1;
        }
        ServerStorage_1.ins().setValue(22 /* guideSpecialPart */, value);
    };
    ServerStorage.getSpecialGuild = function (index) {
        var value = ServerStorage_1.ins().getValue(22 /* guideSpecialPart */);
        return !!(value >> index - 1 & 1);
    };
    ServerStorage.prototype.downParser = function (datas) {
        if (crossFieldControl.hasSwitchCross) {
            guideControl.init();
            this.dispatchInitSetting();
            return;
        }
        for (var i = 0; i < datas.length; i++) {
            this.map[datas[i][0]] = datas[i][1];
        }
        this.isInit = true;
        guideControl.init();
        if (ActorControl.actorID) {
            this.initSetting();
        }
        this.dispatchInitSetting();
        GameServer.ins().checkIsFirstLogin();
        SceneMgr.ins().getCurrScene().updateBluntBangs();
    };
    ServerStorage.prototype.dispatchInitSetting = function () {
        EventMgr.ins().dispatch(511 /* SERVER_STORAGE_INIT_SETTING */, true);
    };
    ServerStorage.prototype.initSetting = function () {
        if (this.getBitValue(ClientSetBit.setting_view_init) == 0) {
            var datas = {
                sound_effect: 1,
                shake_win: 1,
                auto_heji: 0,
                dice: 0,
                hide_mine_wing: 0,
                hide_other_wing: 0,
                hide_friend_req: 0,
                level_up_item_red: 1,
                kf_chat_tips: 0,
                hide_mine_zhanling: 0,
                hide_other_zhanling: 0
            };
            for (var key in datas) {
                if (ClientSetBit[key]) {
                    if (ClientStorage.ins().getItem(key) != undefined) {
                        this.setBitBool(ClientSetBit[key], ClientStorage.ins().getItem(key));
                    }
                    else {
                        this.setBitBool(ClientSetBit[key], datas[key] || 0);
                    }
                }
            }
            this.setBitValue(ClientSetBit.setting_view_init, 1);
        }
        this.updateSetting();
    };
    ServerStorage.prototype.updateSetting = function () {
        SoundUtils.ins().setEffectOn(this.getBitBool(ClientSetBit.sound_effect));
        DisplayUtils.setShakeOn(this.getBitBool(ClientSetBit.shake_win));
    };
    ServerStorage.prototype.dispatchUpdate = function (key) {
        return key;
    };
    /**
     * 保存数据
     * 255-19
     */
    ServerStorage.prototype.upSave = function (key, value) {
        this.map[key] = value;
        this.dispatchUpdate(key);
        return [key, value];
    };
    //保存数据
    ServerStorage.prototype.setValue = function (key, value) {
        this.upSave(key, value);
    };
    //读取数据
    ServerStorage.prototype.getValue = function (key, def) {
        if (def === void 0) { def = 0; }
        return this.map[key] == undefined ? def : this.map[key];
    };
    ServerStorage.prototype.setBitValue = function (bit, value) {
        var key = 100 /* Bit */;
        var multiple = bit / 31 >> 0;
        var remainder = bit % 31;
        key += multiple;
        var state = value ? 1 : 0;
        value = this.map[key];
        if (state) {
            value |= 1 << remainder;
        }
        else {
            value &= ~(1 << remainder);
        }
        this.setValue(key, value);
    };
    ServerStorage.prototype.getBitValue = function (bit) {
        var key = 100 /* Bit */;
        var multiple = bit / 31 >> 0;
        var remainder = bit % 31;
        key += multiple;
        var value = this.getValue(key);
        return value >> remainder & 1;
    };
    ServerStorage.prototype.setBitBool = function (key, value) {
        return this.setBitValue(key, value ? 1 : 0);
    };
    ServerStorage.prototype.getBitBool = function (key) {
        return this.getBitValue(key) == 1;
    };
    __decorate([
        down(19, [[3 /* Int */, 3 /* Int */]])
    ], ServerStorage.prototype, "downParser", null);
    __decorate([
        up(19, [3 /* Int */, 3 /* Int */])
    ], ServerStorage.prototype, "upSave", null);
    ServerStorage = ServerStorage_1 = __decorate([
        protocolsId(255 /* MAXVALUE */)
    ], ServerStorage);
    return ServerStorage;
    var ServerStorage_1;
}(BaseSystem));
__reflect(ServerStorage.prototype, "ServerStorage");
var ClientSetBit = (function () {
    function ClientSetBit() {
    }
    ClientSetBit.guildFirstRed = 0;
    ClientSetBit.firstRecharge = 1;
    ClientSetBit.firstRechargeAni = 2;
    ClientSetBit.isDailyDieFirstRecharge = 3;
    ClientSetBit.isDailyDieMaBi = 4;
    ClientSetBit.isDailyDieThreeRoles = 5;
    ClientSetBit.activity5029 = 6;
    ClientSetBit.playWarn = 7;
    ClientSetBit.legendtempleRedPoint = 8;
    ClientSetBit.ladderMore = 9;
    ClientSetBit.ladderMoreEff = 10;
    ClientSetBit.kfzhbossRed = 11;
    ClientSetBit.superVipEff = 12;
    ClientSetBit.worldBossMult1 = 13;
    ClientSetBit.worldBossMultEff1 = 14;
    ClientSetBit.worldBossMult5 = 15;
    ClientSetBit.worldBossMultEff5 = 16;
    ClientSetBit.worldBossMult7 = 17;
    ClientSetBit.worldBossMultEff7 = 18;
    ClientSetBit.worldBossMult10 = 19;
    ClientSetBit.worldBossMultEff10 = 20;
    ClientSetBit.worldBossMult12 = 21;
    ClientSetBit.worldBossMultEff12 = 22;
    ClientSetBit.newFunNotice = 23;
    ClientSetBit.godweaponrent = 24;
    ClientSetBit.pubBossNoTipYb = 25;
    ClientSetBit.pubBossNoTipItem = 26;
    ClientSetBit.syBossNoTipItem = 28;
    ClientSetBit.matchKOTips = 29;
    ClientSetBit.matchGPTips = 30;
    ClientSetBit.serverBattleShop = 31;
    ClientSetBit.sound_effect = 32;
    ClientSetBit.shake_win = 33;
    ClientSetBit.auto_heji = 34;
    ClientSetBit.dice = 35;
    ClientSetBit.dice2 = 36;
    ClientSetBit.hide_mine_wing = 37;
    ClientSetBit.hide_other_wing = 38;
    ClientSetBit.hide_friend_req = 39;
    ClientSetBit.level_up_item_red = 40;
    ClientSetBit.kf_chat_tips = 41;
    ClientSetBit.hide_mine_zhanling = 42;
    ClientSetBit.hide_other_zhanling = 43;
    ClientSetBit.hide_mine_title = 44;
    ClientSetBit.hide_other_title = 45;
    ClientSetBit.setting_view_init = 48;
    ClientSetBit.renameCard = 72;
    ClientSetBit.funcopen = 73;
    ClientSetBit.bluntBangs = 100;
    return ClientSetBit;
}());
__reflect(ClientSetBit.prototype, "ClientSetBit");
var SettingView = (function (_super) {
    __extends(SettingView, _super);
    function SettingView() {
        var _this = _super.call(this) || this;
        _this.headRedLv = 30;
        _this.skinName = "SettingViewSkin";
        _this.uilayer = GameLayer.POPUP;
        return _this;
    }
    SettingView.prototype.open = function () {
        LongPressUtils.ins().removeOnceByTime(this.titleTxt.hashCode);
        LongPressUtils.ins().addOnceByTime(this.titleTxt, this.onLongTap, this, 10000);
        this.addEventTouchTap(this.bgClose, this.onTouch);
        this.addEventTouchTap(this.maskSound, this.onTouch);
        this.addEventTouchTap(this.maskShake, this.onTouch);
        this.addEventTouchTap(this.maskPunch, this.onTouch);
        this.addEventTouchTap(this.maskFriend, this.onTouch);
        this.addEventTouchTap(this.maskSelf, this.onTouch);
        this.addEventTouchTap(this.maskOther, this.onTouch);
        this.addEventTouchTap(this.bluntBangs, this.onTouch);
        this.maskSound.selected = ServerStorage.ins().getBitBool(ClientSetBit.sound_effect);
        this.maskShake.selected = ServerStorage.ins().getBitBool(ClientSetBit.shake_win);
        this.maskPunch.selected = ServerStorage.ins().getBitBool(ClientSetBit.auto_heji);
        this.maskFriend.selected = ServerStorage.ins().getBitBool(ClientSetBit.hide_friend_req);
        this.maskSelf.selected = ServerStorage.ins().getBitBool(ClientSetBit.hide_mine_wing);
        this.maskOther.selected = ServerStorage.ins().getBitBool(ClientSetBit.hide_other_wing);
        this.bluntBangs.selected = ServerStorage.ins().getBitBool(ClientSetBit.bluntBangs);
        if (ActorControl.level >= this.headRedLv && !ServerStorage.ins().getValue(3 /* headRed */)) {
            var mc = new GameMovieClip;
            mc.playFile(PATH_EFF + "chargeff1", -1);
            this.effGroup.addChild(mc);
            ServerStorage.ins().setValue(3 /* headRed */, 1);
        }
        if (this.openIdTxt) {
            this.openIdTxt.text = "UID:" + ActorControl.actorID;
        }
        if (SDKManager.ins().SDKShowLogout()) {
            if (this.switchUser) {
                this.addEventTouchTap(this.switchUser, this.onTouch);
            }
        }
        else {
            if (this.switchUser) {
                this.switchUser.visible = false;
            }
        }
    };
    SettingView.prototype.onLongTap = function () {
        UIMgr.ins().open(GMNetCalcView);
    };
    SettingView.prototype.close = function () {
        var view = UIMgr.playFun;
        if (view) {
            view.setSoundRadio(ServerStorage.ins().getBitBool(ClientSetBit.sound_effect));
        }
        var chatMainUI = UIMgr.ins().getView("RambleMainView");
        if (chatMainUI) {
            chatMainUI.refTipMsgStatus();
        }
        LongPressUtils.ins().removeOnceByTime(this.titleTxt.hashCode);
    };
    SettingView.prototype.onTouch = function (e) {
        var tar = e.currentTarget;
        switch (tar) {
            case this.bgClose:
                UIMgr.ins().close(SettingView);
                break;
            case this.maskSound:
                ServerStorage.ins().setBitBool(ClientSetBit.sound_effect, tar.selected);
                break;
            case this.maskShake:
                ServerStorage.ins().setBitBool(ClientSetBit.shake_win, tar.selected);
                break;
            case this.maskPunch:
                ServerStorage.ins().setBitBool(ClientSetBit.auto_heji, tar.selected);
                break;
            case this.maskFriend:
                ServerStorage.ins().setBitBool(ClientSetBit.hide_friend_req, tar.selected);
                this.reqFriendAppList();
                break;
            case this.maskSelf:
                ServerStorage.ins().setBitBool(ClientSetBit.hide_mine_zhanling, tar.selected);
                ServerStorage.ins().setBitBool(ClientSetBit.hide_mine_wing, tar.selected);
                UnitMgr.ins().updateRoleWingState(true);
                ServerStorage.ins().setBitBool(ClientSetBit.hide_mine_title, tar.selected);
                UnitMgr.ins().updateRoleTitleState(true);
                break;
            case this.maskOther:
                ServerStorage.ins().setBitBool(ClientSetBit.hide_other_zhanling, tar.selected);
                ServerStorage.ins().setBitBool(ClientSetBit.hide_other_wing, tar.selected);
                UnitMgr.ins().updateRoleWingState(false);
                ServerStorage.ins().setBitBool(ClientSetBit.hide_other_title, tar.selected);
                UnitMgr.ins().updateRoleTitleState(false);
                break;
            case this.bluntBangs:
                ServerStorage.ins().setBitBool(ClientSetBit.bluntBangs, tar.selected);
                SceneMgr.ins().getCurrScene().updateBluntBangs();
                break;
            case this.switchUser:
                SDKManager.ins().SDKLogoutNative();
                break;
        }
        ServerStorage.ins().updateSetting();
    };
    SettingView.prototype.reqFriendAppList = function () {
        partnerControl.upAppList();
    };
    __decorate([
        callDelay(200)
    ], SettingView.prototype, "reqFriendAppList", null);
    return SettingView;
}(BaseEuiView));
__reflect(SettingView.prototype, "SettingView");
/**
 * 签到
 */
var SignInControl = (function (_super) {
    __extends(SignInControl, _super);
    function SignInControl() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**签到天数 */
        _this.loginTimes = 0;
        /**连续签到天数 */
        _this.conLoginTimes = 0;
        /**奖励状态 */
        _this.todayReward = false;
        /**可补签的index列表 */
        _this.comTimesIndexList = [];
        return _this;
    }
    SignInControl.ins = function () {
        return _super.ins.call(this);
    };
    /**
     * 签到
     * 54-1
     */
    SignInControl.prototype.upSignIn = function (index) {
        return [index];
    };
    /**
     * 签到数据
     * 54-1
     */
    SignInControl.prototype.downSignInData = function (loginTimes, todayReward, conLoginTimes, rewardIndex) {
        this.loginTimes = loginTimes;
        this.todayReward = todayReward;
        this.conLoginTimes = conLoginTimes;
        this.rewardIndex = rewardIndex;
        EventMgr.ins().dispatch(79 /* SIGNIN_DATA */);
    };
    /**
     * 领取奖励
     * 54-3
     */
    SignInControl.prototype.upGetReward = function (index) {
        return [index];
    };
    /**
     * 显示红点
     */
    SignInControl.prototype.showRedPoint = function () {
        var result = this.canNormalCheckIn() || this.checkCanReward();
        return result;
    };
    /**
     * 可以签到
     */
    SignInControl.prototype.canNormalCheckIn = function () {
        return !this.todayReward;
    };
    /**
     * 可以领奖
     */
    SignInControl.prototype.checkCanReward = function () {
        var days = this.getRewardList(this.rewardIndex) ? this.getRewardList(this.rewardIndex).days : 0;
        return this.conLoginTimes >= days;
    };
    SignInControl.prototype.getCheckInState = function (day) {
        if (day > this.loginTimes) {
            return 0 /* notYet */;
        }
        else if (day < this.loginTimes) {
            return 2 /* hasChecked */;
        }
        else {
            if (this.todayReward) {
                return 2 /* hasChecked */;
            }
            else {
                return 1 /* canCheck */;
            }
        }
    };
    SignInControl.prototype.getRewardList = function (index) {
        if (DataCenter.ins().SignInDaysConfig[index + 1]) {
            return DataCenter.ins().SignInDaysConfig[index + 1];
        }
        return null;
    };
    __decorate([
        up(1, [2 /* Short */])
    ], SignInControl.prototype, "upSignIn", null);
    __decorate([
        down(1, [2 /* Short */, 0 /* Boolean */, 2 /* Short */, 2 /* Short */])
    ], SignInControl.prototype, "downSignInData", null);
    __decorate([
        up(3, [3 /* Int */])
    ], SignInControl.prototype, "upGetReward", null);
    SignInControl = __decorate([
        protocolsId(54 /* PROTOCOL_54 */)
    ], SignInControl);
    return SignInControl;
}(BaseSystem));
__reflect(SignInControl.prototype, "SignInControl");
/**
 * 签到
 */
var SignInPanel = (function (_super) {
    __extends(SignInPanel, _super);
    function SignInPanel() {
        var _this = _super.call(this) || this;
        _this.currentDay = 0;
        _this.panelwidth = 400;
        _this.skinName = "SignInPanelSkin";
        return _this;
    }
    SignInPanel.prototype.childrenCreated = function () {
        this.effGroup.touchEnabled = false;
        this.effGroup.touchChildren = false;
        this.cardList.itemRenderer = SignInItemRenderer;
        this.listData = new eui.ArrayCollection();
        this.cardList.dataProvider = this.listData;
    };
    SignInPanel.prototype.open = function () {
        var _this = this;
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.addCustomEvent(79 /* SIGNIN_DATA */, this.updateSignInData);
        this.addCustomEvent(106 /* VIP_DATA */, this.updateSignInData);
        this.addEventTouchTap(this.cardList, this.onListTap);
        this.addEventTouchTap(this.rewardBtn, this.onClick);
        this.monthList = DataCenter.ins().SignInConfig;
        this.updateCheckInTimes();
        this.updateList();
        TimerMgr.ins().doNext(function () {
            if (signInControl.loginTimes >= 25) {
                _this.cardScroller.viewport.scrollV = _this.cardScroller.viewport.contentHeight - _this.cardScroller.height;
            }
        }, this);
    };
    SignInPanel.prototype.updateCheckInTimes = function () {
        this.checkInLab.text = LangMgr.getValueByKey('activitDay', signInControl.loginTimes.toString());
    };
    SignInPanel.prototype.updateList = function () {
        this.listData.replaceAll(CommonUtils.objectToArray(this.monthList));
        //更新列表位置
        var logIndays = signInControl.conLoginTimes;
        var tempRewardList = signInControl.getRewardList(signInControl.rewardIndex);
        if (tempRewardList) {
            this.rewardBtn.visible = this.rewardItem.visible = true;
            this.curRewardData = tempRewardList;
            var comDays = this.curRewardData.days - logIndays >= 0 ? this.curRewardData.days - logIndays : 0;
            var state = logIndays >= this.curRewardData.days;
            var color1 = state ? LangMgr.getColor('color38') : ColorUtils.RED;
            var color2 = LangMgr.getColor('color56');
            var color3 = LangMgr.getColor('color27');
            var content = LangMgr.getValueByKey('dailyTips8', color1, logIndays, color2, this.curRewardData.days, color3, comDays);
            this.dayReardText.textFlow = TextUtils.generateTextFlow(content);
            this.rewardItem.data = this.curRewardData.rewards[0];
            if (state) {
                this.rewardBtn.enabled = true;
                if (!this.eff) {
                    this.eff = new GameMovieClip;
                    this.eff.scaleX = 0.9;
                    this.eff.scaleY = 0.9;
                    this.eff.playFile(PATH_EFF + "chargeff1", -1);
                }
                if (!this.eff.parent) {
                    this.effGroup.addChild(this.eff);
                }
            }
            else {
                this.rewardBtn.enabled = false;
                DisplayUtils.removeFromParent(this.eff);
            }
        }
        else {
            DisplayUtils.removeFromParent(this.eff);
            this.rewardBtn.visible = this.rewardItem.visible = this.rewardBtn.enabled = false;
            this.dayReardText.textFlow = TextUtils.generateTextFlow(LangMgr.getValueByKey('dailyGetAllGift'));
        }
    };
    /**
     * 数据变更
     */
    SignInPanel.prototype.updateSignInData = function (param) {
        this.updateCheckInTimes();
        this.updateList();
    };
    SignInPanel.prototype.onListTap = function (e) {
        var _this = this;
        if (e && e.currentTarget) {
            if (this.cardList.selectedItem) {
                var state = signInControl.getCheckInState(this.cardList.selectedItem.day);
                if (state) {
                    if (state == 1 /* canCheck */) {
                        if (vipControl.lv > 0) {
                            signInControl.upSignIn(this.cardList.selectedItem.day);
                        }
                        else if (this.cardList.selectedItem.vipLabel && vipControl.lv < this.cardList.selectedItem.vipLabel) {
                            var tips = LangMgr.getValueByKey('dailyTips3');
                            var warnWin = warnControl.show(tips, function () {
                                signInControl.upSignIn(_this.cardList.selectedItem.day);
                            }, this, function () {
                                UIMgr.ins().open("PayFirstView");
                            }, this);
                            warnWin.showUI("", "", "", "VIP1");
                            warnWin.setBtnLabel(LangMgr.getValueByKey('dailyTips4'), LangMgr.getValueByKey('dailyTips5'));
                        }
                        else {
                            signInControl.upSignIn(this.cardList.selectedItem.day);
                        }
                    }
                    else if (state == 2 /* hasChecked */) {
                        tipsControl.showTips(LangMgr.getValueByKey('dailyTips6'));
                    }
                }
                else {
                    if (this.cardList.selectedItem.day > this.currentDay) {
                        tipsControl.showTips(LangMgr.getValueByKey('dailyTips7'));
                    }
                }
            }
        }
    };
    SignInPanel.prototype.onClick = function (e) {
        signInControl.upGetReward(this.curRewardData.days);
    };
    /**
     * 清理列表
     */
    SignInPanel.prototype.cleanList = function () {
        this.cardList.dataProvider = null;
    };
    SignInPanel.prototype.close = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        DisplayUtils.removeFromParent(this.eff);
        this.listData = null;
        this.removeCustomEvents();
        this.cleanList();
    };
    return SignInPanel;
}(BaseEuiView));
__reflect(SignInPanel.prototype, "SignInPanel");
var SignInItemRenderer = (function (_super) {
    __extends(SignInItemRenderer, _super);
    function SignInItemRenderer() {
        var _this = _super.call(this) || this;
        _this.id = 0;
        _this.checkInState = 0;
        //这里设置可以点击, 不能点击孩子,zwwx小游戏sdk订阅弹窗需要判断点击到这个item
        _this.touchEnabled = true;
        _this.touchChildren = false;
        _this.skinName = "SignInItemRendererSkin";
        return _this;
    }
    SignInItemRenderer.prototype.dataChanged = function () {
        this.resetView();
        var monthSignConfig = this.data;
        if (monthSignConfig) {
            this.vipFlagGroup.touchChildren = false;
            this.vipFlagGroup.touchEnabled = false;
            this.dayFlagGroup.touchChildren = false;
            this.dayFlagGroup.touchEnabled = false;
            this.complement.touchEnabled = false;
            this.dayFlagGroup.visible = false;
            //道具
            this.item.data = monthSignConfig.rewards[0];
            this.item.touchChildren = false;
            this.item.touchEnabled = false;
            var state = signInControl.getCheckInState(monthSignConfig.day);
            if (state) {
                switch (state) {
                    case 1 /* canCheck */:
                        this.checkInState = 1 /* canCheck */;
                        this.showFlag();
                        break;
                    case 2 /* hasChecked */:
                        this.checkInState = 2 /* hasChecked */;
                        this.showChecked();
                        break;
                }
            }
            else {
                this.showFlag();
                var isComplement = false;
                this.item.touchChildren = !isComplement;
                this.item.touchEnabled = !isComplement;
            }
        }
        this.showEquipEffect();
    };
    SignInItemRenderer.prototype.showEquipEffect = function () {
        var state = signInControl.getCheckInState(this.data.day);
        if (state != 1 /* canCheck */) {
            if (this.equipEffect) {
                DisplayUtils.removeFromParent(this.equipEffect);
            }
        }
        else {
            this.equipEffect = this.equipEffect || new GameMovieClip();
            this.equipEffect.touchEnabled = false;
            this.equipEffect.scaleX = 1.65;
            this.equipEffect.scaleY = 1.75;
            if (!this.equipEffect.parent) {
                this.effGrp.addChild(this.equipEffect);
            }
            this.equipEffect.playFile(PATH_EFF + "quaeff4", -1);
        }
    };
    /**
     * 显示已签到
     */
    SignInItemRenderer.prototype.showChecked = function () {
        this.checked.visible = this.checkedMask.visible = true;
    };
    /**
     * 显示标识
     */
    SignInItemRenderer.prototype.showFlag = function () {
        var rewardCfg = this.data;
        if (rewardCfg) {
            if (rewardCfg.vipLabel > 0) {
                //VIP标识
                var vipLevel = rewardCfg.vipLabel;
                if (vipLevel > 10)
                    vipLevel = 10;
                var vipCfg = DataCenter.ins().SignInVipConfig[vipLevel];
                if (vipCfg) {
                    this.vipFlagGroup.visible = true;
                    this.vipLab.text = LangMgr.getValueByKey('dailyVip', vipLevel);
                }
            }
            else {
                //无VIP标识
                if (rewardCfg.dayLabel > 0) {
                    //日期标识
                    this.dayLab.text = LangMgr.getValueByKey('activitDay', rewardCfg.day);
                }
            }
        }
    };
    SignInItemRenderer.prototype.resetView = function () {
        this.complement.visible = false;
        this.vipFlagGroup.visible = false;
        this.dayFlagGroup.visible = false;
        this.checked.visible = this.checkedMask.visible = false;
        if (this.equipEffect) {
            DisplayUtils.removeFromParent(this.equipEffect);
        }
    };
    return SignInItemRenderer;
}(BaseItemRender));
__reflect(SignInItemRenderer.prototype, "SignInItemRenderer");
var StarSunControl = (function (_super) {
    __extends(StarSunControl, _super);
    function StarSunControl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    StarSunControl.ins = function () {
        return _super.ins.call(this);
    };
    StarSunControl.prototype.checkUpRedPoint = function (role, slot) {
        if (!starSunControl.open()) {
            return false;
        }
        var data;
        if (role) {
            data = role;
            if (this.redPoint(data, slot)) {
                return true;
            }
        }
        else {
            for (var i = 0; i < heroControl.subRolesLen; i++) {
                data = heroControl.getSubRoleByIndex(i);
                if (this.redPoint(data, slot)) {
                    return true;
                }
            }
        }
        return false;
    };
    StarSunControl.prototype.redPoint = function (role, slot) {
        if (!role) {
            return false;
        }
        if (!role.equipsData[slot] || !role.equipsData[slot].item || !role.equipsData[slot].item.handle) {
            return false;
        }
        var starSunVos = role.starSunVos;
        if (!starSunVos) {
            return false;
        }
        for (var i = 0 /* WEAPON */; i < 13 /* MAX */; i++) {
            if ((isNaN(slot) || i == slot) && DataCenter.ins().StarSunLvConfig[i] && this.isMaterialUpLevel(i, starSunVos[i].level)) {
                return true;
            }
        }
        return false;
    };
    StarSunControl.prototype.open = function () {
        return GameServer.serverOpenDay >= DataCenter.ins().StarSunBaseConfig.serverDay - 1 && reincarnateControl.lv >= DataCenter.ins().StarSunBaseConfig.zsLv ? true : false;
    };
    /**
     * 星辰数据
     */
    StarSunControl.prototype.init = function (role, datas) {
        for (var pos = 0; pos < datas.length; pos++) {
            var level = datas[pos];
            role.starSunVos[pos] = new StarSunVo(pos, level);
        }
    };
    StarSunControl.prototype.isMaterialUpLevel = function (slot, level) {
        if (!this.open()) {
            return false;
        }
        if (this.isMaxLevel(slot, level)) {
            return false;
        }
        var enhanceIILevel = DataCenter.ins().StarSunLvConfig[slot][level + 1];
        return backpackControl.getBagItemCount(BackpackControl.BAG_TYPE_OTHTER, enhanceIILevel.costItem) >= enhanceIILevel.costNum ? true : false;
    };
    StarSunControl.prototype.isMaxLevel = function (slot, level) {
        var enhanceIILevel = DataCenter.ins().StarSunLvConfig[slot][level + 1];
        return enhanceIILevel ? false : true;
    };
    StarSunControl.prototype.getAttrs = function (role, slot, isNext) {
        if (isNext === void 0) { isNext = false; }
        var attrs = [new AttributeData(4, 0), new AttributeData(5, 0), new AttributeData(6, 0), new AttributeData(2, 0)];
        var power = 0;
        var lv = role.starSunVos[slot].level + (isNext ? 1 : 0);
        if (lv) {
            var enhanceIILevel = DataCenter.ins().StarSunLvConfig[slot][lv];
            if (!enhanceIILevel)
                return null;
            if (enhanceIILevel.attr) {
                attrs = AttributeData.AttrAddition(attrs, enhanceIILevel.attr);
            }
            power += BackpackControl.getAttrPower(attrs);
            power += enhanceIILevel.expower || 0;
        }
        return [attrs, power];
    };
    StarSunControl.prototype.getPercentAttrs = function (role, slot, isNext) {
        if (isNext === void 0) { isNext = false; }
        var attrs = [];
        var power = 0;
        var lv = role.starSunVos[slot].level + (isNext ? 1 : 0);
        if (lv) {
            var enhanceIILevel = DataCenter.ins().StarSunLvConfig[slot][lv];
            if (!enhanceIILevel)
                return null;
            if (enhanceIILevel.per) {
                var itemBaseAttrs = heroControl.getBaseAttrs(role, slot);
                itemBaseAttrs = heroControl.getBaseAttrPercent(itemBaseAttrs, enhanceIILevel.per / 10000, false);
                attrs = AttributeData.AttrAddition(attrs, itemBaseAttrs);
            }
            power += BackpackControl.getAttrPower(attrs);
            power += enhanceIILevel.expower || 0;
        }
        return [attrs, power];
    };
    StarSunControl.prototype.getSlotsByPos = function (role, slot) {
        var len = DataCenter.ins().StarSunBaseConfig.starInfo.length;
        var enhanceSlots = [];
        var star = role.starSunVos[slot].level % len;
        for (var i = 0; i < len; i++, star--) {
            enhanceSlots.push(Math.floor(role.starSunVos[slot].level / len) + (star > 0 ? 1 : 0));
        }
        return enhanceSlots;
    };
    /**
     * 升级星辰
     * 7-10
     */
    StarSunControl.prototype.downStarSunInfo = function (roleId, pos, level) {
        var role = heroControl.getSubRoleByIndex(roleId);
        if (role.starSunVos[pos]) {
            role.starSunVos[pos].level = level;
        }
        else {
            role.starSunVos[pos] = new StarSunVo(pos, level);
        }
        EventMgr.ins().dispatch(89 /* STARSUN_INFO */);
    };
    /**
     * 升级星辰
     * 7-10
     */
    StarSunControl.prototype.upUpgrade = function (roleId, pos) {
        return [roleId, pos];
    };
    __decorate([
        down(10, [1 /* Byte */, 1 /* Byte */, 3 /* Int */])
    ], StarSunControl.prototype, "downStarSunInfo", null);
    __decorate([
        up(10, [1 /* Byte */, 1 /* Byte */])
    ], StarSunControl.prototype, "upUpgrade", null);
    StarSunControl = __decorate([
        protocolsId(7 /* PROTOCOL_7 */)
    ], StarSunControl);
    return StarSunControl;
}(BaseSystem));
__reflect(StarSunControl.prototype, "StarSunControl");
var StarSunRedPoint = (function (_super) {
    __extends(StarSunRedPoint, _super);
    function StarSunRedPoint() {
        var _this = _super.call(this) || this;
        _this.roleTabs = [];
        _this.redPoint = false;
        _this.addCustomEventMany(_this.dispatchStarSunRedPoint, 655 /* STAR_SUN_UP_RED */);
        _this.addCustomEventMany(_this.dispatchStarSunUpRedPoint, 89 /* STARSUN_INFO */, 266 /* BACKPACK_ITEM_ADD */, 268 /* BACKPACK_ITEM_DEL */, 267 /* BACKPACK_ITEM_CHANGE */);
        return _this;
    }
    StarSunRedPoint.ins = function () {
        return _super.ins.call(this);
    };
    StarSunRedPoint.prototype.dispatchStarSunRedPoint = function () {
        this.redPoint = this.redPoint0;
        EventMgr.ins().dispatch(656 /* STAR_SUN_RED */, true);
    };
    StarSunRedPoint.prototype.dispatchStarSunUpRedPoint = function () {
        var canUp = false;
        for (var i = 0; i < heroControl.subRolesLen; i++) {
            var role = heroControl.getSubRoleByIndex(i);
            var isCan = false;
            this.roleTabs[i] = false;
            for (var slot = 0 /* WEAPON */; slot < 13 /* MAX */; slot++) {
                if (starSunControl.checkUpRedPoint(role, slot)) {
                    isCan = true;
                }
            }
            if (isCan) {
                this.roleTabs[i] = true;
                canUp = isCan;
            }
        }
        this.redPoint0 = canUp;
        EventMgr.ins().dispatch(655 /* STAR_SUN_UP_RED */, true);
    };
    return StarSunRedPoint;
}(BaseSystem));
__reflect(StarSunRedPoint.prototype, "StarSunRedPoint");
var StarSunVo = (function () {
    function StarSunVo(id, level) {
        if (level === void 0) { level = 0; }
        this.id = id;
        this.level = level;
    }
    return StarSunVo;
}());
__reflect(StarSunVo.prototype, "StarSunVo");
var StarSunView = (function (_super) {
    __extends(StarSunView, _super);
    function StarSunView() {
        var _this = _super.call(this) || this;
        _this.starPos = [];
        _this.aniPlaying = [];
        _this.oldRes = [];
        _this.skinName = "StarSunViewSkin";
        _this.isTopLevel = true;
        _this.canVis = true;
        return _this;
    }
    StarSunView.prototype.close = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.stopEffTween();
    };
    StarSunView.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.addEventTouchTap(this.getItemTxt0, this.onTap);
        this.addEventTouchTap(this.upGradeBtn0, this.onTap);
        this.addEventTouchTap(this.closeBtn, this.onTap);
        this.addEventChange(this.roleSelect, this.switchRole);
        this.addCustomEvent(266 /* BACKPACK_ITEM_ADD */, this.updateView);
        this.addCustomEvent(268 /* BACKPACK_ITEM_DEL */, this.updateView);
        this.addCustomEvent(267 /* BACKPACK_ITEM_CHANGE */, this.updateView);
        this.addCustomEvent(89 /* STARSUN_INFO */, this.EnhanceInfoCallBack);
        this.roleId = param[0] ? param[0] : 0;
        this.slot = param[1] ? param[1] : 0;
        this.costId = 0;
        for (var i = 0; i < this.starEff.numElements; i++) {
            if (!this.starPos[i]) {
                this.starPos[i] = new EquipPosAniVo(this["star" + i].x, this["star" + i].y, this["star" + i].scaleX, this["star" + i].scaleY);
            }
        }
        this.roleSelect.setCurRole(this.roleId);
        this.updateStarEffX();
        this.updateView();
        this.playEffTween();
    };
    StarSunView.prototype.switchRole = function () {
        var roleId = this.roleSelect.getCurRole();
        if (roleId != this.roleId) {
            this.roleId = roleId;
            this.updateView();
            this.stopEffTween();
            this.updateStarEffX();
            this.playEffTween();
        }
    };
    StarSunView.prototype.EnhanceInfoCallBack = function () {
        var starEffRes = this.getStarEffRes();
        if (this.oldRes.length) {
            var old = this.oldRes.shift();
            this.swapItemPosAni(old, starEffRes[0]);
            this.oldRes.push(starEffRes[0]);
        }
        else {
            this.updateView();
        }
    };
    StarSunView.prototype.onTap = function (e) {
        if (!this.isPlaySuccess()) {
            switch (e.currentTarget) {
                case this.upGradeBtn0:
                    var role = heroControl.getSubRoleByIndex(this.roleId);
                    if (starSunControl.isMaxLevel(this.slot, role.starSunVos[this.slot].level)) {
                        tipsControl.showTips(LangMgr.getValueByKey("maxLevel"));
                        return;
                    }
                    var canUp = starSunControl.isMaterialUpLevel(this.slot, role.starSunVos[this.slot].level);
                    if (!canUp) {
                        tipsControl.showTips(LangMgr.getValueByKey("materialEnought"));
                        return;
                    }
                    starSunControl.upUpgrade(this.roleId, this.slot);
                    break;
                case this.getItemTxt0:
                    warnControl.setBuyGoodsWarn(this.costId);
                    break;
                case this.closeBtn:
                    UIMgr.ins().close(this);
                    break;
                case this.sp:
                    tipsControl.showCenterTips(LangMgr.getValueByKey("starSun4"));
                    break;
            }
        }
    };
    StarSunView.prototype.updateView = function () {
        this.updateAttr();
        this.updateCost();
        this.updateRedPoint();
    };
    StarSunView.prototype.updateCost = function () {
        var role = heroControl.getSubRoleByIndex(this.roleId);
        var enhanceIILevel = DataCenter.ins().StarSunLvConfig[this.slot][role.starSunVos[this.slot].level + 1];
        if (enhanceIILevel) {
            this.upInfo.visible = true;
            var color = ColorUtils.RED;
            var itemData = backpackControl.getBagItemById(enhanceIILevel.costItem);
            var costNum = enhanceIILevel.costNum;
            var count = itemData ? itemData.count : 0;
            if (count >= costNum) {
                color = ColorUtils.GREEN;
            }
            this.icon0.source = DataCenter.ins().ItemConfig[enhanceIILevel.costItem].icon + "_png";
            this.countLabel0.textFlow = TextUtils.generateTextFlow1("|C:" + color + "&T:" + count + "|/" + costNum);
            this.costId = enhanceIILevel.costItem;
        }
        else {
            this.upInfo.visible = false;
            this.costId = 0;
        }
        this.getItemTxt0.textFlow = TextUtils.generateTextFlow1("|U:&T:" + this.getItemTxt0.text);
        this.getItemTxt0.visible = this.costId ? true : false;
        this.maxlv.visible = !this.upInfo.visible;
        this.updateEffColor();
    };
    StarSunView.prototype.updateAttr = function () {
        var role = heroControl.getSubRoleByIndex(this.roleId);
        var enhanceAttrs = starSunControl.getAttrs(role, this.slot);
        var nextEnhanceAttrs = starSunControl.getAttrs(role, this.slot, true);
        var percentAttrs = starSunControl.getPercentAttrs(role, this.slot);
        var baseEnhanceAttrs = enhanceAttrs[0];
        var baseNextEnhanceAttrs = nextEnhanceAttrs ? nextEnhanceAttrs[0] : null;
        var power = Number(enhanceAttrs[1]);
        power += Number(percentAttrs[1]);
        for (var key in baseEnhanceAttrs[0]) {
            power += ItemUtils.relatePower(baseEnhanceAttrs[0][key], role);
        }
        this.powerPanel.setPower(power);
        for (var i = 0; i < baseEnhanceAttrs.length; i++) {
            if (this["attr" + baseEnhanceAttrs[i].type]) {
                this["attr" + baseEnhanceAttrs[i].type].text = AttributeData.getAttrStrByType(baseEnhanceAttrs[i].type) + "+" + baseEnhanceAttrs[i].value,
                    this["addAttr" + baseEnhanceAttrs[i].type].visible = baseNextEnhanceAttrs ? true : false;
                if (baseNextEnhanceAttrs) {
                    if (baseNextEnhanceAttrs[i]) {
                        this["addAttr" + baseNextEnhanceAttrs[i].type].visible = this["arrow" + baseNextEnhanceAttrs[i].type].visible = baseNextEnhanceAttrs[i].value ? true : false;
                        this["addAttr" + baseNextEnhanceAttrs[i].type].text = baseNextEnhanceAttrs[i].value + "";
                    }
                }
                else {
                    this["addAttr" + baseEnhanceAttrs[i].type].visible = this["arrow" + baseEnhanceAttrs[i].type].visible = false;
                }
            }
        }
        var lv = role.starSunVos[this.slot].level;
        if (lv) {
            var enhanceIILevel = DataCenter.ins().StarSunLvConfig[this.slot][lv];
            if (enhanceIILevel.per) {
                this.attr0.text = RoleModel.getEquipNameByType(this.slot) + LangMgr.getValueByKey("starSun1") + enhanceIILevel.per / 100 + "%";
            }
            var nextEnhanceIILevel = DataCenter.ins().StarSunLvConfig[this.slot][lv + 1];
            this.arrow0.visible = this.addAttr0.visible = nextEnhanceIILevel ? true : false;
            if (nextEnhanceIILevel) {
                this.addAttr0.text = nextEnhanceIILevel.per / 100 + "%";
            }
        }
        else {
            this.attr0.text = RoleModel.getEquipNameByType(this.slot) + LangMgr.getValueByKey("starSun1") + "0%";
            var enhanceIILevel = DataCenter.ins().StarSunLvConfig[this.slot][1];
            this.arrow0.visible = this.addAttr0.visible = enhanceIILevel ? true : false;
            if (enhanceIILevel) {
                this.addAttr0.text = enhanceIILevel.per / 100 + "%";
            }
        }
    };
    StarSunView.prototype.updateRedPoint = function () {
        for (var i = 0; i < heroControl.subRolesLen; i++) {
            var role_1 = heroControl.getSubRoleByIndex(i);
            this.roleSelect.showRedPoint(i, starSunControl.checkUpRedPoint(role_1, this.slot));
        }
        var role = heroControl.getSubRoleByIndex(this.roleId);
        this.redPoint2.visible = starSunControl.isMaterialUpLevel(this.slot, role.starSunVos[this.slot].level);
    };
    StarSunView.prototype.updateStarEffX = function () {
        var starEffRes = this.getStarEffRes();
        for (var i = 0; i < starEffRes.length; i++) {
            var star = starEffRes[i];
            if (!this["mc" + star]) {
                this["mc" + star] = new GameMovieClip;
            }
            if (!this["mc" + star].parent) {
                this["starEff" + star].addChild(this["mc" + star]);
            }
            this["star" + star].x = this.starPos[i].x;
            this["star" + star].y = this.starPos[i].y;
            this["star" + star].scaleX = this.starPos[i].scaleX;
            this["star" + star].scaleY = this.starPos[i].scaleY;
            this["y" + star] = this["star" + star].y;
            this["MoveY" + star] = this["y" + star] - 10;
            var starInfo = DataCenter.ins().StarSunBaseConfig.starInfo[star][0];
            if (this["mc" + star].name != PATH_EFF + starInfo) {
                this["mc" + star].playFile(PATH_EFF + starInfo, -1);
            }
        }
        this.oldRes = [];
        this.oldRes.push(starEffRes[0]);
    };
    StarSunView.prototype.getNewEffPos = function (oldStar, newStar) {
        var reslut = [];
        var starEffRes = this.getStarEffRes();
        for (var i = 0; i < starEffRes.length; i++) {
            var star = starEffRes[i];
            if (this["star" + star]) {
                this["y" + star] = this.starPos[i].y;
                this["MoveY" + star] = this["y" + star] - 10;
                if (star == newStar) {
                    reslut[0] = new EquipPosAniVo(this.starPos[i].x, this.starPos[i].y, this.starPos[i].scaleX, this.starPos[i].scaleY);
                }
                if (star == oldStar) {
                    reslut[1] = new EquipPosAniVo(this.starPos[i].x, this.starPos[i].y, this.starPos[i].scaleX, this.starPos[i].scaleY);
                }
            }
        }
        return reslut;
    };
    StarSunView.prototype.getStarEffRes = function () {
        var reslut = [];
        var role = heroControl.getSubRoleByIndex(this.roleId);
        for (var i = 0; i < this.starEff.numElements; i++) {
            reslut.push(i);
        }
        var lv = role.starSunVos[this.slot].level;
        for (var i = 0, slot = i + 1; lv > i; i++, slot++) {
            if (slot >= reslut.length) {
                slot = 1;
            }
            reslut[0] ^= reslut[slot];
            reslut[slot] ^= reslut[0];
            reslut[0] ^= reslut[slot];
        }
        return reslut;
    };
    StarSunView.prototype.swapItemPosAni = function (oldStar, newStar) {
        var _this = this;
        this.addSp();
        if (!TimerMgr.ins().isExists(this.aniTime, this)) {
            if (this["star" + oldStar]) {
                egret.Tween.removeTweens(this["star" + oldStar]);
            }
            if (this["star" + newStar]) {
                egret.Tween.removeTweens(this["star" + newStar]);
            }
            TimerMgr.ins().doTimer(100, 0, this.aniTime, this);
        }
        if (!this["ef" + oldStar]) {
            (this["ef" + oldStar] = new GameMovieClip);
        }
        if (!this["ef" + oldStar].parent) {
            this["success" + oldStar].addChild(this["ef" + oldStar]);
        }
        this["ef" + oldStar].playFile(PATH_EFF + DataCenter.ins().StarSunBaseConfig.starInfo[oldStar][2], 1, function () {
            var vos = _this.getNewEffPos(oldStar, newStar);
            _this.action(oldStar, new EquipPosAniVo(vos[1].x, vos[1].y, vos[1].scaleX, vos[1].scaleY));
            _this.action(newStar, new EquipPosAniVo(vos[0].x, vos[0].y, vos[0].scaleX, vos[0].scaleY));
        }, this);
    };
    StarSunView.prototype.action = function (star, vo) {
        var _this = this;
        var target = this["star" + star];
        this.aniPlaying[star] = true;
        var tween = egret.Tween.get(target);
        tween.to({
            x: vo.x,
            y: vo.y,
            scaleX: vo.scaleX,
            scaleY: vo.scaleY
        }, 500).call(function () {
            egret.Tween.removeTweens(target);
            _this.aniPlaying[star] = false;
            egret.Tween.removeTweens(target);
            egret.Tween.get(target, {
                loop: true
            }).to({
                y: _this["MoveY" + star]
            }, 1000).to({
                y: _this["y" + star]
            }, 1000);
        });
    };
    StarSunView.prototype.aniTime = function () {
        if (!this.isPlaySuccess()) {
            TimerMgr.ins().remove(this.aniTime, this);
            this.updateView();
            this.cleanSp();
        }
    };
    StarSunView.prototype.isPlaySuccess = function () {
        for (var i = 0; i < this.starEff.numElements; i++) {
            if (this.aniPlaying[i]) {
                return true;
            }
        }
        return false;
    };
    StarSunView.prototype.playEffTween = function () {
        for (var i = 0; i < this.starEff.numElements; i++) {
            this["star" + i].y = this["y" + i];
            egret.Tween.removeTweens(this["star" + i]);
            egret.Tween.get(this["star" + i], {
                loop: true
            }).to({
                y: this["MoveY" + i]
            }, 1000).to({
                y: this["y" + i]
            }, 1000);
        }
    };
    StarSunView.prototype.stopEffTween = function () {
        for (var i = 0; i < this.starEff.numElements; i++) {
            if (this["star" + i]) {
                this.aniPlaying[i] = false;
                egret.Tween.removeTweens(this["star" + i]);
            }
        }
    };
    StarSunView.prototype.addSp = function () {
        if (!this.sp) {
            this.sp = new eui.Group;
            this.sp.x = 0;
            this.sp.y = 0;
            this.sp.width = StageUtils.ins().getStage().width;
            this.sp.height = StageUtils.ins().getStage().height;
            this.sp.touchEnabled = true;
        }
        if (!this.sp.parent) {
            StageUtils.ins().getStage().addChild(this.sp);
            this.addEventTouchTap(this.sp, this.onTap);
        }
    };
    StarSunView.prototype.cleanSp = function () {
        this.removeEventTouchTap(this.sp, this.onTap);
        DisplayUtils.removeFromParent(this.sp);
    };
    StarSunView.prototype.updateEffColor = function () {
        var role = heroControl.getSubRoleByIndex(this.roleId);
        if (role && role.starSunVos) {
            for (var i = 0; i < this.starEff.numElements; i++) {
                var target = this["mc" + i];
                role.starSunVos[this.slot].level > i ? this.setLight(target) : this.setGray(target);
            }
        }
    };
    StarSunView.prototype.setGray = function (target) {
        target.filters = [new egret.ColorMatrixFilter([0.3, 0.6, 0, 0, 0, 0.3, 0.6, 0, 0, 0, 0.3, 0.6, 0, 0, 0, 0, 0, 0, 1, 0])];
    };
    StarSunView.prototype.setLight = function (target) {
        target.filters = [];
    };
    return StarSunView;
}(BaseEuiView));
__reflect(StarSunView.prototype, "StarSunView");
var StarSunAttrsItemRenderer = (function (_super) {
    __extends(StarSunAttrsItemRenderer, _super);
    function StarSunAttrsItemRenderer() {
        var _this = _super.call(this) || this;
        _this.skinName = "StarSunAttrsItemRendererSkin";
        return _this;
    }
    StarSunAttrsItemRenderer.prototype.dataChanged = function () {
        if (this.data) {
            var role = this.data.role;
            var pos = this.data.pos;
            var enhanceAttrs = starSunControl.getAttrs(role, pos);
            var percentAttrs = starSunControl.getPercentAttrs(role, pos);
            var specialAttrStr = AttributeData.getAttStrSpecial([enhanceAttrs[0], percentAttrs[0]], 4, 1, " ");
            if (role.starSunVos[pos].level) {
                var enhanceIILevel = DataCenter.ins().StarSunLvConfig[pos][role.starSunVos[pos].level];
                if (enhanceIILevel.per) {
                    specialAttrStr += "\n" + RoleModel.getEquipNameByType(pos) + LangMgr.getValueByKey("starSun1") + enhanceIILevel.per / 100 + "%";
                }
            }
            this.attr.textFlow = TextUtils.generateTextFlow1(specialAttrStr);
        }
    };
    return StarSunAttrsItemRenderer;
}(BaseItemRender));
__reflect(StarSunAttrsItemRenderer.prototype, "StarSunAttrsItemRenderer");
var StarSunEnhanceTipsItemRenderer = (function (_super) {
    __extends(StarSunEnhanceTipsItemRenderer, _super);
    function StarSunEnhanceTipsItemRenderer() {
        var _this = _super.call(this) || this;
        _this.skinName = "StarSunEnhanceTipsItemRendererSkin";
        return _this;
    }
    StarSunEnhanceTipsItemRenderer.prototype.dataChanged = function () {
        if (this.data) {
            var star = this.data;
            for (var i = 0; i < DataCenter.ins().StarSunBaseConfig.starInfo.length; i++) {
                if (this["star" + i]) {
                    this["star" + i].source = DataCenter.ins().StarSunBaseConfig.starInfo[i][1];
                    if (i + 1 > star) {
                        this.setGray(this["star" + i]);
                    }
                }
            }
        }
    };
    StarSunEnhanceTipsItemRenderer.prototype.setGray = function (target) {
        var colorMatrix = [0.3, 0.6, 0, 0, 0, 0.3, 0.6, 0, 0, 0, 0.3, 0.6, 0, 0, 0, 0, 0, 0, 1, 0];
        target.filters = [new egret.ColorMatrixFilter(colorMatrix)];
    };
    return StarSunEnhanceTipsItemRenderer;
}(BaseItemRender));
__reflect(StarSunEnhanceTipsItemRenderer.prototype, "StarSunEnhanceTipsItemRenderer");
var CreateRoleScene = (function (_super) {
    __extends(CreateRoleScene, _super);
    function CreateRoleScene() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * 进入Scene调用
     */
    CreateRoleScene.prototype.onEnter = function () {
        _super.prototype.onEnter.call(this);
        this.addLayer(GameLayer.MAIN1);
        this.addLayer(GameLayer.POPUP);
        this.addLayer(GameLayer.TIPS);
        var view = loginControl.getCreateRoleView();
        UIMgr.ins().open(view);
        gameControl.heartbeat();
    };
    /**
     * 退出Scene调用
     */
    CreateRoleScene.prototype.onExit = function () {
        _super.prototype.onExit.call(this);
    };
    return CreateRoleScene;
}(BaseScene));
__reflect(CreateRoleScene.prototype, "CreateRoleScene");
var LoginScene = (function (_super) {
    __extends(LoginScene, _super);
    function LoginScene() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
    * 进入Scene调用
    */
    LoginScene.prototype.onEnter = function () {
        _super.prototype.onEnter.call(this);
        this.addLayer(GameLayer.MAIN1);
        this.addLayer(GameLayer.POPUP);
        this.addLayer(GameLayer.TIPS);
        UIMgr.ins().open("LoginView");
    };
    /**
     * 退出Scene调用
     */
    LoginScene.prototype.onExit = function () {
        _super.prototype.onExit.call(this);
    };
    return LoginScene;
}(BaseScene));
__reflect(LoginScene.prototype, "LoginScene");
var RegisterLoginScene = (function (_super) {
    __extends(RegisterLoginScene, _super);
    function RegisterLoginScene() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
    * 进入Scene调用
    */
    RegisterLoginScene.prototype.onEnter = function () {
        _super.prototype.onEnter.call(this);
        this.addLayer(GameLayer.MAIN1);
        this.addLayer(GameLayer.POPUP);
        this.addLayer(GameLayer.TIPS);
        UIMgr.ins().open("RegisterLoginView");
    };
    /**
     * 退出Scene调用
     */
    RegisterLoginScene.prototype.onExit = function () {
        _super.prototype.onExit.call(this);
    };
    return RegisterLoginScene;
}(BaseScene));
__reflect(RegisterLoginScene.prototype, "RegisterLoginScene");
var StartGameScene = (function (_super) {
    __extends(StartGameScene, _super);
    function StartGameScene() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * 进入Scene调用
     */
    StartGameScene.prototype.onEnter = function () {
        _super.prototype.onEnter.call(this);
        this.addLayer(GameLayer.MAIN1);
        this.addLayer(GameLayer.POPUP);
        this.addLayer(GameLayer.TIPS);
        UIMgr.ins().open("StartGameView");
    };
    /**
     * 退出Scene调用
     */
    StartGameScene.prototype.onExit = function () {
        _super.prototype.onExit.call(this);
    };
    return StartGameScene;
}(BaseScene));
__reflect(StartGameScene.prototype, "StartGameScene");
var WXGameScene = (function (_super) {
    __extends(WXGameScene, _super);
    function WXGameScene() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
    * 进入Scene调用
    */
    WXGameScene.prototype.onEnter = function () {
        _super.prototype.onEnter.call(this);
        this.addLayer(GameLayer.MAIN1);
        this.addLayer(GameLayer.POPUP);
        this.addLayer(GameLayer.TIPS);
        UIMgr.ins().open("WXLoginView");
    };
    /**
     * 退出Scene调用
     */
    WXGameScene.prototype.onExit = function () {
        _super.prototype.onExit.call(this);
    };
    return WXGameScene;
}(BaseScene));
__reflect(WXGameScene.prototype, "WXGameScene");
var YYBGameScene = (function (_super) {
    __extends(YYBGameScene, _super);
    function YYBGameScene() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
    * 进入Scene调用
    */
    YYBGameScene.prototype.onEnter = function () {
        _super.prototype.onEnter.call(this);
        this.addLayer(GameLayer.MAIN1);
        this.addLayer(GameLayer.POPUP);
        this.addLayer(GameLayer.TIPS);
        UIMgr.ins().open("YYBLoginView");
    };
    /**
     * 退出Scene调用
     */
    YYBGameScene.prototype.onExit = function () {
        _super.prototype.onExit.call(this);
    };
    return YYBGameScene;
}(BaseScene));
__reflect(YYBGameScene.prototype, "YYBGameScene");
var ThunderControl = (function (_super) {
    __extends(ThunderControl, _super);
    function ThunderControl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ThunderControl_1 = ThunderControl;
    ThunderControl.ins = function () {
        return _super.ins.call(this);
    };
    ThunderControl.prototype.initLogin = function () {
        var maxCount = 0;
        for (var key in DataCenter.ins().ThunderSuitLvConfig[1 /* TYPE1 */]) {
            maxCount = +key > maxCount ? +key : maxCount;
        }
        ThunderControl_1.suitMaxCount = maxCount;
    };
    /**
     * 雷霆淬炼数据
     */
    ThunderControl.prototype.init = function (role, datas) {
        var thunderForgeVos = role.thunderForgeVos;
        if (!thunderForgeVos) {
            thunderForgeVos = [];
        }
        for (var i = 0; i < datas.length; i++) {
            if (!thunderForgeVos[i]) {
                thunderForgeVos[i] = new ThunderForgeVo(i);
            }
            thunderForgeVos[i].slot = i;
            for (var j = 0; j < datas[i].length; j++) {
                thunderForgeVos[i].level[j] = datas[i][j];
            }
        }
        role.thunderForgeVos = thunderForgeVos;
    };
    /**
     * 雷霆套装数据
     */
    ThunderControl.prototype.initThunder = function (role, datas) {
        var thunders = role.thunderSuitVos;
        if (!thunders) {
            thunders = [];
        }
        for (var i = 0; i < datas.length; i++) {
            if (!thunders[i]) {
                thunders[i] = new ThunderSuitVo(i);
            }
            thunders[i].slot = i;
            thunders[i].level = datas[i];
        }
        role.thunderSuitVos = thunders;
    };
    ThunderControl.prototype.checkSysOpen = function () {
        var zlLv = DataCenter.ins().ThunderQuenBaseConfig.openLevel / 1000 >> 0;
        var lv = DataCenter.ins().ThunderQuenBaseConfig.openLevel % 1000 >> 0;
        if (GameServer.serverOpenDay >= DataCenter.ins().ThunderQuenBaseConfig.openDay - 1
            && reincarnateControl.lv >= zlLv
            && ActorControl.level >= lv) {
            return true;
        }
        return false;
    };
    ThunderControl.prototype.checkSysShow = function () {
        return true;
    };
    ThunderControl.prototype.getRedPoint = function () {
        if (this.checkSysOpen()) {
            if (this.getRedPoint0()) {
                return true;
            }
            if (this.getRedPoint1()) {
                return true;
            }
        }
        return false;
    };
    ThunderControl.prototype.getRedPoint0 = function (index) {
        for (var i = 0; i < heroControl.subRolesLen; i++) {
            if (isNaN(index) || index == i) {
                var thunderForgeVos = heroControl.getSubRoleByIndex(i).thunderForgeVos;
                if (thunderForgeVos) {
                    for (var j = 0; j < 13 /* MAX */; j++) {
                        if (thunderForgeVos[j] && DataCenter.ins().ThunderQuenBaseConfig.equipKong[j]) {
                            for (var k = 0; k < DataCenter.ins().ThunderQuenBaseConfig.equipKong[j].length; k++) {
                                var condition = this.getConditionByKong(i, j, k);
                                if (condition) {
                                    var strengthenEquipLevel = this.getStrengthenEquipLevelConfig(i, j, k);
                                    if (strengthenEquipLevel) {
                                        var state = this.getCostByKong(strengthenEquipLevel);
                                        if (state) {
                                            return true;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    };
    ThunderControl.prototype.getRedPoint1 = function (index) {
        for (var i = 0; i < heroControl.subRolesLen; i++) {
            if (isNaN(index) || index == i) {
                for (var j = 0 /* WEAPON */; j <= 7 /* SHOE */; j++) {
                    if (this.getThunderRedPoint(i, j)) {
                        return true;
                    }
                }
            }
        }
        return false;
    };
    /**
     * 雷霆淬炼
     * 7-6
     */
    ThunderControl.prototype.upNewStrengthenInfoUp = function (roleId, slot, kong) {
        return [roleId, slot, kong];
    };
    /**
     * 雷霆淬炼
     * 7-6
     */
    ThunderControl.prototype.downNewStrengthenInfo = function (roleId, slot, kong, level) {
        var role = heroControl.getSubRoleByIndex(roleId);
        if (!role.thunderForgeVos) {
            role.thunderForgeVos = [];
        }
        if (!role.thunderForgeVos[slot]) {
            role.thunderForgeVos[slot] = new ThunderForgeVo(slot);
        }
        role.thunderForgeVos[slot].slot = slot;
        role.thunderForgeVos[slot].level[kong] = level;
        EventMgr.ins().dispatch(96 /* THUNDER_STREN_INFO */);
    };
    /**
     * 基础属性
     */
    ThunderControl.prototype.getBaseAttrs = function (role, equipIndex) {
        var attrs = [];
        if (role) {
            var equipsData = role.getEquipByIndex(equipIndex);
            if (equipsData && equipsData.item) {
                var equipConfig = DataCenter.ins().EquipConfig[equipsData.item.configID];
                for (var key in equipConfig) {
                    if (AttributeData.attrNames.indexOf(key) != -1 && equipConfig[key]) {
                        var have = false;
                        for (var i = 0; i < attrs.length; i++) {
                            if (attrs[i].type == AttributeData.translate[key]) {
                                attrs[i] += equipConfig[key];
                                have = true;
                                break;
                            }
                        }
                        if (!have) {
                            var attr = new AttributeData;
                            attr.type = AttributeData.translate[key];
                            attr.value = equipConfig[key];
                            attrs.push(attr);
                        }
                    }
                }
                var itemAttrs = equipsData.item.att;
                for (var j = 0; j < itemAttrs.length; j++) {
                    var itemAttr = itemAttrs[j];
                    var have = false;
                    for (var a in AttributeData.attrNames) {
                        if (itemAttr.type == AttributeData.translate[AttributeData.attrNames[a]]) {
                            have = true;
                            break;
                        }
                    }
                    if (have) {
                        have = false;
                        for (var k = 0; k < attrs.length; k++) {
                            var att = attrs[k];
                            if (att.type == itemAttr.type) {
                                att.value += itemAttr.value,
                                    have = true;
                                break;
                            }
                        }
                        if (!have) {
                            var attr = new AttributeData;
                            attr.type = itemAttr.type;
                            attr.value = itemAttr.value;
                            attrs.push(attr);
                        }
                    }
                }
            }
        }
        return attrs;
    };
    ThunderControl.prototype.getEquipSlotTotalLv = function (role, slot) {
        if (!role)
            return 0;
        var thunderForgeVos = role.thunderForgeVos;
        var level = 0;
        if (thunderForgeVos[slot]) {
            for (var n in thunderForgeVos[slot].level) {
                level += thunderForgeVos[slot].level[n];
            }
        }
        return level;
    };
    ThunderControl.prototype.getRelatePower = function (role, slot) {
        var power = 0;
        if (!role)
            return power;
        var thunderForgeVos = role.thunderForgeVos;
        if (thunderForgeVos[slot]) {
            var lv = 0;
            for (var kong in thunderForgeVos[slot].level) {
                lv += thunderForgeVos[slot].level[kong];
            }
            if (lv) {
                var strengthenEquipSums = [];
                for (var r in DataCenter.ins().ThunderQuenSumConfig[slot]) {
                    strengthenEquipSums.push(DataCenter.ins().ThunderQuenSumConfig[slot][r]);
                }
                strengthenEquipSums.sort(function (t, e) {
                    return t.totalLevel > e.totalLevel ? -1 : 1;
                });
                for (var i = 0; i < strengthenEquipSums.length; i++) {
                    var strengthenEquipSum = strengthenEquipSums[i];
                    if (strengthenEquipSum.attr && lv >= strengthenEquipSum.totalLevel) {
                        for (var attr in strengthenEquipSum.attr) {
                            power += ItemUtils.relatePower(strengthenEquipSum.attr[attr], role);
                        }
                        break;
                    }
                }
            }
        }
        return power;
    };
    ThunderControl.prototype.getBasePower = function (role, slot) {
        var power = 0;
        if (!role)
            return power;
        var thunderForgeVos = role.thunderForgeVos;
        var lv = 0;
        for (var o in thunderForgeVos) {
            if (thunderForgeVos[o] && thunderForgeVos[o].slot == slot) {
                for (var a in thunderForgeVos[o].level) {
                    lv += thunderForgeVos[o].level[a];
                }
                break;
            }
        }
        if (lv) {
            var strengthenEquipSums = [];
            for (var h in DataCenter.ins().ThunderQuenSumConfig[slot]) {
                strengthenEquipSums.push(DataCenter.ins().ThunderQuenSumConfig[slot][h]);
            }
            strengthenEquipSums.sort(function (a, b) {
                return a.totalLevel > b.totalLevel ? -1 : 1;
            });
            for (var i = 0; i < strengthenEquipSums.length; i++) {
                var strengthenEquipSum = strengthenEquipSums[i];
                if (lv >= strengthenEquipSum.totalLevel) {
                    var attrs = this.getBaseAttrs(role, slot);
                    for (var attr in attrs) {
                        attrs[attr].value *= strengthenEquipSum.precent / 100;
                        attrs[attr].value = attrs[attr].value >> 0;
                    }
                    power += BackpackControl.getAttrPower(attrs);
                    break;
                }
            }
        }
        return power;
    };
    ThunderControl.prototype.getAttrs = function (role, attrs, slot) {
        if (!attrs) {
            attrs = [new AttributeData(4, 0), new AttributeData(5, 0), new AttributeData(6, 0), new AttributeData(2, 0)];
        }
        var thunderForgeVos = role.thunderForgeVos;
        for (var index = 0 /* WEAPON */; index <= 7 /* SHOE */; index++) {
            if ((isNaN(slot) || slot == index) && thunderForgeVos[index]) {
                for (var kong = 0; kong < thunderForgeVos[index].level.length; kong++) {
                    if (DataCenter.ins().ThunderQuenLvConfig[thunderForgeVos[index].slot] && DataCenter.ins().ThunderQuenLvConfig[thunderForgeVos[index].slot][kong]) {
                        var strengthenEquipLevel = DataCenter.ins().ThunderQuenLvConfig[thunderForgeVos[index].slot][kong][thunderForgeVos[index].level[kong]];
                        if (strengthenEquipLevel) {
                            for (var i = 0; i < strengthenEquipLevel.attrs.length; i++) {
                                var have = false;
                                for (var j = 0; j < attrs.length; j++) {
                                    if (attrs[j].type == strengthenEquipLevel.attrs[i].type) {
                                        attrs[j].value += strengthenEquipLevel.attrs[i].value,
                                            have = true;
                                        break;
                                    }
                                }
                                if (!have) {
                                    var attr = new AttributeData;
                                    attr.type = strengthenEquipLevel.attrs[i].type;
                                    attr.value = strengthenEquipLevel.attrs[i].value;
                                    attrs.push(attr);
                                }
                            }
                        }
                    }
                }
            }
        }
        return attrs;
    };
    ThunderControl.prototype.getDifAttrs = function (roleId, slot, kong) {
        var strengthenEquipLevel;
        var attrs = [];
        var role = heroControl.getSubRoleByIndex(roleId);
        var thunderForgeVos = role.thunderForgeVos;
        if (thunderForgeVos[slot] && thunderForgeVos[slot].level[kong]) {
            strengthenEquipLevel = DataCenter.ins().ThunderQuenLvConfig[slot][kong][thunderForgeVos[slot].level[kong]];
            var nextStrengthenEquipLevel = DataCenter.ins().ThunderQuenLvConfig[slot][kong][thunderForgeVos[slot].level[kong] + 1];
            if (strengthenEquipLevel && nextStrengthenEquipLevel) {
                for (var i = 0; i < nextStrengthenEquipLevel.attrs.length; i++) {
                    if (strengthenEquipLevel.attrs[i] && nextStrengthenEquipLevel.attrs[i].type == strengthenEquipLevel.attrs[i].type) {
                        var attr = new AttributeData;
                        attr.type = nextStrengthenEquipLevel.attrs[i].type;
                        attr.value = nextStrengthenEquipLevel.attrs[i].value - strengthenEquipLevel.attrs[i].value;
                        attrs.push(attr);
                    }
                }
            }
        }
        else {
            strengthenEquipLevel = DataCenter.ins().ThunderQuenLvConfig[slot][kong][1];
            for (var j = 0; j < strengthenEquipLevel.attrs.length; j++) {
                var attr = new AttributeData;
                attr.type = strengthenEquipLevel.attrs[j].type;
                attr.value = strengthenEquipLevel.attrs[j].value;
                attrs.push(attr);
            }
        }
        return attrs;
    };
    ThunderControl.prototype.getConditionByKong = function (roleId, slot, kong) {
        var strengthenEquipConditions = DataCenter.ins().ThunderQuenCondConfig[slot];
        if (!strengthenEquipConditions)
            return false;
        var role = heroControl.getSubRoleByIndex(roleId);
        var thunderForgeVos = role.thunderForgeVos;
        var strengthenEquipCondition = strengthenEquipConditions[kong];
        if (strengthenEquipCondition && thunderForgeVos) {
            for (var i = 0; i < strengthenEquipCondition.condition.length; i++) {
                if (!thunderForgeVos[strengthenEquipCondition.condition[i].slot]) {
                    return false;
                }
                if (thunderForgeVos[slot].level[strengthenEquipCondition.condition[i].slot] < strengthenEquipCondition.condition[i].lv) {
                    return false;
                }
            }
            return true;
        }
        return strengthenEquipCondition ? false : true;
    };
    ThunderControl.prototype.getCostByKong = function (strengthenEquipLevel) {
        if (strengthenEquipLevel) {
            var itemData = backpackControl.getBagItemById(strengthenEquipLevel.materialInfo.id);
            var materialcount = strengthenEquipLevel.materialInfo.count;
            var itemCount = itemData ? itemData.count : 0;
            return itemCount >= materialcount;
        }
        return false;
    };
    ThunderControl.prototype.getStrengthenEquipLevelConfig = function (roleId, slot, kong) {
        var strengthenEquipLevel;
        var role = heroControl.getSubRoleByIndex(roleId);
        var thunderForgeVos = role.thunderForgeVos[slot];
        if (thunderForgeVos) {
            var level = thunderForgeVos.level[kong] + 1;
            strengthenEquipLevel = DataCenter.ins().ThunderQuenLvConfig[slot][kong][level];
        }
        else {
            strengthenEquipLevel = DataCenter.ins().ThunderQuenLvConfig[slot][kong][1];
        }
        return strengthenEquipLevel;
    };
    /**
     * 雷霆套装
     * 7-7
     */
    ThunderControl.prototype.upThunderEquipUp = function (roleId, slot) {
        return [roleId, slot];
    };
    /**
     * 雷霆套装
     * 7-7
     */
    ThunderControl.prototype.downThunderEquipUp = function (roleId, slot, level) {
        var role = heroControl.getSubRoleByIndex(roleId);
        role.thunderSuitVos[slot].level = level;
        EventMgr.ins().dispatch(97 /* THUNDER_EQUIP_UP */);
    };
    ThunderControl.prototype.getThunderRedPoint = function (roleId, slot) {
        var thunderEquipLevel = this.getThunderEquipLevelConfig(roleId, slot);
        return this.getCostByThunder(thunderEquipLevel);
    };
    ThunderControl.prototype.getCostByThunder = function (thunderEquipLevel) {
        if (thunderEquipLevel) {
            var itemData = backpackControl.getBagItemById(thunderEquipLevel.materialInfo.id);
            var materialCount = thunderEquipLevel.materialInfo.count;
            var itemCount = itemData ? itemData.count : 0;
            return itemCount >= materialCount;
        }
        return false;
    };
    ThunderControl.prototype.getThunderEquipLevelConfig = function (roleId, slot) {
        var thunderEquipLevel;
        var role = heroControl.getSubRoleByIndex(roleId);
        var thunderEquipData = role.thunderSuitVos[slot];
        if (thunderEquipData) {
            var lv = thunderEquipData.level + 1;
            thunderEquipLevel = DataCenter.ins().ThunderEquipLvConfig[slot][lv];
        }
        else {
            thunderEquipLevel = DataCenter.ins().ThunderEquipLvConfig[slot][1];
        }
        return thunderEquipLevel;
    };
    ThunderControl.prototype.getThunderItemAttrs = function (role, attrs, slot, ignoreSlots) {
        if (!attrs) {
            attrs = [new AttributeData(4, 0), new AttributeData(5, 0), new AttributeData(6, 0), new AttributeData(2, 0), new AttributeData(87 /* atSkillDamage */, 0), new AttributeData(88 /* atSkillDamageResist */, 0)];
        }
        var thunders = role.thunderSuitVos;
        for (var i = 0 /* WEAPON */; i <= 7 /* SHOE */; i++) {
            if ((!ignoreSlots || ignoreSlots.indexOf(i) == -1) && (isNaN(slot) || slot == i) && thunders[i]) {
                var level = thunders[i].level;
                var thunderEquipLevel = DataCenter.ins().ThunderEquipLvConfig[i][level];
                if (thunderEquipLevel) {
                    for (var j = 0; j < thunderEquipLevel.attrs.length; j++) {
                        var have = false;
                        for (var k = 0; k < attrs.length; k++) {
                            if (attrs[k].type == thunderEquipLevel.attrs[j].type) {
                                attrs[k].value += thunderEquipLevel.attrs[j].value;
                                have = true;
                                break;
                            }
                        }
                        if (!have) {
                            var attr = new AttributeData;
                            attr.type = thunderEquipLevel.attrs[j].type;
                            attr.value = thunderEquipLevel.attrs[j].value;
                            attrs.push(attr);
                        }
                    }
                }
            }
        }
        return attrs;
    };
    ThunderControl.prototype.getThunderItemNextAttrs = function (roleId, slot) {
        var thunderEquipLevel;
        var attrs = [];
        var role = heroControl.getSubRoleByIndex(roleId);
        var thunders = role.thunderSuitVos;
        if (thunders[slot] && thunders[slot].level) {
            thunderEquipLevel = DataCenter.ins().ThunderEquipLvConfig[slot][thunders[slot].level];
            var nextThunderEquipLevel = DataCenter.ins().ThunderEquipLvConfig[slot][thunders[slot].level + 1];
            if (thunderEquipLevel && nextThunderEquipLevel) {
                for (var i = 0; i < nextThunderEquipLevel.attrs.length; i++) {
                    if (thunderEquipLevel.attrs[i] && nextThunderEquipLevel.attrs[i].type == thunderEquipLevel.attrs[i].type) {
                        var attr = new AttributeData;
                        attr.type = nextThunderEquipLevel.attrs[i].type;
                        attr.value = nextThunderEquipLevel.attrs[i].value - thunderEquipLevel.attrs[i].value;
                        attrs.push(attr);
                    }
                }
            }
        }
        else {
            thunderEquipLevel = DataCenter.ins().ThunderEquipLvConfig[slot][1];
            for (var i = 0; i < thunderEquipLevel.attrs.length; i++) {
                var attr = new AttributeData;
                attr.type = thunderEquipLevel.attrs[i].type;
                attr.value = thunderEquipLevel.attrs[i].value;
                attrs.push(attr);
            }
        }
        return attrs;
    };
    ThunderControl.prototype.getAttrValueDesc = function (type, value) {
        var desc = "";
        switch (type) {
            case 2 /* atMaxHp */:
            case 4 /* atAttack */:
            case 5 /* atDef */:
            case 6 /* atRes */:
                desc = value + "";
                break;
            default:
                desc = (value / 100 >> 0) + "%";
        }
        return desc;
    };
    /**
     * 雷霆套装数据
     */
    ThunderControl.prototype.getSuitData = function (type, role) {
        var thunderSuitDatas = [];
        var thunderSuitLevel = DataCenter.ins().ThunderSuitLvConfig[type];
        if (!thunderSuitLevel)
            return null;
        var nums = [];
        var levels = [];
        for (var num in thunderSuitLevel) {
            nums.push(+num);
            if (!levels.length) {
                for (var level in thunderSuitLevel[num]) {
                    levels.push(+level);
                }
            }
        }
        levels.sort(SortUtils.sortDescByKey);
        nums.sort(SortUtils.sortDescByKey);
        if (type == 0 /* TYPE0 */) {
            var minLevel = Math.min(role.thunderSuitVos[0 /* WEAPON */] ? role.thunderSuitVos[0 /* WEAPON */].level : 0, role.thunderSuitVos[2 /* CLOTHES */] ? role.thunderSuitVos[2 /* CLOTHES */].level : 0);
            for (var i = 0; i < levels.length; i++) {
                if (minLevel >= levels[i]) {
                    thunderSuitDatas.push(new ThunderSuitCalcVo(type, thunderSuitLevel[2][levels[i]].level, thunderSuitLevel[2][levels[i]].num));
                    break;
                }
            }
            return thunderSuitDatas;
        }
        if (type == 1 /* TYPE1 */) {
            var lvs = [
                role.thunderSuitVos[1 /* HEAD */] ? role.thunderSuitVos[1 /* HEAD */].level : 0,
                role.thunderSuitVos[3 /* NECKLACE */] ? role.thunderSuitVos[3 /* NECKLACE */].level : 0,
                role.thunderSuitVos[4 /* WRIST */] ? role.thunderSuitVos[4 /* WRIST */].level : 0,
                role.thunderSuitVos[5 /* BRACELET */] ? role.thunderSuitVos[5 /* BRACELET */].level : 0,
                role.thunderSuitVos[6 /* RING */] ? role.thunderSuitVos[6 /* RING */].level : 0,
                role.thunderSuitVos[7 /* SHOE */] ? role.thunderSuitVos[7 /* SHOE */].level : 0
            ];
            var datas = {};
            for (var i = 0; i < levels.length; i++) {
                var level = levels[i];
                datas[level] = 0;
                for (var j = 0; j < lvs.length; j++) {
                    if (lvs[j] >= level) {
                        datas[level]++;
                    }
                }
            }
            for (var i = 0; i < nums.length; i++) {
                var num = nums[i];
                for (var j = 0; j < levels.length; j++) {
                    var level = levels[j];
                    if (datas[level] >= num) {
                        thunderSuitDatas.push(new ThunderSuitCalcVo(type, thunderSuitLevel[num][level].level, thunderSuitLevel[num][level].num));
                        break;
                    }
                }
                if (thunderSuitDatas.length >= nums.length) {
                    break;
                }
            }
            return thunderSuitDatas;
        }
        return null;
    };
    /**
     * 雷霆套装战力
     */
    ThunderControl.prototype.getSuitRelatePower = function (role) {
        var power = 0;
        if (!role)
            return power;
        var thunderSuitDataType0 = this.getSuitData(0 /* TYPE0 */, role);
        var thunderSuitDataType1 = this.getSuitData(1 /* TYPE1 */, role);
        if (thunderSuitDataType0) {
            for (var key in thunderSuitDataType0) {
                var type = thunderSuitDataType0[key].type;
                var level = thunderSuitDataType0[key].level;
                var num = thunderSuitDataType0[key].num;
                var thunderSuitLevel = this.getThunderSuitLevelConfig(type, num, level);
                for (var attr in thunderSuitLevel.attrs) {
                    power += ItemUtils.relatePower(thunderSuitLevel.attrs[attr], role);
                }
                power += thunderSuitLevel.ex_power ? thunderSuitLevel.ex_power : 0;
            }
        }
        if (thunderSuitDataType1) {
            for (var key in thunderSuitDataType1) {
                var type = thunderSuitDataType1[key].type;
                var level = thunderSuitDataType1[key].level;
                var num = thunderSuitDataType1[key].num;
                var thunderSuitLevel = this.getThunderSuitLevelConfig(type, num, level);
                for (var attr in thunderSuitLevel.attrs) {
                    power += ItemUtils.relatePower(thunderSuitLevel.attrs[attr], role);
                }
                power += thunderSuitLevel.ex_power ? thunderSuitLevel.ex_power : 0;
            }
        }
        return power;
    };
    /**
     * 雷霆套装属性
     */
    ThunderControl.prototype.getThunderSuitAttrs = function (role, type, num) {
        var thunderSuitDataType0;
        var thunderSuitDataType1;
        var attrs = [];
        var pre = 0;
        var attrTypes = [2 /* atMaxHp */, 4 /* atAttack */, 5 /* atDef */, 6 /* atRes */, 87 /* atSkillDamage */, 88 /* atSkillDamageResist */];
        if (type == 0 /* TYPE0 */) {
            thunderSuitDataType0 = this.getSuitData(0 /* TYPE0 */, role);
        }
        else if (type == 1 /* TYPE1 */) {
            thunderSuitDataType1 = this.getSuitData(1 /* TYPE1 */, role);
        }
        else {
            thunderSuitDataType0 = this.getSuitData(0 /* TYPE0 */, role);
            thunderSuitDataType1 = this.getSuitData(1 /* TYPE1 */, role);
        }
        if (thunderSuitDataType0) {
            for (var i = 0; i < thunderSuitDataType0.length; i++) {
                if (!num || num == thunderSuitDataType0[i].num) {
                    var thunderSuitLevel = this.getThunderSuitLevelConfig(thunderSuitDataType0[i].type, thunderSuitDataType0[i].num, thunderSuitDataType0[i].level);
                    if (thunderSuitLevel && thunderSuitLevel.attrs) {
                        var attrs0 = [];
                        for (var j = 0; j < thunderSuitLevel.attrs.length; j++) {
                            if (attrTypes.indexOf(thunderSuitLevel.attrs[j].type) != -1) {
                                attrs0.push(thunderSuitLevel.attrs[j]);
                            }
                        }
                        attrs = AttributeData.AttrAddition(attrs, attrs0);
                        if (thunderSuitLevel.pre) {
                            pre += thunderSuitLevel.pre / 100;
                        }
                    }
                }
            }
        }
        if (thunderSuitDataType1) {
            for (var i = 0; i < thunderSuitDataType1.length; i++) {
                if (!num || num == thunderSuitDataType1[i].num) {
                    var thunderSuitLevel = this.getThunderSuitLevelConfig(thunderSuitDataType1[i].type, thunderSuitDataType1[i].num, thunderSuitDataType1[i].level);
                    if (thunderSuitLevel) {
                        var attrs1 = [];
                        if (thunderSuitLevel.attrs) {
                            for (var j = 0; j < thunderSuitLevel.attrs.length; j++) {
                                if (attrTypes.indexOf(thunderSuitLevel.attrs[j].type) != -1) {
                                    attrs1.push(thunderSuitLevel.attrs[j]);
                                }
                            }
                        }
                        attrs = AttributeData.AttrAddition(attrs, attrs1);
                        if (thunderSuitLevel.pre) {
                            pre += thunderSuitLevel.pre / 100;
                        }
                    }
                }
            }
        }
        return [attrs, pre];
    };
    /**
     * 雷霆属性
     */
    ThunderControl.prototype.getThunderAttrs = function (role, slot) {
        var attrs = this.getAttrs(role, null, slot);
        attrs = this.getThunderItemAttrs(role, attrs, slot);
        var suitAttrs = this.getThunderSuitAttrs(role);
        this.AddThunderPercent(attrs, suitAttrs[1]);
        attrs = AttributeData.AttrAddition(attrs, suitAttrs[0]);
        return attrs;
    };
    ThunderControl.prototype.AddThunderPercent = function (attrs, value, boo) {
        if (boo === void 0) { boo = true; }
        for (var i = 0; i < attrs.length; i++) {
            if (attrs[i].type == 2 /* atMaxHp */ || attrs[i].type == 4 /* atAttack */ || attrs[i].type == 5 /* atDef */ || attrs[i].type == 6 /* atRes */) {
                if (boo) {
                    attrs[i].value *= 1 + value;
                }
                else {
                    attrs[i].value *= value;
                }
                attrs[i].value = attrs[i].value >> 0;
            }
        }
    };
    /**
     * 是否雷霆技能
     */
    ThunderControl.prototype.isThunderSkill = function (id) {
        var thunderSuitLevels = DataCenter.ins().ThunderSuitLvConfig[0 /* TYPE0 */][2];
        for (var key in thunderSuitLevels) {
            var thunderSuitLevel = thunderSuitLevels[key];
            var skillIds = thunderSuitLevel.skillId;
            for (var i = 0; i < skillIds.length; i++) {
                var skillId = skillIds[i];
                var skillsConfig = DataCenter.ins().SkillsConfig[skillId];
                if (id == skillId || skillsConfig.otherSkills && skillsConfig.otherSkills.indexOf(id) > -1) {
                    return true;
                }
            }
        }
        return false;
    };
    /**
     * 当前雷霆技能等级
     */
    ThunderControl.prototype.getCurThunderSkillLv = function (role) {
        return Math.min(role.thunderSuitVos[0].level, role.thunderSuitVos[2].level);
    };
    ThunderControl.prototype.getThunderSuitLevelConfig = function (type, num, level) {
        if (DataCenter.ins().ThunderSuitLvConfig[type] && DataCenter.ins().ThunderSuitLvConfig[type][num] && DataCenter.ins().ThunderSuitLvConfig[type][num][level]) {
            return DataCenter.ins().ThunderSuitLvConfig[type][num][level];
        }
        return null;
    };
    ThunderControl.suitMaxCount = 6;
    __decorate([
        up(6, [2 /* Short */, 2 /* Short */, 2 /* Short */])
    ], ThunderControl.prototype, "upNewStrengthenInfoUp", null);
    __decorate([
        down(6, [2 /* Short */, 2 /* Short */, 2 /* Short */, 2 /* Short */])
    ], ThunderControl.prototype, "downNewStrengthenInfo", null);
    __decorate([
        up(7, [1 /* Byte */, 1 /* Byte */])
    ], ThunderControl.prototype, "upThunderEquipUp", null);
    __decorate([
        down(7, [4 /* UByte */, 4 /* UByte */, 3 /* Int */])
    ], ThunderControl.prototype, "downThunderEquipUp", null);
    ThunderControl = ThunderControl_1 = __decorate([
        protocolsId(7 /* PROTOCOL_7 */)
    ], ThunderControl);
    return ThunderControl;
    var ThunderControl_1;
}(BaseSystem));
__reflect(ThunderControl.prototype, "ThunderControl");
var ThunderForgeVo = (function () {
    function ThunderForgeVo(slot) {
        this.slot = slot;
        this.level = [];
        var equipKong = DataCenter.ins().ThunderQuenBaseConfig.equipKong[slot];
        if (!equipKong) {
            equipKong = DataCenter.ins().ThunderQuenBaseConfig.equipKong[0];
        }
        for (var i = 0; i < equipKong.length; i++) {
            this.level[i] = 0;
        }
    }
    return ThunderForgeVo;
}());
__reflect(ThunderForgeVo.prototype, "ThunderForgeVo");
var ThunderSuitCalcVo = (function () {
    function ThunderSuitCalcVo(type, level, num) {
        this.type = type;
        this.level = level;
        this.num = num;
    }
    return ThunderSuitCalcVo;
}());
__reflect(ThunderSuitCalcVo.prototype, "ThunderSuitCalcVo");
var ThunderSuitVo = (function () {
    function ThunderSuitVo(slot) {
        this.slot = slot;
        this.level = 0;
    }
    return ThunderSuitVo;
}());
__reflect(ThunderSuitVo.prototype, "ThunderSuitVo");
/**
 * 雷霆强化
 */
var ThunderForgePanel = (function (_super) {
    __extends(ThunderForgePanel, _super);
    function ThunderForgePanel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ThunderForgePanel.prototype.close = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        DisplayUtils.removeFromParent(this.equipMc);
        this.stopIconTween();
    };
    ThunderForgePanel.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.addEventTouchTap(this.getItemTxt, this.onTap);
        this.addEventTouchTap(this.upGradeBtn, this.onTap);
        this.addEventTouchTap(this.suitAttr, this.onTap);
        for (var i = 0; i < this.equips.numElements; i++) {
            this.addEventTouchTap(this["equip" + i], this.onTap);
        }
        for (var i = 0; i < this.equipUps.numElements; i++) {
            this.addEventTouchTap(this["equipUp" + i], this.onClick);
        }
        this.addCustomEvent(266 /* BACKPACK_ITEM_ADD */, this.updateView);
        this.addCustomEvent(268 /* BACKPACK_ITEM_DEL */, this.updateView);
        this.addCustomEvent(267 /* BACKPACK_ITEM_CHANGE */, this.updateView);
        this.addCustomEvent(96 /* THUNDER_STREN_INFO */, this.NewStrengthenInfoCallBack);
        this.roleId = param[0] ? param[0] : 0;
        this.slot = param[1] ? param[1] : 0;
        this.kong = param[2] ? param[2] : 0;
        this.costId = 0;
        this.updateView();
    };
    ThunderForgePanel.prototype.NewStrengthenInfoCallBack = function () {
        this.playMc();
        this.updateKongIndex();
        this.updateView();
    };
    ThunderForgePanel.prototype.playMc = function () {
        if (this.equipUpEff0) {
            var eff = new GameMovieClip;
            eff.playFile(PATH_EFF + "leitingcuilianchenggong", 1);
            this.equipUpEff0.addChild(eff);
        }
        if (this["equipUp" + this.kong]) {
            var eff = new GameMovieClip;
            eff.playFile(PATH_EFF + "forgeSuccess", 1);
            this["equipUp" + this.kong].eff.addChild(eff);
        }
    };
    ThunderForgePanel.prototype.updateKongIndex = function () {
        var equipLevel = thunderControl.getStrengthenEquipLevelConfig(this.roleId, this.slot, this.kong);
        if (equipLevel) {
            var condition = thunderControl.getConditionByKong(this.roleId, this.slot, this.kong);
            if (condition) {
                return;
            }
        }
        var state = false;
        for (var i = 0; i < DataCenter.ins().ThunderQuenBaseConfig.kongIcon.length; i++) {
            var equipLevel_1 = thunderControl.getStrengthenEquipLevelConfig(this.roleId, this.slot, i);
            if (equipLevel_1) {
                this.kong = i;
                state = true;
                break;
            }
        }
        if (!state) {
            this.kong = 0;
        }
    };
    ThunderForgePanel.prototype.onTap = function (e) {
        switch (e.currentTarget) {
            case this.upGradeBtn:
                var condition = thunderControl.getConditionByKong(this.roleId, this.slot, this.kong);
                if (!condition) {
                    var equipCondition = DataCenter.ins().ThunderQuenCondConfig[this.slot][this.kong];
                    if (equipCondition) {
                        var tips = "";
                        for (var i = 0; i < equipCondition.condition.length; i++) {
                            var kongStr = DataCenter.ins().ThunderQuenBaseConfig.equipKong[this.slot][equipCondition.condition[i].slot];
                            tips += kongStr + LangMgr.getValueByKey("thunerForge1", equipCondition.condition[i].lv);
                            if (i + 1 < equipCondition.condition.length) {
                                tips += ",";
                            }
                        }
                        tips += LangMgr.getValueByKey("commonUnlock") + DataCenter.ins().ThunderQuenBaseConfig.equipKong[this.slot][this.kong];
                        tipsControl.showTips(tips);
                        return;
                    }
                }
                var equipLevel = thunderControl.getStrengthenEquipLevelConfig(this.roleId, this.slot, this.kong);
                if (!equipLevel) {
                    tipsControl.showTips(LangMgr.getValueByKey("maxLevel"));
                    return;
                }
                if (!thunderControl.getCostByKong(equipLevel)) {
                    tipsControl.showTips(LangMgr.getValueByKey("materialEnought"));
                    return;
                }
                thunderControl.upNewStrengthenInfoUp(this.roleId, this.slot, this.kong);
                break;
            case this.getItemTxt:
                warnControl.setBuyGoodsWarn(this.costId);
                break;
            case this.suitAttr:
                UIMgr.ins().open(ThunderStrengthTipsView, this.roleId, this.slot);
                break;
            default:
                for (var i = 0; i < this.equips.numElements; i++) {
                    if (this["equip" + i]) {
                        this["equip" + i].select.visible = false;
                        if (e.currentTarget == this["equip" + i]) {
                            this["equip" + i].select.visible = true;
                            this.slot = i;
                            this.updateKongIndex();
                        }
                    }
                }
                this.updateView();
        }
    };
    ThunderForgePanel.prototype.onClick = function (e) {
        var displayObj = this["equipUp" + this.kong];
        var state = false;
        var kong = -1;
        for (var i = 0; i < this.equipUps.numElements; i++) {
            if (this["equipUp" + i]) {
                this["equipUp" + i].select.visible = false;
                if (e.currentTarget == this["equipUp" + i]) {
                    kong = i;
                    state = thunderControl.getConditionByKong(this.roleId, this.slot, i);
                    if (state) {
                        this["equipUp" + i].select.visible = true;
                        this.kong = i;
                    }
                }
            }
        }
        if (!state && kong > 0) {
            displayObj.select.visible = true;
            var equipCondition = DataCenter.ins().ThunderQuenCondConfig[this.slot][kong];
            if (equipCondition) {
                var tips = "";
                for (var i = 0; i < equipCondition.condition.length; i++) {
                    var kongStr = DataCenter.ins().ThunderQuenBaseConfig.equipKong[this.slot][equipCondition.condition[i].slot];
                    tips += kongStr + LangMgr.getValueByKey("thunerForge1", equipCondition.condition[i].lv);
                    if (i + 1 < equipCondition.condition.length)
                        tips += ",";
                }
                tips += LangMgr.getValueByKey("commonUnlock") + DataCenter.ins().ThunderQuenBaseConfig.equipKong[this.slot][kong];
                tipsControl.showCenterTips("|C:" + LangMgr.getColor('color22') + "&T:" + tips);
                return;
            }
        }
        this.updateView();
    };
    ThunderForgePanel.prototype.setRoleId = function (index) {
        this.roleId = index;
        this.updateKongIndex();
        this.updateView();
    };
    ThunderForgePanel.prototype.updateView = function () {
        this.updateEquipUps();
        this.updateAttr();
        this.updateCost();
        this.updateEquips();
        this.updateEquipMc();
    };
    ThunderForgePanel.prototype.updateEquipMc = function () {
        if (!this.equipMc) {
            this.equipMc = new GameMovieClip;
        }
        if (!this.equipMc.parent) {
            this.equipEff.addChild(this.equipMc);
        }
        this.equipMc.y = 0;
        this.iconY = this.equipMc.y;
        this.iconMoveY = this.iconY - 10;
        this.playIconTween();
        var effName = PATH_EFF + DataCenter.ins().ThunderQuenBaseConfig.equipEff[this.slot];
        if (this.equipMc.name != effName) {
            this.equipMc.playFile(effName, -1);
        }
        this.equipBg.source = "equipup_equip_bg_" + this.slot;
    };
    ThunderForgePanel.prototype.updateEquips = function () {
        var role = heroControl.getSubRoleByIndex(this.roleId);
        var thunderForgeVos = role.thunderForgeVos;
        for (var i = 0; i < DataCenter.ins().ThunderQuenBaseConfig.equipIconInfo.length; i++) {
            var displayObj = this["equip" + i];
            if (displayObj) {
                displayObj.itemName.text = DataCenter.ins().ThunderQuenBaseConfig.equipIconInfo[i][0];
                displayObj.redPoint.visible = false;
                displayObj.select.visible = this.slot == i;
                displayObj.lvNum.text = thunderControl.getEquipSlotTotalLv(role, i) + "";
                if (!displayObj.iconEff.numElements) {
                    var eff = new GameMovieClip;
                    eff.playFile(PATH_EFF + DataCenter.ins().ThunderQuenBaseConfig.equipEff[i], -1);
                    displayObj.iconEff.addChild(eff);
                }
                if (!thunderForgeVos[i] || !DataCenter.ins().ThunderQuenBaseConfig.equipKong[i]) {
                    continue;
                }
                var state = false;
                displayObj.lvNum.visible = state;
                for (var j = 0; j < DataCenter.ins().ThunderQuenBaseConfig.equipKong[i].length; j++) {
                    var condition = thunderControl.getConditionByKong(this.roleId, i, j);
                    if (condition) {
                        state = true;
                        var equipLevel = thunderControl.getStrengthenEquipLevelConfig(this.roleId, i, j);
                        if (equipLevel) {
                            var cost = thunderControl.getCostByKong(equipLevel);
                            if (cost) {
                                displayObj.redPoint.visible = cost;
                                break;
                            }
                        }
                    }
                }
                displayObj.lvNum.visible = state;
            }
        }
    };
    ThunderForgePanel.prototype.updateCost = function () {
        var equipLevel = thunderControl.getStrengthenEquipLevelConfig(this.roleId, this.slot, this.kong);
        if (equipLevel) {
            this.upInfo.visible = true;
            var color = ColorUtils.RED;
            var itemData = backpackControl.getBagItemById(equipLevel.materialInfo.id);
            var count = equipLevel.materialInfo.count;
            var bagCount = itemData ? itemData.count : 0;
            if (bagCount >= count) {
                color = ColorUtils.GREEN;
            }
            this.icon.source = DataCenter.ins().ItemConfig[equipLevel.materialInfo.id].icon + "_png";
            this.countLabel.textFlow = TextUtils.generateTextFlow1("|C:" + color + "&T:" + bagCount + "|/" + count);
            this.costId = equipLevel.materialInfo.id;
        }
        else {
            this.upInfo.visible = false;
            this.costId = 0;
        }
        this.getItemTxt.textFlow = TextUtils.generateTextFlow1("|U:&T:" + this.getItemTxt.text);
        this.getItemTxt.visible = this.costId ? true : false;
        this.maxlv.visible = !this.upInfo.visible;
        this.redPoint0.visible = false;
        var condition = thunderControl.getConditionByKong(this.roleId, this.slot, this.kong);
        if (condition) {
            var equipLevel_2 = thunderControl.getStrengthenEquipLevelConfig(this.roleId, this.slot, this.kong);
            if (equipLevel_2) {
                this.redPoint0.visible = thunderControl.getCostByKong(equipLevel_2);
            }
        }
    };
    ThunderForgePanel.prototype.updateAttr = function () {
        var role = heroControl.getSubRoleByIndex(this.roleId);
        var attrs = thunderControl.getAttrs(role);
        var power = BackpackControl.getAttrPower(attrs);
        for (var i = 0 /* WEAPON */; i <= 7 /* SHOE */; i++) {
            power += thunderControl.getRelatePower(role, i);
            power += thunderControl.getBasePower(role, i);
        }
        this.powerPanel.setPower(power);
        var difAttrs = thunderControl.getDifAttrs(this.roleId, this.slot, this.kong);
        for (var i = 0; i < attrs.length; i++) {
            if (this["attr" + attrs[i].type]) {
                this["attr" + attrs[i].type].text = AttributeData.getAttrStrByType(attrs[i].type) + "+" + attrs[i].value;
                this["addAttr" + attrs[i].type].visible = difAttrs.length ? true : false;
                if (difAttrs.length) {
                    if (difAttrs[i]) {
                        this["addAttr" + attrs[i].type].visible = this["arrow" + attrs[i].type].visible = difAttrs[i].value ? true : false;
                        this["addAttr" + attrs[i].type].text = attrs[i].value + difAttrs[i].value + "";
                    }
                }
                else {
                    this["addAttr" + attrs[i].type].visible = this["arrow" + attrs[i].type].visible = false;
                }
            }
        }
    };
    ThunderForgePanel.prototype.updateEquipUps = function () {
        var thunderForgeVos = heroControl.getSubRoleByIndex(this.roleId).thunderForgeVos;
        for (var i = 0; i < this.equipUps.numElements; i++) {
            var equipUpObj = this["equipUp" + i];
            if (equipUpObj) {
                if (DataCenter.ins().ThunderQuenBaseConfig.equipKong[this.slot].length < i) {
                    equipUpObj.visible = false;
                }
                else {
                    equipUpObj.redPoint.visible = false;
                    var condition = thunderControl.getConditionByKong(this.roleId, this.slot, i);
                    if (condition) {
                        var strengthenEquipLevel = thunderControl.getStrengthenEquipLevelConfig(this.roleId, this.slot, i);
                        if (strengthenEquipLevel) {
                            equipUpObj.redPoint.visible = thunderControl.getCostByKong(strengthenEquipLevel);
                        }
                    }
                    equipUpObj.visible = true;
                    equipUpObj.openText.text = DataCenter.ins().ThunderQuenBaseConfig.equipKong[this.slot][i];
                    equipUpObj.lvNum.text = thunderForgeVos[this.slot].level[i];
                    equipUpObj.lvNum.visible = condition ? true : false;
                    equipUpObj.select.visible = this.kong == i;
                    equipUpObj.icon.visible = condition ? true : false;
                    equipUpObj.lock.visible = !equipUpObj.icon.visible;
                    equipUpObj.icon.source = DataCenter.ins().ThunderQuenBaseConfig.kongIcon[i][1];
                    equipUpObj.nameImg.source = DataCenter.ins().ThunderQuenBaseConfig.kongIcon[i][0];
                }
            }
        }
    };
    ThunderForgePanel.prototype.playIconTween = function () {
        if (this.equipMc) {
            this.equipMc.y = this.iconY;
            egret.Tween.removeTweens(this.equipMc);
            egret.Tween.get(this.equipMc, {
                loop: true
            }).to({
                y: this.iconMoveY
            }, 1000).to({
                y: this.iconY
            }, 1000);
        }
    };
    ThunderForgePanel.prototype.stopIconTween = function () {
        egret.Tween.removeTweens(this.equipMc);
    };
    return ThunderForgePanel;
}(BasePanel));
__reflect(ThunderForgePanel.prototype, "ThunderForgePanel");
var ThunderItemTipsView = (function (_super) {
    __extends(ThunderItemTipsView, _super);
    function ThunderItemTipsView() {
        var _this = _super.call(this) || this;
        _this.skinName = "ThunderItemTipsViewSkin";
        _this.uilayer = GameLayer.POPUP;
        return _this;
    }
    ThunderItemTipsView.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.addEventTouchTap(this.bgClose, this.onTap);
        this.itemId = param[0];
        this.updateView();
    };
    ThunderItemTipsView.prototype.onTap = function (e) {
        switch (e.currentTarget) {
            case this.bgClose:
                UIMgr.ins().close(this);
        }
    };
    ThunderItemTipsView.prototype.updateView = function () {
        var itemConfig = DataCenter.ins().ItemConfig[this.itemId];
        var type = ItemUtils.getSubType(itemConfig);
        var equipLevel = DataCenter.ins().ThunderEquipLvConfig[type][1];
        var power = BackpackControl.getAttrPower(equipLevel.attrs);
        power += equipLevel.ex_power ? equipLevel.ex_power : 0;
        this.powerPanel.setPower(power);
        this.itemname.text = itemConfig.name;
        this.lblTitle.text = itemConfig.name;
        this.itemIcon.setData(itemConfig);
        if (!this.mc) {
            this.mc = new GameMovieClip;
        }
        if (!this.mc.parent) {
            this.thunderEff.addChild(this.mc);
        }
        this.mc.playFile(PATH_EFF + DataCenter.ins().ThunderQuenBaseConfig.thunderRes[type][2], -1);
        this.content.textFlow = TextUtils.generateTextFlow1(itemConfig.desc);
    };
    return ThunderItemTipsView;
}(BaseEuiView));
__reflect(ThunderItemTipsView.prototype, "ThunderItemTipsView");
var ThunderSkillTipsView = (function (_super) {
    __extends(ThunderSkillTipsView, _super);
    function ThunderSkillTipsView() {
        var _this = _super.call(this) || this;
        _this.skinName = "ThunderSkillTipsViewSkin";
        _this.uilayer = GameLayer.POPUP;
        _this.selfChar = new UnitMonster;
        _this.selfChar.x = _this.actor.x;
        _this.selfChar.y = _this.actor.y;
        _this.selfChar.hideBodyContainer();
        _this.show.addChild(_this.selfChar);
        _this.targetChar = new UnitMonster;
        _this.targetChar.x = _this.target.x;
        _this.targetChar.y = _this.target.y;
        _this.targetChar.hideBodyContainer();
        _this.show.addChild(_this.targetChar);
        return _this;
    }
    ThunderSkillTipsView.prototype.initUI = function () {
        var _this = this;
        _super.prototype.initUI.call(this);
        this.maxLv = 5;
        SkillEffPlayShow.bottomLayer = this.show;
        SkillEffPlayShow.topLayer = this.show;
        SkillEffPlayShow.setTimeout = function (time, fun, funThis) {
            TimerMgr.ins().doTimer(time, 1, fun, funThis);
        };
        SkillEffPlayShow.shake = function (e, range, time, count, probability) {
            probability = probability || 1;
            if (e == UnitMgr.ins().getMainRole(0) && Math.random() < probability) {
                DisplayUtils.shakeIt(_this.show, range, time, count);
            }
        };
    };
    ThunderSkillTipsView.prototype.isAct = function () {
        return this.role.thunderSuitVos.length > 0 && this.role.thunderSuitVos[0].level >= 1 && this.role.thunderSuitVos[2].level >= 1;
    };
    ThunderSkillTipsView.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.addEventTouchTap(this, this.onTouch);
        this.role = heroControl.getSubRoleByIndex(param[0]);
        var job = this.role.job;
        var lv = 1;
        if (this.isAct()) {
            this.currentState = "active";
            this.nametxt0.text = DataCenter.ins().ThunderQuenBaseConfig.suitSkillName[1] + "·" + LangMgr.getValueByKey("jobShort" + job);
            lv = thunderControl.getCurThunderSkillLv(this.role);
            var skillId = thunderControl.getThunderSuitLevelConfig(0 /* TYPE0 */, 2, lv).skillId[job - 1];
            var skillsConfig = DataCenter.ins().SkillsConfig[skillId];
            var skillsDescConfig = DataCenter.ins().SkillsDescConfig[skillsConfig.desc];
            this.lvtxt0.text = "Lv." + lv;
            this.activeDesc0.text = DataCenter.ins().ThunderQuenBaseConfig.equipIconInfo[0 /* WEAPON */][0]
                + LangMgr.getValueByKey("thunerForge1", lv) + "，" + DataCenter.ins().ThunderQuenBaseConfig.equipIconInfo[2 /* CLOTHES */][0]
                + LangMgr.getValueByKey("thunerForge1", lv);
            this.skillDesc0.textFlow = TextUtils.generateTextFlow1(skillsDescConfig.desc);
            this.playSkillEff(skillsDescConfig);
            lv++;
            if (lv > this.maxLv) {
                this.currentState = "max";
                return;
            }
            skillId = thunderControl.getThunderSuitLevelConfig(0 /* TYPE0 */, 2, lv).skillId[job - 1];
            skillsConfig = DataCenter.ins().SkillsConfig[skillId];
            skillsDescConfig = DataCenter.ins().SkillsDescConfig[skillsConfig.desc];
            this.lvtxt1.text = "Lv." + lv;
            this.activeDesc1.text = DataCenter.ins().ThunderQuenBaseConfig.equipIconInfo[0 /* WEAPON */][0]
                + LangMgr.getValueByKey("thunerForge1", lv) + "，" + DataCenter.ins().ThunderQuenBaseConfig.equipIconInfo[2 /* CLOTHES */][0]
                + LangMgr.getValueByKey("thunerForge1", lv);
            var color = StringUtils.getStrColor(skillsDescConfig.desc);
            this.skillDesc1.textFlow = TextUtils.generateTextFlow1(StringUtils.replaceStrColor(skillsDescConfig.desc, color));
        }
        else {
            this.currentState = "unactive";
            lv = 1;
            var skillId = thunderControl.getThunderSuitLevelConfig(0 /* TYPE0 */, 2, lv).skillId[job - 1];
            var skillsConfig = DataCenter.ins().SkillsConfig[skillId];
            var skillsDescConfig = DataCenter.ins().SkillsDescConfig[skillsConfig.desc];
            this.nametxt0.text = DataCenter.ins().ThunderQuenBaseConfig.suitSkillName[1] + "·" + LangMgr.getValueByKey("jobShort" + job);
            this.lvtxt0.text = "Lv." + lv;
            this.activeDesc0.text = DataCenter.ins().ThunderQuenBaseConfig.equipIconInfo[0 /* WEAPON */][0]
                + LangMgr.getValueByKey("thunerForge1", 1) + "，" + DataCenter.ins().ThunderQuenBaseConfig.equipIconInfo[2 /* CLOTHES */][0]
                + LangMgr.getValueByKey("thunerForge1", 1);
            var color = StringUtils.getStrColor(skillsDescConfig.desc);
            this.skillDesc0.textFlow = TextUtils.generateTextFlow1(StringUtils.replaceStrColor(skillsDescConfig.desc, color));
            this.playSkillEff(skillsDescConfig);
        }
    };
    ThunderSkillTipsView.prototype.playSkillEff = function (skillsDescConfig) {
        var self = this;
        TimerMgr.ins().removeAll(this);
        var fun = function () {
            SkillEffPlayShow.play(skillsDescConfig.effectId, self.selfChar, [self.targetChar]);
        };
        fun();
        TimerMgr.ins().doTimer(2000, 0, fun, this);
    };
    ThunderSkillTipsView.prototype.onTouch = function (e) {
        UIMgr.ins().close(this);
    };
    return ThunderSkillTipsView;
}(BaseEuiView));
__reflect(ThunderSkillTipsView.prototype, "ThunderSkillTipsView");
/**
 * 雷霆之力
 */
var ThunderStrengthTipsView = (function (_super) {
    __extends(ThunderStrengthTipsView, _super);
    function ThunderStrengthTipsView() {
        var _this = _super.call(this) || this;
        _this.skinName = "ThunderStrengthTipsViewSkin";
        return _this;
    }
    ThunderStrengthTipsView.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.addEventTouchTap(this.bgClose, this.onTap);
        this.roleId = param[0];
        this.slot = param[1];
        this.updateActive();
        this.updateView();
    };
    ThunderStrengthTipsView.prototype.onTap = function (e) {
        switch (e.currentTarget) {
            case this.bgClose:
                UIMgr.ins().close(this);
        }
    };
    ThunderStrengthTipsView.prototype.updateActive = function () {
        var thunderForgeVos = heroControl.getSubRoleByIndex(this.roleId).thunderForgeVos;
        this.totalLevel = 0;
        this.suitLv = 1;
        for (var slot in thunderForgeVos) {
            if (thunderForgeVos[slot] && thunderForgeVos[slot].slot == this.slot) {
                for (var i in thunderForgeVos[slot].level) {
                    this.totalLevel += thunderForgeVos[slot].level[i];
                }
                break;
            }
        }
        var equipSums = [];
        for (var totalLevel in DataCenter.ins().ThunderQuenSumConfig[this.slot]) {
            equipSums.push(DataCenter.ins().ThunderQuenSumConfig[this.slot][totalLevel]);
        }
        equipSums.sort(function (a, b) {
            return a.totalLevel > b.totalLevel ? -1 : 1;
        });
        var state = false;
        if (this.totalLevel) {
            var num = 0;
            for (var i = 0; i < equipSums.length; i++) {
                var equipSum = equipSums[i];
                num++;
                if (this.totalLevel >= equipSum.totalLevel) {
                    this.suitConfig = equipSum;
                    state = 1 == num;
                    if (!state) {
                        this.nextsuitConfig = equipSums[num - 2];
                    }
                    break;
                }
            }
            this.suitLv = equipSums.length - num + 1;
        }
        if (this.suitConfig) {
            if (state) {
                this.currentState = "max";
            }
            else {
                this.currentState = "active";
            }
        }
        else {
            this.currentState = "unactive";
            this.suitConfig = equipSums[equipSums.length - 1];
        }
        this.validateNow();
    };
    ThunderStrengthTipsView.prototype.updateView = function () {
        this.setCurDesc();
        this.setNextDesc();
    };
    ThunderStrengthTipsView.prototype.setCurDesc = function () {
        this.name0.text = DataCenter.ins().ThunderQuenBaseConfig.suitSkillName[0] + LangMgr.getValueByKey("numberLevel", this.suitLv);
        var tips = "";
        if (this.currentState == "unactive") {
            this.activeLbl.textFlow = TextUtils.generateTextFlow1(LangMgr.getValueByKey("thunderStrength1", this.suitConfig.totalLevel, this.totalLevel, this.suitConfig.totalLevel));
        }
        tips += LangMgr.getValueByKey("thunderStrength2", RoleModel.getEquipNameByType(this.slot), this.suitConfig.precent);
        if (this.suitConfig.attr) {
            var customValue = AttributeData.getCustomAttrValue(this.suitConfig.attr, 65 /* atHuiXinDamage */);
            var attrs = undefined;
            if (customValue) {
                attrs = [];
                attrs.push({
                    type: 65 /* atHuiXinDamage */,
                    value: LangMgr.getValueByKey("thunderStrength3", customValue)
                });
            }
            tips += "\n" + AttributeData.getAttStr(this.suitConfig.attr, 0, 1, "+", false, true, null, "", attrs);
        }
        this.content0.textFlow = TextUtils.generateTextFlow1(tips);
    };
    ThunderStrengthTipsView.prototype.setNextDesc = function () {
        if (this.nextsuitConfig) {
            this.name1.text = DataCenter.ins().ThunderQuenBaseConfig.suitSkillName[0] + LangMgr.getValueByKey("numberLevel", this.suitLv + 1);
            ;
            var tips = "";
            this.nextActiveLbl.textFlow = TextUtils.generateTextFlow1(LangMgr.getValueByKey("thunderStrength1", this.nextsuitConfig.totalLevel, this.totalLevel, this.nextsuitConfig.totalLevel));
            tips += LangMgr.getValueByKey("thunderStrength2", RoleModel.getEquipNameByType(this.slot), this.nextsuitConfig.precent);
            if (this.nextsuitConfig.attr) {
                var customValue = AttributeData.getCustomAttrValue(this.nextsuitConfig.attr, 65 /* atHuiXinDamage */);
                var attrs = undefined;
                if (customValue) {
                    attrs = [];
                    attrs.push({
                        type: 65 /* atHuiXinDamage */,
                        value: LangMgr.getValueByKey("thunderStrength3", customValue)
                    });
                }
                tips += "\n" + AttributeData.getAttStr(this.nextsuitConfig.attr, 0, 1, "+", false, true, null, "", attrs);
            }
            this.content1.textFlow = TextUtils.generateTextFlow1(tips);
        }
    };
    return ThunderStrengthTipsView;
}(BaseEuiView));
__reflect(ThunderStrengthTipsView.prototype, "ThunderStrengthTipsView");
var ThunderSuitPanel = (function (_super) {
    __extends(ThunderSuitPanel, _super);
    function ThunderSuitPanel() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.equipPos = [];
        _this.equipItems = [];
        _this.aniTags = [];
        _this.beginPoint = 0;
        _this.canDoList = [];
        return _this;
    }
    ThunderSuitPanel.prototype.childrenCreated = function () {
        this.effY = this.equipEff.verticalCenter;
        this.effMoveY = this.effY - 10;
    };
    ThunderSuitPanel.prototype.close = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        UIMgr.ins().getView(ThunderView).isNotMove = false;
        TimerMgr.ins().remove(this.aniTime, this);
        this.stopBeatAnimat();
        this.stopTween();
    };
    ThunderSuitPanel.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        UIMgr.ins().getView(ThunderView).isNotMove = true;
        this.addEventTouchTap(this.upGradeBtn, this.onTap);
        this.addEventTouchTap(this.skillBtn, this.onTap);
        this.addEventTouchTap(this.suitBtn, this.onTap);
        this.addEventTouchTap(this.leftBtn, this.onTap);
        this.addEventTouchTap(this.rightBtn, this.onTap);
        for (var i = 0; i < this.equipUps.numElements; i++) {
            if (this["equip" + i]) {
                this["equip" + i].name = i + "";
                if (this.equipPos[i]) {
                    this["equip" + i].x = this.equipPos[i].x;
                    this["equip" + i].y = this.equipPos[i].y;
                }
                else {
                    this.equipPos[i] = new EquipPosAniVo(this["equip" + i].x, this["equip" + i].y, this["equip" + i].scaleX, this["equip" + i].scaleY);
                    this.equipItems[i] = this["equip" + i];
                    this.equipItems[i].x = this["equip" + i].x;
                    this.equipItems[i].y = this["equip" + i].y;
                    this.addEventTouchTap(this["equip" + i], this.onClick);
                }
            }
        }
        this.addCustomEvent(266 /* BACKPACK_ITEM_ADD */, this.updateView);
        this.addCustomEvent(268 /* BACKPACK_ITEM_DEL */, this.updateView);
        this.addCustomEvent(267 /* BACKPACK_ITEM_CHANGE */, this.updateView);
        this.addCustomEvent(97 /* THUNDER_EQUIP_UP */, this.ThunderEquipUpCallBack);
        this.equipEff.touchEnabled = false;
        this.roleId = param[0] ? param[0] : 0;
        this.slot = param[1] ? param[1] : 0;
        this.costId = 0;
        this.updateView();
        this.playUpTween();
    };
    ThunderSuitPanel.prototype.ThunderEquipUpCallBack = function () {
        this.playMc();
        this.updateView();
    };
    ThunderSuitPanel.prototype.playMc = function () {
        if (this.equipUpEff0) {
            var eff = new GameMovieClip;
            eff.playFile(PATH_EFF + "forgeSuccess", 1);
            this.equipUpEff0.addChild(eff);
        }
        this.startBeatAnimat();
    };
    ThunderSuitPanel.prototype.addSp = function () {
        if (!this.sp) {
            this.sp = new eui.Group;
            this.sp.x = 0;
            this.sp.y = 0;
            this.sp.width = StageUtils.ins().getStage().width;
            this.sp.height = StageUtils.ins().getStage().height;
            this.sp.touchEnabled = true;
        }
        if (!this.sp.parent) {
            StageUtils.ins().getStage().addChild(this.sp);
            this.addEventTouchTap(this.sp, this.onTap);
        }
    };
    ThunderSuitPanel.prototype.cleanSp = function () {
        this.removeEventTouchTap(this.sp, this.onTap);
        DisplayUtils.removeFromParent(this.sp);
    };
    ThunderSuitPanel.prototype.onTap = function (e) {
        switch (e.currentTarget) {
            case this.sp:
                tipsControl.showCenterTips(LangMgr.getValueByKey("thunderSuit1"));
                break;
            case this.upGradeBtn:
                var thunderEquipLevel = thunderControl.getThunderEquipLevelConfig(this.roleId, this.slot);
                if (!thunderEquipLevel) {
                    tipsControl.showTips(LangMgr.getValueByKey("maxLevel"));
                    return;
                }
                if (!thunderControl.getCostByThunder(thunderEquipLevel)) {
                    tipsControl.showTips(LangMgr.getValueByKey("materialEnought"));
                    return;
                }
                thunderControl.upThunderEquipUp(this.roleId, this.slot);
                break;
            case this.skillBtn:
                UIMgr.ins().open(ThunderSkillTipsView, this.roleId);
                break;
            case this.suitBtn:
                UIMgr.ins().open(ThunderSuitTipsView, this.roleId, this.slot);
                break;
            case this.leftBtn:
                this.slot++;
                if (this.slot > 7 /* SHOE */) {
                    this.slot = 0 /* WEAPON */;
                }
                this.playEquipsAni();
                break;
            case this.rightBtn:
                this.slot--;
                if (this.slot < 0) {
                    this.slot = 7 /* SHOE */;
                }
                this.playEquipsAni();
        }
    };
    ThunderSuitPanel.prototype.onClick = function (e) {
        if (!this.getTags()) {
            var state = false;
            for (var i = 0; i < this.equipUps.numElements; i++) {
                if (this["equip" + i] && e.currentTarget == this["equip" + i]) {
                    if (this.slot == i) {
                        state = true;
                    }
                    this.slot = i;
                }
            }
            if (!state) {
                this.playEquipsAni();
            }
        }
    };
    ThunderSuitPanel.prototype.setRoleId = function (index) {
        this.roleId = index;
        this.updateView();
        if (this.canDoList.length) {
            this.canDoList.sort(SortUtils.sortAscByKey);
            var slot = this.canDoList[0];
            var role = heroControl.getSubRoleByIndex(index);
            if (role.thunderSuitVos[slot] && role.thunderSuitVos[slot].level >= CommonUtils.getObjectLength(DataCenter.ins().ThunderEquipLvConfig[slot])) {
                this.slot = slot;
                this.playEquipsAni();
            }
        }
    };
    ThunderSuitPanel.prototype.updateView = function () {
        this.updateEquips();
        this.updateAttr();
        this.updateCost();
        this.updateEffect();
    };
    ThunderSuitPanel.prototype.updateEffect = function () {
        if (!this.equipEffMc) {
            this.equipEffMc = new GameMovieClip;
        }
        if (!this.equipEffMc.parent) {
            this.equipEff.addChild(this.equipEffMc);
            this.equipEffMc.touchEnabled = false;
        }
        if (this.equipEffMc.name != PATH_EFF + DataCenter.ins().ThunderQuenBaseConfig.thunderRes[this.slot][0]) {
            this.equipEffMc.playFile(PATH_EFF + DataCenter.ins().ThunderQuenBaseConfig.thunderRes[this.slot][0], -1);
        }
    };
    ThunderSuitPanel.prototype.updateEquips = function () {
        this.canDoList = [];
        for (var i = 0; i < this.equipPos.length; i++) {
            var equipItem = this.equipItems[i];
            if (equipItem) {
                equipItem.x = this.equipPos[i].x;
                equipItem.y = this.equipPos[i].y;
                equipItem.scaleX = this.equipPos[i].scaleX;
                equipItem.scaleY = this.equipPos[i].scaleY;
                if (this.updateEquipItem(Number(equipItem.name))) {
                    this.canDoList.push(Number(equipItem.name));
                }
            }
        }
    };
    ThunderSuitPanel.prototype.updateEquipItem = function (index) {
        var role = heroControl.getSubRoleByIndex(this.roleId);
        var displayEquip = this["equip" + index];
        displayEquip.lvNum.text = role.thunderSuitVos[index] ? role.thunderSuitVos[index].level : 0;
        displayEquip.nameLabel.text = "" + DataCenter.ins().ThunderQuenBaseConfig.equipIconInfo[index][0];
        displayEquip.nameImg.source = "equip_train_name" + index;
        displayEquip.itemIcon.source = "equip_train_icon" + index;
        displayEquip.redPoint.visible = thunderControl.getThunderRedPoint(this.roleId, index);
        displayEquip.nameImg.visible = index == this.slot;
        displayEquip.nameLabel.visible = !(index == this.slot);
        return displayEquip.redPoint.visible;
    };
    ThunderSuitPanel.prototype.updateAttr = function () {
        var role = heroControl.getSubRoleByIndex(this.roleId);
        var suitAttrs = thunderControl.getThunderSuitAttrs(role);
        var attrs = thunderControl.getAttrs(role);
        if (!suitAttrs[1]) {
            attrs = [];
        }
        var itemAttrs = thunderControl.getThunderItemAttrs(role);
        attrs = AttributeData.AttrAddition(attrs, itemAttrs);
        thunderControl.AddThunderPercent(attrs, suitAttrs[1]);
        attrs = AttributeData.AttrAddition(attrs, suitAttrs[0]);
        var power = BackpackControl.getAttrPower(attrs);
        power += thunderControl.getSuitRelatePower(role);
        for (var pos = 0 /* WEAPON */; pos < role.thunderSuitVos.length; pos++) {
            if (role.thunderSuitVos[pos].level) {
                var a = DataCenter.ins().ThunderEquipLvConfig[pos][role.thunderSuitVos[pos].level];
                power += a.ex_power ? a.ex_power : 0;
            }
        }
        this.powerPanel.setPower(power);
        var itemNextAttrs = thunderControl.getThunderItemNextAttrs(this.roleId, this.slot);
        thunderControl.AddThunderPercent(itemAttrs, suitAttrs[1]);
        thunderControl.AddThunderPercent(itemNextAttrs, suitAttrs[1]);
        for (var i = 0; i < itemAttrs.length; i++) {
            if (this["attr" + itemAttrs[i].type]) {
                this["attr" + itemAttrs[i].type].visible = true;
                this["attr" + itemAttrs[i].type].text = AttributeData.getAttrStrByType(itemAttrs[i].type) + "+" + thunderControl.getAttrValueDesc(itemAttrs[i].type, itemAttrs[i].value);
                if (itemNextAttrs.length) {
                    this["addAttr" + itemAttrs[i].type].visible = this["arrow" + itemAttrs[i].type].visible = false;
                    for (var h = 0; h < itemNextAttrs.length; h++) {
                        if (itemNextAttrs[h] && itemNextAttrs[h].type == itemAttrs[i].type) {
                            this["addAttr" + itemAttrs[i].type].visible = this["arrow" + itemAttrs[i].type].visible = true;
                            this["addAttr" + itemAttrs[i].type].text = thunderControl.getAttrValueDesc(itemAttrs[i].type, itemAttrs[i].value + itemNextAttrs[h].value);
                            break;
                        }
                    }
                }
                else {
                    this["addAttr" + itemAttrs[i].type].visible = this["arrow" + itemAttrs[i].type].visible = false;
                }
            }
        }
    };
    ThunderSuitPanel.prototype.updateCost = function () {
        var equipLevel = thunderControl.getThunderEquipLevelConfig(this.roleId, this.slot);
        if (equipLevel) {
            this.upInfo.visible = true;
            var color = ColorUtils.RED;
            var itemData = backpackControl.getBagItemById(equipLevel.materialInfo.id);
            var materialCount = equipLevel.materialInfo.count;
            var itemCount = itemData ? itemData.count : 0;
            if (itemCount >= materialCount) {
                color = ColorUtils.GREEN;
            }
            this.icon.source = DataCenter.ins().ItemConfig[equipLevel.materialInfo.id].icon + "_png";
            this.countLabel.textFlow = TextUtils.generateTextFlow1("|C:" + color + "&T:" + itemCount + "|/" + materialCount);
            this.costId = equipLevel.materialInfo.id;
        }
        else {
            this.upInfo.visible = false;
            this.costId = 0;
        }
        this.maxlv.visible = !this.upInfo.visible;
        this.redPoint0.visible = thunderControl.getThunderRedPoint(this.roleId, this.slot);
        this.upGradeBtn.labelDisplay.text = (equipLevel && equipLevel.level == 1) ? LangMgr.getValueByKey("equiActive") : LangMgr.getValueByKey("equiUpdate");
    };
    ThunderSuitPanel.prototype.calcEquipItemSortData = function () {
        var dir = 0;
        var pos = 0;
        for (var i = 0; i < this.equipItems.length; i++) {
            if (this["equip" + this.slot] == this.equipItems[i]) {
                pos = i;
                break;
            }
        }
        var index = pos;
        if (pos > this.equipItems.length / 2) {
            dir = 1;
        }
        if (dir) {
            index = this.equipItems.length - pos;
        }
        return [dir, index];
    };
    ThunderSuitPanel.prototype.playEquipsAni = function () {
        if (!this.getTags()) {
            var sortData = this.calcEquipItemSortData();
            var dir = sortData[0];
            var index = sortData[1];
            var equips = [];
            for (var i = 0; i < this.equipItems.length; i++) {
                equips.push(this.equipItems[i]);
            }
            for (var i = 0; index > i; i++) {
                if (dir) {
                    var equipItem = this.equipItems.pop();
                    this.equipItems.unshift(equipItem);
                }
                else {
                    var equipItem = this.equipItems.shift();
                    this.equipItems.push(equipItem);
                }
            }
            var equipPoes = [];
            for (var i = 0; i < equips.length; i++) {
                equipPoes[i] = [];
                var j = i;
                for (var h = 0; index > h; h++) {
                    if (dir) {
                        j += 1;
                    }
                    else {
                        j -= 1;
                    }
                    if (j >= this.equipPos.length) {
                        j = 0;
                    }
                    else if (j < 0) {
                        j = this.equipPos.length - 1;
                    }
                    equipPoes[i].push(new EquipPosAniVo(this.equipPos[j].x, this.equipPos[j].y, this.equipPos[j].scaleX, this.equipPos[j].scaleY));
                }
            }
            for (var i = 0; i < equipPoes.length; i++) {
                this.aniTags[i] = true;
                this.action(equips[i], equipPoes[i], i);
            }
            this.addSp();
            if (!TimerMgr.ins().isExists(this.aniTime, this)) {
                TimerMgr.ins().doTimer(100, 0, this.aniTime, this);
            }
        }
    };
    ThunderSuitPanel.prototype.getTags = function () {
        for (var i = 0; i < this.aniTags.length; i++) {
            if (this.aniTags[i]) {
                return true;
            }
        }
        return false;
    };
    ThunderSuitPanel.prototype.aniTime = function () {
        if (!this.getTags()) {
            TimerMgr.ins().remove(this.aniTime, this);
            this.updateView();
            this.cleanSp();
        }
    };
    ThunderSuitPanel.prototype.action = function (target, equipPoes, i) {
        var self = this;
        if (!equipPoes.length) {
            this.aniTags[i] = false;
            return;
        }
        var equipPos = equipPoes.shift();
        var tween = egret.Tween.get(target);
        tween.to({
            x: equipPos.x,
            y: equipPos.y,
            scaleX: equipPos.scaleX,
            scaleY: equipPos.scaleY
        }, 500).call(function () {
            egret.Tween.removeTweens(target);
            self.action(target, equipPoes, i);
        });
    };
    ThunderSuitPanel.prototype.startBeatAnimat = function () {
        this.stopBeatAnimat();
        DisplayUtils.removeFromParent(this.equipEffMcShadow);
        if (!this.equipEffMcShadow) {
            this.equipEffMcShadow = new GameMovieClip;
        }
        if (!this.equipEffMcShadow.parent) {
            this.equipEff.addChild(this.equipEffMcShadow);
        }
        this.equipEffMcShadow.touchEnabled = false;
        this.equipEffMcShadow.playFile(this.equipEffMc.name, -1);
        this.equipEffMcShadow.visible = false;
        TimerMgr.ins().doTimer(100, 1, this.runTween, this);
    };
    ThunderSuitPanel.prototype.runTween = function () {
        this.equipEffMcShadow.visible = true;
        this.equipEffMcShadow.alpha = 0;
        this.equipEffMcShadow.scaleX = this.equipEffMc.scaleX;
        this.equipEffMcShadow.scaleY = this.equipEffMc.scaleY;
        this.equipEffMcShadow.x = this.equipEffMc.x + (this.equipEffMc.width >> 1);
        this.equipEffMcShadow.y = this.equipEffMc.y + (this.equipEffMc.height >> 1);
        this.equipEffMcShadow.anchorOffsetX = this.equipEffMc.width >> 1;
        this.equipEffMcShadow.anchorOffsetY = this.equipEffMc.height >> 1;
        Tween.get(this.equipEffMcShadow).to({
            alpha: 1
        }, 250).to({
            alpha: 0,
            scaleX: 1.2,
            scaleY: 1.2
        }, 2000, egret.Ease.cubicInOut);
    };
    ThunderSuitPanel.prototype.stopBeatAnimat = function () {
        TimerMgr.ins().remove(this.runTween, this);
        if (this.equipEffMcShadow) {
            Tween.removeTweens(this.equipEffMcShadow);
            this.equipEffMcShadow.visible = false;
        }
    };
    ThunderSuitPanel.prototype.playUpTween = function () {
        if (this.equipEff) {
            this.equipEff.verticalCenter = this.effY;
            egret.Tween.removeTweens(this.equipEff);
            egret.Tween.get(this.equipEff, {
                loop: true
            }).to({
                verticalCenter: this.effMoveY
            }, 1000).to({
                verticalCenter: this.effY
            }, 1000);
        }
    };
    ThunderSuitPanel.prototype.stopTween = function () {
        egret.Tween.removeTweens(this.equipEff);
    };
    return ThunderSuitPanel;
}(BasePanel));
__reflect(ThunderSuitPanel.prototype, "ThunderSuitPanel");
var ThunderSuitTipsView = (function (_super) {
    __extends(ThunderSuitTipsView, _super);
    function ThunderSuitTipsView() {
        var _this = _super.call(this) || this;
        _this.skinName = "ThunderSuitTipsViewSkin";
        _this.uilayer = GameLayer.POPUP;
        return _this;
    }
    ThunderSuitTipsView.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.addEventTouchTap(this, this.onTap);
        this.roleId = param[0];
        this.slot = param[1];
        this.suits = thunderControl.getSuitData(1 /* TYPE1 */, heroControl.getSubRoleByIndex(this.roleId));
        if (this.suits) {
            this.updateActive();
            this.updateView();
        }
    };
    ThunderSuitTipsView.prototype.onTap = function (e) {
        UIMgr.ins().close(this);
    };
    ThunderSuitTipsView.prototype.updateActive = function () {
        if (this.suits.length) {
            var suitLevel1 = DataCenter.ins().ThunderSuitLvConfig[1 /* TYPE1 */];
            var nums = [];
            for (var num in suitLevel1) {
                if (nums.indexOf(+num) == -1) {
                    nums.push(+num);
                }
            }
            var len = CommonUtils.getObjectLength(DataCenter.ins().ThunderSuitLvConfig[1 /* TYPE1 */][2]);
            for (var i = 0; i < nums.length; i++) {
                var state = false;
                for (var j = 0; j < this.suits.length; j++) {
                    state = true;
                    if (nums[i] == this.suits[j].num && this.suits[j].level < len) {
                        state = false;
                        break;
                    }
                }
                if (!state) {
                    this.currentState = "active";
                    break;
                }
            }
            if (!this.currentState) {
                this.currentState = "max";
            }
        }
        else {
            this.currentState = "unactive";
        }
        this.validateNow();
    };
    ThunderSuitTipsView.prototype.updateView = function () {
        this.setCurDesc();
        this.setNextDesc();
    };
    ThunderSuitTipsView.prototype.setCurDesc = function () {
        var role = heroControl.getSubRoleByIndex(this.roleId);
        var count = 0;
        for (var i = 0; i < role.thunderSuitVos.length; i++) {
            if (i != 0 /* WEAPON */ && i != 2 /* CLOTHES */ && role.thunderSuitVos[i].level) {
                count++;
            }
        }
        this.numLabel0.text = "(" + count + "/" + ThunderControl.suitMaxCount + ")";
        var nums = [2, 4, 6];
        if (this.currentState == "unactive") {
            for (var i = 0; i < nums.length; i++) {
                this["attrName" + nums[i]].text = DataCenter.ins().ThunderQuenBaseConfig.suitNameHead[0] + "·" + nums[i] + LangMgr.getValueByKey("thunderSuitTips1");
                var cfg = thunderControl.getThunderSuitLevelConfig(1 /* TYPE1 */, nums[i], 1);
                if (cfg.attrs) {
                    this["attr" + nums[i]].text = AttributeData.getAttStr(cfg.attrs, 0, 1, "+");
                }
                if (cfg.pre) {
                    this["attr" + nums[i]].text += "\n" + LangMgr.getValueByKey("thunderSuitTips2") + cfg.pre + "%";
                }
            }
        }
        else if (this.currentState == "active") {
            for (var i = 0; i < nums.length; i++) {
                DisplayUtils.removeFromParent(this["attrGroup" + nums[i]]);
                for (var j = 0; j < this.suits.length; j++) {
                    if (this.suits[j].num == nums[i]) {
                        this.attrGroup.addChild(this["attrGroup" + nums[i]]);
                        this["attrName" + this.suits[j].num].text = DataCenter.ins().ThunderQuenBaseConfig.suitNameHead[this.suits[j].level - 1] + "·" + nums[i] + LangMgr.getValueByKey("thunderSuitTips1");
                        var cfg = thunderControl.getThunderSuitLevelConfig(1 /* TYPE1 */, nums[i], this.suits[j].level);
                        if (cfg.attrs) {
                            this["attr" + nums[i]].text = AttributeData.getAttStr(cfg.attrs, 0, 1, "+");
                        }
                        if (cfg.pre) {
                            this["attr" + nums[i]].text += "\n" + LangMgr.getValueByKey("thunderSuitTips2") + cfg.pre + "%";
                        }
                        break;
                    }
                }
            }
        }
        else {
            var level = CommonUtils.getObjectLength(DataCenter.ins().ThunderSuitLvConfig[1 /* TYPE1 */][2]);
            for (var i = 0; i < nums.length; i++) {
                for (var j = 0; j < this.suits.length; j++) {
                    if (this.suits[j].num == nums[i]) {
                        this["attrName" + this.suits[j].num].text = DataCenter.ins().ThunderQuenBaseConfig.suitNameHead[level - 1] + "·" + nums[i] + LangMgr.getValueByKey("thunderSuitTips1");
                        var cfg = thunderControl.getThunderSuitLevelConfig(1 /* TYPE1 */, nums[i], level);
                        if (cfg.attrs) {
                            this["attr" + nums[i]].text = AttributeData.getAttStr(cfg.attrs, 0, 1, "+");
                        }
                        if (cfg.pre) {
                            this["attr" + nums[i]].text += "\n" + LangMgr.getValueByKey("thunderSuitTips2") + cfg.pre + "%";
                        }
                        break;
                    }
                }
            }
        }
        var unactiveColor = 9144715;
        var activeColor = 65280;
        var tipsStr = "";
        tipsStr += "|C:" + (role.thunderSuitVos[1 /* HEAD */] && role.thunderSuitVos[1 /* HEAD */].level ? activeColor : unactiveColor) + "&T:" + RoleModel.getEquipNameByType(1 /* HEAD */) + "   |";
        tipsStr += "|C:" + (role.thunderSuitVos[3 /* NECKLACE */] && role.thunderSuitVos[3 /* NECKLACE */].level ? activeColor : unactiveColor) + "&T:" + RoleModel.getEquipNameByType(3 /* NECKLACE */) + "   |";
        tipsStr += "|C:" + (role.thunderSuitVos[4 /* WRIST */] && role.thunderSuitVos[4 /* WRIST */].level ? activeColor : unactiveColor) + "&T:" + RoleModel.getEquipNameByType(4 /* WRIST */) + "   |";
        tipsStr += "|C:" + (role.thunderSuitVos[5 /* BRACELET */] && role.thunderSuitVos[5 /* BRACELET */].level ? activeColor : unactiveColor) + "&T:" + RoleModel.getEquipNameByType(5 /* BRACELET */) + "   |";
        tipsStr += "|C:" + (role.thunderSuitVos[6 /* RING */] && role.thunderSuitVos[6 /* RING */].level ? activeColor : unactiveColor) + "&T:" + RoleModel.getEquipNameByType(6 /* RING */) + "   |";
        tipsStr += "|C:" + (role.thunderSuitVos[7 /* SHOE */] && role.thunderSuitVos[7 /* SHOE */].level ? activeColor : unactiveColor) + "&T:" + RoleModel.getEquipNameByType(7 /* SHOE */) + "   |";
        this.informationname0.textFlow = TextUtils.generateTextFlow1(tipsStr);
    };
    ThunderSuitTipsView.prototype.setNextDesc = function () {
        if (this.currentState == "active") {
            var nums = [6, 4, 2];
            for (var i = 0; i < nums.length; i++) {
                var have = false;
                for (var j = 0; j < this.suits.length; j++) {
                    if (this.suits[j].num == nums[i]) {
                        have = true;
                        var thunderSuitLevels = DataCenter.ins().ThunderSuitLvConfig[1 /* TYPE1 */][nums[i]];
                        if (thunderSuitLevels) {
                            if (thunderSuitLevels[this.suits[j].level + 1]) {
                                this["nattrName" + this.suits[j].num].text = DataCenter.ins().ThunderQuenBaseConfig.suitNameHead[this.suits[j].level] + "·" + nums[i] + LangMgr.getValueByKey("thunderSuitTips1");
                                if (thunderSuitLevels[this.suits[j].level + 1].attrs) {
                                    this["nattr" + nums[i]].text = AttributeData.getAttStr(thunderSuitLevels[this.suits[j].level + 1].attrs, 0, 1, "+");
                                }
                                if (thunderSuitLevels[this.suits[j].level + 1].pre) {
                                    this["nattr" + nums[i]].text += "\n" + LangMgr.getValueByKey("thunderSuitTips2") + thunderSuitLevels[this.suits[j].level + 1].pre + "%";
                                }
                            }
                            else {
                                DisplayUtils.removeFromParent(this["nattrGroup" + nums[i]]);
                            }
                        }
                        break;
                    }
                }
                if (!have) {
                    var thunderSuitLevel = thunderControl.getThunderSuitLevelConfig(1 /* TYPE1 */, nums[i], 1);
                    this["nattrName" + nums[i]].text = DataCenter.ins().ThunderQuenBaseConfig.suitNameHead[1] + "·" + nums[i] + LangMgr.getValueByKey("thunderSuitTips1");
                    if (thunderSuitLevel.attrs) {
                        this["nattr" + nums[i]].text = AttributeData.getAttStr(thunderSuitLevel.attrs, 0, 1, "+");
                    }
                    if (thunderSuitLevel.pre) {
                        this["nattr" + nums[i]].text += "\n" + LangMgr.getValueByKey("thunderSuitTips2") + thunderSuitLevel.pre + "%";
                    }
                }
            }
        }
    };
    return ThunderSuitTipsView;
}(BaseEuiView));
__reflect(ThunderSuitTipsView.prototype, "ThunderSuitTipsView");
/**
 * 雷霆装备
 */
var ThunderView = (function (_super) {
    __extends(ThunderView, _super);
    function ThunderView() {
        var _this = _super.call(this) || this;
        _this.curRole = 0;
        _this.curSelectIndex = 0;
        _this.skinName = "ThunderViewSkin";
        _this.isTopLevel = true;
        return _this;
    }
    ThunderView.prototype.initUI = function () {
        _super.prototype.initUI.call(this);
        this.panelArr = [this.thunderForgePanel, this.thunderSuitPanel];
        this.viewStack.selectedIndex = 0 /* THUNDERFORGE */;
    };
    ThunderView.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.addEventChange(this.tab, this.onTabTouch);
        this.addEventChanging(this.tab, this.onTabTouching);
        this.addEventTouchTap(this.closeBtn, this.onClick);
        this.addCustomEvent(96 /* THUNDER_STREN_INFO */, this.setRedPoint);
        this.addCustomEvent(97 /* THUNDER_EQUIP_UP */, this.setRedPoint);
        this.curSelectIndex = param[0] ? param[0] : 0 /* THUNDERFORGE */;
        this.roleSelect.setCurRole(0);
        this.addEventChange(this.roleSelect, this.switchRole);
        this.updateView();
    };
    ThunderView.prototype.onClick = function (e) {
        switch (e.currentTarget) {
            case this.closeBtn:
                UIMgr.ins().close(this);
        }
    };
    ThunderView.prototype.onTabTouch = function (e) {
        this.panelArr[this.curSelectIndex].close();
        this.setSelectedIndex(e.currentTarget.selectedIndex);
        this.setRedPoint();
    };
    ThunderView.prototype.onTabTouching = function (e) {
        if (!this.checkOpen(this.tab.selectedIndex)) {
            e.preventDefault();
        }
    };
    ThunderView.prototype.setSelectedIndex = function (selectedIndex) {
        this.curSelectIndex = selectedIndex;
        this.panelArr[selectedIndex].open();
        this.viewStack.selectedIndex = selectedIndex;
        this.switchRole();
    };
    ThunderView.prototype.checkOpen = function (selectedIndex) {
        if (selectedIndex == 1 /* THUNDERSUIT */) {
            if (GameServer.serverOpenDay + 1 < DataCenter.ins().ThunderQuenBaseConfig.suitOpenDay) {
                tipsControl.showTips(LangMgr.getValueByKey('tipsOpenSeverDays', DataCenter.ins().ThunderQuenBaseConfig.suitOpenDay));
                return false;
            }
            else if (reincarnateControl.lv < DataCenter.ins().ThunderQuenBaseConfig.suitOpenZsLv) {
                tipsControl.showTips(LangMgr.getValueByKey('fbRotationOpen', DataCenter.ins().ThunderQuenBaseConfig.suitOpenZsLv));
                return false;
            }
        }
        return true;
    };
    ThunderView.prototype.switchRole = function () {
        var roleId = this.roleSelect.getCurRole();
        this.panelArr[this.curSelectIndex].setRoleId(roleId);
    };
    ThunderView.prototype.updateView = function () {
        this.setSelectedIndex(this.curSelectIndex);
        this.setRedPoint();
    };
    ThunderView.prototype.setRedPoint = function () {
        var states = [
            [false, false, false],
            [false, false, false]
        ];
        var len = heroControl.subRolesLen;
        for (var i = 0; i < len; i++) {
            var state = thunderControl.getRedPoint0(i);
            if (state) {
                states[0 /* THUNDERFORGE */][i] = state;
            }
            state = thunderControl.getRedPoint1(i);
            if (state) {
                states[1 /* THUNDERSUIT */][i] = state;
            }
        }
        for (var j = 0; j < states.length; j++) {
            this["redPoint" + j].visible = false;
            for (var k = 0; k < states[j].length; k++) {
                if (this.curSelectIndex == j) {
                    this.roleSelect.showRedPoint(k, states[j][k]);
                }
                if (states[j][k]) {
                    this["redPoint" + j].visible = true;
                }
            }
        }
    };
    ThunderView.prototype.close = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        for (var i = 0; i < this.panelArr.length; i++) {
            if (this.panelArr[i].close) {
                this.panelArr[i].close();
            }
        }
    };
    return ThunderView;
}(BaseEuiView));
__reflect(ThunderView.prototype, "ThunderView");
var UnionBossControl = (function (_super) {
    __extends(UnionBossControl, _super);
    function UnionBossControl() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.leftTimes = 0;
        //当天是否可挑战BOSS  0否 , 1是
        _this.canChallenge = 0;
        //是否击杀 0否 , 1是
        _this.isKilled = 0;
        _this.passId = 0;
        _this.challengeTime = 0;
        _this.bossHP = 0;
        _this.otherGuildId = 0;
        _this.otherGuildName = "";
        _this.otherGuildBossHp = 0;
        _this.winnerId = 0;
        _this.guildRankDic = [];
        _this.guildPersonRankDic = [];
        _this.guildBossState = 0;
        return _this;
    }
    UnionBossControl.ins = function () {
        return _super.ins.call(this);
    };
    /**
     * 玩家数据同步
     * 46-1
     */
    UnionBossControl.prototype.downInfoChange = function (leftTimes, datas, canChallenge) {
        this.leftTimes = leftTimes;
        this.passRecord = [];
        for (var i = 0; i < datas.length; i++) {
            this.passRecord[datas[i][0]] = datas[i][1];
        }
        this.canChallenge = canChallenge;
        EventMgr.ins().dispatch(432 /* UNION_BOSS_INFO */);
    };
    /**
     * BOSS结果奖励
     * 46-2
     */
    UnionBossControl.prototype.downRewardRecord = function (isKilled, datas) {
        this.isKilled = isKilled;
        var rewards = [];
        for (var i = 0; i < datas.length; i++) {
            var item = new RewardVo();
            item.init(datas[i]);
            rewards.push(item);
        }
        TimerMgr.ins().doTimer(800, 1, function () {
            resultControl.create(MapControl.copyType, 1, rewards, LangMgr.getValueByKey('userGitAward'));
        }, this);
    };
    /**
     * BOSS详细信息
     * 46-3
     */
    UnionBossControl.prototype.downDetailChange = function (passId, time, bossHP, otherGuildId, otherGuildName, otherGuildBossHp, winnerId) {
        this.passId = passId;
        this.challengeTime = GameServer.serverTime + time * 1000;
        this.bossHP = bossHP;
        this.otherGuildId = otherGuildId;
        this.otherGuildName = otherGuildName;
        this.otherGuildBossHp = otherGuildBossHp;
        this.winnerId = winnerId;
        EventMgr.ins().dispatch(433 /* UNION_BOSS_DETAIL_CHANGE */);
    };
    /**
     * BOSS挑战返回
     * 46-4
     */
    UnionBossControl.prototype.downChallengeBack = function (guildBossState) {
        this.guildBossState = guildBossState;
        if (this.guildBossState == 0) {
            this.leftTimes--;
            this.dispatchChallengeSuccess();
        }
        else if (this.guildBossState == 5) {
            this.upGetBossInfo();
        }
    };
    /**
     * 关卡排名
     * 46-5
     */
    UnionBossControl.prototype.downRankInfoChange = function (id, datas, personDatas) {
        this.guildRankDic[id] = [];
        this.guildPersonRankDic[id] = [];
        for (var i = 0; i < datas.length; i++) {
            var obj = new guildBossRankData();
            obj.name = datas[i][0];
            obj.damage = datas[i][1];
            obj.rank = i + 1;
            this.guildRankDic[id].push(obj);
        }
        for (var i = 0; i < personDatas.length; i++) {
            var obj = new guildBossRankData();
            obj.name = personDatas[i][0];
            obj.damage = personDatas[i][1];
            obj.devote = personDatas[i][2];
            obj.rank = i + 1;
            this.guildPersonRankDic[id].push(obj);
        }
        EventMgr.ins().dispatch(435 /* UNION_BOSS_RANK_INFO_CHANGE */);
    };
    /**
     * 挑战BOSS
     * 46-1
     */
    UnionBossControl.prototype.upChallengeBoss = function (type) {
        return [type];
    };
    /**
     * 领取通关奖励
     * 46-2
     */
    UnionBossControl.prototype.upGetBossReward = function (id) {
        return [id];
    };
    /**
     * 获取工会副本BOSS详细信息
     * 46-3
     */
    UnionBossControl.prototype.upGetBossInfo = function () {
    };
    /**
     * 工会副本排行信息
     * 46-5
     */
    UnionBossControl.prototype.upGetBossRankInfo = function (id) {
        return [id];
    };
    UnionBossControl.prototype.getBossRewardState = function () {
        for (var k in unionBossControl.passRecord) {
            if (unionBossControl.passRecord[k] == 1) {
                return true;
            }
        }
        return false;
    };
    UnionBossControl.prototype.getBossChallenge = function () {
        if (!this.isOpen())
            return false;
        if (unionBossControl.leftTimes <= 0)
            return false;
        for (var k in unionBossControl.passRecord) {
            if (unionBossControl.passRecord[k] == 0) {
                return true;
            }
        }
        return false;
    };
    UnionBossControl.prototype.isOpen = function () {
        return new Date(GameServer.serverTime).getDay() != DataCenter.ins().UnionBossConfig.notOpenDayOfWeek;
    };
    /**
     * boss挑战成功
     */
    UnionBossControl.prototype.dispatchChallengeSuccess = function () {
        EventMgr.ins().dispatch(434 /* UNION_BOSS_CHALLENGE_SUCCESS */);
    };
    __decorate([
        down(1, [3 /* Int */, [1 /* Byte */, 1 /* Byte */], 1 /* Byte */])
    ], UnionBossControl.prototype, "downInfoChange", null);
    __decorate([
        down(2, [1 /* Byte */, ByteConst.RewardVos])
    ], UnionBossControl.prototype, "downRewardRecord", null);
    __decorate([
        down(3, [3 /* Int */, 3 /* Int */, 3 /* Int */, 3 /* Int */, 8 /* String */, 3 /* Int */, 3 /* Int */])
    ], UnionBossControl.prototype, "downDetailChange", null);
    __decorate([
        down(4, [3 /* Int */])
    ], UnionBossControl.prototype, "downChallengeBack", null);
    __decorate([
        down(5, [3 /* Int */, [8 /* String */, 6 /* UInt */], [8 /* String */, 6 /* UInt */, 3 /* Int */]])
    ], UnionBossControl.prototype, "downRankInfoChange", null);
    __decorate([
        up(1, [1 /* Byte */])
    ], UnionBossControl.prototype, "upChallengeBoss", null);
    __decorate([
        up(2, [3 /* Int */])
    ], UnionBossControl.prototype, "upGetBossReward", null);
    __decorate([
        up(3)
    ], UnionBossControl.prototype, "upGetBossInfo", null);
    __decorate([
        up(5, [3 /* Int */])
    ], UnionBossControl.prototype, "upGetBossRankInfo", null);
    UnionBossControl = __decorate([
        protocolsId(46 /* PROTOCOL_46 */)
    ], UnionBossControl);
    return UnionBossControl;
}(BaseSystem));
__reflect(UnionBossControl.prototype, "UnionBossControl");
var guildBossRankData = (function () {
    function guildBossRankData() {
        this.name = "";
        this.damage = 0;
        this.rank = 0;
        this.devote = 0;
    }
    return guildBossRankData;
}());
__reflect(guildBossRankData.prototype, "guildBossRankData");
/**
 * 公会数据
 */
var UnionControl = (function (_super) {
    __extends(UnionControl, _super);
    function UnionControl() {
        var _this = _super.call(this) || this;
        _this.guildID = 0;
        _this.guildName = "";
        _this.guildLv = 0;
        /**第一个元素就是公会等级 */
        _this._buildingLevels = [];
        /**资金 */
        _this.money = 0;
        /**公告 */
        _this.notice = "";
        _this.records = [];
        _this.guildListInfos = []; //公会列表
        _this._guildMembers = []; //公会成员列表
        _this.applyGuilds = []; //申请公会列表
        _this._guillRoleSkillInfo = []; //公会技能数据
        _this.guildTaskInfos = new eui.ArrayCollection(); //公会任务列表
        _this.guildMessageInfoData = new eui.ArrayCollection(); //公会聊天记录包含公会公告
        _this.isFirstGetMessageInfo = true;
        /** 按历史贡献 排序，按当日贡献排序*/
        _this._memberSortType = 0;
        _this.pageMax = 1;
        _this._conCount = [];
        /**是否有玩家申请 */
        _this.hasApply = false;
        /** 可改名次数 */
        _this.changeNameNum = 0;
        /** 未读信息 */
        _this.noReadMsgList = [];
        _this.flagState = 0;
        _this.sendToFireCount = [];
        /**是否自动加入帮派 */
        _this.isAuto = 1;
        /**自动加入的限制战力 */
        _this.attrLimit = 99999;
        /** 公告审核 */
        _this.noticeAudit = 0;
        _this.addCustomEvent(353 /* ENTER_MAP */, _this.startCheckShow);
        _this.addCustomEvent(360 /* GUILD_CHANGE */, _this.setGuild);
        _this.addCustomEvent(466 /* SERVER_OPEN_DAY */, _this.checkHFDp);
        return _this;
    }
    UnionControl.ins = function () {
        return _super.ins.call(this);
    };
    UnionControl.prototype.initLogin = function () {
        this.isFirstGetMessageInfo = true;
        this.upGuildInfo();
        this.upMyGuildInfo();
    };
    UnionControl.prototype.checkHFDp = function () {
        for (var i in DataCenter.ins().UnionLevelConfig) {
            var guildLevelConfigs = DataCenter.ins().UnionLevelConfig[i];
            for (var j in guildLevelConfigs) {
                var guildLevelConfig = guildLevelConfigs[j];
                if (!isNaN(guildLevelConfig.hefu)) {
                    if (guildLevelConfig.hefu <= GameServer._hefuCount) {
                        continue;
                    }
                    delete DataCenter.ins().UnionLevelConfig[i][j];
                }
            }
        }
    };
    UnionControl.prototype.setGuild = function (arr) {
        var id = arr[0], name = arr[1];
        if (this.guildID != id) {
            this.guildID = id;
            this.guildName = name;
            this.upGuildInfo();
            if (this.guildID != 0) {
                if (UIMgr.ins().isShow(UnionApplyView)) {
                    UIMgr.ins().close(UnionApplyView);
                    UIMgr.ins().open(UnionMapView);
                }
            }
        }
    };
    /**公会技能数据 */
    UnionControl.prototype.getSkllInfoByIndex = function (index) {
        return this._guillRoleSkillInfo[index];
    };
    /**公会成员列表 */
    UnionControl.prototype.getGuildMembersByIndex = function (index) {
        return this._guildMembers[index];
    };
    /**公会任务列表 */
    UnionControl.prototype.getGuildTaskInfosByIndex = function (index) {
        return this.guildTaskInfos.getItemAt(index);
    };
    /**第一个元素就是公会等级 */
    UnionControl.prototype.getBuildingLevels = function (index) {
        if (index === void 0) { index = -1; }
        return index == -1 ? this._buildingLevels : this._buildingLevels[index];
    };
    UnionControl.prototype.getConCount = function (index) {
        if (index === void 0) { index = -1; }
        return index == -1 ? this._conCount : this._conCount[index];
    };
    /**
     * 请求帮派信息
     * 37-1
     */
    UnionControl.prototype.upGuildInfo = function () {
    };
    /**
     * 37-1
     */
    UnionControl.prototype.downGuildInfo = function (result, guildId, guildName, levels, money, notice, auto, attr, fireLvl, fireVal, changeNameNum, noticeAudit) {
        this._buildingLevels = [];
        //等于1已经加入帮派了
        if (result == 1) {
            this.guildID = guildId;
            this.guildName = guildName;
            for (var i = 0; i < levels.length; i++) {
                this._buildingLevels.push(levels[i]);
            }
            this.money = money;
            this.notice = notice;
            this.downAddGuildlimit(auto, attr);
            this.guildLv = this._buildingLevels[0];
            this.upGuildMembers();
            this.upGuildSkillInfo();
            this.downUpdateFire(fireLvl, fireVal);
            this.changeNameNum = changeNameNum;
            //公告审核状态
            this.noticeAudit = noticeAudit;
            EventMgr.ins().dispatch(14 /* UNION_INFO */, [this.guildID, this.guildName]);
        }
    };
    /**
     * 获取公会成员列表
     * 37-2
     */
    UnionControl.prototype.upGuildMembers = function () {
    };
    /**
     * 37-2
     */
    UnionControl.prototype.downGuildMembers = function (datas) {
        this._guildMembers = [];
        for (var i = 0; i < datas.length; i++) {
            var data = datas[i];
            var info = new UnionMemberInfoVo;
            info.roleID = data[0];
            info.name = data[1];
            info.office = data[2];
            info.job = data[3];
            info.sex = data[4];
            info.vipLevel = data[5];
            info.monthCard = data[6];
            info.contribution = data[7];
            info.curContribution = data[8];
            info.attack = data[9];
            info.downTime = data[10];
            info.level = data[11];
            info.zsLevel = data[12];
            this._guildMembers.push(info);
        }
        EventMgr.ins().dispatch(15 /* UNION_MEMBERS */);
    };
    /**
     * 获取公会列表
     * 37-3
     */
    UnionControl.prototype.upGuildList = function (page, num) {
    };
    /**
     * 37-3
     */
    UnionControl.prototype.downGuildList = function (datas) {
        this.guildListInfos = [];
        for (var i = 0; i < datas.length; i++) {
            var data = datas[i];
            var info = new UnionListInfoVo;
            info.guildRank = i + 1;
            info.guildID = data[0];
            info.guildLevel = data[1];
            info.commentLv = data[2];
            info.guildMember = data[3];
            info.guildName = data[4];
            info.guildPresident = data[5];
            info.attr = data[6];
            this.guildListInfos.push(info);
        }
        EventMgr.ins().dispatch(16 /* UNION_LIST */);
    };
    /**
     * 创建工会
     * 37-4
     */
    UnionControl.prototype.upGuildCreate = function (id, name) {
        return [id, name];
    };
    /**
     * 创建工会结果
     * 37-4
     */
    UnionControl.prototype.downGuildCreate = function (result, guildId) {
        if (result == 0) {
            this.guildID = guildId;
            UIMgr.ins().close(UnionCreateView);
            UIMgr.ins().close(UnionApplyView);
            UIMgr.ins().open(UnionMapView);
            tipsControl.showTips(LangMgr.getValueByKey('clanCreat'));
            this.upGuildInfo();
            EventMgr.ins().dispatch(17 /* UNION_CREATE */, true);
        }
    };
    /**
     * 退出工会
     * 37-5
     */
    UnionControl.prototype.upQuitGuild = function () {
    };
    /**
     * 申请加入公会
     * 37-6
     */
    UnionControl.prototype.upJoinGuild = function (guildId) {
        return [guildId];
    };
    /**
     * 通知有人申请加入公会
     * 37-6
     */
    UnionControl.prototype.downJoinGuild = function () {
        this.hasApply = true;
        EventMgr.ins().dispatch(18 /* UNION_JOIN */);
    };
    /**
     * 获取申请加入公会玩家信息
     * 37-7
     */
    UnionControl.prototype.upApplyInfos = function () {
    };
    /**
     * 发送申请加入公会玩家信息
     * 37-7
     */
    UnionControl.prototype.downApplyInfos = function (datas) {
        var applyPlayers = [];
        for (var i = 0; i < datas.length; i++) {
            var data = datas[i];
            var info = new UnionApplyInfoVo;
            info.roleID = data[0];
            info.vipLevel = data[1];
            info.job = data[2];
            info.sex = data[3];
            info.attack = data[4];
            info.name = data[5];
            applyPlayers.push(info);
        }
        this.hasApply = datas.length > 0;
        EventMgr.ins().dispatch(19 /* UNION_APPLY_INFOS */, applyPlayers);
    };
    /**
     * 处理申请
     * 37-8
     */
    UnionControl.prototype.upProcessJoin = function (joinId, type) {
        return [joinId, type];
    };
    /**
     * 通知申请的玩家申请结果
     * 37-8
     */
    UnionControl.prototype.downProcessJoin = function (guildId, result) {
        var applyGuilds = this.applyGuilds;
        var index = applyGuilds.indexOf(guildId);
        if (index != -1 && result == 0) {
            applyGuilds.splice(index, 1);
        }
        if (result == 1) {
            EventMgr.ins().dispatch(20 /* UNION_PROCESS_JOIN */, true);
        }
    };
    /**
     * 升降职
     * 37-9
     */
    UnionControl.prototype.upChangeOffice = function (roleId, guildOffice) {
        return [roleId, guildOffice];
    };
    /**
     * 通知玩家职位变化
     * 37-9
     */
    UnionControl.prototype.downChangeOffice = function (roleId, newOffice) {
        for (var index = 0; index < this._guildMembers.length; index++) {
            var element = this.getGuildMembersByIndex(index);
            if (element.roleID == roleId) {
                element.office = newOffice;
                if (roleId == ActorControl.actorID) {
                    EventMgr.ins().dispatch(13 /* UNION_OFFICE_CHANGE */);
                }
                return;
            }
        }
    };
    /**
     * 弹劾
     * 37-10
     */
    UnionControl.prototype.upDemise = function () {
    };
    /**
     * 踢出
     * 37-11
     */
    UnionControl.prototype.upKick = function (roleId) {
        return [roleId];
    };
    /**
     * 退出公会
     * 37-11
     */
    UnionControl.prototype.downQuitGuild = function (roleId) {
        if (roleId == ActorControl.actorID) {
            this.clearGuildInfo();
            UIMgr.ins().close(UnionView);
            UIMgr.ins().close(UnionMapView);
            UIMgr.ins().close(UnionBossDetailView);
            UIMgr.ins().close(UnionBossView);
            EventMgr.ins().dispatch(12 /* UNION_QUIT */, true);
        }
    };
    /**
     * 帮派信息请求刷新
     * 37-12
     */
    UnionControl.prototype.downUpdateGuildInfo = function (result) {
        switch (result) {
            case 1:
                break;
            case 2:
                this.upGuildInfo();
                break;
            case 3:
                this.upGuildMembers();
                break;
            case 4:
                break;
            case 5:
                this.upApplyInfos();
                break;
            case 6:
                break;
        }
    };
    /**
     * 捐献
     * 37-13
     */
    UnionControl.prototype.upCon = function (type) {
        return [type];
    };
    /**
     * 公会资金
     * 37-13
     */
    UnionControl.prototype.downGuildMoney = function (money) {
        this.money = money;
        EventMgr.ins().dispatch(21 /* UNION_MONEY */);
    };
    /**
     * 修改公告
     * 37-14
     */
    UnionControl.prototype.upChangeNotice = function (text) {
        return [text];
    };
    /**
     * 修改公告
     * 37-14
     */
    UnionControl.prototype.downChangeNotice = function (result, notice) {
        if (result == 0) {
            this.notice = notice;
            this.noticeAudit = 0;
        }
        else if (result == -2) {
            this.noticeAudit = 1;
            tipsControl.showTips(LangMgr.getValueByKey("noticeCheck"));
        }
        EventMgr.ins().dispatch(22 /* UNION_CHANGE_NOTICE */);
    };
    /**
     * 获取公会技能信息
     * 37-15
     */
    UnionControl.prototype.upGuildSkillInfo = function () {
    };
    /**
     * 获取公会技能信息
     * 37-15
     */
    UnionControl.prototype.downGuildSkillInfo = function (datas) {
        this._guillRoleSkillInfo = [];
        for (var i = 0; i < datas.length; i++) {
            var roleSkillInfo = new GuildRoleSkillInfo;
            var levels = datas[i][0];
            for (var j = 0; j < levels.length; j++) {
                var skillInfo = new UnionSkillInfoVo;
                skillInfo.level = levels[j];
                roleSkillInfo.guildSkillInfo.push(skillInfo);
            }
            var infos = datas[i][1];
            for (var k = 0; k < infos.length; k++) {
                var skillInfo = new UnionSkillInfoVo;
                skillInfo.level = infos[k][0];
                skillInfo.exp = infos[k][1];
                roleSkillInfo.practiceSkillInfo.push(skillInfo);
            }
            this._guillRoleSkillInfo.push(roleSkillInfo);
        }
        EventMgr.ins().dispatch(23 /* UNION_SKILL_INFO */);
    };
    /**
     * 学习公会技能
     * 37-16
     */
    UnionControl.prototype.upLearnGuildSkill = function (roleId, skillId) {
        return [roleId, skillId];
    };
    /**
     * 学习公会技能
     * 37-16
     */
    UnionControl.prototype.downLearnGuildSkill = function (roleId, skillId, level) {
        this.getSkllInfoByIndex(roleId).guildSkillInfo[skillId - 1].level = level;
        EventMgr.ins().dispatch(23 /* UNION_SKILL_INFO */);
        tipsControl.showTips(LangMgr.getValueByKey('clanUpdata'));
    };
    /**
     * 修炼公会技能
     * 37-18
     */
    UnionControl.prototype.upPracticeGuildSkill = function (roleId, skillId) {
        return [roleId, skillId];
    };
    /**
     * 修炼公会技能
     * 37-18
     */
    UnionControl.prototype.downPracticeGuildSkill = function (roleId, skillId, level, exp, add) {
        this.getSkllInfoByIndex(roleId).practiceSkillInfo[skillId - 1].level = level;
        this.getSkllInfoByIndex(roleId).practiceSkillInfo[skillId - 1].exp = exp;
        EventMgr.ins().dispatch(23 /* UNION_SKILL_INFO */);
        tipsControl.showTips(LangMgr.getValueByKey('clanUniting', add));
    };
    /**
     * 升级建筑
     * 37-17
     */
    UnionControl.prototype.upUpBuilding = function (buildType) {
        return [buildType];
    };
    /**
     * 升级建筑
     * 37-17
     */
    UnionControl.prototype.downUpBuilding = function (type, val) {
        this._buildingLevels[type - 1] = val;
        this.guildLv = this._buildingLevels[0];
        EventMgr.ins().dispatch(24 /* UNION_UP_BUILDING */);
    };
    /**
     * 任务信息列表
     * 37-19
     */
    UnionControl.prototype.downGuildTaskInfos = function (datas) {
        this.guildTaskInfos.removeAll();
        this.initTaskInfos();
        var source = [];
        for (var i = 0; i < datas.length; i++) {
            var element = new UnionTaskInfoVo();
            element.taskID = datas[i][0];
            element.param = datas[i][1];
            element.state = datas[i][2];
            element.stdTask = DataCenter.ins().UnionTaskConfig[element.taskID];
            this.guildTaskInfos.addItem(element);
        }
        this.updateTaskList();
    };
    /**
     * 通知任务信息改变
     * 37-20
     */
    UnionControl.prototype.downGuildTaskUpdate = function (id, param, state) {
        for (var i = 0; i < this.guildTaskInfos.length; i++) {
            var element = this.guildTaskInfos.getItemAt(i);
            if (element && element.taskID == id) {
                element.param = param;
                element.state = state;
                break;
            }
        }
        this.updateTaskList();
    };
    UnionControl.prototype.updateTaskList = function () {
        var source = this.guildTaskInfos.source;
        for (var i = source.length - 1; i >= 0; i--) {
            if (source[i].stdTask.type == 0)
                source.splice(i, 1);
        }
        source.sort(this.taskInfosSortFunc);
        this.guildTaskInfos.replaceAll(source);
        EventMgr.ins().dispatch(25 /* UNION_TASK_INFOS */);
    };
    /**
     * 升级建筑
     * 37-21
     */
    UnionControl.prototype.upGetTaskAward = function (taskId) {
        return [taskId];
    };
    /**
     * 公会事件记录
     * 37-22
     */
    UnionControl.prototype.upManageList = function () {
    };
    /**
     * 公会事件记录
     * 37-22
     */
    UnionControl.prototype.downManageList = function (datas) {
        this.records = [];
        for (var i = 0; i < datas.length; i++) {
            this.parserManage(datas[i]);
        }
        EventMgr.ins().dispatch(26 /* UNION_MANAGE_LIST */);
    };
    UnionControl.prototype.parserManage = function (datas) {
        var str = "";
        var time = DateUtils.getFormatBySecond(DateUtils.formatMiniDateTime(datas[0]) * 0.001, 8);
        time = StringUtils.complementByChar(time, 16);
        var type = datas[1];
        var param1 = datas[2];
        var param2 = datas[3];
        var param3 = datas[4];
        var name1 = datas[5];
        var name2 = datas[6];
        switch (type) {
            case 7:
                str = time + "  " + LangMgr.getValueByKey("unionTxt" + type, name1, param2 + Currency.getCurrencyName(param1));
                break;
            case 8:
                str = time + "  " + LangMgr.getValueByKey("unionTxt" + type, name1, DataCenter.ins().UnionConfig.buildingNames[param1 - 1], param2);
                break;
            case 9:
                var config = DataCenter.ins().ItemConfig[param1];
                str = time + "  " + LangMgr.getValueByKey("unionTxt" + type, name1, ItemUtils.getQualityColor(config), config.name);
                break;
            default:
                str = time + "  " + LangMgr.getValueByKey("unionTxt" + type, name1);
        }
        this.records.unshift(str);
    };
    /**
     * 37-23
     */
    UnionControl.prototype.downManage = function () {
    };
    /**
     * 捐献次数
     * 37-24
     */
    UnionControl.prototype.upConCount = function () {
    };
    /**
     * 捐献次数
     * 37-24
     */
    UnionControl.prototype.downConCount = function (datas) {
        for (var i = 0; i < datas.length; i++) {
            this._conCount[i] = datas[i];
        }
        EventMgr.ins().dispatch(27 /* UNION_CONTRIBUTE_COUNT */);
    };
    /**
     * 玩家公会数据
     * 37-25
     */
    UnionControl.prototype.upMyGuildInfo = function () {
    };
    /**
     * 玩家公会数据
     * 37-25
     */
    UnionControl.prototype.downMyGuildInfo = function (myCon, myTotalCon, myOffice) {
        this.myCon = myCon;
        this.myTotalCon = myTotalCon;
        this.myOffice = myOffice;
        EventMgr.ins().dispatch(28 /* MY_UNION_INFO */);
    };
    /**
     * 发送公会聊天消息
     * 37-26
     */
    UnionControl.prototype.upGuildMessage = function (str) {
        if (!rambleControl.checkCanSpeak()) {
            rambleControl.chatLimit(3 /* ciChannelGuild */, str);
            return false;
        }
        rambleControl.checkChatSend(str, 2, true);
        return [str];
    };
    /**
     * 广播公会聊天消息
     * 37-26
     */
    UnionControl.prototype.downGuildMessage = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        var element = new UnionMessageInfoVo();
        element.init(param);
        this.addChatMsg(element);
        if (element.roleId == ActorControl.actorID) {
            rambleControl.startInterval();
        }
    };
    UnionControl.prototype.addChatMsg = function (element) {
        if (element.roleId == ActorControl.actorID) {
            rambleControl.checkChatSend(element.str, 2, false);
        }
        if (partnerControl.indexOfBlackList(element.roleId) == -1) {
            if (this.guildMessageInfoData.length >= 50) {
                var guildInfo = this.guildMessageInfoData.removeItemAt(0);
                rambleControl.removeAllChatMsg(guildInfo);
            }
            rambleControl.addGuildChat(element);
            rambleControl.dispatchNewChatMsg(element);
            if (element.type == 1 && element.roleId != ActorControl.actorID) {
                this.noReadMsgList.push(element);
            }
        }
        if (element.type == 1) {
            var chatInfo = new RambleInfoVo();
            chatInfo.name = element.name;
            chatInfo.type = 7;
            chatInfo.str = element.str;
            chatInfo.setNowTime();
            rambleControl.dispatchNewChatMsg(chatInfo);
        }
        else if (element.type == 2) {
            EventMgr.ins().dispatch(29 /* UNION_BOSS_ALIVE */, true, element.str);
        }
    };
    UnionControl.prototype.dispatchGetNewGuildMessage = function (guildInfo) {
        EventMgr.ins().dispatch(644 /* GET_NEW_UNION_MESSAGE */, guildInfo);
    };
    UnionControl.prototype.dispatchGuildChatRed = function () {
        EventMgr.ins().dispatch(642 /* UNION_CHAT_RED */, this.noReadMsgList.length > 0 ? 1 : 0);
    };
    UnionControl.prototype.getAllGuildMessage = function () {
        if (this.isFirstGetMessageInfo) {
            this.isFirstGetMessageInfo = false;
            this.upAllGuildMessage();
        }
    };
    /**
     * 玩家公会数据
     * 37-27
     */
    UnionControl.prototype.upAllGuildMessage = function () {
    };
    /**
     * 玩家公会数据
     * 37-27
     */
    UnionControl.prototype.downAllGuildMessage = function (datas) {
        var guildMessageInfoDatas = [];
        for (var i = 0; i < datas.length; i++) {
            var element = new UnionMessageInfoVo;
            element.init(datas[i]);
            if (element.hasTimeOut || partnerControl.indexOfBlackList(element.roleId) == -1) {
                guildMessageInfoDatas.push(element);
            }
        }
        rambleControl.initGuildChat(guildMessageInfoDatas);
        if (this.guildMessageInfoData.length) {
            rambleControl.dispatchNewChatMsg(this.guildMessageInfoData.getItemAt(this.guildMessageInfoData.length - 1));
        }
        EventMgr.ins().dispatch(30 /* UNION_ALL_INFO */);
    };
    /**
     * 玩家自动加入公会数据
     * 37-28
     */
    UnionControl.prototype.upAddGuildLimit = function (auto, attr) {
        return [auto, attr];
    };
    /**
     * 加入帮派的变化
     * 37-28
     */
    UnionControl.prototype.downAddGuildlimit = function (isAuto, attrLimit) {
        this.isAuto = isAuto;
        this.attrLimit = attrLimit;
    };
    /**
     * 37-30
     * 捐献篝火
     */
    UnionControl.prototype.upToFire = function (count, itemCount) {
        this.sendToFireCount.push([count, itemCount]);
        return [count];
    };
    /**
     * 篝火
     * 37-30
     */
    UnionControl.prototype.downUpdateFire = function (fireLvl, fireVal) {
        this.fireDic = this.fireDic || {};
        var isUpdate = this.fireDic.fireLvl != fireLvl || this.fireDic.fireVal != fireVal;
        this.fireDic.fireLvl = fireLvl;
        this.fireDic.fireVal = fireVal;
        if (isUpdate) {
            var conf = DataCenter.ins().UnionConfig;
            var item = backpackControl.getBagItemById(conf.bonfireItem);
            var count = item ? item.count : 0;
            for (var i = 0; i < this.sendToFireCount.length; i++) {
                if (count == this.sendToFireCount[i][1]) {
                    while (i >= 0) {
                        var count_2 = this.sendToFireCount.shift()[0];
                        tipsControl.showCenterTips(LangMgr.getValueByKey("unionTxt", 5 * count_2, 30 * count_2));
                        i -= 1;
                    }
                    break;
                }
            }
        }
        EventMgr.ins().dispatch(31 /* UNION_FIRE_UPDATE */);
    };
    /**
     * 37-31
     */
    UnionControl.prototype.upGuildChangeName = function (nameStr) {
        return [nameStr];
    };
    /**
     * 是否有玩家申请
     */
    UnionControl.prototype.hasApplys = function () {
        return this.myOffice >= 5 /* UNION_FUBANGZHU */ && this.hasApply;
    };
    UnionControl.prototype.clearGuildInfo = function () {
        this.guildID = 0;
        this.guildName = "";
        this.guildListInfos = [];
        this._guildMembers = [];
        this.applyGuilds = [];
        this.pageMax = 1;
        this.noReadMsgList = [];
        unionWarControl.getModel().canSendReward = false;
        unionWarControl.getModel().canGetDay = false;
        unionWarControl.getModel().getDayReward = false;
        unionWarControl.getModel().canSend = false;
        unionWarControl.getModel().canRod = false;
        unionBossControl.passRecord = null;
        hatredControl.clearHelpMsg();
    };
    /**
     * 移除某id的聊天
     */
    UnionControl.prototype.removeMsgWithId = function (userId) {
        var source = [];
        for (var i = 0; i < this.guildMessageInfoData.length; i++) {
            var msgInfo = this.guildMessageInfoData.getItemAt(i);
            if (msgInfo.roleId != userId) {
                source.push(msgInfo);
            }
        }
        this.guildMessageInfoData.source = source;
        this.guildMessageInfoData.refresh();
    };
    UnionControl.prototype.initTaskInfos = function () {
        if (this.guildTaskInfos != null) {
            return;
        }
        var infoList = [];
        var dp = DataCenter.ins().UnionTaskConfig;
        for (var key in dp) {
            if (dp.hasOwnProperty(key)) {
                var gtc = dp[key];
                var element = new UnionTaskInfoVo;
                element.taskID = gtc.id;
                element.param = 0;
                element.state = 0;
                element.stdTask = gtc;
                infoList.push(element);
            }
        }
        this.guildTaskInfos.replaceAll(infoList);
    };
    UnionControl.prototype.taskInfosSortFunc = function (aConfig, bConfig) {
        if (aConfig.state == bConfig.state) {
            if (aConfig.taskID < bConfig.taskID)
                return -1;
            if (aConfig.taskID > bConfig.taskID)
                return 1;
            return 0;
        }
        if (aConfig.state == 2)
            return 1;
        if (bConfig.state == 2)
            return -1;
        if (aConfig.state != 2 && bConfig.state != 2) {
            if (aConfig.taskID < bConfig.taskID)
                return -1;
            if (aConfig.taskID > bConfig.taskID)
                return 1;
        }
        return 0;
    };
    UnionControl.prototype.getMemberNum = function () {
        return this._guildMembers.length;
    };
    /**
     * 获取成员列表
     * sortType 排序方式， 0不排序，1按历史贡献，2 按当日贡献
     */
    UnionControl.prototype.getGuildMembers = function (sortType) {
        if (sortType == 0 || this._memberSortType == sortType)
            return this._guildMembers;
        if (sortType == 1)
            return this._guildMembers.sort(this.memberSortFunc);
        if (sortType == 2)
            return this._guildMembers.sort(this.memberSortFunc2);
        return this._guildMembers;
    };
    /**获取某个职的数量 */
    UnionControl.prototype.getOfficeNum = function (office) {
        var len = this._guildMembers.length;
        var num = 0;
        for (var index = 0; index < len; index++) {
            var element = this._guildMembers[index];
            if (element.office == office)
                num++;
        }
        return num;
    };
    /**能否任命副会长 */
    UnionControl.prototype.canAppointFHZ = function () {
        return this.getOfficeNum(5 /* UNION_FUBANGZHU */) < DataCenter.ins().UnionConfig.posCounts[this.guildLv - 1][1];
    };
    UnionControl.prototype.memberSortFunc = function (aInfo, bInfo) {
        if (aInfo.office > bInfo.office)
            return -1;
        if (aInfo.office < bInfo.office)
            return 1;
        if (aInfo.office == bInfo.office) {
            if (aInfo.contribution == bInfo.contribution)
                return 0;
            return aInfo.contribution > bInfo.contribution ? -1 : 1;
        }
        return 0;
    };
    UnionControl.prototype.memberSortFunc2 = function (aInfo, bInfo) {
        if (aInfo.curContribution == bInfo.curContribution)
            return 0;
        return aInfo.curContribution > bInfo.curContribution ? -1 : 1;
    };
    UnionControl.prototype.checkIsInGuild = function (id) {
        for (var k in this._guildMembers) {
            var info = this._guildMembers[k];
            if (info.roleID == id) {
                return true;
            }
        }
        return false;
    };
    UnionControl.prototype.getGuildInfoByName = function (name) {
        for (var key in this._guildMembers) {
            var guildMember = this._guildMembers[key];
            if (guildMember.name == name) {
                return guildMember;
            }
        }
        return null;
    };
    UnionControl.prototype.startCheckShow = function () {
        if (unionWarControl.getModel().checkinAppoint()) {
            UIMgr.ins().closeTopLevel();
            UIMgr.ins().open(UnionWarUiInfoView);
        }
        else {
            UIMgr.ins().close(UnionWarUiInfoView);
        }
    };
    /**是否有可升级的建筑(有权限的成员) */
    UnionControl.prototype.isUpGradeBuilding = function () {
        if (unionControl.myOffice < 5 /* UNION_FUBANGZHU */) {
            return false;
        }
        var buildings = [1 /* UNION_HALL */, 2 /* UNION_LIANGONGFANG */];
        for (var i = 0; i < buildings.length; i++) {
            var type = buildings[i]; //建筑类型从1开始
            var curLevel = unionControl.getBuildingLevels(type - 1) || 0;
            var glc = DataCenter.ins().UnionLevelConfig[type];
            var maxLevel = 0;
            var dp = null;
            var dpNext = null;
            var nextMoney = 0;
            for (var key in glc) {
                if (glc.hasOwnProperty(key)) {
                    var element = glc[key];
                    maxLevel = element.level > maxLevel ? element.level : maxLevel;
                    if (element.level == curLevel)
                        dp = element;
                    if (element.level == curLevel + 1)
                        dpNext = element;
                }
            }
            if (dp || dpNext || (type == 2 /* UNION_LIANGONGFANG */)) {
                if (dpNext && curLevel < maxLevel) {
                    nextMoney = dpNext.upFund;
                }
            }
            if (type == 1 /* UNION_HALL */ && curLevel >= maxLevel) {
                continue;
            }
            else if (type != 1 /* UNION_HALL */ && curLevel >= unionControl.guildLv) {
                continue;
            }
            else if (unionControl.money < nextMoney) {
                continue;
            }
            return true;
        }
        return false;
    };
    UnionControl.prototype.checkIsOpenUploadLogo = function () {
        return !!window["uploadGuildLogo"] && !!DataCenter.ins().UnionConfig.uploadOpen;
    };
    UnionControl.prototype.uploadGuildLogo = function (value) {
        window["uploadGuildLogo"](this.guildID, value);
    };
    UnionControl.prototype.getGuildLogo = function (id, state) {
        if (id == undefined) {
            id = this.guildID;
        }
        if (state == undefined) {
            state = this.flagState;
        }
        if (state == 0) {
            return "cgb_flag" + Math.abs(id % 10);
        }
        return window["getGuildImageUrl"](id);
    };
    UnionControl.prototype.refTimeOutList = function (message) {
        if (message) {
            var index = this.guildMessageInfoData.getItemIndex(message);
            if (index > -1) {
                this.guildMessageInfoData.removeItemAt(index);
            }
            rambleControl.removeAllChatMsg(message);
        }
        else {
            var len = this.guildMessageInfoData.length;
            for (var i = len - 1; i > -1; i--) {
                var infoData = this.guildMessageInfoData.getItemAt(i);
                if (infoData.hasTimeOut) {
                    this.guildMessageInfoData.removeItemAt(len);
                    rambleControl.removeAllChatMsg(infoData);
                }
            }
        }
    };
    __decorate([
        up(1)
    ], UnionControl.prototype, "upGuildInfo", null);
    __decorate([
        down(1, [1 /* Byte */, 6 /* UInt */, 8 /* String */, [4 /* UByte */], 3 /* Int */, 8 /* String */, 4 /* UByte */, 3 /* Int */, 2 /* Short */, 3 /* Int */, 3 /* Int */, 1 /* Byte */])
    ], UnionControl.prototype, "downGuildInfo", null);
    __decorate([
        up(2)
    ], UnionControl.prototype, "upGuildMembers", null);
    __decorate([
        down(2, [[3 /* Int */, 8 /* String */, 4 /* UByte */, 4 /* UByte */, 4 /* UByte */, 3 /* Int */, 4 /* UByte */, 3 /* Int */, 3 /* Int */, 10 /* Double */, 6 /* UInt */, 3 /* Int */, 3 /* Int */]])
    ], UnionControl.prototype, "downGuildMembers", null);
    __decorate([
        up(3)
    ], UnionControl.prototype, "upGuildList", null);
    __decorate([
        down(3, [[6 /* UInt */, 4 /* UByte */, 4 /* UByte */, 3 /* Int */, 8 /* String */, 8 /* String */, 3 /* Int */]])
    ], UnionControl.prototype, "downGuildList", null);
    __decorate([
        up(4, [1 /* Byte */, 8 /* String */])
    ], UnionControl.prototype, "upGuildCreate", null);
    __decorate([
        down(4, [4 /* UByte */, 6 /* UInt */])
    ], UnionControl.prototype, "downGuildCreate", null);
    __decorate([
        up(5)
    ], UnionControl.prototype, "upQuitGuild", null);
    __decorate([
        up(6, [3 /* Int */])
    ], UnionControl.prototype, "upJoinGuild", null);
    __decorate([
        down(6)
    ], UnionControl.prototype, "downJoinGuild", null);
    __decorate([
        up(7)
    ], UnionControl.prototype, "upApplyInfos", null);
    __decorate([
        down(7, [[3 /* Int */, 3 /* Int */, 4 /* UByte */, 4 /* UByte */, 10 /* Double */, 8 /* String */]])
    ], UnionControl.prototype, "downApplyInfos", null);
    __decorate([
        up(8, [3 /* Int */, 1 /* Byte */])
    ], UnionControl.prototype, "upProcessJoin", null);
    __decorate([
        down(8, [6 /* UInt */, 4 /* UByte */])
    ], UnionControl.prototype, "downProcessJoin", null);
    __decorate([
        up(9, [3 /* Int */, 1 /* Byte */])
    ], UnionControl.prototype, "upChangeOffice", null);
    __decorate([
        down(9, [3 /* Int */, 4 /* UByte */])
    ], UnionControl.prototype, "downChangeOffice", null);
    __decorate([
        up(10)
    ], UnionControl.prototype, "upDemise", null);
    __decorate([
        up(11, [3 /* Int */])
    ], UnionControl.prototype, "upKick", null);
    __decorate([
        down(11, [3 /* Int */])
    ], UnionControl.prototype, "downQuitGuild", null);
    __decorate([
        down(12, [4 /* UByte */])
    ], UnionControl.prototype, "downUpdateGuildInfo", null);
    __decorate([
        up(13, [3 /* Int */])
    ], UnionControl.prototype, "upCon", null);
    __decorate([
        down(13, [3 /* Int */])
    ], UnionControl.prototype, "downGuildMoney", null);
    __decorate([
        up(14, [8 /* String */])
    ], UnionControl.prototype, "upChangeNotice", null);
    __decorate([
        down(14, [1 /* Byte */, 8 /* String */])
    ], UnionControl.prototype, "downChangeNotice", null);
    __decorate([
        up(15)
    ], UnionControl.prototype, "upGuildSkillInfo", null);
    __decorate([
        down(15, [[[3 /* Int */], [3 /* Int */, 3 /* Int */]]])
    ], UnionControl.prototype, "downGuildSkillInfo", null);
    __decorate([
        up(16, [2 /* Short */, 1 /* Byte */])
    ], UnionControl.prototype, "upLearnGuildSkill", null);
    __decorate([
        down(16, [2 /* Short */, 4 /* UByte */, 3 /* Int */])
    ], UnionControl.prototype, "downLearnGuildSkill", null);
    __decorate([
        up(18, [2 /* Short */, 1 /* Byte */])
    ], UnionControl.prototype, "upPracticeGuildSkill", null);
    __decorate([
        down(18, [2 /* Short */, 4 /* UByte */, 3 /* Int */, 3 /* Int */, 3 /* Int */])
    ], UnionControl.prototype, "downPracticeGuildSkill", null);
    __decorate([
        up(17, [1 /* Byte */])
    ], UnionControl.prototype, "upUpBuilding", null);
    __decorate([
        down(17, [1 /* Byte */, 1 /* Byte */])
    ], UnionControl.prototype, "downUpBuilding", null);
    __decorate([
        down(19, [[3 /* Int */, 3 /* Int */, 3 /* Int */]])
    ], UnionControl.prototype, "downGuildTaskInfos", null);
    __decorate([
        down(20, [3 /* Int */, 3 /* Int */, 3 /* Int */])
    ], UnionControl.prototype, "downGuildTaskUpdate", null);
    __decorate([
        up(21, [1 /* Byte */])
    ], UnionControl.prototype, "upGetTaskAward", null);
    __decorate([
        up(22)
    ], UnionControl.prototype, "upManageList", null);
    __decorate([
        down(22, [[6 /* UInt */, 4 /* UByte */, 3 /* Int */, 3 /* Int */, 3 /* Int */, 8 /* String */, 8 /* String */]])
    ], UnionControl.prototype, "downManageList", null);
    __decorate([
        down(23)
    ], UnionControl.prototype, "downManage", null);
    __decorate([
        up(24)
    ], UnionControl.prototype, "upConCount", null);
    __decorate([
        down(24, [[3 /* Int */]])
    ], UnionControl.prototype, "downConCount", null);
    __decorate([
        up(25)
    ], UnionControl.prototype, "upMyGuildInfo", null);
    __decorate([
        down(25, [3 /* Int */, 3 /* Int */, 4 /* UByte */])
    ], UnionControl.prototype, "downMyGuildInfo", null);
    __decorate([
        up(26, [8 /* String */])
    ], UnionControl.prototype, "upGuildMessage", null);
    __decorate([
        down(26, ByteConst.UnionMessageInfoVos.slice())
    ], UnionControl.prototype, "downGuildMessage", null);
    __decorate([
        up(27)
    ], UnionControl.prototype, "upAllGuildMessage", null);
    __decorate([
        down(27, [ByteConst.UnionMessageInfoVos])
    ], UnionControl.prototype, "downAllGuildMessage", null);
    __decorate([
        up(28, [1 /* Byte */, 3 /* Int */])
    ], UnionControl.prototype, "upAddGuildLimit", null);
    __decorate([
        down(28, [4 /* UByte */, 3 /* Int */])
    ], UnionControl.prototype, "downAddGuildlimit", null);
    __decorate([
        up(30, [2 /* Short */])
    ], UnionControl.prototype, "upToFire", null);
    __decorate([
        down(30, [2 /* Short */, 3 /* Int */])
    ], UnionControl.prototype, "downUpdateFire", null);
    __decorate([
        up(31, [8 /* String */])
    ], UnionControl.prototype, "upGuildChangeName", null);
    UnionControl = __decorate([
        protocolsId(37 /* PROTOCOL_37 */)
    ], UnionControl);
    return UnionControl;
}(BaseSystem));
__reflect(UnionControl.prototype, "UnionControl");
/**
 * 公会副本数据
 */
var UnionCopyControl = (function (_super) {
    __extends(UnionCopyControl, _super);
    function UnionCopyControl() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.bossTimer = 1; //当前波的结束时间
        return _this;
    }
    UnionCopyControl.ins = function () {
        return _super.ins.call(this);
    };
    /**
     * 通关人数列表
     */
    UnionCopyControl.prototype.getGkDatas = function (index) {
        if (index === void 0) { index = -1; }
        return index == -1 ? this._gkDatas : this._gkDatas[index];
    };
    /**
     * 公会副本信息
     * 39-1
     */
    UnionCopyControl.prototype.downInfo = function (fbNum, sweep, sweepNum, tongguan, zuwei, nextFb) {
        this.fbNum = fbNum;
        this.sweep = sweep;
        this.sweepNum = sweepNum;
        this.tongguan = tongguan;
        this.zuwei = zuwei;
        this.nextFb = nextFb;
        this.dispatchGuildFubenInfo();
    };
    UnionCopyControl.prototype.dispatchGuildFubenInfo = function () {
        EventMgr.ins().dispatch(436 /* UNION_COPY_INFO */);
    };
    /**
     * 公会副本排名
     * 39-2
     */
    UnionCopyControl.prototype.downRankInfo = function (datas) {
        this.rankDatas = [];
        for (var i = 0; i < datas.length; i++) {
            var info = new UnionCopyRankInfoVo();
            info.rank = i + 1;
            info.name = datas[i][0];
            info.guanka = datas[i][1];
            this.rankDatas.push(info);
        }
        this.dispatchGuildFubenInfo();
    };
    /**
     * 公会副本昨日最高关卡
     * 39-3
     */
    UnionCopyControl.prototype.downMaxGKInfo = function (isMaxGK, maxName, maxCareer, maxSex, maxNum, maxZhuwei) {
        this.isMaxGK = isMaxGK;
        if (this.isMaxGK != 0) {
            this.maxName = maxName;
            this.maxCareer = maxCareer;
            this.maxSex = maxSex;
            this.maxNum = maxNum;
            this.maxZhuwei = maxZhuwei;
        }
        this.dispatchGuildFubenInfo();
    };
    /**
     * 公会副本关卡通关人数
     * 39-4
     */
    UnionCopyControl.prototype.downGKInfo = function (fbgkNum, datas) {
        this.fbgkNum = fbgkNum;
        this._gkDatas = [];
        for (var i = 0; i < datas.length; i++) {
            this._gkDatas.push(datas[i]);
        }
        this.dispatchGuildFubenInfo();
    };
    /**
     * 公会信息变更
     * 39-5
     */
    UnionCopyControl.prototype.downChangeInfo = function (val) {
        this.change = val; //变更信息 1-排名有变更 2-昨日最高通关有变化
    };
    /**
     * 公会信息奖励进度
     * 39-6
     */
    UnionCopyControl.prototype.downRewardInfo = function (rewardNum, rewardRoleNum) {
        this.rewardNum = rewardNum;
        this.rewardRoleNum = rewardRoleNum;
        this.dispatchGuildFubenInfo();
    };
    /**
     * 下一波怪3秒到达
     * 39-7
     */
    UnionCopyControl.prototype.downBossInfo = function (bossGKNum) {
        this.bossGKNum = bossGKNum;
    };
    /**
     * 当前波结束时间
     * 39-8
     */
    UnionCopyControl.prototype.downBossTimerEndInfo = function (bossGKNum, time) {
        this.bossGKNum = bossGKNum;
        this.bossTimer = DateUtils.formatMiniDateTime(time);
    };
    /**
     * 扫荡结束
     * 39-9
     */
    UnionCopyControl.prototype.downSweepEnd = function () {
    };
    /**
     * 请求公会副本排名信息
     * 39-2
     */
    UnionCopyControl.prototype.upRankInfo = function () {
    };
    /**
     * 请求公会副本昨日最高通关
     * 39-3
     */
    UnionCopyControl.prototype.upMaxGKInfo = function () {
    };
    /**
     * 请求公会副本关卡人员信息
     * 39-4
     */
    UnionCopyControl.prototype.upGKRoleInfo = function (num) {
        return [num];
    };
    /**
     * 请求挑战公会副本
     * 39-5
     */
    UnionCopyControl.prototype.upChallange = function () {
    };
    /**
     * 请求扫荡公会副本
     * 39-6
     */
    UnionCopyControl.prototype.upSweep = function () {
    };
    /**
     * 请求公会副本助威
     * 39-7
     */
    UnionCopyControl.prototype.upZhuwei = function () {
    };
    /**
     * 请求公会副本通关奖励
     * 39-8
     */
    UnionCopyControl.prototype.upReward = function () {
    };
    /**
     * 是否有按钮可点
     */
    UnionCopyControl.prototype.hasbtn = function () {
        return (GameServer.serverOpenDay > 0 && ((this.sweep == 0 && this.fbNum > 0) || (this.tongguan == 0 && this.rewardNum > 0)));
    };
    Object.defineProperty(UnionCopyControl.prototype, "bossTimerEnd", {
        get: function () {
            return this.bossTimer + egret.getTimer();
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        down(1, [2 /* Short */, 1 /* Byte */, 2 /* Short */, 1 /* Byte */, 1 /* Byte */, 1 /* Byte */])
    ], UnionCopyControl.prototype, "downInfo", null);
    __decorate([
        down(2, [[8 /* String */, 2 /* Short */]])
    ], UnionCopyControl.prototype, "downRankInfo", null);
    __decorate([
        down(3, [1 /* Byte */, 8 /* String */, 1 /* Byte */, 1 /* Byte */, 2 /* Short */, 1 /* Byte */])
    ], UnionCopyControl.prototype, "downMaxGKInfo", null);
    __decorate([
        down(4, [2 /* Short */, [8 /* String */]])
    ], UnionCopyControl.prototype, "downGKInfo", null);
    __decorate([
        down(5, [1 /* Byte */])
    ], UnionCopyControl.prototype, "downChangeInfo", null);
    __decorate([
        down(6, [2 /* Short */, 2 /* Short */])
    ], UnionCopyControl.prototype, "downRewardInfo", null);
    __decorate([
        down(7, [2 /* Short */])
    ], UnionCopyControl.prototype, "downBossInfo", null);
    __decorate([
        down(8, [2 /* Short */, 3 /* Int */])
    ], UnionCopyControl.prototype, "downBossTimerEndInfo", null);
    __decorate([
        down(9)
    ], UnionCopyControl.prototype, "downSweepEnd", null);
    __decorate([
        up(2)
    ], UnionCopyControl.prototype, "upRankInfo", null);
    __decorate([
        up(3)
    ], UnionCopyControl.prototype, "upMaxGKInfo", null);
    __decorate([
        up(4, [2 /* Short */])
    ], UnionCopyControl.prototype, "upGKRoleInfo", null);
    __decorate([
        up(5)
    ], UnionCopyControl.prototype, "upChallange", null);
    __decorate([
        up(6)
    ], UnionCopyControl.prototype, "upSweep", null);
    __decorate([
        up(7)
    ], UnionCopyControl.prototype, "upZhuwei", null);
    __decorate([
        up(8)
    ], UnionCopyControl.prototype, "upReward", null);
    UnionCopyControl = __decorate([
        protocolsId(39 /* PROTOCOL_39 */)
    ], UnionCopyControl);
    return UnionCopyControl;
}(BaseSystem));
__reflect(UnionCopyControl.prototype, "UnionCopyControl");
var UnionRedPoint = (function (_super) {
    __extends(UnionRedPoint, _super);
    function UnionRedPoint() {
        var _this = _super.call(this) || this;
        /** 行会红点 */
        _this.hanghui = false;
        /** 分配奖励 */
        _this.sendReward = false;
        /** 红包 */
        _this.redBag = false;
        /** 龙城争霸 */
        _this.sczb = false;
        /** 行会大厅 */
        _this.hhdt = false;
        /** 管理页签 */
        _this.gldt = false;
        /** 行会BOSS */
        _this.hhBoss = false;
        /** 每日奖励 */
        _this.dayReward = false;
        /** 篝火*/
        _this.guildFire = false;
        /** 人物头像红点*/
        _this.roleTabs = {};
        /** 练功房每个人物的技能红点*/
        _this.roleSkillTabs = {};
        /** 练功房分页红点*/
        _this.liangongRed = false;
        _this.devildomAwardRed = false;
        _this.addCustomEventMany(_this.dispatchDayReward, 413 /* UNION_WAR_DAY_REWARD_INFO */, 12 /* UNION_QUIT */);
        _this.addCustomEventMany(_this.dispatchSczb, 670 /* UNION_DAY_REWARD */, 673 /* UNION_HAVE_RED_BAG */);
        _this.addCustomEventMany(_this.dispatchSendReward, 416 /* UNION_WAR_ASSIGNS_REWARD */, 417 /* UNION_WAR_SEND_REWARD_SUCCESS */, 12 /* UNION_QUIT */, 13 /* UNION_OFFICE_CHANGE */, 28 /* MY_UNION_INFO */);
        _this.addCustomEventMany(_this.dispatchRedBag, 408 /* UNION_WAR_RED_BAG_INFO */, 12 /* UNION_QUIT */);
        _this.addCustomEventMany(_this.dispatchHhdt, 19 /* UNION_APPLY_INFOS */, 18 /* UNION_JOIN */, 28 /* MY_UNION_INFO */, 674 /* UNION_LIAN_GONG_RED */, 669 /* UNION_GLDT_RED */);
        _this.addCustomEventMany(_this.dispatchGldt, 24 /* UNION_UP_BUILDING */, 26 /* UNION_MANAGE_LIST */, 21 /* UNION_MONEY */, 28 /* MY_UNION_INFO */);
        _this.addCustomEventMany(_this.dispatchHanghui, 672 /* UNION_SEND_REWARD_RED */, 671 /* UNION_SCZB_RED */, 668 /* UNION_HHDT_RED */, 667 /* UNION_FIRE_RED */, 674 /* UNION_LIAN_GONG_RED */, 461 /* ACTOR_LEVEL_CHANGE */, 436 /* UNION_COPY_INFO */, 419 /* UNION_WAR_START_INFO */, 14 /* UNION_INFO */, 675 /* UNION_BOSS_RED */, 676 /* DEVILDOM_FEN_AWARD_RED */, 266 /* BACKPACK_ITEM_ADD */, 268 /* BACKPACK_ITEM_DEL */, 269 /* BACKPACK_ITEM_COUNT_CHANGE */, 12 /* UNION_QUIT */);
        _this.addCustomEventMany(_this.dispatchHanghuiBoss, 433 /* UNION_BOSS_DETAIL_CHANGE */, 432 /* UNION_BOSS_INFO */, 12 /* UNION_QUIT */);
        _this.addCustomEventMany(_this.dispatchGuildFire, 266 /* BACKPACK_ITEM_ADD */, 268 /* BACKPACK_ITEM_DEL */, 31 /* UNION_FIRE_UPDATE */);
        _this.addCustomEventMany(_this.dispatchLianGongRedPoint, 24 /* UNION_UP_BUILDING */, 23 /* UNION_SKILL_INFO */, 28 /* MY_UNION_INFO */);
        _this.addCustomEventMany(_this.dispatchDevildomFenAward, 336 /* DEVILDOM_AWARD */);
        return _this;
    }
    UnionRedPoint.ins = function () {
        return _super.ins.call(this);
    };
    UnionRedPoint.prototype.dispatchGuildFire = function () {
        var oldv = this.guildFire;
        if (unionControl.guildID) {
            var conf = DataCenter.ins().UnionConfig;
            var itemCount = backpackControl.getBagGoodsCountById(0, conf.bonfireItem);
            var needCount = 10;
            var serverDay = GameServer.serverOpenDay + 1;
            var lv = reincarnateControl.lv * 1000 + ActorControl.level;
            for (var key in conf.bonfirecaution) {
                if (serverDay >= +key && lv >= conf.bonfirecaution[key][0]) {
                    needCount = conf.bonfirecaution[key][1];
                }
            }
            if (itemCount >= needCount) {
                this.guildFire = true;
            }
            else {
                this.guildFire = false;
            }
        }
        else {
            this.guildFire = false;
        }
        this.guildFire != oldv && EventMgr.ins().dispatch(667 /* UNION_FIRE_RED */, true);
    };
    UnionRedPoint.prototype.dispatchHhdt = function () {
        var oldv = this.hhdt;
        this.hhdt = unionControl.hasApplys() || this.gldt;
        this.hhdt != oldv && EventMgr.ins().dispatch(668 /* UNION_HHDT_RED */, true);
    };
    UnionRedPoint.prototype.dispatchGldt = function () {
        var oldv = this.gldt;
        this.gldt = unionControl.isUpGradeBuilding();
        this.gldt != oldv && EventMgr.ins().dispatch(669 /* UNION_GLDT_RED */, true);
    };
    UnionRedPoint.prototype.dispatchDayReward = function () {
        var oldv = this.dayReward;
        this.dayReward = unionWarControl.getModel().canGetDay && !unionWarControl.getModel().getDayReward;
        this.dayReward != oldv && EventMgr.ins().dispatch(670 /* UNION_DAY_REWARD */, true);
    };
    UnionRedPoint.prototype.dispatchSczb = function () {
        var oldv = this.sczb;
        this.sczb = this.dayReward || this.redBag;
        this.sczb != oldv && EventMgr.ins().dispatch(671 /* UNION_SCZB_RED */, true);
    };
    UnionRedPoint.prototype.dispatchRedBag = function () {
        var oldv = this.redBag;
        this.redBag = unionWarControl.getModel().isHaveRedBag();
        this.redBag != oldv && EventMgr.ins().dispatch(673 /* UNION_HAVE_RED_BAG */, true);
    };
    UnionRedPoint.prototype.dispatchSendReward = function () {
        var oldv = this.sendReward;
        this.sendReward = unionWarControl.getModel().canSendReward;
        this.sendReward != oldv && EventMgr.ins().dispatch(672 /* UNION_SEND_REWARD_RED */, true);
    };
    UnionRedPoint.prototype.dispatchHanghui = function () {
        var oldv = this.hanghui;
        var state = false;
        //公会副本红点
        if (unionCopyControl.hasbtn()) {
            state = true;
        }
        //没有公会
        if ((unionControl.guildID == undefined || unionControl.guildID == 0) && ActorControl.level > 69) {
            state = true;
        }
        this.hanghui = state ||
            this.sendReward ||
            this.redBag ||
            this.sczb ||
            this.hhBoss ||
            this.guildFire ||
            this.liangongRed ||
            unionWarControl.getModel().isWatStart ||
            this.hhdt;
        this.hanghui != oldv && EventMgr.ins().dispatch(685 /* UNION_HANG_HUI_RED */, true);
    };
    UnionRedPoint.prototype.dispatchHanghuiBoss = function () {
        var oldv = this.hhBoss;
        this.hhBoss = unionBossControl.getBossRewardState() || unionBossControl.getBossChallenge();
        this.hhBoss != oldv && EventMgr.ins().dispatch(675 /* UNION_BOSS_RED */, true);
    };
    UnionRedPoint.prototype.dispatchLianGongRedPoint = function () {
        this.liangongRed = false;
        var tab = UnionRedPoint.Tab_LianGong;
        var len = heroControl.subRolesLen;
        for (var roleIndex = 0; roleIndex < len; roleIndex++) {
            var role = heroControl.getSubRoleByIndex(roleIndex);
            if (!role)
                continue;
            var roleSkillInfo = unionControl.getSkllInfoByIndex(role.index);
            if (!roleSkillInfo)
                continue;
            if (!this.roleTabs[tab])
                this.roleTabs[tab] = {};
            this.roleTabs[tab][roleIndex] = false;
            //角色每个练功技能
            for (var selectSkillID = 1; selectSkillID <= 3; selectSkillID++) {
                if (!this.roleSkillTabs[roleIndex])
                    this.roleSkillTabs[roleIndex] = {};
                this.roleSkillTabs[roleIndex][selectSkillID] = false;
                var maxLevel = DataCenter.ins().UnionCommonSkillConfig[selectSkillID].length;
                var level = roleSkillInfo.guildSkillInfo[selectSkillID - 1].level;
                if (level >= maxLevel)
                    continue;
                var csInfoNext = this.getCommonSkillDP(selectSkillID, level + 1);
                if (!csInfoNext)
                    continue;
                if (csInfoNext.contribute > unionControl.myCon) {
                    continue;
                }
                if (ActorControl.gold < csInfoNext.money) {
                    continue;
                }
                var buildLevel = unionControl.getBuildingLevels(2 /* UNION_LIANGONGFANG */ - 1);
                var learnLab = (buildLevel < 1 || level >= DataCenter.ins().UnionConfig.commonSkillLevels[buildLevel - 1]);
                if (learnLab) {
                    continue;
                }
                this.roleSkillTabs[roleIndex][selectSkillID] = true;
                this.liangongRed = true;
            }
            for (var r in this.roleSkillTabs[roleIndex]) {
                if (this.roleSkillTabs[roleIndex][r]) {
                    this.roleTabs[tab][roleIndex] = true;
                    break;
                }
            }
        }
        EventMgr.ins().dispatch(674 /* UNION_LIAN_GONG_RED */);
    };
    UnionRedPoint.prototype.getCommonSkillDP = function (skillID, level) {
        var infos = DataCenter.ins().UnionCommonSkillConfig[skillID];
        if (level == 0) {
            return infos[1];
        }
        for (var key in infos) {
            var element = infos[key];
            if (element.level == level)
                return element;
        }
        return null;
    };
    UnionRedPoint.prototype.dispatchDevildomFenAward = function () {
        var oldRed = this.devildomAwardRed;
        this.devildomAwardRed = devildomControl.getDevildomFenAwardRed();
        oldRed != this.devildomAwardRed && EventMgr.ins().dispatch(676 /* DEVILDOM_FEN_AWARD_RED */, true);
    };
    UnionRedPoint.Tab_LianGong = 0;
    return UnionRedPoint;
}(BaseSystem));
__reflect(UnionRedPoint.prototype, "UnionRedPoint");
/**
 * 公会商店数据
 */
var UnionStoreControl = (function (_super) {
    __extends(UnionStoreControl, _super);
    function UnionStoreControl() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.guildStoreLv = 0; //公会商店等级
        _this.guildStoreNum = 0; //公会商店已使用次数
        _this._recordInfoAry = []; //抽奖记录
        _this._guildStoreItemData = []; //箱子数据
        return _this;
    }
    UnionStoreControl.ins = function () {
        return _super.ins.call(this);
    };
    /**抽奖记录*/
    UnionStoreControl.prototype.getRecordInfoAry = function (index) {
        if (index === void 0) { index = -1; }
        return index == -1 ? this._recordInfoAry : this._recordInfoAry[index];
    };
    /**箱子数据*/
    UnionStoreControl.prototype.getGuildStoreItemData = function (index) {
        if (index === void 0) { index = -1; }
        return index == -1 ? this._guildStoreItemData : this._guildStoreItemData[index];
    };
    /**
     * 公会商店信息
     * 42-1
     */
    UnionStoreControl.prototype.downInfo = function (guildStoreLv, guildStoreNum) {
        this.guildStoreLv = guildStoreLv;
        this.guildStoreNum = guildStoreNum;
        EventMgr.ins().dispatch(441 /* UNION_STORE_INFO */);
    };
    /**
     * 公会宝箱记录
     * 42-2
     */
    UnionStoreControl.prototype.downBoxInfo = function (datas) {
        for (var i = 0; i < datas.length; i++) {
            var info = new UnionStoreRecordInfoVo();
            info.times = datas[i][0];
            info.roleName = datas[i][1];
            info.itemId = datas[i][2];
            if (this._recordInfoAry.length >= 50) {
                this._recordInfoAry.pop();
            }
            this._recordInfoAry.unshift(info);
        }
        EventMgr.ins().dispatch(442 /* UNION_STORE_BOX_INFO */);
    };
    /**
     * 开箱
     * 42-3
     */
    UnionStoreControl.prototype.downBox = function (datas) {
        this._guildStoreItemData = [];
        for (var i = 0; i < datas.length; i++) {
            var info = new UnionStoreItemDataVo();
            info.itemId = datas[i][0];
            info.num = datas[i][1];
            this._guildStoreItemData.push(info);
        }
        this.guildStoreNum -= 1;
        EventMgr.ins().dispatch(443 /* UNION_STORE_BOX_RESULT */);
    };
    /**
     * 公会商店信息
     * 42-1
     */
    UnionStoreControl.prototype.upGetInfo = function () {
    };
    /**
     * 公会宝箱记录
     * 42-2
     */
    UnionStoreControl.prototype.upBoxInfo = function () {
        var times = 0;
        if (this._recordInfoAry != null && this._recordInfoAry.length != 0) {
            times = this.getRecordInfoAry(0).times;
        }
        return [times];
    };
    /**
     * 开箱
     * 42-3
     */
    UnionStoreControl.prototype.upBox = function () {
    };
    __decorate([
        down(1, [1 /* Byte */, 1 /* Byte */])
    ], UnionStoreControl.prototype, "downInfo", null);
    __decorate([
        down(2, [[3 /* Int */, 8 /* String */, 3 /* Int */]])
    ], UnionStoreControl.prototype, "downBoxInfo", null);
    __decorate([
        down(3, [[3 /* Int */, 3 /* Int */]])
    ], UnionStoreControl.prototype, "downBox", null);
    __decorate([
        up(1)
    ], UnionStoreControl.prototype, "upGetInfo", null);
    __decorate([
        up(2, [3 /* Int */])
    ], UnionStoreControl.prototype, "upBoxInfo", null);
    __decorate([
        up(3)
    ], UnionStoreControl.prototype, "upBox", null);
    UnionStoreControl = __decorate([
        protocolsId(42 /* PROTOCOL_42 */)
    ], UnionStoreControl);
    return UnionStoreControl;
}(BaseSystem));
__reflect(UnionStoreControl.prototype, "UnionStoreControl");
var UnionWarControl = (function (_super) {
    __extends(UnionWarControl, _super);
    function UnionWarControl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UnionWarControl.ins = function () {
        return _super.ins.call(this);
    };
    UnionWarControl.prototype.getModel = function () {
        if (!this._guildWarModel) {
            this._guildWarModel = new UnionWarModelVo();
        }
        return this._guildWarModel;
    };
    /**
     * 请求发红包
     * 40-2
     */
    UnionWarControl.prototype.upSendRedBag = function (num, bagNum) {
        return [num, bagNum];
    };
    /**
     * 请求领取红包
     * 40-3
     */
    UnionWarControl.prototype.upRobRedBag = function () {
    };
    /**
     * 请求进入龙城争霸
     * 40-4
     */
    UnionWarControl.prototype.upJoinAc = function () {
    };
    /**
     * 请求进入下一场景
     * 40-5
     */
    UnionWarControl.prototype.upPlayNextMap = function (index) {
        return [index];
    };
    /**
     * 请求龙城争霸 帮派排行榜数据
     * 40-8
     */
    UnionWarControl.prototype.upGuildRank = function () {
    };
    /**
     * 请求龙城争霸 个人排行榜数据
     * 40-9
     */
    UnionWarControl.prototype.upOwnGuildRank = function () {
    };
    /**
     * 行会战个人排行榜
     * 40-9
     */
    UnionWarControl.prototype.downGuildPersonalRank = function (datas) {
        var list = [];
        for (var i = 0; i < datas.length; i++) {
            var info = new RankGuildInfo();
            info.init(datas[i]);
            list[i] = info;
        }
        EventMgr.ins().dispatch(411 /* UNION_WAR_PERSONAL_RANK */, list);
    };
    /**
     * 请求龙城争霸 个人每日奖励
     * 40-13
     */
    UnionWarControl.prototype.upDayReward = function (day) {
        return [day];
    };
    /**
     * 请求龙城争霸 个人帮派积分排行
     * 40-14
     */
    UnionWarControl.prototype.upOwnMyGuildRank = function () {
    };
    /**
     * 请求 开始采集旗子
     * 40-16
     */
    UnionWarControl.prototype.upStartGetFlag = function () {
    };
    /**
     * 龙城争霸获胜帮派信息
     * 40-21
     */
    UnionWarControl.prototype.upWinGuildInfo = function () {
    };
    /**
     * 红包信息
     * 40-1
     */
    UnionWarControl.prototype.downRedBagInfo = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.getModel().initRedbagInfo(param);
        EventMgr.ins().dispatch(408 /* UNION_WAR_RED_BAG_INFO */);
    };
    /**
     * 发红包
     * 40-2
     */
    UnionWarControl.prototype.downSendRedBack = function (result) {
        if (result) {
            UIMgr.ins().close(RedBagView);
            tipsControl.showTips(LangMgr.getValueByKey('clanSendHB'));
        }
    };
    /**
     * 抢红包
     * 40-3
     */
    UnionWarControl.prototype.downRobRedBack = function (result) {
        if (result) {
            UIMgr.ins().close(RedBagView);
            UIMgr.ins().open(RedBagDetailsView, 1);
        }
    };
    /**
     * 进入龙城争霸的
     * 40-4
     */
    UnionWarControl.prototype.downJoinPlayBack = function (flag, doorDie, rewardFlag) {
        this.getModel().doorDie = doorDie;
        this.getModel().rewardFlag = rewardFlag;
        if (flag) {
            UIMgr.ins().close(UnionWarMainView);
            UIMgr.ins().close(UnionMapView);
        }
        EventMgr.ins().dispatch(409 /* UNION_WAR_JOIN_PLAY_BACK */);
    };
    /**
     * 进入下个场景
     * 40-5
     */
    UnionWarControl.prototype.downPlayNextCard = function () {
    };
    /**
     * 个人积分 帮派积分
     * 40-6
     */
    UnionWarControl.prototype.downGetPointInfo = function (ownPoint, guildPoint, addNum) {
        this.getModel().ownPoint = ownPoint;
        this.getModel().guildPoint = guildPoint;
        if (addNum > 0) {
            tipsControl.showTips(LangMgr.getValueByKey('clanGetScore', addNum));
        }
        this.dispatchPointUpdate();
    };
    UnionWarControl.prototype.dispatchPointUpdate = function () {
        EventMgr.ins().dispatch(410 /* UNION_WAR_POINT_UPDATE */);
    };
    /**
     * 功勋值变化
     * 40-7
     */
    UnionWarControl.prototype.downGetGongXunChange = function (val) {
        this.getModel().gongXun = val;
        this.dispatchPointUpdate();
    };
    /**
     * 帮派排行数据
     * 40-8
     */
    UnionWarControl.prototype.downGuildRankinfo = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.getModel().initGuildRankInfo(param);
    };
    /**
     * 帮派战 复活信息
     * 40-10
     */
    UnionWarControl.prototype.downGuildWarKillInfo = function (time, killName, killGuild) {
        this.getModel().killName = killName;
        this.getModel().killGuild = killGuild;
        UIMgr.ins().open(UnionWarReliveView, 2, time);
    };
    /**
     * 帮派战 皇宫归属变更
     * 40-11
     */
    UnionWarControl.prototype.downGuildWarCityOwn = function (cityOwn) {
        this.getModel().cityOwn = cityOwn;
        this.dispatchCityownChange();
    };
    UnionWarControl.prototype.dispatchCityownChange = function () {
        EventMgr.ins().dispatch(412 /* UNION_WAR_CITY_OWN */);
    };
    /**
     * 帮派战 本帮排行
     * 40-14
     */
    UnionWarControl.prototype.downMyActivityRankInfo = function (datas) {
        this.getModel().initMyGuildRankInfo(datas);
    };
    /**
     * 领取每日奖励状态
     * 40-12
     */
    UnionWarControl.prototype.downDayRewardInfo = function (canGetDay, getDayReward, rewardDay) {
        this.getModel().canGetDay = canGetDay;
        this.getModel().getDayReward = getDayReward;
        this.getModel().rewardDay = rewardDay;
        EventMgr.ins().dispatch(413 /* UNION_WAR_DAY_REWARD_INFO */);
    };
    /**
     * 旗子状态变
     * 40-15
     */
    UnionWarControl.prototype.downFlagInfoChange = function (flagStatu, endTime, flagName, flagAcId, flagGuild) {
        //(0 不可采集,1 可采集 ,2 采集中)
        this.getModel().flagAcId = 0;
        this.getModel().flagStatu = flagStatu;
        if (this.getModel().flagStatu == 0) {
            this.getModel().endTime = endTime;
        }
        else if (this.getModel().flagStatu == 2) {
            this.getModel().endTime = endTime;
            this.getModel().flagName = flagName;
            this.getModel().flagAcId = flagAcId;
            this.getModel().flagGuild = flagGuild;
            if (this.getModel().flagAcId == ActorControl.actorID) {
                tipsControl.showTips(LangMgr.getValueByKey('guildStartCj'));
            }
        }
        EventMgr.ins().dispatch(414 /* UNION_WAR_FLAG_INFO_CHANGE */);
    };
    /**
     * 结算
     * 40-17
     */
    UnionWarControl.prototype.downGuildWarResult = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        (_a = this.getModel()).decodeGulidWarResult.apply(_a, param);
        var _a;
    };
    /**
     * 护盾
     * 40-18
     */
    UnionWarControl.prototype.downHuDunInfoChange = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        EventMgr.ins().dispatch(415 /* UNION_WAR_SHIELD */, param);
    };
    /**
     * 40-19
     */
    UnionWarControl.prototype.downAssignsReward = function (guildWarRank, canSendReward, rewardFlag) {
        this.getModel().guildWarRank = guildWarRank;
        this.getModel().canSendReward = canSendReward;
        this.getModel().rewardFlag = rewardFlag;
        EventMgr.ins().dispatch(416 /* UNION_WAR_ASSIGNS_REWARD */);
    };
    /**
     * 40-20
     */
    UnionWarControl.prototype.upFenReward = function (num, list) {
        var datas = [];
        var numList = this.getModel().sendNumList;
        for (var i = 1; i <= num; i++) {
            var data = [i];
            var index = i - 1;
            var len = list[index].length;
            var arr = [];
            for (var k = 0; k < len; k++) {
                var data_2 = list[index][k];
                var subArr = [];
                subArr.push(data_2.roleID);
                subArr.push(numList[index][k]);
                arr.push(subArr);
            }
            data.push(arr);
            datas.push(data);
        }
        return [datas];
    };
    /**
     * 40-20
     */
    UnionWarControl.prototype.downSendRewardSuccess = function (result) {
        if (result) {
            UIMgr.ins().close(SelectMemberRewardView);
            this.getModel().canSendReward = false;
            tipsControl.showTips(LangMgr.getValueByKey('guildPartFinsh'));
        }
        EventMgr.ins().dispatch(417 /* UNION_WAR_SEND_REWARD_SUCCESS */);
    };
    /**
     * 40-21
     */
    UnionWarControl.prototype.downWinGuildInfo = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        if (!this.getModel().winGuildInfo) {
            this.getModel().winGuildInfo = new WinGuildInfo();
        }
        this.getModel().winGuildInfo.init(param);
        EventMgr.ins().dispatch(418 /* WIN_UNION_INFO */);
    };
    /**
     * 40-22
     */
    UnionWarControl.prototype.downGuildWarStarInfo = function (isWatStart, startTime, acEndTime) {
        this.getModel().isWatStart = isWatStart;
        this.getModel().startTime = startTime;
        this.getModel().acEndTime = acEndTime;
        EventMgr.ins().dispatch(419 /* UNION_WAR_START_INFO */);
    };
    /**
     * 城门护盾
     * 40-23
     */
    UnionWarControl.prototype.downGuildWarDoorHuDun = function (curShield) {
        bossControl.curShield = curShield;
        bossControl.dispatchShieldPer();
    };
    /**
     * 抽奖信息
     * 40-24
     */
    UnionWarControl.prototype.downLotteryInfo = function (worldPrize) {
        bossControl.worldPrize = worldPrize;
        UIMgr.ins().open("WorldBossRewardView", 1);
    };
    /**
     * 参与抽奖
     * 40-25
     */
    UnionWarControl.prototype.upPlayLotteryInfo = function () {
    };
    /**
     * 排行榜
     * 40-26
     */
    UnionWarControl.prototype.downRankInfoChange = function (datas) {
        this.getModel().rankListChange(datas);
    };
    /**
     * 40-27
     */
    UnionWarControl.prototype.downChangeAttrHandle = function (handle) {
        if (MapControl.copyType != 14) {
            return;
        }
        if (!(this.getModel().attHandle == handle)) {
            this.getModel().attHandle = handle;
            UnitShowMgr.ins().showHideSomeOne(handle);
        }
        this.dispatchWeixieChange(1);
    };
    UnionWarControl.prototype.dispatchWeixieChange = function (b) {
        EventMgr.ins().dispatch(420 /* UNION_WAR_THREATEN_CHANGE */, b);
    };
    /**
     * 公会红点
     */
    UnionWarControl.prototype.dispatchGuildRedPointChange = function (state) {
        EventMgr.ins().dispatch(421 /* UNION_WAR_RED_POINT */, state);
    };
    /**
     * 40-28
     */
    UnionWarControl.prototype.downChangeShowList = function (handle) {
        if (MapControl.copyType != 14) {
            return;
        }
        this.getModel().changeWeiXieList(handle, false);
        this.getModel().changecanPlayList(handle, false);
        this.getModel().setMyGuildNum(handle, false);
        if (this.getModel().attHandle && this.getModel().attHandle == handle) {
            this.getModel().attHandle = 0;
        }
    };
    /**
     * 40-29
     */
    UnionWarControl.prototype.downPointRewardInfo = function () {
        var datas = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            datas[_i] = arguments[_i];
        }
        this.getModel().initPointRewardInfo(datas);
    };
    /**
     * 请求积分奖励
     * 40-30
     */
    UnionWarControl.prototype.upPointReward = function () {
    };
    /**
     * 城门倒计时
     * 40-31
     */
    UnionWarControl.prototype.downDoorEndtime = function (time) {
        this.getModel().doEndDoorTime(time);
    };
    /**
     * 自己的抽奖点数
     * 40-25
     */
    UnionWarControl.prototype.downGetMyPoint = function (ran) {
        bossControl.dispatchLotteryRan(ran);
    };
    UnionWarControl.prototype.dispatchLotteryPoint = function (n) {
        EventMgr.ins().dispatch(504 /* UNION_WAR_LOTTERY_POINT */, n);
    };
    /**
     * 抽奖最高点数
     * 40-32
     */
    UnionWarControl.prototype.downTalkMaxPoint = function (point, name) {
        bossControl.dispatchLotteryResult(name, point);
    };
    /**
     * 击杀数
     * 40-32
     */
    UnionWarControl.prototype.downKillHuman = function (kill) {
        EventMgr.ins().dispatch(422 /* UNION_WAR_KILL_HUMAN */, kill);
    };
    /**
     * 合服活动归属公会名称
     * 40-34
     */
    UnionWarControl.prototype.downHeFuBelong = function (datas) {
        this.GuildNameBelongs = [];
        for (var i = 0; i < datas.length; i++) {
            this.GuildNameBelongs.push(datas[i]);
        }
        EventMgr.ins().dispatch(423 /* HEFU_UNION_BELONG */);
    };
    /**
     * 获取合服活动归属公会名
     * 40-34
     */
    UnionWarControl.prototype.upHeFuBelong = function () {
    };
    UnionWarControl.prototype.dispatchLotteryMaxPost = function (str, n) {
        EventMgr.ins().dispatch(431 /* UNION_WAR_LOTTERY_MAX_POST */, [str, n]);
    };
    UnionWarControl.prototype.dispatchMyRankChange = function () {
        EventMgr.ins().dispatch(430 /* UNION_WAR_MY_RANK_CHANGE */);
    };
    UnionWarControl.prototype.dispatchPointRewardChange = function () {
        EventMgr.ins().dispatch(424 /* UNION_WAR_POINT_REWARD_CHANGE */);
    };
    UnionWarControl.prototype.dispatchCanplayChange = function () {
        EventMgr.ins().dispatch(425 /* UNION_WAR_CAN_PLAY_CHANGE */);
    };
    UnionWarControl.prototype.dispatchRankListChange = function () {
        EventMgr.ins().dispatch(426 /* UNION_WAR_RANK_LIST */);
    };
    UnionWarControl.prototype.dispatchGuildNumChange = function () {
        EventMgr.ins().dispatch(427 /* UNION_WAR_NUM */);
    };
    UnionWarControl.prototype.dispatchSendListChange = function () {
        EventMgr.ins().dispatch(428 /* UNION_WAR_SEND_LIST_CHANGE */);
    };
    UnionWarControl.prototype.dispatchRankInfo = function () {
        EventMgr.ins().dispatch(429 /* UNION_WAR_RANK_INFO */);
    };
    __decorate([
        up(2, [3 /* Int */, 3 /* Int */])
    ], UnionWarControl.prototype, "upSendRedBag", null);
    __decorate([
        up(3)
    ], UnionWarControl.prototype, "upRobRedBag", null);
    __decorate([
        up(4)
    ], UnionWarControl.prototype, "upJoinAc", null);
    __decorate([
        up(5, [1 /* Byte */])
    ], UnionWarControl.prototype, "upPlayNextMap", null);
    __decorate([
        up(8)
    ], UnionWarControl.prototype, "upGuildRank", null);
    __decorate([
        up(9)
    ], UnionWarControl.prototype, "upOwnGuildRank", null);
    __decorate([
        down(9, [ByteConst.RankGuildInfos])
    ], UnionWarControl.prototype, "downGuildPersonalRank", null);
    __decorate([
        up(13, [3 /* Int */])
    ], UnionWarControl.prototype, "upDayReward", null);
    __decorate([
        up(14)
    ], UnionWarControl.prototype, "upOwnMyGuildRank", null);
    __decorate([
        up(16)
    ], UnionWarControl.prototype, "upStartGetFlag", null);
    __decorate([
        up(21)
    ], UnionWarControl.prototype, "upWinGuildInfo", null);
    __decorate([
        down(1, [3 /* Int */, 0 /* Boolean */, 0 /* Boolean */, 3 /* Int */, 3 /* Int */, 3 /* Int */, ByteConst.GuildRedRobInfos])
    ], UnionWarControl.prototype, "downRedBagInfo", null);
    __decorate([
        down(2, [0 /* Boolean */])
    ], UnionWarControl.prototype, "downSendRedBack", null);
    __decorate([
        down(3, [0 /* Boolean */])
    ], UnionWarControl.prototype, "downRobRedBack", null);
    __decorate([
        down(4, [0 /* Boolean */, 0 /* Boolean */, 1 /* Byte */])
    ], UnionWarControl.prototype, "downJoinPlayBack", null);
    __decorate([
        down(5)
    ], UnionWarControl.prototype, "downPlayNextCard", null);
    __decorate([
        down(6, [3 /* Int */, 3 /* Int */, 3 /* Int */])
    ], UnionWarControl.prototype, "downGetPointInfo", null);
    __decorate([
        down(7, [3 /* Int */])
    ], UnionWarControl.prototype, "downGetGongXunChange", null);
    __decorate([
        down(8, [8 /* String */, 1 /* Byte */, ByteConst.RankGuildInfos])
    ], UnionWarControl.prototype, "downGuildRankinfo", null);
    __decorate([
        down(10, [3 /* Int */, 8 /* String */, 8 /* String */])
    ], UnionWarControl.prototype, "downGuildWarKillInfo", null);
    __decorate([
        down(11, [8 /* String */])
    ], UnionWarControl.prototype, "downGuildWarCityOwn", null);
    __decorate([
        down(14, [ByteConst.MyRankGuildInfos])
    ], UnionWarControl.prototype, "downMyActivityRankInfo", null);
    __decorate([
        down(12, [0 /* Boolean */, 0 /* Boolean */, 3 /* Int */])
    ], UnionWarControl.prototype, "downDayRewardInfo", null);
    __decorate([
        down(15, [2 /* Short */, 3 /* Int */, 8 /* String */, 3 /* Int */, 8 /* String */])
    ], UnionWarControl.prototype, "downFlagInfoChange", null);
    __decorate([
        down(17, [8 /* String */, 3 /* Int */, 3 /* Int */, 3 /* Int */, 3 /* Int */])
    ], UnionWarControl.prototype, "downGuildWarResult", null);
    __decorate([
        down(18, [3 /* Int */, 3 /* Int */])
    ], UnionWarControl.prototype, "downHuDunInfoChange", null);
    __decorate([
        down(19, [3 /* Int */, 0 /* Boolean */, 1 /* Byte */])
    ], UnionWarControl.prototype, "downAssignsReward", null);
    __decorate([
        up(20, [[3 /* Int */, [3 /* Int */, 3 /* Int */]]])
    ], UnionWarControl.prototype, "upFenReward", null);
    __decorate([
        down(20, [0 /* Boolean */])
    ], UnionWarControl.prototype, "downSendRewardSuccess", null);
    __decorate([
        down(21, ByteConst.WinGuildInfos.slice())
    ], UnionWarControl.prototype, "downWinGuildInfo", null);
    __decorate([
        down(22, [0 /* Boolean */, 3 /* Int */, 3 /* Int */])
    ], UnionWarControl.prototype, "downGuildWarStarInfo", null);
    __decorate([
        down(23, [3 /* Int */])
    ], UnionWarControl.prototype, "downGuildWarDoorHuDun", null);
    __decorate([
        down(24, [3 /* Int */])
    ], UnionWarControl.prototype, "downLotteryInfo", null);
    __decorate([
        up(25)
    ], UnionWarControl.prototype, "upPlayLotteryInfo", null);
    __decorate([
        down(26, [ByteConst.WarRankInfos])
    ], UnionWarControl.prototype, "downRankInfoChange", null);
    __decorate([
        down(27, [10 /* Double */])
    ], UnionWarControl.prototype, "downChangeAttrHandle", null);
    __decorate([
        down(28, [10 /* Double */])
    ], UnionWarControl.prototype, "downChangeShowList", null);
    __decorate([
        down(29, ByteConst.PointRewarddInfos.slice())
    ], UnionWarControl.prototype, "downPointRewardInfo", null);
    __decorate([
        up(30)
    ], UnionWarControl.prototype, "upPointReward", null);
    __decorate([
        down(31, [1 /* Byte */])
    ], UnionWarControl.prototype, "downDoorEndtime", null);
    __decorate([
        down(25, [2 /* Short */])
    ], UnionWarControl.prototype, "downGetMyPoint", null);
    __decorate([
        down(32, [3 /* Int */, 8 /* String */])
    ], UnionWarControl.prototype, "downTalkMaxPoint", null);
    __decorate([
        down(33, [3 /* Int */])
    ], UnionWarControl.prototype, "downKillHuman", null);
    __decorate([
        down(34, [[8 /* String */]])
    ], UnionWarControl.prototype, "downHeFuBelong", null);
    __decorate([
        up(34)
    ], UnionWarControl.prototype, "upHeFuBelong", null);
    UnionWarControl = __decorate([
        protocolsId(40 /* PROTOCOL_40 */)
    ], UnionWarControl);
    return UnionWarControl;
}(BaseSystem));
__reflect(UnionWarControl.prototype, "UnionWarControl");
/** 强盗状态*/
var RobberStartInfoVo = (function () {
    function RobberStartInfoVo() {
    }
    return RobberStartInfoVo;
}());
__reflect(RobberStartInfoVo.prototype, "RobberStartInfoVo");
var UnionApplyInfoVo = (function () {
    function UnionApplyInfoVo() {
    }
    return UnionApplyInfoVo;
}());
__reflect(UnionApplyInfoVo.prototype, "UnionApplyInfoVo");
var UnionCopyRankInfoVo = (function () {
    function UnionCopyRankInfoVo() {
    }
    return UnionCopyRankInfoVo;
}());
__reflect(UnionCopyRankInfoVo.prototype, "UnionCopyRankInfoVo");
var UnionListInfoVo = (function () {
    function UnionListInfoVo() {
    }
    return UnionListInfoVo;
}());
__reflect(UnionListInfoVo.prototype, "UnionListInfoVo");
var UnionMemberInfoVo = (function () {
    function UnionMemberInfoVo() {
        this.level = 0;
        this.zsLevel = 0;
    }
    UnionMemberInfoVo.prototype.init = function (datas) {
        this.roleID = datas[0];
        this.vipLevel = datas[1];
        this.attack = datas[2];
        this.sex = datas[3];
        this.job = datas[4];
        this.name = datas[5];
        this.zsLevel = datas[6];
        this.score = datas[7];
        this.winRate = datas[8];
        this.KfArenaCount = datas[9];
        this.isJoinkfArena = datas[10] == 1;
    };
    UnionMemberInfoVo.prototype.copyData = function (tData) {
        for (var key in tData) {
            this[key] = tData[key];
        }
    };
    return UnionMemberInfoVo;
}());
__reflect(UnionMemberInfoVo.prototype, "UnionMemberInfoVo");
var UnionMessageInfoVo = (function (_super) {
    __extends(UnionMessageInfoVo, _super);
    function UnionMessageInfoVo() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.ctType = 0;
        return _this;
    }
    UnionMessageInfoVo.prototype.init = function (datas) {
        this.type = datas[0];
        this.str = datas[1];
        this.str = RambleHlpVo.checkVMsg(this.str, this.type);
        this.setTime(datas[2]);
        var isBreak = datas[3];
        if (!isBreak) {
            this.roleId = datas[4];
            this.name = datas[5];
            this.job = datas[6];
            this.sex = datas[7];
            this.vipLevel = datas[8];
            this.monthCard = datas[9];
            this.office = datas[10];
            this.zsLevel = datas[11];
            this.lv = datas[12];
            this.guildName = datas[13];
        }
        this.analyzeE();
    };
    UnionMessageInfoVo.prototype.analyzeE = function () {
        this.ctType = 0;
        if (this.str.indexOf("|E:") >= 0) {
            var msg = this.str;
            var eIndex = msg.indexOf("|E:");
            msg = msg.slice(eIndex + 3, Number.MAX_VALUE);
            var msgs = void 0;
            if (msg.indexOf(",") >= 0) {
                msgs = msg.split(",");
            }
            else if (msg.indexOf("*") >= 0) {
                msgs = msg.split("*");
            }
            if (!msgs || msgs.length <= 0) {
                return;
            }
            var teamType = +msgs[0];
            this.ctType = teamType;
            if (msgs[1]) {
                this.ctData = msgs[1].split("+");
            }
            else {
                this.ctData = [];
            }
            if (teamType == 4 /* fbHelp */) {
                this.survivalTime = this.time + 1000 * DataCenter.ins().RambleConstConfig.helpTime;
            }
            else if (teamType == 5 /* revengeHelp */) {
                this.survivalTime = this.time + 1000 * DataCenter.ins().RambleConstConfig.helpTime;
            }
            else if (teamType == 6 /* mineHelp */) {
                this.survivalTime = this.time + 1000 * DataCenter.ins().MineConfig.leftTime;
            }
            if (this.survivalTime) {
                this.caleTime();
            }
        }
    };
    UnionMessageInfoVo.prototype.caleTime = function () {
        var time = this.survivalTime - GameServer.serverTime;
        if (time > 0) {
            TimerMgr.ins().once(time, this.timeoutHandle, this);
        }
    };
    UnionMessageInfoVo.prototype.timeoutHandle = function () {
        var index = unionControl.noReadMsgList.indexOf(this);
        if (index > -1) {
            unionControl.noReadMsgList.splice(index, 1);
        }
        unionControl.refTimeOutList(this);
        if (this.ctType == 6 /* mineHelp */) {
            mineControl.removeHelpIdx(+this.ctData[0]);
        }
    };
    Object.defineProperty(UnionMessageInfoVo.prototype, "hasTimeOut", {
        get: function () {
            var isOut = this.survivalTime && this.survivalTime < GameServer.serverTime;
            if (isOut) {
                var i = unionControl.noReadMsgList.indexOf(this);
                if (i > -1) {
                    unionControl.noReadMsgList.splice(i, 1);
                }
            }
            return isOut;
        },
        enumerable: true,
        configurable: true
    });
    return UnionMessageInfoVo;
}(RambleBaseVo));
__reflect(UnionMessageInfoVo.prototype, "UnionMessageInfoVo");
var GuildRoleSkillInfo = (function () {
    function GuildRoleSkillInfo() {
        this.guildSkillInfo = [];
        this.practiceSkillInfo = [];
    }
    return GuildRoleSkillInfo;
}());
__reflect(GuildRoleSkillInfo.prototype, "GuildRoleSkillInfo");
var UnionSkillInfoVo = (function () {
    function UnionSkillInfoVo() {
    }
    return UnionSkillInfoVo;
}());
__reflect(UnionSkillInfoVo.prototype, "UnionSkillInfoVo");
var UnionStoreItemDataVo = (function () {
    function UnionStoreItemDataVo() {
    }
    return UnionStoreItemDataVo;
}());
__reflect(UnionStoreItemDataVo.prototype, "UnionStoreItemDataVo");
/** 公会商店记录 */
var UnionStoreRecordInfoVo = (function () {
    function UnionStoreRecordInfoVo() {
    }
    return UnionStoreRecordInfoVo;
}());
__reflect(UnionStoreRecordInfoVo.prototype, "UnionStoreRecordInfoVo");
var UnionTaskInfoVo = (function () {
    function UnionTaskInfoVo() {
    }
    return UnionTaskInfoVo;
}());
__reflect(UnionTaskInfoVo.prototype, "UnionTaskInfoVo");
var UnionWarModelVo = (function () {
    function UnionWarModelVo() {
        this.guildPoint = 0;
        this.ownPoint = 0;
        this.gongXun = 0;
        /**领取第几天的奖励 */
        this.rewardDay = 1;
        /**
         * 剩余的元宝数
         * 不是帮主为0  没收到数据表示不可以发 也不可以领
         */
        this.remainYB = -1;
        /**自己抢到的元宝数 */
        this.robYbNum = 0;
        this.guildRankList = [];
        this.killName = "";
        this.killGuild = "";
        /**皇宫归属*/
        this.cityOwn = LangMgr.getValueByKey('clanEmptyJob');
        this.myRankList = [];
        /**威胁的列表 */
        this.weixieList = [];
        //可攻击列表
        this.canPlayList = [];
        this.flagStatu = 0; //当前采集的状态
        this.endTime = 0; //时间
        this.flagName = ''; //采集者的名字
        this.flagAcId = 0; //采集者的id
        this.flagGuild = ""; //采集者的公会
        //设置头像点击后的cd
        this.canClick = true;
        //是否可分配奖励
        this._canSendReward = false;
        //奖励分配的列表
        this.rewardIndex = 0;
        this.sendList = [];
        this.sendNumList = [];
        //特殊奖励下发标识
        this.rewardFlag = 0;
        //获胜公会的信息
        this.winGuildInfo = new WinGuildInfo();
        this.rankList = [];
        this._doorEndtime = 0;
        //正在攻击的目标handle
        this.attHandle = 0;
        //组合帮战积分排行	
        this.myGuildPointRank = [];
        this.guildHandleList = [];
        this.guildNum = 0;
    }
    UnionWarModelVo.prototype.creatGuildRankReward = function (rank, index) {
        if (index === void 0) { index = -1; }
        this.rewardList = [];
        var data = DataCenter.ins().UnionBattleDistriAwardConfig[rank];
        for (var i in data) {
            if (data[i].rewardFlag && !(this.rewardFlag == 1 /* hf */)) {
                continue;
            }
            if (Number(i) == (index + 1)) {
                return data[i].awardShow;
            }
            var award = data[i].awardShow;
            for (var k in award) {
                this.checkIsHave(award[k]);
            }
        }
        return this.rewardList;
    };
    UnionWarModelVo.prototype.creatGuildRewardList = function () {
        if (this.configList) {
            return this.configList;
        }
        this.configList = [];
        var data = DataCenter.ins().UnionBattleDistriAwardConfig;
        for (var i in data) {
            if (this.configList.lastIndexOf(data[i][1].rank) == -1) {
                this.configList.push(data[i][1].rank);
            }
        }
        return this.configList;
    };
    UnionWarModelVo.prototype.checkIsHave = function (data) {
        var isFound = false;
        var len = this.rewardList.length;
        for (var i = 0; i < len; i++) {
            var info = this.rewardList[i];
            if (info.id == data.id && info.type == data.type) {
                isFound = true;
                this.rewardList[i].count += data.count;
            }
        }
        if (!isFound) {
            this.rewardList.push(data);
        }
    };
    UnionWarModelVo.prototype.initRedbagInfo = function (datas) {
        this.remainYB = datas[0];
        this.canSend = datas[1];
        this.canRod = datas[2];
        this.sendYbNum = datas[3];
        this.maxRedNum = datas[4];
        this.remainRedNum = datas[5];
        this.rebList = [];
        var info;
        for (var i = 0; i < datas[6].length; i++) {
            info = new GuildRedRobInfo();
            info.init(datas[6][i]);
            if (ActorControl.actorID == info.acId) {
                this.robYbNum = info.robNum;
            }
            this.rebList.push(info);
        }
    };
    //判断是否有红包
    UnionWarModelVo.prototype.isHaveRedBag = function () {
        return this.canSend || this.canRod;
    };
    UnionWarModelVo.prototype.checkinAppoint = function (index, up) {
        if (index === void 0) { index = 0; }
        if (up === void 0) { up = false; }
        if (!unionWarControl.getModel().isWatStart || MapControl.copyId == 0 || unionControl.guildID == 0) {
            return false;
        }
        var data = DataCenter.ins().UnionBattleLvConfig; //28001,28002
        for (var k in data) {
            if (data[k].fbId == MapControl.copyId) {
                if (index == 0) {
                    return true;
                }
                if (up && data[k].id >= index) {
                    return true;
                }
                if (data[k].id == index) {
                    return true;
                }
                return false;
            }
        }
        return false;
    };
    UnionWarModelVo.prototype.initGuildRankInfo = function (datas) {
        this.lastGuildName = datas[0];
        var yuan = datas[1];
        this.guildRankList = [];
        var info;
        for (var i = 0; i < datas[2].length; i++) {
            info = new RankGuildInfo();
            info.init(datas[2][i]);
            this.guildRankList.push(info);
        }
        unionWarControl.dispatchRankInfo();
    };
    UnionWarModelVo.prototype.getNextMapName = function (next) {
        if (next === void 0) { next = 1; }
        var cruId = MapControl.copyId;
        var data = DataCenter.ins().UnionBattleLvConfig;
        var index = 1;
        for (var k in data) {
            if (next == data[k].id) {
                index = next;
            }
        }
        return data[index].name;
    };
    /**进入下个场景需要的功勋 */
    UnionWarModelVo.prototype.getIntoNextMapGongxun = function () {
        var cruId = MapControl.copyId;
        var data = DataCenter.ins().UnionBattleLvConfig;
        var index = 1;
        for (var k in data) {
            if (cruId == data[k].fbId) {
                if (data[k].id < 4) {
                    index = data[k].id + 1;
                }
                else {
                    return 0;
                }
            }
        }
        return data[index].feats;
    };
    /**当前场景的按钮描述*/
    UnionWarModelVo.prototype.getMapLevelInfo = function () {
        var cruId = MapControl.copyId;
        var data = DataCenter.ins().UnionBattleLvConfig;
        var index = 1;
        for (var k in data) {
            if (cruId == data[k].fbId) {
                index = data[k].id;
            }
        }
        return data[index];
    };
    UnionWarModelVo.prototype.initMyGuildRankInfo = function (datas) {
        this.myRankList = [];
        var info;
        for (var i = 0; i < datas.length; i++) {
            info = new MyRankGuildInfo();
            info.init(datas[i]);
            this.myRankList.push(info);
        }
        unionWarControl.dispatchMyRankChange();
    };
    UnionWarModelVo.prototype.changeWeiXieList = function (handel, add, showName) {
        if (add === void 0) { add = true; }
        if (showName === void 0) { showName = ""; }
        if (ActorControl.handle == handel) {
            //过滤自己
            return;
        }
        var index = this.checkListElements(handel, this.weixieList);
        if (add) {
            if (index == -1) {
                this.weixieList.push(handel);
                tipsControl.showTips(LangMgr.getValueByKey('guidAttackSelf', showName));
            }
        }
        else {
            if (index != -1) {
                this.weixieList.splice(index, 1);
            }
        }
        unionWarControl.dispatchWeixieChange(0);
    };
    UnionWarModelVo.prototype.changecanPlayList = function (handel, add) {
        if (add === void 0) { add = true; }
        if (ActorControl.handle == handel) {
            //过滤自己
            return;
        }
        var index = this.checkListElements(handel, this.canPlayList);
        if (add) {
            if (index == -1) {
                this.canPlayList.push(handel);
            }
        }
        else {
            if (index != -1) {
                this.canPlayList.splice(index, 1);
            }
        }
        unionWarControl.dispatchCanplayChange();
    };
    UnionWarModelVo.prototype.decodeGulidWarResult = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        (_a = UIMgr.ins()).open.apply(_a, [UnionWarResultView].concat(param));
        var _a;
    };
    //检查列表是否有重复的数据
    UnionWarModelVo.prototype.checkListElements = function (handle, list) {
        if (list.length <= 0) {
            return -1;
        }
        for (var i = 0; i < list.length; i++) {
            if (list[i] == handle) {
                return i;
            }
        }
        return -1;
    };
    UnionWarModelVo.prototype.getRewardByPoint = function (point) {
        var rewardList = [];
        if (!this.dataList) {
            this.dataList = [];
            var data = DataCenter.ins().UnionBattlePerAwardConfig;
            for (var str in data) {
                this.dataList.push(data[str]);
            }
        }
        var len = this.dataList.length;
        for (var i = 0; i < len; i++) {
            if (point >= this.dataList[i].integral) {
                rewardList = rewardList.concat(this.dataList[i].award);
            }
        }
        return rewardList;
    };
    UnionWarModelVo.prototype.getMyPointReward = function () {
        var data = DataCenter.ins().UnionBattlePerAwardConfig;
        var info;
        for (var str in data) {
            info = data[str];
            if (info.id == this.pointInfo.id) {
                return info;
            }
        }
        return null;
    };
    UnionWarModelVo.prototype.getMaxReward = function () {
        var data = DataCenter.ins().UnionBattlePerAwardConfig;
        var info;
        var maxEgral = 0;
        var maxInfo;
        for (var str in data) {
            info = data[str];
            if (info.integral > maxEgral) {
                maxEgral = info.integral;
                maxInfo = info;
            }
        }
        return maxInfo;
    };
    Object.defineProperty(UnionWarModelVo.prototype, "clickTime", {
        get: function () {
            return this._clickTime;
        },
        set: function (value) {
            this.canClick = false;
            this._clickTime = value;
            TimerMgr.ins().remove(this.endTimeChangeStatu, this);
            TimerMgr.ins().doTimer(1000, this._clickTime, this.endTimeChangeStatu, this);
        },
        enumerable: true,
        configurable: true
    });
    UnionWarModelVo.prototype.endTimeChangeStatu = function () {
        --this._clickTime;
        if (this._clickTime <= 0) {
            this.canClick = true;
            TimerMgr.ins().remove(this.endTimeChangeStatu, this);
        }
    };
    Object.defineProperty(UnionWarModelVo.prototype, "canSendReward", {
        get: function () {
            return unionControl.myOffice == 6 /* UNION_BANGZHU */ && this._canSendReward;
        },
        set: function (b) {
            this._canSendReward = b;
        },
        enumerable: true,
        configurable: true
    });
    UnionWarModelVo.prototype.getCanSendNumByRank = function (index) {
        if (index === void 0) { index = -1; }
        var data = DataCenter.ins().UnionBattleDistriAwardConfig[this.guildWarRank];
        var len = 0;
        for (var i in data) {
            //判定特殊标识
            if (data[i].rewardFlag && !(this.rewardFlag == 1 /* hf */)) {
                continue;
            }
            if (i == (index + 1) + "") {
                return data[i].count;
            }
            ++len;
        }
        return len;
    };
    UnionWarModelVo.prototype.checkISSendAll = function () {
        var len = this.getCanSendNumByRank();
        for (var i = 0; i < len; i++) {
            var num = this.getCanSendNumByRank(i);
            if (!this.sendList[i]) {
                tipsControl.showTips(LangMgr.getValueByKey('guildTips1'));
                return false;
            }
            var count = 0;
            for (var k = 0; k < this.sendNumList[i].length; k++) {
                count += this.sendNumList[i][k];
            }
            if (num > count) {
                tipsControl.showTips(LangMgr.getValueByKey('guildTips1'));
                return false;
            }
            for (var k = 0; k < this.sendList[i].length; k++) {
                if (!unionControl.checkIsInGuild(this.sendList[i][k].roleID)) {
                    tipsControl.showTips(LangMgr.getValueByKey('guildOutGuild', this.sendList[i][k].name));
                    return false;
                }
            }
        }
        return true;
    };
    Object.defineProperty(UnionWarModelVo.prototype, "acEndTime", {
        get: function () {
            return this._acEndTime;
        },
        set: function (value) {
            this._acEndTime = value;
            if (this._acEndTime > 0) {
                TimerMgr.ins().remove(this.reduceTime, this);
                TimerMgr.ins().doTimer(1000, value, this.reduceTime, this);
            }
        },
        enumerable: true,
        configurable: true
    });
    UnionWarModelVo.prototype.reduceTime = function () {
        --this._acEndTime;
        if (this._acEndTime <= 0) {
            TimerMgr.ins().remove(this.reduceTime, this);
        }
    };
    UnionWarModelVo.prototype.setOpenDesc = function () {
        if (this.startTime == 0) {
            return "";
        }
        var date = new Date((this.startTime + 1) * 1000);
        return LangMgr.getValueByKey('guildWeek', date.getMonth() + 1, date.getDate(), LangMgr.getValueByKey("weeksDay" + date.getDay()), DateUtils.formatTimeNum(date.getHours()), DateUtils.formatTimeNum(date.getMinutes()));
    };
    /**
     * 复活或者切场景的cd
     * 1  切换场景的cd
     * 2  复活的cd
     */
    UnionWarModelVo.prototype.getCdByType = function (type) {
        if (MapControl.copyId == 0) {
            return 0;
        }
        var data = DataCenter.ins().UnionBattleLvConfig;
        for (var k in data) {
            if (data[k].fbId == MapControl.copyId) {
                if (type == 1 || type == 3) {
                    return data[k].switchSceneCd;
                }
            }
        }
        return 0;
    };
    UnionWarModelVo.prototype.getIsShowGuildWarBtn = function () {
        if (this.startTime == 0 || DataCenter.ins().UnionBattleConstConfig.openLevel > ActorControl.level) {
            return 0;
        }
        var date = new Date(this.startTime * 1000);
        var date2 = new Date(GameServer.serverTime);
        if ((date.getDate() == date2.getDate() && (date2.getHours() < 20 || (date2.getHours() == 20 && date2.getMinutes() <= 15))) || this.isWatStart) {
            return 1;
        }
        return 0;
    };
    UnionWarModelVo.prototype.rankListChange = function (datas) {
        this.rankList = [];
        var info;
        for (var i = 0; i < datas.length; i++) {
            info = new WarRankInfo();
            info.init(datas[i]);
            this.rankList.push(info);
        }
        unionWarControl.dispatchRankListChange();
    };
    UnionWarModelVo.prototype.initPointRewardInfo = function (datas) {
        if (!this.pointInfo) {
            this.pointInfo = new PointRewarddInfo();
        }
        this.pointInfo.init(datas);
        unionWarControl.dispatchPointRewardChange();
    };
    //组合分配奖励的数据
    UnionWarModelVo.prototype.getSelectDataByIndex = function (index) {
        var dataList = [];
        var info;
        var numInfo;
        if (this.sendList && this.sendList[index] && this.sendList[index].length > 0) {
            info = this.sendList[index];
            numInfo = this.sendNumList[index];
            var data = void 0;
            for (var i = 0; i < info.length; i++) {
                data = new SelectInfoData();
                data.data = info[i];
                data.num = numInfo[i];
                dataList.push(data);
            }
        }
        return dataList;
    };
    UnionWarModelVo.prototype.getMyPointRankReward = function (rank) {
        var data = DataCenter.ins().UnionBattlePerRankAwardConfig;
        for (var str in data) {
            if (data[str].rank == rank) {
                return data[str].award;
            }
        }
        return [];
    };
    //城门死亡的倒计时
    UnionWarModelVo.prototype.doEndDoorTime = function (time) {
        this._doorEndtime = time;
        TimerMgr.ins().remove(this.timeDo, this);
        TimerMgr.ins().doTimer(1000, this._doorEndtime, this.timeDo, this);
    };
    UnionWarModelVo.prototype.timeDo = function () {
        --this._doorEndtime;
        if (this._doorEndtime <= 0) {
            this._doorEndtime = 0;
            TimerMgr.ins().remove(this.timeDo, this);
        }
    };
    Object.defineProperty(UnionWarModelVo.prototype, "doorEndtime", {
        get: function () {
            return this._doorEndtime;
        },
        enumerable: true,
        configurable: true
    });
    UnionWarModelVo.prototype.getMyGuildPointRank = function () {
        var guildList = unionControl.getGuildMembers(0);
        var len = guildList.length;
        var info;
        var pointInfo;
        this.myGuildPointRank = [];
        for (var i = 0; i < len; i++) {
            info = guildList[i];
            pointInfo = new SelectInfoData();
            pointInfo.data = info;
            pointInfo.num = this.getPointByAcId(info.roleID);
            this.myGuildPointRank.push(pointInfo);
        }
        this.myGuildPointRank.sort(this.sort);
        return this.myGuildPointRank;
    };
    UnionWarModelVo.prototype.getPointByAcId = function (acId) {
        var len = this.myRankList.length;
        for (var i = 0; i < len; i++) {
            if (this.myRankList[i].roleID == acId) {
                return this.myRankList[i].point;
            }
        }
        return 0;
    };
    UnionWarModelVo.prototype.sort = function (a, b) {
        var s1 = a.num;
        var s2 = b.num;
        if (s1 > s2)
            return -1;
        else if (s1 < s2)
            return 1;
        else
            return 0;
    };
    UnionWarModelVo.prototype.setMyGuildNum = function (handle, add) {
        if (add === void 0) { add = true; }
        var index = this.checkListElements(handle, this.guildHandleList);
        if (add) {
            if (index == -1) {
                this.guildHandleList.push(handle);
            }
        }
        else {
            if (index > -1) {
                this.guildHandleList.splice(index, 1);
            }
        }
        this.guildNum = this.guildHandleList.length;
        unionWarControl.dispatchGuildNumChange();
    };
    UnionWarModelVo.prototype.clearGuildWarList = function () {
        if (this.checkinAppoint()) {
            this.weixieList = [];
            this.canPlayList = [];
            //切场景 清掉handel
            this.attHandle = 0;
            this.guildHandleList = [];
        }
    };
    return UnionWarModelVo;
}());
__reflect(UnionWarModelVo.prototype, "UnionWarModelVo");
var GuildRedRobInfo = (function () {
    function GuildRedRobInfo() {
    }
    GuildRedRobInfo.prototype.init = function (datas) {
        this.robNum = datas[0];
        this.robName = datas[1];
        this.acId = datas[2];
    };
    return GuildRedRobInfo;
}());
__reflect(GuildRedRobInfo.prototype, "GuildRedRobInfo");
var RankGuildInfo = (function () {
    function RankGuildInfo() {
    }
    RankGuildInfo.prototype.init = function (datas) {
        this.guildName = datas[0];
        this.ownName = datas[1];
        this.guildPoint = datas[2];
    };
    return RankGuildInfo;
}());
__reflect(RankGuildInfo.prototype, "RankGuildInfo");
var MyRankGuildInfo = (function () {
    function MyRankGuildInfo() {
    }
    MyRankGuildInfo.prototype.init = function (datas) {
        this.roleID = datas[0];
        this.myName = datas[1];
        this.mapName = datas[2];
        this.point = datas[3];
        this.attr = datas[4];
        this.office = datas[5];
        this.job = datas[6];
        this.sex = datas[7];
    };
    return MyRankGuildInfo;
}());
__reflect(MyRankGuildInfo.prototype, "MyRankGuildInfo");
/**获胜帮会的信息 */
var WinGuildInfo = (function () {
    function WinGuildInfo() {
        this.guildId = 0;
        this.guildName = "";
        this.guildOwnName = "";
        this.guildOwnId = 0;
        this.guildOwnJob = 0;
        this.guildOwnSex = 0;
        this.clothID = 0;
        this.wapenId = 0;
        this.wingOpen = 0;
        this.winId = 0;
    }
    WinGuildInfo.prototype.init = function (datas) {
        this.guildId = datas[0];
        this.guildName = datas[1];
        this.guildOwnName = datas[2];
        this.guildOwnId = datas[3];
        this.guildOwnJob = datas[4];
        this.guildOwnSex = datas[5];
        this.clothID = datas[6];
        this.wapenId = datas[7];
        this.wingOpen = datas[8];
        this.winId = datas[9];
    };
    return WinGuildInfo;
}());
__reflect(WinGuildInfo.prototype, "WinGuildInfo");
/**获胜帮会的信息 */
var WarRankInfo = (function () {
    function WarRankInfo() {
    }
    WarRankInfo.prototype.init = function (datas) {
        this.name = datas[0];
        this.point = datas[1];
    };
    return WarRankInfo;
}());
__reflect(WarRankInfo.prototype, "WarRankInfo");
/**积分奖励领取信息 */
var PointRewarddInfo = (function () {
    function PointRewarddInfo() {
    }
    PointRewarddInfo.prototype.init = function (datas) {
        this.isCan = datas[0];
        this.id = datas[1];
        this.point = datas[2];
    };
    return PointRewarddInfo;
}());
__reflect(PointRewarddInfo.prototype, "PointRewarddInfo");
var SelectInfoData = (function () {
    function SelectInfoData() {
    }
    return SelectInfoData;
}());
__reflect(SelectInfoData.prototype, "SelectInfoData");
/**
 * 玩家申请列表
 */
var UnionApplyListView = (function (_super) {
    __extends(UnionApplyListView, _super);
    function UnionApplyListView() {
        var _this = _super.call(this) || this;
        _this.skinName = "UnionApplyListViewSkin";
        _this.list.itemRenderer = UnionAppltListItemRender;
        _this.isTopLevel = true;
        return _this;
    }
    UnionApplyListView.prototype.initUI = function () {
        _super.prototype.initUI.call(this);
        this.attrNum.restrict = "0-9";
        this.attrNum.maxChars = 8;
    };
    UnionApplyListView.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.addEventTouchTap(this.bgClose, this.onTap);
        this.addEventTouchTap(this.list, this.onListTouch);
        if (this.fgClose)
            this.addEventTouchEnd(this.fgClose, this.onTap);
        this.addCustomEvent(19 /* UNION_APPLY_INFOS */, this.updateList);
        unionControl.upApplyInfos();
        this.addEventTouchTap(this.checkBoxs, this.onTap);
        this.addEventChange(this.attrNum, this.onTxtChange);
        this.checkBoxs.selected = unionControl.isAuto == 1;
        this.attrNum.text = unionControl.attrLimit + "";
    };
    UnionApplyListView.prototype.close = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.removeEventTouchTap(this.bgClose, this.onTap);
        this.removeEventTouchTap(this.list, this.onListTouch);
        this.removeEventTouchTap(this.checkBoxs, this.onTap);
        this.removeEventChange(this.attrNum, this.onTxtChange);
        this.removeCustomEvents();
    };
    UnionApplyListView.prototype.onTxtChange = function (e) {
        unionControl.upAddGuildLimit(this.checkBoxs.selected ? 1 : 0, parseInt(this.attrNum.text));
    };
    UnionApplyListView.prototype.updateList = function (listData) {
        listData.sort(this.sort);
        this.list.dataProvider = new eui.ArrayCollection(listData);
    };
    UnionApplyListView.prototype.onListTouch = function (e) {
        if (e.target instanceof eui.Button) {
            var item = e.target.parent;
            item.onTap(e.target);
        }
    };
    UnionApplyListView.prototype.onTap = function (e) {
        switch (e.currentTarget) {
            case this.fgClose:
            case this.bgClose:
                UIMgr.ins().close(this);
                break;
            case this.checkBoxs:
                this.onTxtChange(null);
                break;
        }
    };
    UnionApplyListView.prototype.sort = function (a, b) {
        if (a.attack > b.attack)
            return -1;
        else if (a.attack < b.attack)
            return 1;
        else
            return 0;
    };
    return UnionApplyListView;
}(BaseEuiView));
__reflect(UnionApplyListView.prototype, "UnionApplyListView");
/**
 * 公会列表
 */
var UnionApplyView = (function (_super) {
    __extends(UnionApplyView, _super);
    function UnionApplyView() {
        var _this = _super.call(this) || this;
        _this.isTopLevel = true;
        _this.uilayer = GameLayer.POPUP;
        _this.dataArr = new eui.ArrayCollection([]);
        _this.skinName = "UnionApplyViewSkin";
        _this.list.itemRenderer = UnionListItemRender;
        _this.list.dataProvider = _this.dataArr;
        return _this;
    }
    UnionApplyView.openCheck = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        return true;
    };
    UnionApplyView.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.addEventTouchTap(this.createBtn, this.onTap);
        if (this.fgClose)
            this.addEventTouchTap(this.fgClose, this.onTap);
        this.addEventTouchTap(this.bgClose, this.onTap);
        this.addEventTouchTap(this.list, this.onListTouch);
        this.addCustomEvent(16 /* UNION_LIST */, this.updateList);
        unionControl.upGuildList();
    };
    UnionApplyView.prototype.onListTouch = function (e) {
        if (e.target instanceof eui.Button) {
            var item = e.target.parent;
            item.onTap();
        }
    };
    UnionApplyView.prototype.updateList = function () {
        this.noGuild.visible = unionControl.guildListInfos.length == 0;
        this.dataArr.replaceAll(unionControl.guildListInfos);
    };
    UnionApplyView.prototype.onTap = function (e) {
        switch (e.currentTarget) {
            case this.fgClose:
            case this.bgClose:
                UIMgr.ins().close(this);
                break;
            case this.createBtn:
                UIMgr.ins().open(UnionCreateView);
                break;
        }
    };
    UnionApplyView.prototype.destoryView = function () {
        _super.prototype.destoryView.call(this);
        for (var i = 0; i < this.list.numElements; i++) {
            if (this.list.getElementAt(i))
                this.list.getElementAt(i).destruct();
        }
    };
    return UnionApplyView;
}(BaseEuiView));
__reflect(UnionApplyView.prototype, "UnionApplyView");
var UnionCampFirePanel = (function (_super) {
    __extends(UnionCampFirePanel, _super);
    function UnionCampFirePanel() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.itemCount = 0;
        _this.delayTime = 0;
        return _this;
    }
    UnionCampFirePanel.prototype.open = function () {
        this.addEvent(egret.TouchEvent.TOUCH_BEGIN, this.give, this.onGiveBegin);
        this.addEvent(egret.TouchEvent.TOUCH_END, this.give, this.onGiveEnd);
        this.addCustomEvent(31 /* UNION_FIRE_UPDATE */, this.update);
        this.update();
    };
    UnionCampFirePanel.prototype.close = function () {
        this.removeEvent(egret.TouchEvent.TOUCH_BEGIN, this.give, this.onGiveBegin);
        this.removeEvent(egret.TouchEvent.TOUCH_END, this.give, this.onGiveEnd);
        this.removeCustomEvents();
        TimerMgr.ins().removeAll(this);
    };
    UnionCampFirePanel.prototype.update = function () {
        var fireDic = unionControl.fireDic;
        if (fireDic.fireLvl > 0) {
            this.firestar.visible = true;
        }
        else {
            this.firestar.visible = false;
        }
        var lv = 0;
        while (true) {
            if (this['lv' + lv]) {
                this['lv' + lv].visible = fireDic.fireLvl >= lv;
                if (this['fire' + lv])
                    this['fire' + lv].visible = fireDic.fireLvl == lv;
            }
            else {
                break;
            }
            lv += 1;
        }
        var config = DataCenter.ins().UnionBonFireConfig[fireDic.fireLvl];
        var nextConf = DataCenter.ins().UnionBonFireConfig[fireDic.fireLvl + 1];
        if (config) {
            this.progressBar.maximum = config.value;
            this.progressBar.value = fireDic.fireVal;
        }
        else {
            this.progressBar.maximum = 100;
            this.progressBar.value = 100;
        }
        var conf = DataCenter.ins().UnionConfig;
        var item = backpackControl.getBagItemById(conf.bonfireItem);
        if (item) {
            this.count.text = "" + item.count;
            this.cha.textColor = this.count.textColor = ColorUtils.GREEN;
            this.itemCount = item.count;
            this.redPoint.visible = true;
        }
        else {
            this.count.text = "0";
            this.cha.textColor = this.count.textColor = LangMgr.getColor('color22');
            this.itemCount = 0;
            this.redPoint.visible = false;
        }
        if (nextConf) {
            this.desc1.textFlow = TextUtils.generateTextFlow1(LangMgr.getValueByKey('guildTips38', conf.bonfireValue, conf.bonfireReward[0].count));
            this.desc2.textFlow = TextUtils.generateTextFlow1(LangMgr.getValueByKey('guildTips39', (config.value - fireDic.fireVal) / conf.bonfireValue, nextConf.reward));
        }
        else {
            this.desc1.textFlow = TextUtils.generateTextFlow1(LangMgr.getValueByKey('guildTips38', conf.bonfireValue, conf.bonfireReward[0].count));
            this.desc2.textFlow = TextUtils.generateTextFlow1(LangMgr.getValueByKey('guildTips40', config.reward));
        }
    };
    UnionCampFirePanel.prototype.onGiveBegin = function () {
        var _this = this;
        if (this.itemCount > 0) {
            this.delayTime = 1;
            TimerMgr.ins().doTimer(300, 1, function () {
                if (_this.delayTime == 1) {
                    _this.delayTime = 0;
                    TimerMgr.ins().doTimer(100, 0, function () {
                        _this.stratAddFire();
                    }, _this);
                }
            }, this);
        }
    };
    UnionCampFirePanel.prototype.onGiveEnd = function () {
        if (this.delayTime == 1) {
            this.stratAddFire();
        }
        this.delayTime = 0;
        TimerMgr.ins().removeAll(this);
    };
    UnionCampFirePanel.prototype.stratAddFire = function () {
        if (this.itemCount > 0) {
            var count = DataCenter.ins().UnionConfig.bonfirecount;
            if (this.itemCount < count)
                count = this.itemCount;
            this.itemCount -= count;
            unionControl.upToFire(count, this.itemCount);
        }
        else {
            tipsControl.showTips(LangMgr.getValueByKey('zhuzaiPropEnought'));
            TimerMgr.ins().removeAll(this);
        }
    };
    return UnionCampFirePanel;
}(BasePanel));
__reflect(UnionCampFirePanel.prototype, "UnionCampFirePanel");
var UnionChangeNameView = (function (_super) {
    __extends(UnionChangeNameView, _super);
    function UnionChangeNameView() {
        var _this = _super.call(this) || this;
        _this.skinName = "UnionChangeNameViewSkin";
        _this.uilayer = GameLayer.POPUP;
        return _this;
    }
    UnionChangeNameView.prototype.open = function () {
        this.addEventTouchTap(this.sureBtn, this.onTap);
        this.addEventTouchTap(this.closeBtn, this.onTap);
        this.addEventTouchTap(this.bgClose, this.onTap);
    };
    UnionChangeNameView.prototype.onTap = function (e) {
        var tar = e.currentTarget;
        switch (tar) {
            case this.bgClose:
            case this.closeBtn:
                UIMgr.ins().close(this);
                break;
            case this.sureBtn:
                this.onChangeName();
                break;
        }
    };
    UnionChangeNameView.prototype.onChangeName = function () {
        if (this.input.text == "")
            tipsControl.showTips(LangMgr.getValueByKey('guildInputName'));
        else {
            unionControl.upGuildChangeName(this.input.text);
            UIMgr.ins().close(this);
        }
    };
    return UnionChangeNameView;
}(BaseEuiView));
__reflect(UnionChangeNameView.prototype, "UnionChangeNameView");
var UnionConView = (function (_super) {
    __extends(UnionConView, _super);
    function UnionConView() {
        var _this = _super.call(this) || this;
        _this.uilayer = GameLayer.POPUP;
        return _this;
    }
    UnionConView.prototype.initUI = function () {
        _super.prototype.initUI.call(this);
        this.skinName = "UnionConViewSkin";
        this.desc0.text = LangMgr.getValueByKey('guildTips28', DataCenter.ins().UnionDonateConfig[1].count);
        this.desc1.text = LangMgr.getValueByKey('guildTips29', DataCenter.ins().UnionDonateConfig[2].count);
        this.info0.text = LangMgr.getValueByKey('guildTips30', DataCenter.ins().UnionDonateConfig[1].awardContri, DataCenter.ins().UnionDonateConfig[1].awardFund);
        this.info1.text = LangMgr.getValueByKey('guildTips30', DataCenter.ins().UnionDonateConfig[2].awardContri, DataCenter.ins().UnionDonateConfig[2].awardFund);
    };
    UnionConView.openCheck = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        return true;
    };
    UnionConView.prototype.update = function () {
        var num = DataCenter.ins().UnionDonateConfig[1].dayCount[vipControl.lv];
        var nextNum = DataCenter.ins().UnionDonateConfig[1].dayCount[vipControl.lv + 1];
        var arr = unionControl.getConCount();
        if (arr[0] <= 0) {
            if (nextNum && (nextNum - num > 0))
                this.count0.textFlow = new egret.HtmlTextParser().parser(LangMgr.getValueByKey('guildTips31', vipControl.getVipStr(vipControl.lv + 1), nextNum - num));
            else
                this.count0.text = (num - arr[0]) + "/" + DataCenter.ins().UnionDonateConfig[1].dayCount[vipControl.lv];
            this.btn0.enabled = false;
        }
        else {
            this.btn0.enabled = true;
            this.count0.text = (num - arr[0]) + "/" + DataCenter.ins().UnionDonateConfig[1].dayCount[vipControl.lv];
        }
        this.btn1.enabled = arr[1] > 0;
        this.count1.text = (DataCenter.ins().UnionDonateConfig[2].dayCount - arr[1]) + "/" + DataCenter.ins().UnionDonateConfig[2].dayCount;
    };
    UnionConView.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.addEventTouchTap(this.btn0, this.onTap);
        this.addEventTouchTap(this.btn1, this.onTap);
        this.addEventTouchTap(this.bgClose, this.onTap);
        this.addCustomEvent(27 /* UNION_CONTRIBUTE_COUNT */, this.update);
        unionControl.upConCount();
        if (vipControl.lv == 0)
            this.btn0.label = LangMgr.getValueByKey('guildBecomVip');
        else
            this.btn0.label = LangMgr.getValueByKey('guildGX');
    };
    UnionConView.prototype.close = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.removeEventTouchTap(this.btn0, this.onTap);
        this.removeEventTouchTap(this.btn1, this.onTap);
        this.removeEventTouchTap(this.bgClose, this.onTap);
        this.removeCustomEvents();
    };
    UnionConView.prototype.onTap = function (e) {
        var arr = unionControl.getConCount();
        switch (e.currentTarget) {
            case this.btn0:
                if (vipControl.lv == 0) {
                    UIMgr.ins().open("VipView");
                }
                else if (arr[0] <= 0) {
                    tipsControl.showTips(LangMgr.getValueByKey('guildTimeEnought'));
                }
                else if (ActorControl.yb >= DataCenter.ins().UnionDonateConfig[1].count) {
                    unionControl.upCon(1);
                }
                else {
                    tipsControl.showTips(LangMgr.getValueByKey('osaNoMoney'));
                    UIMgr.ins().close(this);
                }
                break;
            case this.btn1:
                if (arr[1] <= 0) {
                    tipsControl.showTips(LangMgr.getValueByKey('guildTimeEnought'));
                }
                else if (ActorControl.gold >= DataCenter.ins().UnionDonateConfig[2].count) {
                    unionControl.upCon(2);
                }
                else {
                    tipsControl.showTips(LangMgr.getValueByKey('bossMoneyEnought'));
                }
                break;
            case this.bgClose:
                UIMgr.ins().close(this);
                break;
        }
    };
    return UnionConView;
}(BaseEuiView));
__reflect(UnionConView.prototype, "UnionConView");
var UnionCreateView = (function (_super) {
    __extends(UnionCreateView, _super);
    function UnionCreateView() {
        var _this = _super.call(this) || this;
        _this.selectLevel = 1;
        _this.uilayer = GameLayer.POPUP;
        return _this;
    }
    UnionCreateView.prototype.initUI = function () {
        _super.prototype.initUI.call(this);
        this.skinName = "UnionCreateViewSkin";
        this.leftLab.textFlow = (new egret.HtmlTextParser()).parser(this.formatLab(1));
        this.rightLab.textFlow = (new egret.HtmlTextParser()).parser(this.formatLab(2));
    };
    UnionCreateView.prototype.changeSelect = function (id) {
        this.selectLevel = id;
        this.selectBmp.x = this.selectLevel == 1 ? this.bg1.x : this.bg2.x;
    };
    UnionCreateView.prototype.formatLab = function (level) {
        var gcc = DataCenter.ins().UnionCreateConfig;
        var gc = DataCenter.ins().UnionConfig;
        var vipLv = gcc[level].vipLv;
        var conditionDesc = vipLv > 0 ? LangMgr.getValueByKey('guildTips32', vipControl.getVipStr(vipLv)) : "";
        var recharge = gcc[level].recharge;
        if (recharge > 0) {
            conditionDesc = LangMgr.getValueByKey('guildTips32', LangMgr.getValueByKey('numberRecharge', recharge));
        }
        var tempAward = gcc[level].award == 0 ? "\n" : LangMgr.getValueByKey('guildTips33', gcc[level].award.toString());
        var content = LangMgr.getValueByKey('guildTips34', gcc[level].level.toString())
            + "\n" + conditionDesc
            + LangMgr.getValueByKey('guildTips35', gc.maxMember[level - 1])
            + tempAward
            + LangMgr.getValueByKey('guildTips36', gcc[level].moneyCount.toString());
        var str = "<font color=" + LangMgr.getValueByKey('color103') + " size='16'>" + content + "</font>";
        return str;
    };
    UnionCreateView.openCheck = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        return true;
    };
    UnionCreateView.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.addEventTouchTap(this.leftLab, this.onTap);
        this.addEventTouchTap(this.rightLab, this.onTap);
        this.addEventTouchTap(this.okBtn, this.onTap);
        this.addEventTouchTap(this.bgClose, this.onTap);
    };
    UnionCreateView.prototype.onTap = function (e) {
        var _this = this;
        switch (e.currentTarget) {
            case this.bgClose:
                UIMgr.ins().close(this);
                break;
            case this.okBtn: {
                var gcc = DataCenter.ins().UnionCreateConfig;
                var dp = gcc[this.selectLevel];
                var recharge = gcc[dp.level].recharge;
                if (vipControl.exp < recharge) {
                    tipsControl.showTips(LangMgr.getValueByKey('userNoCZ'));
                    return;
                }
                var vipLv = gcc[dp.level].vipLv;
                if (vipControl.lv < vipLv) {
                    tipsControl.showTips(LangMgr.getValueByKey('doubleVip'));
                    return;
                }
                if (this.textInput.text == "")
                    tipsControl.showTips(LangMgr.getValueByKey('guildInputName'));
                else if (ActorControl.yb < dp.moneyCount) {
                    tipsControl.showTips(LangMgr.getValueByKey('osaNoMoney'));
                    UIMgr.ins().close(this);
                }
                else {
                    warnControl.show(LangMgr.getValueByKey('guildTips37', dp.moneyCount, dp.level, this.textInput.text), function () {
                        unionControl.upGuildCreate(_this.selectLevel, _this.textInput.text);
                    }, this);
                }
                break;
            }
            case this.leftLab:
                this.changeSelect(1);
                break;
            case this.rightLab:
                this.changeSelect(2);
                break;
        }
    };
    return UnionCreateView;
}(BaseEuiView));
__reflect(UnionCreateView.prototype, "UnionCreateView");
var UnionInfoPanel = (function (_super) {
    __extends(UnionInfoPanel, _super);
    function UnionInfoPanel() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.isInit = false;
        _this.userGuild = UnionControl.ins();
        return _this;
    }
    UnionInfoPanel.prototype.childrenCreated = function () {
        this.init();
    };
    UnionInfoPanel.prototype.init = function () {
        this.initUI();
    };
    UnionInfoPanel.prototype.initUI = function () {
        this.checkJoin.textFlow = (new egret.HtmlTextParser).parser("<a href=\"event:\"><u>" + this.checkJoin.text + "</u></a>");
        this.checkJoin.touchEnabled = true;
        this.list.itemRenderer = UnionMemberItem1Render;
        this.eff = new GameMovieClip();
        this.eff.x = this.checkJoin.x + 40;
        this.eff.y = this.checkJoin.y + 10;
        this.isInit = true;
    };
    UnionInfoPanel.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        if (!this.isInit)
            this.initUI();
        this.addEventTouchTap(this.checkJoin, this.onLinkApply);
        this.addEventTouchTap(this.cityBtn, this.onTap);
        this.addEventTouchTap(this.conBtn, this.onTap);
        this.addEventTouchTap(this.rename, this.onTap);
        this.addCustomEvent(14 /* UNION_INFO */, this.updateGuild);
        this.addCustomEvent(28 /* MY_UNION_INFO */, this.updateMyInfo);
        this.addCustomEvent(22 /* UNION_CHANGE_NOTICE */, this.updateGuild);
        this.addCustomEvent(21 /* UNION_MONEY */, this.updateGuild);
        this.addCustomEvent(19 /* UNION_APPLY_INFOS */, this.updateApplys);
        this.addCustomEvent(18 /* UNION_JOIN */, this.updateApplys);
        this.addCustomEvent(15 /* UNION_MEMBERS */, this.updateMember);
        this.updateApplys();
        this.updateMyInfo();
        this.updateGuild();
        this.updateMember();
    };
    UnionInfoPanel.prototype.onTap = function (e) {
        switch (e.currentTarget) {
            case this.conBtn:
                UIMgr.ins().open(UnionConView);
                break;
            case this.cityBtn:
                UIMgr.ins().open(UnionNoticeView);
                break;
            case this.rename:
                UIMgr.ins().open(UnionChangeNameView);
                break;
        }
    };
    UnionInfoPanel.prototype.updateMyInfo = function () {
        this.myCon.text = this.userGuild.myCon + "";
        this.checkJoin.visible = this.userGuild.myOffice >= 5 /* UNION_FUBANGZHU */;
        this.cityBtn.visible = this.userGuild.myOffice >= 5 /* UNION_FUBANGZHU */;
    };
    UnionInfoPanel.prototype.updateGuild = function () {
        this.guildName.text = this.userGuild.guildName;
        this.guildLevel.text = this.userGuild.guildLv.toString();
        this.guildMoney.text = this.userGuild.money.toString();
        this.notice.text = this.userGuild.notice;
        //改名
        this.rename.visible = unionControl.changeNameNum && this.userGuild.myOffice >= 6 /* UNION_BANGZHU */;
        if (this.userGuild) {
            this.auditText.text = "";
            this.auditText.textFlow = TextUtils.generateTextFlow(LangMgr.getValueByKey("noticeCheck" + this.userGuild.noticeAudit));
        }
    };
    UnionInfoPanel.prototype.updateMember = function () {
        var commentLv = unionControl.getBuildingLevels(4 /* UNION_COMMENT */ - 1) || 0;
        var exmember = commentLv ? DataCenter.ins().UnionConfig.affairMember[commentLv - 1] : 0;
        this.guildMember.text = this.userGuild.getMemberNum() + "/" + (DataCenter.ins().UnionConfig.maxMember[unionControl.guildLv - 1] + exmember);
        this.list.dataProvider = new eui.ArrayCollection(this.userGuild.getGuildMembers(1));
    };
    UnionInfoPanel.prototype.onLinkApply = function () {
        UIMgr.ins().open(UnionApplyListView);
    };
    UnionInfoPanel.prototype.updateApplys = function () {
        if (this.userGuild.hasApplys()) {
            this.checkJoin.parent.addChildAt(this.eff, this.getChildIndex(this.checkJoin));
            this.eff.playFile(PATH_EFF + "chargeff1", -1);
            this.eff.scaleX = 0.7;
            this.eff.scaleY = 0.7;
        }
        else {
            DisplayUtils.removeFromParent(this.eff);
        }
    };
    return UnionInfoPanel;
}(BasePanel));
__reflect(UnionInfoPanel.prototype, "UnionInfoPanel");
var UnionListPanel = (function (_super) {
    __extends(UnionListPanel, _super);
    function UnionListPanel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UnionListPanel.prototype.childrenCreated = function () {
        this.init();
    };
    UnionListPanel.prototype.init = function () {
        this.list.itemRenderer = UnionListItem2Render;
    };
    UnionListPanel.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.addCustomEvent(16 /* UNION_LIST */, this.updateList);
        this.updateList();
        this.pageChange(0);
    };
    UnionListPanel.prototype.pageChange = function (page) {
        if (this.curPage != page && page >= 0 && page < unionControl.pageMax) {
            this.curPage = page;
            unionControl.upGuildList(this.curPage, 6);
        }
    };
    UnionListPanel.prototype.updateList = function () {
        this.list.dataProvider = new eui.ArrayCollection(unionControl.guildListInfos);
    };
    return UnionListPanel;
}(BasePanel));
__reflect(UnionListPanel.prototype, "UnionListPanel");
var UnionManageBuildPanel = (function (_super) {
    __extends(UnionManageBuildPanel, _super);
    function UnionManageBuildPanel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UnionManageBuildPanel.prototype.childrenCreated = function () {
        this.init();
    };
    UnionManageBuildPanel.prototype.init = function () {
        this.buildList.itemRenderer = UnionBuildItemRender;
        this.messageList.itemRenderer = UnionEventItenRender;
    };
    UnionManageBuildPanel.openCheck = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        var rtn = (unionControl.guildID != 0);
        if (!rtn) {
            tipsControl.showTips(LangMgr.getValueByKey('guildDes4'));
        }
        return rtn;
    };
    UnionManageBuildPanel.prototype.open = function () {
        this.addEventTouchTap(this.buildList, this.onListTouch);
        this.addCustomEvent(24 /* UNION_UP_BUILDING */, this.updateList);
        this.addCustomEvent(26 /* UNION_MANAGE_LIST */, this.update);
        this.addCustomEvent(21 /* UNION_MONEY */, this.update);
        unionControl.upManageList();
        this.updateList();
    };
    UnionManageBuildPanel.prototype.close = function () {
        this.removeEventTouchTap(this.buildList, this.onListTouch);
        this.removeCustomEvents();
    };
    UnionManageBuildPanel.prototype.update = function () {
        this.messageList.dataProvider = new eui.ArrayCollection(unionControl.records);
    };
    UnionManageBuildPanel.prototype.updateList = function () {
        this.index = this.buildScroller.viewport.scrollV;
        this.buildList.dataProvider = new eui.ArrayCollection([1 /* UNION_HALL */, 2 /* UNION_LIANGONGFANG */, 4 /* UNION_COMMENT */, 3 /* UNION_SHOP */]);
        this.refushBar();
    };
    UnionManageBuildPanel.prototype.refushBar = function () {
        TimerMgr.ins().remove(this.refushBarList, this);
        TimerMgr.ins().doTimer(100, 1, this.refushBarList, this);
    };
    UnionManageBuildPanel.prototype.refushBarList = function () {
        TimerMgr.ins().remove(this.refushBarList, this);
        this.buildScroller.viewport.scrollV = this.index;
    };
    UnionManageBuildPanel.prototype.onListTouch = function (e) {
        if (e.target instanceof eui.Button) {
            var item = e.target.parent;
            item.onTap(e.target);
        }
    };
    return UnionManageBuildPanel;
}(BasePanel));
__reflect(UnionManageBuildPanel.prototype, "UnionManageBuildPanel");
var UnionMapView = (function (_super) {
    __extends(UnionMapView, _super);
    function UnionMapView() {
        var _this = _super.call(this) || this;
        _this.uilayer = GameLayer.POPUP;
        return _this;
    }
    UnionMapView.prototype.initUI = function () {
        _super.prototype.initUI.call(this);
        this.isTopLevel = true;
        this.skinName = "UnionMapViewSkin";
        this.list.itemRenderer = UnionMapMemberItemRender;
        this.guildWarEffect2 = new GameMovieClip;
        this.guildRewardEff = new GameMovieClip;
    };
    UnionMapView.openCheck = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        return true;
    };
    UnionMapView.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.addEventTouchTap(this.closeBtn, this.onTap);
        this.addEventTouchTap(this.manageBtn, this.onTap);
        this.addEventTouchTap(this.practiseBtn, this.onTap);
        this.addEventTouchTap(this.shopBtn, this.onTap);
        this.addEventTouchTap(this.cityBtn, this.onTap);
        this.addEventTouchTap(this.chatBtn, this.onTap);
        this.addEventTouchTap(this.rewardTouch, this.onTap);
        this.addCustomEvent(667 /* UNION_FIRE_RED */, this.updateRedpoint);
        this.addCustomEvent(433 /* UNION_BOSS_DETAIL_CHANGE */, this.updateRedpoint);
        unionControl.upMyGuildInfo();
        unionWarControl.upGuildRank();
        unionBossControl.upGetBossInfo();
        this.updateRedpoint();
        this.addCustomEvent(419 /* UNION_WAR_START_INFO */, this.refushGuildwarEffect);
        this.refushGuildwarEffect();
        this.addCustomEvent(672 /* UNION_SEND_REWARD_RED */, this.updateSendBtnStatu);
        this.updateSendBtnStatu();
        this.addCustomEvent(671 /* UNION_SCZB_RED */, this.updateGuildPoint);
        this.updateGuildPoint();
        this.addCustomEvent(668 /* UNION_HHDT_RED */, this.hhdtRed);
        this.hhdtRed();
        this.addCustomEvent(675 /* UNION_BOSS_RED */, this.updateBossPoint);
        this.updateBossPoint();
        this.addCustomEvent(15 /* UNION_MEMBERS */, this.updateList);
        this.updateList();
    };
    UnionMapView.prototype.close = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        DisplayUtils.removeFromParent(this.guildWarEffect2);
        DisplayUtils.removeFromParent(this.guildRewardEff);
    };
    UnionMapView.prototype.hhdtRed = function () {
        this.redPoint0.visible = UnionRedPoint.ins().hhdt;
    };
    UnionMapView.prototype.updateRedpoint = function () {
        this.redPoint1.visible = UnionRedPoint.ins().guildFire || UnionRedPoint.ins().liangongRed;
    };
    UnionMapView.prototype.updateGuildPoint = function () {
        this.redPoint2.visible = UnionRedPoint.ins().sczb;
    };
    UnionMapView.prototype.updateBossPoint = function () {
        this.redPoint3.visible = UnionRedPoint.ins().hhBoss;
    };
    UnionMapView.prototype.updateList = function () {
        this.list.dataProvider = new eui.ArrayCollection(unionControl.getGuildMembers(2));
    };
    UnionMapView.prototype.onTap = function (e) {
        switch (e.currentTarget) {
            case this.closeBtn:
                UIMgr.ins().close(UnionMapView);
                break;
            case this.practiseBtn:
                UIMgr.ins().close(UnionMapView);
                UIMgr.ins().open(UnionSkillView);
                break;
            case this.manageBtn:
                UIMgr.ins().close(UnionMapView);
                UIMgr.ins().open(UnionView);
                break;
            case this.cityBtn:
                unionWarControl.upWinGuildInfo();
                UIMgr.ins().close(UnionMapView);
                UIMgr.ins().open(UnionWarMainView);
                break;
            case this.shopBtn:
                UIMgr.ins().open(UnionBossView);
                break;
            case this.chatBtn:
                UIMgr.ins().open(RambleView);
                break;
            case this.rewardTouch:
                //帮派战奖励分配
                UIMgr.ins().open(SelectMemberRewardView);
                break;
        }
    };
    UnionMapView.prototype.updateSendBtnStatu = function () {
        this.rewardTouch.visible = this.reward.visible = UnionRedPoint.ins().sendReward;
        if (UnionRedPoint.ins().sendReward) {
            this.guildRewardEff.playFile(PATH_EFF + "giftShake", -1);
            this.guildRewardEff.x = 30;
            this.guildRewardEff.y = 30;
            this.reward.addChild(this.guildRewardEff);
        }
        else {
            DisplayUtils.removeFromParent(this.guildRewardEff);
        }
    };
    UnionMapView.prototype.refushGuildwarEffect = function () {
        if (unionWarControl.getModel().isWatStart) {
            this.guildWarEffect2.playFile(PATH_EFF + "swordSparkEff", -1);
            this.guildWarEffect2.x = 28;
            this.guildWarEffect2.y = 30;
            this.cityBtn.addChild(this.guildWarEffect2);
        }
        else {
            DisplayUtils.removeFromParent(this.guildWarEffect2);
        }
    };
    return UnionMapView;
}(BaseEuiView));
__reflect(UnionMapView.prototype, "UnionMapView");
var UnionMemberPanel = (function (_super) {
    __extends(UnionMemberPanel, _super);
    function UnionMemberPanel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UnionMemberPanel.prototype.childrenCreated = function () {
        this.init();
    };
    UnionMemberPanel.prototype.init = function () {
        this.list.itemRenderer = UnionMemberItem2Render;
        this.dataArr = new eui.ArrayCollection;
        this.list.dataProvider = this.dataArr;
    };
    UnionMemberPanel.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.addEventTouchTap(this.quitBtn, this.onTap);
        this.addEventTouchTap(this.list, this.onListTouch);
        this.addCustomEvent(28 /* MY_UNION_INFO */, this.updateMyInfo);
        this.addCustomEvent(15 /* UNION_MEMBERS */, this.updateMember);
        this.updateMyInfo();
        this.updateMember();
    };
    UnionMemberPanel.prototype.close = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.removeEventTouchTap(this.quitBtn, this.onTap);
        this.removeEventTouchTap(this.list, this.onListTouch);
        this.removeCustomEvents();
    };
    UnionMemberPanel.prototype.onListTouch = function (e) {
        if (e.target instanceof eui.Button) {
            var item = e.target.parent.parent;
            item.onTap(e.target);
        }
    };
    UnionMemberPanel.prototype.updateMember = function () {
        var listData = unionControl.getGuildMembers(1);
        this.dataArr.replaceAll(listData);
    };
    UnionMemberPanel.prototype.onTap = function (e) {
        switch (e.currentTarget) {
            case this.quitBtn:
                //工会战期间  不允许退出公会
                if (unionWarControl.getModel().isWatStart) {
                    warnControl.show(LangMgr.getValueByKey('guildDes1'), function () { }, this);
                    return;
                }
                if (unionControl.myOffice == 6 /* UNION_BANGZHU */) {
                    if (unionControl.getMemberNum() > 1) {
                        warnControl.show(LangMgr.getValueByKey('guildDes2'), function () { }, this);
                        return;
                    }
                }
                warnControl.show(LangMgr.getValueByKey('guildDes3'), function () {
                    unionControl.upQuitGuild();
                }, this, null, null, "normal", "center");
                break;
        }
    };
    UnionMemberPanel.prototype.updateMyInfo = function () {
        this.office.text = LangMgr.getValueByKey("officeName" + unionControl.myOffice);
        this.totalCon.text = unionControl.myTotalCon + "";
        if (this.mtips)
            this.mtips.text = LangMgr.getValueByKey('impeachTime', (DataCenter.ins().UnionConfig.impeachTime / 24 / 3600) >> 0);
    };
    return UnionMemberPanel;
}(BasePanel));
__reflect(UnionMemberPanel.prototype, "UnionMemberPanel");
var UnionNoticeView = (function (_super) {
    __extends(UnionNoticeView, _super);
    function UnionNoticeView() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UnionNoticeView.prototype.initUI = function () {
        _super.prototype.initUI.call(this);
        this.skinName = "UnionNoticeViewSkin";
    };
    UnionNoticeView.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.addEventTouchTap(this.closeBtn0, this.onTap);
        this.addEventTouchTap(this.closeBtn1, this.onTap);
        this.addEventTouchTap(this.saveBtn, this.onTap);
        this.addEventTouchTap(this.bgrect, this.onTap);
        this.textInput.text = unionControl.notice;
    };
    UnionNoticeView.prototype.close = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.removeEventTouchTap(this.closeBtn0, this.onTap);
        this.removeEventTouchTap(this.closeBtn1, this.onTap);
        this.removeEventTouchTap(this.saveBtn, this.onTap);
        this.removeEventTouchTap(this.bgrect, this.onTap);
    };
    UnionNoticeView.prototype.onTap = function (e) {
        switch (e.currentTarget) {
            case this.closeBtn0:
            case this.closeBtn1:
            case this.bgrect:
                UIMgr.ins().close(this);
                break;
            case this.saveBtn:
                unionControl.notice = this.textInput.text;
                unionControl.upChangeNotice(this.textInput.text);
                UIMgr.ins().close(this);
                break;
        }
    };
    return UnionNoticeView;
}(BaseEuiView));
__reflect(UnionNoticeView.prototype, "UnionNoticeView");
var UnionShopPanel = (function (_super) {
    __extends(UnionShopPanel, _super);
    function UnionShopPanel() {
        var _this = _super.call(this) || this;
        _this.isOpenEff = false;
        _this.initUI();
        return _this;
    }
    UnionShopPanel.prototype.initUI = function () {
        this.skinName = "UnionShopPanelSkin";
    };
    UnionShopPanel.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.addEventTouchTap(this.closeBtn, this.onTap);
        this.addEventTouchTap(this.closeBtn0, this.onTap);
        this.addEventTouchTap(this.unionShopReskaiqi, this.onTap);
        this.addEventTouchTap(this.useBtn, this.onTap);
        this.addEventTouchTap(this.guildMore, this.onTap);
        unionStoreControl.upGetInfo();
        unionStoreControl.upBoxInfo();
        this.addCustomEvent(441 /* UNION_STORE_INFO */, this.onupdateData);
        this.addCustomEvent(443 /* UNION_STORE_BOX_RESULT */, this.onItemInfo);
        this.addCustomEvent(442 /* UNION_STORE_BOX_INFO */, this.onReadInfo);
        this.onupdateData();
        this.unionShopResitem_7.visible = false;
    };
    UnionShopPanel.prototype.close = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.removeEventTouchTap(this.closeBtn, this.onTap);
        this.removeEventTouchTap(this.closeBtn0, this.onTap);
        this.removeEventTouchTap(this.unionShopReskaiqi, this.onTap);
        this.removeEventTouchTap(this.useBtn, this.onTap);
        this.removeEventTouchTap(this.guildMore, this.onTap);
        this.removeCustomEvents();
    };
    UnionShopPanel.prototype.onupdateData = function () {
        if (unionStoreControl.guildStoreLv > 0) {
            this.unionShopResopen.visible = true;
            this.unionShopResclose.visible = false;
            this.unionShopResclose.touchEnabled = false;
            this.unionShopResopen.touchEnabled = true;
            if (DataCenter.ins().UnionStoreConfig.needContrib > unionControl.myCon)
                this.unionShopReslabel.textFlow = new egret.HtmlTextParser().parser(unionControl.myCon + "");
            else
                this.unionShopReslabel.textFlow = new egret.HtmlTextParser().parser(unionControl.myCon + "");
            this.unionShopResxiaolabel.text = "" + DataCenter.ins().UnionStoreConfig.needContrib;
            var totalNum = DataCenter.ins().UnionStoreConfig.time[unionStoreControl.guildStoreLv - 1];
            var nextTotalNum = DataCenter.ins().UnionStoreConfig.time[unionStoreControl.guildStoreLv];
            var str = "";
            if (unionStoreControl.guildStoreNum <= 0) {
                str = "<font color='#f3311e'>" + unionStoreControl.guildStoreNum + "/" + totalNum + "</font>";
            }
            else {
                str = unionStoreControl.guildStoreNum + "/" + totalNum;
            }
            if (nextTotalNum)
                this.unionShopResshengyulabel.textFlow = new egret.HtmlTextParser().parser(LangMgr.getValueByKey('guildTodaySY', str));
            else
                this.unionShopResshengyulabel.textFlow = new egret.HtmlTextParser().parser(LangMgr.getValueByKey('guildTodaySY', str));
        }
        else {
            this.unionShopResopen.visible = false;
            this.unionShopResopen.touchEnabled = false;
            this.unionShopResclose.touchEnabled = true;
            this.unionShopResclose.visible = true;
            this.unionShopReskaiqi.textFlow = new egret.HtmlTextParser().parser(LangMgr.getValueByKey('guildTips52'));
        }
        for (var k in DataCenter.ins().UnionStoreConfig.item) {
            this["unionShopResitem_" + k].data = DataCenter.ins().UnionStoreConfig.item[k];
        }
        this.guildMore.textFlow = new egret.HtmlTextParser().parser(LangMgr.getValueByKey('guildTips53'));
    };
    UnionShopPanel.prototype.onReadInfo = function () {
        var arr = unionStoreControl.getRecordInfoAry();
        if (arr.length > 0) {
            this.record.visible = true;
            var config = DataCenter.ins().ItemConfig[arr[0].itemId];
            var q = ItemUtils.getQualityColor(config);
            this.record.textFlow = new egret.HtmlTextParser().parser(LangMgr.getValueByKey('guildTips54', arr[0].roleName, q, config.name));
            if (arr.length > 1) {
                this.record1.visible = true;
                var config_2 = DataCenter.ins().ItemConfig[arr[1].itemId];
                this.record1.textFlow = new egret.HtmlTextParser().parser(LangMgr.getValueByKey('guildTips54', arr[1].roleName, q, config_2.name));
            }
            if (arr.length > 2) {
                this.record2.visible = true;
                var config_3 = DataCenter.ins().ItemConfig[arr[2].itemId];
                this.record2.textFlow = new egret.HtmlTextParser().parser(LangMgr.getValueByKey('guildTips54', arr[2].roleName, q, config_3.name));
            }
        }
        else {
            this.record.visible = false;
            this.record1.visible = false;
            this.record2.visible = false;
        }
    };
    UnionShopPanel.prototype.onItemInfo = function () {
        this.unionShopResitem_7.visible = true;
        var guildStoreItemData = unionStoreControl.getGuildStoreItemData(0);
        this.unionShopResitem_7.num = guildStoreItemData.num;
        this.unionShopResitem_7.data = guildStoreItemData.itemId;
        this.onupdateData();
    };
    UnionShopPanel.prototype.startEff = function () {
        var _this = this;
        this.unionShopResitem_7.visible = false;
        this.isOpenEff = true;
        this.openBoxEff = new GameMovieClip;
        this.openBoxEff.x = 232;
        this.openBoxEff.y = 287;
        this.openBoxEff.playFile(PATH_EFF + 'kaibaoxiang', 1, function () {
            unionStoreControl.upBox();
            _this.isOpenEff = false;
        });
        this.addChild(this.openBoxEff);
    };
    UnionShopPanel.prototype.onTap = function (e) {
        switch (e.currentTarget) {
            case this.closeBtn0:
            case this.closeBtn:
                UIMgr.ins().close(this);
                break;
            case this.unionShopReskaiqi:
                UIMgr.ins().open(UnionView, 1);
                break;
            case this.useBtn:
                if (unionStoreControl.guildStoreNum <= 0) {
                    tipsControl.showTips("|C:" + ColorUtils.RED + "&T:" + LangMgr.getValueByKey('guildTodaySY', 0) + "|");
                    return;
                }
                if (DataCenter.ins().UnionStoreConfig.needContrib > unionControl.myCon) {
                    tipsControl.showTips(LangMgr.getValueByKey('guildTips55'));
                    return;
                }
                if (!CommonFun.checkBackpackCount(1, 1)) {
                    return;
                }
                if (!this.isOpenEff) {
                    this.startEff();
                }
                break;
            case this.guildMore:
                UIMgr.ins().open(UnionShopRecordView);
                break;
        }
    };
    return UnionShopPanel;
}(BasePanel));
__reflect(UnionShopPanel.prototype, "UnionShopPanel");
var UnionShopRecordView = (function (_super) {
    __extends(UnionShopRecordView, _super);
    function UnionShopRecordView() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UnionShopRecordView.prototype.initUI = function () {
        _super.prototype.initUI.call(this);
        this.skinName = "UnionShopRecordViewSkin";
        this.list.itemRenderer = UnionShopRecordItemRender;
        this.arrList = new eui.ArrayCollection();
    };
    UnionShopRecordView.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.addEventTouchTap(this.closeBtn, this.onTap);
        this.addEventTouchTap(this.closeBtn0, this.onTap);
        this.addEventTouchTap(this.closeBtn1, this.onTap);
        this.arrList.replaceAll(unionStoreControl.getRecordInfoAry());
        this.list.dataProvider = this.arrList;
    };
    UnionShopRecordView.prototype.close = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.removeEventTouchTap(this.closeBtn, this.onTap);
        this.removeEventTouchTap(this.closeBtn0, this.onTap);
        this.removeEventTouchTap(this.closeBtn1, this.onTap);
    };
    UnionShopRecordView.prototype.onTap = function (e) {
        switch (e.currentTarget) {
            case this.closeBtn1:
            case this.closeBtn0:
            case this.closeBtn:
                UIMgr.ins().close(this);
                break;
        }
    };
    return UnionShopRecordView;
}(BaseEuiView));
__reflect(UnionShopRecordView.prototype, "UnionShopRecordView");
var UnionSkillPanel = (function (_super) {
    __extends(UnionSkillPanel, _super);
    function UnionSkillPanel() {
        var _this = _super.call(this) || this;
        _this.selectBmpX = [0, 34, 165, 293];
        _this.selectBmpY = [0, 239, 13, 239];
        _this.curRole = 0;
        _this.selectIconID = 2;
        return _this;
    }
    UnionSkillPanel.prototype.childrenCreated = function () {
        this.learnLab.textFlow = (new egret.HtmlTextParser).parser(LangMgr.getValueByKey('guildTips56'));
    };
    UnionSkillPanel.openCheck = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        var rtn = (unionControl.guildID != 0);
        if (!rtn) {
            tipsControl.showTips(LangMgr.getValueByKey('guildDes4'));
        }
        return rtn;
    };
    UnionSkillPanel.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.addEventTouchTap(this.praBtn, this.onTap);
        this.addEventTouchTap(this.skillBmp1, this.onTap);
        this.addEventTouchTap(this.skillBmp2, this.onTap);
        this.addEventTouchTap(this.skillBmp3, this.onTap);
        this.addEventTextLink(this.learnLab, this.onLink);
        this.addCustomEvent(23 /* UNION_SKILL_INFO */, this.update);
        this.addCustomEvent(28 /* MY_UNION_INFO */, this.updateMyInfo);
        this.addCustomEvent(352 /* SUB_ROLE_CHANGE */, this.updateRole);
        this.addCustomEvent(14 /* UNION_INFO */, this.update);
        this.addCustomEvent(674 /* UNION_LIAN_GONG_RED */, this.updateRedPoint);
        unionControl.upGuildSkillInfo();
        unionControl.upMyGuildInfo();
        this.praBtnMc.touchEnabled = false;
        this.update();
    };
    UnionSkillPanel.prototype.close = function () {
    };
    UnionSkillPanel.prototype.updateRedPoint = function () {
        if (!UnionRedPoint.ins().roleSkillTabs[this.curRole]) {
            UnionRedPoint.ins().roleSkillTabs[this.curRole] = {};
            UnionRedPoint.ins().roleSkillTabs[this.curRole][1] = false;
            UnionRedPoint.ins().roleSkillTabs[this.curRole][2] = false;
            UnionRedPoint.ins().roleSkillTabs[this.curRole][3] = false;
        }
        this.redPoint1.visible = UnionRedPoint.ins().roleSkillTabs[this.curRole][1];
        this.redPoint2.visible = UnionRedPoint.ins().roleSkillTabs[this.curRole][2];
        this.redPoint3.visible = UnionRedPoint.ins().roleSkillTabs[this.curRole][3];
        this.updateMc();
    };
    UnionSkillPanel.prototype.onLink = function () {
        UIMgr.ins().open(UnionView, 1);
    };
    UnionSkillPanel.prototype.updateRole = function () {
        unionControl.upGuildSkillInfo();
    };
    UnionSkillPanel.prototype.updateMyInfo = function () {
        this.praCon.text = "" + unionControl.myCon;
    };
    UnionSkillPanel.prototype.update = function (roleId) {
        if (roleId === void 0) { roleId = -1; }
        this.curRole = roleId > -1 ? roleId : this.curRole;
        this.updateMyInfo();
        this.updateRedPoint();
        this.selectSkill(this.selectIconID);
    };
    UnionSkillPanel.prototype.onTap = function (e) {
        switch (e.currentTarget) {
            case this.skillBmp1:
                this.selectSkill(1);
                this.selectSkillBmp.source = 'guildskill_1';
                break;
            case this.skillBmp2:
                this.selectSkill(2);
                this.selectSkillBmp.source = 'guildskill_2';
                break;
            case this.skillBmp3:
                this.selectSkill(3);
                this.selectSkillBmp.source = 'guildskill_3';
                break;
            case this.praBtn:
                this.learnBtnOnClick();
                break;
        }
    };
    UnionSkillPanel.prototype.learnBtnOnClick = function () {
        var roleSkillInfo = unionControl.getSkllInfoByIndex(this.curRole);
        if (Assert(roleSkillInfo.guildSkillInfo[this.selectSkillID - 1], LangMgr.getValueByKey('guildTips57', this.curRole, this.selectSkillID))) {
            return;
        }
        var level = roleSkillInfo.guildSkillInfo[this.selectSkillID - 1].level;
        var buildLevel = unionControl.getBuildingLevels(2 /* UNION_LIANGONGFANG */ - 1);
        var maxLevel = DataCenter.ins().UnionCommonSkillConfig[this.selectSkillID].length;
        var csInfoNext = level >= maxLevel ? null : this.getCommonSkillDP(this.selectSkillID, level + 1);
        if (buildLevel == 0 || level >= DataCenter.ins().UnionConfig.commonSkillLevels[buildLevel - 1]) {
            tipsControl.showTips(LangMgr.getValueByKey('guildTips58'));
            return;
        }
        if (csInfoNext.contribute > unionControl.myCon) {
            tipsControl.showTips(LangMgr.getValueByKey('guildTips59'));
            return;
        }
        else if (ActorControl.gold < csInfoNext.money) {
            tipsControl.showTips(LangMgr.getValueByKey('bossMoneyEnought'));
            return;
        }
        unionControl.upLearnGuildSkill(this.curRole, this.selectSkillID);
    };
    UnionSkillPanel.prototype.selectSkill = function (selectId) {
        this.selectIconID = selectId;
        this.selectBmp.horizontalCenter = this["skillBmp" + this.selectIconID].horizontalCenter;
        this.selectBmp.verticalCenter = this["skillBmp" + this.selectIconID].verticalCenter;
        this.selectPraSkill(selectId);
    };
    /**
     * 获取战斗力接口
     */
    UnionSkillPanel.prototype.getTotalPower = function () {
        var roleSkillInfo = unionControl.getSkllInfoByIndex(this.curRole);
        var power = 0;
        for (var i = 1; i < 4; i++) {
            var level = roleSkillInfo.guildSkillInfo[this.selectSkillID - 1].level;
            if (level > 0) {
                var csInfoNext = this.getCommonSkillDP(i, level);
                power += BackpackControl.getAttrPower(csInfoNext.attrs);
            }
        }
        return power;
    };
    UnionSkillPanel.prototype.selectPraSkill = function (selectId) {
        this.praGroup.visible = true;
        this.selectSkillID = selectId;
        this.selectSkillType = 1;
        var roleSkillInfo = unionControl.getSkllInfoByIndex(this.curRole);
        if (!roleSkillInfo)
            return;
        var level = roleSkillInfo.guildSkillInfo[this.selectSkillID - 1].level;
        var csInfo = this.getCommonSkillDP(this.selectSkillID, level);
        var maxLevel = this.getCommonSkillLength(this.selectSkillID);
        var buildLevel = unionControl.getBuildingLevels(2 /* UNION_LIANGONGFANG */ - 1);
        this.praCurBase.textColor = level == 0 ? LangMgr.getColor('color71') : LangMgr.getColor('color72');
        this.praCurBase.text = level == 0 ? LangMgr.getValueByKey('guildNoStudy') : AttributeData.getAttStr(csInfo.attrs, 0, 1, "：", true);
        this.praName.text = DataCenter.ins().UnionConfig.commonSkillNames[this.selectSkillID - 1];
        this.learnLab.visible = (buildLevel < 1 || level >= DataCenter.ins().UnionConfig.commonSkillLevels[buildLevel - 1]);
        this.praBtn.visible = !this.learnLab.visible;
        if (level < maxLevel) {
            var csInfoNext = this.getCommonSkillDP(this.selectSkillID, level + 1);
            this.praNextLab.text = AttributeData.getAttStr(csInfoNext.attrs, 0, 1, "：", true);
            var colorStr = unionControl.myCon >= csInfoNext.contribute ? LangMgr.getValueByKey('color104') : LangMgr.getValueByKey('color105');
            var temp = "<font color='#" + colorStr + "'>" + csInfoNext.contribute + "</font>";
            this.praCost.textFlow = (new egret.HtmlTextParser()).parser(temp);
            this.praCost0.text = csInfoNext.money + "";
            this.praCost0.textColor = ActorControl.gold >= csInfoNext.money ? LangMgr.getColor('color72') : ColorUtils.RED;
            this.updateMc();
        }
        else {
            this.praNextLab.text = LangMgr.getValueByKey('maxLevel');
            this.praCost.text = "0";
            this.praCost0.text = "0";
            this.praCost0.textColor = LangMgr.getColor('color72');
            DisplayUtils.removeFromParent(this.mc);
        }
        this.lvTxt.text = LangMgr.getValueByKey('equiLevel1', level);
    };
    UnionSkillPanel.prototype.updateMc = function () {
        if (!UnionRedPoint.ins().roleSkillTabs[this.curRole][this.selectSkillID] || this.learnLab.visible) {
            DisplayUtils.removeFromParent(this.mc);
            return;
        }
        if (!this.mc)
            this.mc = new GameMovieClip;
        if (!this.mc.parent) {
            this.mc.x = this.praBtnMc.width / 2;
            this.mc.y = this.praBtnMc.height / 2;
            this.praBtnMc.addChild(this.mc);
        }
        this.mc.playFile(PATH_EFF + "chargeff1", -1);
    };
    UnionSkillPanel.prototype.getCommonSkillDP = function (skillID, level) {
        var infos = DataCenter.ins().UnionCommonSkillConfig[skillID];
        if (level == 0) {
            return infos[1];
        }
        for (var key in infos) {
            var element = infos[key];
            if (element.level == level)
                return element;
        }
        return null;
    };
    UnionSkillPanel.prototype.getCommonSkillLength = function (skillId) {
        var infos = DataCenter.ins().UnionCommonSkillConfig[skillId];
        var len = 0;
        for (var key in infos) {
            len++;
        }
        return len;
    };
    return UnionSkillPanel;
}(BasePanel));
__reflect(UnionSkillPanel.prototype, "UnionSkillPanel");
var UnionSkillView = (function (_super) {
    __extends(UnionSkillView, _super);
    function UnionSkillView() {
        var _this = _super.call(this) || this;
        _this.skinName = "UnionSkillViewSkin";
        _this.isTopLevel = true;
        return _this;
    }
    UnionSkillView.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.addEventChange(this.tab, this.setSelectedIndex);
        this.addCustomEvent(667 /* UNION_FIRE_RED */, this.updateRed);
        this.addCustomEvent(674 /* UNION_LIAN_GONG_RED */, this.updateRoleRedPoint);
        this.addCustomEvent(674 /* UNION_LIAN_GONG_RED */, this.updateRed);
        this.lastSelect = 0;
        this.viewStack.selectedIndex = this.lastSelect;
        this.addEventChange(this.roleSelect, this.update);
        this.viewStack.getElementAt(this.lastSelect)['open']();
        this.unionSkillPanel.curRole = this.roleSelect.getCurRole();
        this.updateRed();
        this.updateRoleRedPoint();
    };
    UnionSkillView.prototype.setSelectedIndex = function (e) {
        this.selectedIndex(this.viewStack.selectedIndex);
    };
    UnionSkillView.prototype.selectedIndex = function (index) {
        if (this.lastSelect != undefined) {
            this.viewStack.getElementAt(this.lastSelect)['close']();
        }
        this.lastSelect = index;
        this.viewStack.getElementAt(this.lastSelect)['open']();
        if (this.lastSelect == 0) {
            this.roleSelect.openRole();
        }
        else {
            this.roleSelect.hideRole();
        }
    };
    UnionSkillView.prototype.close = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.unionSkillPanel.close();
        this.unionCampFirePanel.close();
        UIMgr.ins().open(UnionMapView);
    };
    UnionSkillView.prototype.update = function () {
        if (this.unionSkillPanel) {
            this.unionSkillPanel.update(this.roleSelect.getCurRole());
        }
    };
    UnionSkillView.prototype.updateRed = function () {
        this.redPoint1.visible = UnionRedPoint.ins().guildFire;
        this.redPoint0.visible = UnionRedPoint.ins().liangongRed;
    };
    UnionSkillView.prototype.updateRoleRedPoint = function () {
        var roleRedPoint = [false, false, false];
        for (var i = 0; i < roleRedPoint.length; i++) {
            this.roleSelect.showRedPoint(i, roleRedPoint[i]);
        }
        for (var i = 0; i < 1; i++) {
            if (UnionRedPoint.ins().roleTabs[i]) {
                for (var j = 0; j < heroControl.subRolesLen; j++) {
                    this.roleSelect.showRedPoint(j, UnionRedPoint.ins().roleTabs[i][j]);
                }
            }
        }
    };
    UnionSkillView.openCheck = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        if (!unionControl.getSkllInfoByIndex(0) && !unionControl.fireDic) {
            tipsControl.showTips(LangMgr.getValueByKey('bossErrorTips'));
            return false;
        }
        return true;
    };
    return UnionSkillView;
}(BaseEuiView));
__reflect(UnionSkillView.prototype, "UnionSkillView");
var UnionView = (function (_super) {
    __extends(UnionView, _super);
    function UnionView() {
        var _this = _super.call(this) || this;
        _this.isTopLevel = true;
        _this.skinName = "UnionViewSkin";
        return _this;
    }
    UnionView.prototype.initUI = function () {
        _super.prototype.initUI.call(this);
        this.tab.dataProvider = this.viewStack;
    };
    UnionView.openCheck = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        var rtn = (unionControl.guildID != 0);
        if (!rtn) {
            tipsControl.showTips(LangMgr.getValueByKey('guildDes4'));
        }
        return rtn;
    };
    UnionView.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        if (param && param.length > 0) {
            this.lastSelect = param[0];
        }
        else {
            this.lastSelect = 0;
        }
        this.viewStack.selectedIndex = this.lastSelect;
        this.addEventChange(this.tab, this.setSelectedIndex);
        this.addCustomEvent(669 /* UNION_GLDT_RED */, this.updateRedPoint);
        unionControl.upMyGuildInfo();
        unionControl.upGuildMembers();
        this.updateRedPoint();
        this.viewStack.getElementAt(this.lastSelect)['open']();
    };
    UnionView.prototype.close = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.viewStack.getElementAt(this.lastSelect)['close']();
        UIMgr.ins().open(UnionMapView);
    };
    UnionView.prototype.onTap = function (e) {
        switch (e.currentTarget) {
        }
    };
    UnionView.prototype.setSelectedIndex = function (e) {
        this.viewStack.getElementAt(this.lastSelect)['close']();
        this.lastSelect = this.viewStack.selectedIndex;
        this.viewStack.getElementAt(this.lastSelect)['open']();
    };
    UnionView.prototype.updateRedPoint = function () {
        this.redPoint1.visible = UnionRedPoint.ins().gldt;
    };
    return UnionView;
}(BaseEuiView));
__reflect(UnionView.prototype, "UnionView");
var UnionAppltListItemRender = (function (_super) {
    __extends(UnionAppltListItemRender, _super);
    function UnionAppltListItemRender() {
        var _this = _super.call(this) || this;
        _this.skinName = "UnionApplyListItemSkin";
        return _this;
    }
    UnionAppltListItemRender.prototype.onTap = function (e) {
        //工会战期间  不允许对申请玩家进行操作
        if (unionWarControl.getModel().isWatStart) {
            warnControl.show(LangMgr.getValueByKey('guildTips22'), function () { }, this);
            return;
        }
        if (!this.data) {
            return;
        }
        switch (e) {
            case this.ok:
                var commentLv = unionControl.getBuildingLevels(4 /* UNION_COMMENT */ - 1) || 0;
                var exmember = commentLv ? DataCenter.ins().UnionConfig.affairMember[commentLv - 1] : 0;
                if (unionControl.getMemberNum() >= (DataCenter.ins().UnionConfig.maxMember[unionControl.guildLv - 1] + exmember)) {
                    tipsControl.showTips(LangMgr.getValueByKey('guildTips23'));
                    return;
                }
                unionControl.upProcessJoin(this.data.roleID, 1);
                break;
            case this.cancel:
                unionControl.upProcessJoin(this.data.roleID, 0);
                break;
        }
    };
    UnionAppltListItemRender.prototype.dataChanged = function () {
        if (this.data instanceof UnionApplyInfoVo) {
            var info = this.data;
            if (info.vipLevel > 0) {
                this.nameLab.x = 162;
            }
            else {
                this.nameLab.x = 109;
            }
            var name_5 = "<font color='#C2BAA5'>" + info.name + "</font>";
            this.nameLab.textFlow = (new egret.HtmlTextParser).parser(name_5);
            this.attack0.text = info.attack + "";
            this.myFace.source = "head_" + info.job + info.sex;
            this.vipTitle.visible = info.vipLevel > 0;
        }
    };
    return UnionAppltListItemRender;
}(BaseItemRender));
__reflect(UnionAppltListItemRender.prototype, "UnionAppltListItemRender");
var UnionBuildItemRender = (function (_super) {
    __extends(UnionBuildItemRender, _super);
    function UnionBuildItemRender() {
        var _this = _super.call(this) || this;
        _this._maxLevel = 0;
        _this._curLevel = 0;
        _this._nextMoney = 0;
        _this.skinName = "UnionBuildItemSkin";
        return _this;
    }
    UnionBuildItemRender.prototype.onTap = function (e) {
        switch (e) {
            case this.upBtn:
                var type = this.data; //建筑类型从1开始
                if (unionControl.myOffice < 5 /* UNION_FUBANGZHU */) {
                    tipsControl.showTips(LangMgr.getValueByKey('guildTips24'));
                    return;
                }
                else if (type == 1 /* UNION_HALL */ && this._curLevel >= this._maxLevel) {
                    tipsControl.showTips(LangMgr.getValueByKey('guildTips25'));
                    return;
                }
                else if (type != 1 /* UNION_HALL */ && this._curLevel >= unionControl.guildLv) {
                    tipsControl.showTips(LangMgr.getValueByKey('guildTips26'));
                    return;
                }
                else if (unionControl.money < this._nextMoney) {
                    tipsControl.showTips(LangMgr.getValueByKey('guildTips27'));
                    return;
                }
                unionControl.upUpBuilding(type);
                break;
        }
    };
    UnionBuildItemRender.prototype.dataChanged = function () {
        var type = this.data; //建筑类型从1开始
        this.buildImg.visible = type == 1;
        //建筑当前等级
        this._curLevel = unionControl.getBuildingLevels(type - 1) || 0;
        var glc = DataCenter.ins().UnionLevelConfig[type];
        var dp = null;
        var dpNext = null;
        for (var key in glc) {
            if (glc.hasOwnProperty(key)) {
                var element = glc[key];
                this._maxLevel = element.level > this._maxLevel ? element.level : this._maxLevel;
                if (element.level == this._curLevel)
                    dp = element;
                if (element.level == this._curLevel + 1)
                    dpNext = element;
            }
        }
        if (dp || dpNext || (type == 2 /* UNION_LIANGONGFANG */)) {
            this.nameLab.text = DataCenter.ins().UnionConfig.buildingNames[type - 1];
            this.levelLab.text = LangMgr.getValueByKey('equipment28') + (this._curLevel == null ? 0 : this._curLevel);
            if (dpNext && this._curLevel < this._maxLevel) {
                this._nextMoney = dpNext.upFund;
                this.upLevelLab.text = type == 1 /* UNION_HALL */ ? "" : LangMgr.getValueByKey('guildUpNeed', this._curLevel + 1);
                this.money.text = unionControl.money + "/" + dpNext.upFund;
                this.needMoney.text = LangMgr.getValueByKey('guildNeedMondy', dpNext.upFund);
                this.progress.maximum = dpNext.upFund;
                this.progress.value = unionControl.money;
                this.progress.visible = true;
            }
            else {
                this.upLevelLab.text = LangMgr.getValueByKey('guildTips25');
                if (dp)
                    this.money.text = unionControl.money + "/" + dp.upFund;
                else
                    this.money.text = LangMgr.getValueByKey('maxLevel');
                this.needMoney.text = "";
                this.progress.visible = false;
            }
            this.buildingLab.text = DataCenter.ins().UnionConfig.buildingTips[type - 1];
        }
        this.manege.source = "unionmn" + type + "_png";
        //暂时屏蔽部分
        if (type == 3 /* UNION_SHOP */) {
            this.progress.visible = this.progressbg.visible = this.progressblack.visible
                = this.levelLab.visible = this.needMoney.visible = this.money.visible = false;
            this.upBtn.touchEnabled = false;
            this.upBtn.label = LangMgr.getValueByKey('guildHope');
            this.upBtn.currentState = "disabled";
            this.upBtn.verticalCenter = 0;
        }
        this.updateRedPoint();
    };
    UnionBuildItemRender.prototype.updateRedPoint = function () {
        var type = this.data; //建筑类型从1开始
        if (type == 3 /* UNION_SHOP */) {
            this.redPoint.visible = false;
            return;
        }
        if (unionControl.myOffice < 5 /* UNION_FUBANGZHU */) {
            this.redPoint.visible = false;
            return;
        }
        else if (type == 1 /* UNION_HALL */ && this._curLevel >= this._maxLevel) {
            this.redPoint.visible = false;
            return;
        }
        else if (type != 1 /* UNION_HALL */ && this._curLevel >= unionControl.guildLv) {
            this.redPoint.visible = false;
            return;
        }
        else if (unionControl.money < this._nextMoney) {
            this.redPoint.visible = false;
            return;
        }
        this.redPoint.visible = true;
    };
    return UnionBuildItemRender;
}(BaseItemRender));
__reflect(UnionBuildItemRender.prototype, "UnionBuildItemRender");
var UnionEventItenRender = (function (_super) {
    __extends(UnionEventItenRender, _super);
    function UnionEventItenRender() {
        var _this = _super.call(this) || this;
        _this.skinName = "UnionEventItemSkin";
        return _this;
    }
    UnionEventItenRender.prototype.dataChanged = function () {
        if (typeof this.data == 'string') {
            var str = this.data;
            if (str && str != "")
                this.info.textFlow = new egret.HtmlTextParser().parser(str);
        }
    };
    return UnionEventItenRender;
}(BaseItemRender));
__reflect(UnionEventItenRender.prototype, "UnionEventItenRender");
var UnionListItem2Render = (function (_super) {
    __extends(UnionListItem2Render, _super);
    function UnionListItem2Render() {
        var _this = _super.call(this) || this;
        _this.skinName = "UnionListItem2Skin";
        return _this;
    }
    UnionListItem2Render.prototype.dataChanged = function () {
        if (this.data instanceof UnionListInfoVo) {
            var info = this.data;
            var gc = DataCenter.ins().UnionConfig;
            if (info && gc) {
                if (info.guildRank < 4) {
                    this.numImg.source = "guildpaihang" + info.guildRank;
                    this.numLab.visible = false;
                    this.numImg.visible = true;
                }
                else {
                    this.numLab.text = info.guildRank + "";
                    this.numLab.visible = true;
                    this.numImg.visible = false;
                }
                this.nameLab.textFlow = TextUtils.generateTextFlow1(info.guildName);
                this.member0.text = "" + info.guildLevel;
                this.president.text = info.guildPresident;
                var exmember = info.commentLv ? DataCenter.ins().UnionConfig.affairMember[info.commentLv - 1] : 0;
                this.member.text = info.guildMember + "/" + (gc.maxMember[info.guildLevel - 1] + exmember);
                this.attrLab.text = "" + info.attr;
            }
        }
    };
    return UnionListItem2Render;
}(BaseItemRender));
__reflect(UnionListItem2Render.prototype, "UnionListItem2Render");
var UnionListItemRender = (function (_super) {
    __extends(UnionListItemRender, _super);
    function UnionListItemRender() {
        var _this = _super.call(this) || this;
        _this.skinName = "UnionListItemSkin";
        return _this;
    }
    UnionListItemRender.prototype.onTap = function () {
        //工会战期间  不允许申请加入公会
        if (unionWarControl.getModel().isWatStart) {
            warnControl.show(LangMgr.getValueByKey('guildTips41'), function () {
            }, this);
            return;
        }
        var info = this.data;
        if (unionControl.applyGuilds.indexOf(info.guildID) == -1) {
            if (this.data.attr > ActorControl.power) {
                tipsControl.showTips(LangMgr.getValueByKey('guildTips42'));
                return;
            }
            this.applyBtn.enabled = false;
            this.applyBtn.label = LangMgr.getValueByKey('guildApply');
            unionControl.applyGuilds.push(info.guildID);
            unionControl.upJoinGuild(info.guildID);
        }
    };
    UnionListItemRender.prototype.dataChanged = function () {
        if (this.data instanceof UnionListInfoVo) {
            var info = this.data;
            var gc = DataCenter.ins().UnionConfig;
            if (info && gc) {
                this.numLab.text = info.guildRank + "";
                this.nameLab.textFlow = (new egret.HtmlTextParser()).parser(info.guildName + ("<font color=" + LangMgr.getValueByKey('color109') + ">(Lv." + info.guildLevel + ")</font>"));
                this.president.text = info.guildPresident;
                var exmember = info.commentLv ? DataCenter.ins().UnionConfig.affairMember[info.commentLv - 1] : 0;
                this.member.textColor = info.guildMember < (gc.maxMember[info.guildLevel - 1] + exmember) ? LangMgr.getColor('color70') : ColorUtils.RED;
                this.member.text = info.guildMember + "/" + (gc.maxMember[info.guildLevel - 1] + exmember);
                var powers = CommonUtils.overLength(info.attr);
                this.attrLabel.visible = powers ? true : false;
                if (powers)
                    this.attrLabel.text = LangMgr.getValueByKey('guildNeedFight') + powers;
                if (unionControl.applyGuilds.indexOf(info.guildID) > -1) {
                    this.applyBtn.enabled = false;
                    this.applyBtn.label = LangMgr.getValueByKey('guildApply');
                }
                else {
                    this.applyBtn.enabled = true;
                    this.applyBtn.label = LangMgr.getValueByKey('friendSQ');
                }
            }
        }
    };
    UnionListItemRender.prototype.destruct = function () {
    };
    return UnionListItemRender;
}(BaseItemRender));
__reflect(UnionListItemRender.prototype, "UnionListItemRender");
var UnionMapMemberItemRender = (function (_super) {
    __extends(UnionMapMemberItemRender, _super);
    function UnionMapMemberItemRender() {
        var _this = _super.call(this) || this;
        _this.skinName = "UnionMapMemberItemSkin";
        return _this;
    }
    UnionMapMemberItemRender.prototype.dataChanged = function () {
        if (this.data instanceof UnionMemberInfoVo) {
            var info = this.data;
            if (info) {
                this.nameLab.text = info.name;
                this.office.text = LangMgr.getValueByKey("officeName" + info.office);
                this.conLab.text = info.curContribution + "";
            }
        }
    };
    return UnionMapMemberItemRender;
}(BaseItemRender));
__reflect(UnionMapMemberItemRender.prototype, "UnionMapMemberItemRender");
var UnionMemberItem1Render = (function (_super) {
    __extends(UnionMemberItem1Render, _super);
    function UnionMemberItem1Render() {
        var _this = _super.call(this) || this;
        _this.skinName = "UnionMemberItem1Skin";
        return _this;
    }
    UnionMemberItem1Render.prototype.dataChanged = function () {
        if (this.data instanceof UnionMemberInfoVo) {
            var info = this.data;
            if (info) {
                this.nameLab.text = info.name;
                this.office.text = LangMgr.getValueByKey("officeName" + info.office);
                this.conLab.text = info.contribution + "";
                this.monthcard.visible = false; //info.monthCard == 1;
                this.vip.removeChildren();
                this.vip.visible = info.vipLevel > 0;
                this.vipTitle.visible = info.vipLevel > 0;
                if (info.vipLevel < 10) {
                    this.vipNum = BitmapNumber.ins().createNumPic(info.vipLevel, 'vip_v');
                }
                else {
                    this.vipNum = BitmapNumber.ins().createNumPic(1, 'vip_v');
                    this.vipNum0 = BitmapNumber.ins().createNumPic(0, 'vip_v');
                    this.vipNum0.x = 33;
                    this.vipNum0.y = -1;
                    this.vip.addChild(this.vipNum0);
                }
                this.vipNum.x = 18;
                this.vipNum.y = -1;
                this.vip.addChild(this.vipNum);
            }
        }
    };
    return UnionMemberItem1Render;
}(BaseItemRender));
__reflect(UnionMemberItem1Render.prototype, "UnionMemberItem1Render");
var UnionMemberItem2Render = (function (_super) {
    __extends(UnionMemberItem2Render, _super);
    function UnionMemberItem2Render() {
        var _this = _super.call(this) || this;
        _this.skinName = "UnionMemberItem2Skin";
        return _this;
    }
    UnionMemberItem2Render.prototype.childrenCreated = function () {
        var _this = this;
        _super.prototype.childrenCreated.call(this);
        if (!this.hasEventListener(egret.Event.REMOVED_FROM_STAGE)) {
            this.addEventRemovedFromStage(this, function () {
                EventMgr.ins().removeAll(_this);
            });
        }
        this.addEventTouchTap(this, function (e) {
            if (e.target instanceof eui.Button) {
                return;
            }
            if (_this.data) {
                UIMgr.ins().open(RamblePlayerTipsView, _this.data);
            }
        });
    };
    UnionMemberItem2Render.prototype.onTap = function (e) {
        //工会战期间  不允许 禅让/降职/任命副会长/踢出
        if (unionWarControl.getModel().isWatStart) {
            warnControl.show(LangMgr.getValueByKey('guildTips43'), function () {
            }, this);
            return;
        }
        var info = this.data;
        var roleID = info.roleID;
        switch (e) {
            case this.impeachBtn:
                warnControl.show(LangMgr.getValueByKey('guildTips44', DataCenter.ins().UnionConfig.impeachCost), function () {
                    if (ActorControl.yb >= DataCenter.ins().UnionConfig.impeachCost) {
                        unionControl.upDemise();
                    }
                    else
                        tipsControl.showTips(LangMgr.getValueByKey('osaNoMoney'));
                }, this);
                break;
            case this.demiseBtn:
                warnControl.show(LangMgr.getValueByKey('guildTips45', info.name), function () {
                    unionControl.upChangeOffice(roleID, 6 /* UNION_BANGZHU */);
                }, this);
                break;
            case this.downBtn:
                warnControl.show(LangMgr.getValueByKey('guildTips46', info.name), function () {
                    unionControl.upChangeOffice(roleID, 0 /* UNION_MEMBER */);
                }, this);
                break;
            case this.kickBtn:
                warnControl.show(LangMgr.getValueByKey('guildTips47', info.name), function () {
                    unionControl.upKick(roleID);
                }, this);
                break;
            case this.appointBtn:
                warnControl.show(LangMgr.getValueByKey('guildTips48', info.name), function () {
                    if (unionControl.canAppointFHZ()) {
                        unionControl.upChangeOffice(roleID, 5 /* UNION_FUBANGZHU */);
                    }
                    else
                        tipsControl.showTips(LangMgr.getValueByKey('guildTips49'));
                }, this);
                break;
            default:
                UIMgr.ins().open(RamblePlayerTipsView, this.data);
                break;
        }
    };
    UnionMemberItem2Render.prototype.dataChanged = function () {
        if (this.data instanceof UnionMemberInfoVo) {
            var info = this.data;
            this.nameLab.textFlow = new egret.HtmlTextParser().parser("[" + LangMgr.getValueByKey("officeName" + info.office) + "]<font color='#DFDCDC'>" + info.name + "</font>");
            this.conLab.text = LangMgr.getValueByKey('guildGXValue', info.contribution);
            this.attack.text = LangMgr.getValueByKey('godFightValue', info.attack);
            this.face.source = "head_" + info.job + info.sex;
            this.headBG.source = RambleListItemRenderer.HEAD_BG[info.sex];
            var downTime = 0;
            var myOfiice = unionControl.myOffice;
            if (myOfiice == 6 /* UNION_BANGZHU */ || myOfiice == 5 /* UNION_FUBANGZHU */) {
                this.onLine.visible = true;
                if (info.downTime > 0) {
                    downTime = (GameServer.serverTime - DateUtils.formatMiniDateTime(info.downTime)) * 0.001;
                    this.onLine.textFlow = TextUtils.generateTextFlow1("|C:" + ColorUtils.RED + "&T:" + DateUtils.getFormatBySecond(downTime, 7));
                }
                else
                    this.onLine.textFlow = new egret.HtmlTextParser().parser(LangMgr.getValueByKey('guildTips50'));
            }
            else {
                this.onLine.visible = false;
            }
            this.group1.visible = false;
            this.group2.visible = false;
            this.group3.visible = false;
            this.impeachBtn.visible = downTime >= DataCenter.ins().UnionConfig.impeachTime;
            ; //5天的秒数
            this.vip.removeChildren();
            this.vip.visible = info.vipLevel > 0;
            this.vipTitle.visible = info.vipLevel > 0;
            if (info.vipLevel < 10) {
                this.vipNum = BitmapNumber.ins().createNumPic(info.vipLevel, 'vip_v');
            }
            else {
                this.vipNum = BitmapNumber.ins().createNumPic(1, 'vip_v');
                this.vipNum0 = BitmapNumber.ins().createNumPic(0, 'vip_v');
                this.vipNum0.x = 33;
                this.vipNum0.y = -1;
                this.vip.addChild(this.vipNum0);
            }
            this.vipNum.x = 18;
            this.vipNum.y = -1;
            this.vip.addChild(this.vipNum);
            switch (myOfiice) {
                case 6 /* UNION_BANGZHU */:
                    if (info.office == 6 /* UNION_BANGZHU */)
                        break;
                    else if (info.office == 5 /* UNION_FUBANGZHU */) {
                        this.group2.visible = true;
                    }
                    else {
                        this.group3.visible = true;
                        this.appointBtn.visible = true;
                    }
                    break;
                case 5 /* UNION_FUBANGZHU */:
                    if (info.office == 6 /* UNION_BANGZHU */) {
                        this.group1.visible = true;
                    }
                    else if (info.office == 5 /* UNION_FUBANGZHU */)
                        break;
                    else {
                        this.group3.visible = true;
                        this.appointBtn.visible = false;
                    }
                    break;
                case 4 /* UNION_ZHANGLAO */:
                case 3 /* UNION_HUFA */:
                case 2 /* UNION_TANGZHU */:
                    if (info.office == 6 /* UNION_BANGZHU */)
                        this.group1.visible = true;
                    break;
                default:
                    break;
            }
        }
    };
    return UnionMemberItem2Render;
}(BaseItemRender));
__reflect(UnionMemberItem2Render.prototype, "UnionMemberItem2Render");
var UnionShopRecordItemRender = (function (_super) {
    __extends(UnionShopRecordItemRender, _super);
    function UnionShopRecordItemRender() {
        var _this = _super.call(this) || this;
        _this.skinName = "UnionShopRecordItemSkin";
        return _this;
    }
    UnionShopRecordItemRender.prototype.dataChanged = function () {
        if (this.data instanceof UnionStoreRecordInfoVo) {
            var config = DataCenter.ins().ItemConfig[this.data.itemId];
            if (config)
                this.rank.textFlow = new egret.HtmlTextParser().parser(LangMgr.getValueByKey('guildTips54', this.data.roleName, ItemUtils.getQualityColor(config), config.name));
            else
                this.rank.text = "";
        }
    };
    return UnionShopRecordItemRender;
}(BaseItemRender));
__reflect(UnionShopRecordItemRender.prototype, "UnionShopRecordItemRender");
var UnionTaskItemRender = (function (_super) {
    __extends(UnionTaskItemRender, _super);
    function UnionTaskItemRender() {
        var _this = _super.call(this) || this;
        _this.skinName = "UnionTaskItemSkin";
        return _this;
    }
    UnionTaskItemRender.prototype.onTap = function (e) {
        switch (e) {
            case this.conBtn:
            case this.goBtn:
                this.conBtnOnCLick();
                break;
        }
    };
    UnionTaskItemRender.prototype.conBtnOnCLick = function () {
        var info = this.data;
        switch (info.stdTask.type) {
            case 31:
                if (info.param >= info.stdTask.target)
                    tipsControl.showTips(LangMgr.getValueByKey('guildTips60'));
                else if (ActorControl.yb >= info.stdTask.param) {
                    unionControl.upCon(info.stdTask.conID);
                }
                else
                    tipsControl.showTips(LangMgr.getValueByKey('osaNoMoney'));
                break;
            case 32:
                if (info.param >= info.stdTask.target)
                    tipsControl.showTips(LangMgr.getValueByKey('guildTips60'));
                else if (ActorControl.gold >= info.stdTask.param) {
                    unionControl.upCon(info.stdTask.conID);
                }
                else
                    warnControl.setBuyGoodsWarn(1);
                break;
            case 33:
                if (info.param >= info.stdTask.target)
                    tipsControl.showTips(LangMgr.getValueByKey('guildTips60'));
                else if (backpackControl.getBagGoodsCountById(0, info.stdTask.param) >= 1) {
                    unionControl.upCon(info.stdTask.conID);
                }
                else
                    tipsControl.showTips(LangMgr.getValueByKey('zhuzaiPropEnought'));
                break;
            default:
                GuideControl.guidance(info.stdTask.controlTarget[0], info.stdTask.controlTarget[1]);
                break;
        }
    };
    UnionTaskItemRender.prototype.goBtnOnClick = function () {
        var info = this.data;
        switch (info.state) {
            case 0:
                GuideControl.guidance(info.stdTask.controlTarget[0], info.stdTask.controlTarget[1]);
                break;
            case 1:
                unionControl.upGetTaskAward(info.taskID);
                break;
            case 2:
                break;
        }
    };
    UnionTaskItemRender.prototype.dataChanged = function () {
        if (this.data instanceof UnionTaskInfoVo) {
            var info = this.data;
            if (info) {
                this.taskIcon.source = "guildtask_" + info.taskID;
                this.nameLab.text = info.stdTask.name;
                this.descLab.text = info.stdTask.desc;
                this.conGroup.visible = true;
                this.getGroup.visible = false;
                this.numLab.text = info.param + "/" + info.stdTask.target;
                this.conBtn.enabled = info.param < info.stdTask.target;
                if (info.param < info.stdTask.target) {
                    switch (info.stdTask.type) {
                        case 31: //捐献元宝
                        case 32: //捐献金币
                        case 33://捐献道具
                            this.conBtn.label = LangMgr.getValueByKey('guildGX');
                            break;
                        default:
                            this.conBtn.label = LangMgr.getValueByKey('guildGoGo');
                            break;
                    }
                }
                else
                    this.conBtn.label = LangMgr.getValueByKey('guildFinsh');
            }
        }
    };
    return UnionTaskItemRender;
}(BaseItemRender));
__reflect(UnionTaskItemRender.prototype, "UnionTaskItemRender");
var UnionBossDetailView = (function (_super) {
    __extends(UnionBossDetailView, _super);
    function UnionBossDetailView() {
        var _this = _super.call(this) || this;
        _this.index = 0;
        _this.skinName = "UnionBossDetailViewSkin";
        _this.isTopLevel = true;
        _this.uilayer = GameLayer.POPUP;
        _this.isPlayAnima = false;
        return _this;
    }
    UnionBossDetailView.prototype.initUI = function () {
        _super.prototype.initUI.call(this);
    };
    UnionBossDetailView.openCheck = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        return true;
    };
    UnionBossDetailView.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.index = param[0];
        this.addEventTouchTap(this.chanllage, this.onTap);
        this.addEventTouchTap(this.chanllageOme, this.onTap);
        this.addEventTouchTap(this.bgClose, this.onTap);
        this.addEventTouchTap(this.rankBtn, this.onTap);
        if (this.fgClose)
            this.addEventTouchEnd(this.fgClose, this.onTap);
        this.addCustomEvent(433 /* UNION_BOSS_DETAIL_CHANGE */, this.setView);
        this.addCustomEvent(432 /* UNION_BOSS_INFO */, this.upInfo);
        this.addCustomEvent(434 /* UNION_BOSS_CHALLENGE_SUCCESS */, this.challengeSuccess);
        this.addCustomEvent(435 /* UNION_BOSS_RANK_INFO_CHANGE */, this.setRank);
        this.upInfo();
        unionBossControl.upGetBossRankInfo(this.index + 1);
    };
    UnionBossDetailView.prototype.upInfo = function () {
        unionBossControl.upGetBossInfo();
    };
    UnionBossDetailView.prototype.setView = function () {
        this.chanllagecount.text = "" + LangMgr.getValueByKey('guilFightTimes') + unionBossControl.leftTimes + "/" + DataCenter.ins().UnionBossConfig.dayTimes;
        var id = unionBossControl.passId;
        this.chanllagecount.visible = unionBossControl.isOpen() && (id == this.index);
        this.chanllage.visible = unionBossControl.isOpen() && (this.index <= id);
        this.cantchanllage.visible = unionBossControl.isOpen() && !this.chanllage.visible;
        var config = DataCenter.ins().UnionBossInfoConfig[this.index + 1];
        var bossConfig = DataCenter.ins().MonstersConfig[config.boss["monId"]];
        this.bossname.text = bossConfig.name;
        this.bossImage.source = config.ShowImg; //`gb_b${this.index + 1}`;
        var state = unionBossControl.passRecord[this.index + 1];
        for (var i = 0; i < config.passAwards.length; i++) {
            this["itemicon" + i].isShowName(false);
            this["itemicon" + i].data = config.passAwards[i];
        }
        var rewardConfig = DataCenter.ins().UnionBossHpAwardsConfig[this.index + 1];
        for (var i = 3; i < 7; i++) {
            this["itemicon" + i].isShowName(false);
            this["itemicon" + i].data = rewardConfig[i - 2].awards[0];
        }
        if (this.index < id) {
            this.bosshp.value = 0;
            this.bosshp.maximum = 0;
            this.rewardBar.value = 100;
            this.rewardBar.maximum = 100;
        }
        else if (this.index == id) {
            var selfValue = 0;
            selfValue = Math.ceil(((bossConfig.hp - unionBossControl.bossHP) / bossConfig.hp) * 10000) / 100 >> 0;
            this.bosshp.maximum = 100;
            this.bosshp.value = selfValue;
            this.rewardBar.value = 100 - selfValue;
            this.rewardBar.maximum = 100;
        }
        else {
            this.bosshp.value = 100;
            this.bosshp.maximum = 100;
            this.rewardBar.value = 0;
            this.rewardBar.maximum = 100;
        }
        this.chanllage.enabled = true;
        this.chanllage.x = 166;
        this.chanllageOme.visible = false;
        if (state == 0 || this.bosshp.value) {
            if (unionControl.guildLv >= DataCenter.ins().UnionBossConfig.radisLv && this.chanllage.visible) {
                this.chanllageOme.visible = true;
                this.chanllage.x = 54;
            }
        }
        else if (state == 1) {
            this.chanllage.label = LangMgr.getValueByKey('activitGet1');
        }
        else {
            this.chanllage.label = LangMgr.getValueByKey('activitAlreadingGet');
            this.chanllage.enabled = false;
        }
        this.state.visible = !unionBossControl.isOpen();
        if (this.state.visible) {
            this.cantchanllage.visible = this.chanllageOme.visible = this.chanllage.visible = false;
        }
    };
    UnionBossDetailView.prototype.onTap = function (e) {
        switch (e.currentTarget) {
            case this.chanllageOme:
            case this.chanllage:
                if (unionBossControl.passRecord[this.index + 1] == 0 || this.bosshp.value) {
                    if (unionBossControl.challengeTime > GameServer.serverTime) {
                        tipsControl.showTips(LangMgr.getValueByKey('guilFighting'));
                        return;
                    }
                    if (unionBossControl.leftTimes <= 0) {
                        tipsControl.showTips(LangMgr.getValueByKey('guilNoTimes'));
                        return;
                    }
                    unionBossControl.upChallengeBoss(e.currentTarget == this.chanllageOme ? 1 : 0);
                }
                else if (this.chanllage.label == LangMgr.getValueByKey('activitGet1')) {
                    unionBossControl.upGetBossReward(this.index + 1);
                }
                break;
            case this.rankBtn:
                UIMgr.ins().open(UnionBossRankView, this.index);
                break;
            case this.fgClose:
            case this.bgClose:
                UIMgr.ins().close(UnionBossDetailView);
                break;
        }
    };
    UnionBossDetailView.prototype.challengeSuccess = function () {
        UIMgr.ins().close(UnionBossView);
        UIMgr.ins().close(UnionMapView);
        UIMgr.ins().close(UnionBossDetailView);
    };
    UnionBossDetailView.prototype.setRank = function () {
        var rankArr = unionBossControl.guildRankDic[this.index + 1];
        var config = DataCenter.ins().UnionBossInfoConfig[this.index + 1];
        var bossConfig = DataCenter.ins().MonstersConfig[config.boss["monId"]];
        for (var i = 0; i < 3; i++) {
            if (rankArr && rankArr[i]) {
                this["rankGroup" + i].visible = true;
                this["guildname" + i].text = rankArr[i].name;
                var selfValue = 0;
                var perCount = Math.ceil((rankArr[i].damage / bossConfig.hp) * 10000) / 100;
                selfValue = perCount > 100 ? 100 : perCount;
                this["hpbar" + i].value = selfValue;
                this["hpbar" + i].maximum = 100;
                this["bosshpbg" + i].visible = this["hpbar" + i].visible = true;
            }
            else {
                this["bosshpbg" + i].visible = this["hpbar" + i].visible = false;
            }
        }
    };
    return UnionBossDetailView;
}(BaseEuiView));
__reflect(UnionBossDetailView.prototype, "UnionBossDetailView");
var UnionBossRankView = (function (_super) {
    __extends(UnionBossRankView, _super);
    function UnionBossRankView() {
        var _this = _super.call(this) || this;
        _this.index = 0;
        _this.skinName = "UnionBossRankViewSkin";
        _this.isTopLevel = true;
        _this.uilayer = GameLayer.POPUP;
        _this.list.itemRenderer = UnionBossRankItemRender;
        return _this;
    }
    UnionBossRankView.openCheck = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        return true;
    };
    UnionBossRankView.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.index = param[0];
        this.addEventTouchTap(this.bgClose, this.onTap);
        this.setView();
    };
    UnionBossRankView.prototype.close = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.removeEventTouchTap(this.bgClose, this.onTap);
        this.removeCustomEvents();
    };
    UnionBossRankView.prototype.setView = function () {
        var arr = [];
        var rankArr = unionBossControl.guildPersonRankDic[this.index + 1] || [];
        for (var i = 0; i < rankArr.length; i++) {
            if (!rankArr[i])
                continue;
            if (rankArr[i].name == ActorControl.myName)
                this.myData = rankArr[i];
            arr.push(rankArr[i]);
        }
        this.list.dataProvider = new eui.ArrayCollection(arr);
        if (this.myData) {
            this.qiansan.visible = true;
            this.myrank.visible = true;
            this.myname.visible = true;
            this.myharm.visible = true;
            this.myreword.visible = true;
            if (this.myData.rank <= 3) {
                this.qiansan.source = "guildpaihang" + this.myData.rank;
            }
            else {
                this.qiansan.source = "";
            }
            this.myrank.text = this.myData.rank + "";
            this.myname.text = this.myData.name;
            this.myharm.text = this.myData.damage + "";
            this.myreword.text = unionBossControl.leftTimes + "/" + DataCenter.ins().UnionBossConfig.dayTimes;
        }
        else {
            this.qiansan.visible = false;
            this.myrank.visible = false;
            this.myname.visible = false;
            this.myharm.visible = false;
            this.myreword.visible = false;
        }
    };
    UnionBossRankView.prototype.onTap = function (e) {
        switch (e.currentTarget) {
            case this.bgClose:
                UIMgr.ins().close(UnionBossRankView);
                break;
        }
    };
    return UnionBossRankView;
}(BaseEuiView));
__reflect(UnionBossRankView.prototype, "UnionBossRankView");
var UnionBossView = (function (_super) {
    __extends(UnionBossView, _super);
    function UnionBossView() {
        var _this = _super.call(this) || this;
        _this.bossLen = 0;
        _this.itemLen = 6;
        _this.arrCount = 0; //页数
        _this.currentArr = [];
        _this.currentIndex = 0;
        _this.skinName = "UnionBossViewSkin";
        _this.uilayer = GameLayer.POPUP;
        return _this;
    }
    UnionBossView.prototype.initUI = function () {
        _super.prototype.initUI.call(this);
        this.isTopLevel = true;
        this.itemArr = [];
        for (var i = 0; i < 6; i++) {
            this.itemArr.push(this["bossItem" + i]);
        }
        this.bossLen = CommonUtils.getObjectLength(DataCenter.ins().UnionBossInfoConfig);
        this.arrCount = 0;
        this.bossArr = [];
        for (var j = 0; j < this.bossLen; j++) {
            if (!this.bossArr[this.arrCount])
                this.bossArr[this.arrCount] = [];
            if (j < (this.arrCount + 1) * this.itemLen) {
                this.bossArr[this.arrCount].push(j);
            }
            else if (j == (this.arrCount + 1) * this.itemLen) {
                this.arrCount++;
                this.bossArr[this.arrCount] = [];
                this.bossArr[this.arrCount].push(j);
            }
        }
    };
    UnionBossView.openCheck = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        if (!unionControl.guildID) {
            tipsControl.showTips(LangMgr.getValueByKey("guildDes4"));
        }
        return !!unionControl.guildID;
    };
    UnionBossView.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.addEventTouchTap(this.closeBtn, this.onTap);
        this.addEventTouchTap(this.imgleft, this.onTap);
        this.addEventTouchTap(this.imgRight, this.onTap);
        for (var i = 0; i < this.itemLen; i++) {
            this.addEventTouchTap(this.itemArr[i], this.onItemTap);
        }
        this.addCustomEvent(433 /* UNION_BOSS_DETAIL_CHANGE */, this.setView);
        this.addCustomEvent(432 /* UNION_BOSS_INFO */, this.setView);
        this.addCustomEvent(434 /* UNION_BOSS_CHALLENGE_SUCCESS */, this.challengeSuccess);
        this.currentIndex = this.getRuleIndex();
        unionBossControl.upGetBossInfo();
    };
    UnionBossView.prototype.getRuleIndex = function () {
        var maxLen = Object.keys(DataCenter.ins().UnionBossInfoConfig).length;
        var passId = unionBossControl.passId;
        if (passId >= maxLen) {
            passId -= 1;
        }
        return Math.floor(passId / this.itemLen);
    };
    UnionBossView.prototype.setView = function () {
        var index = unionBossControl.passId + 1;
        var maxLen = Object.keys(DataCenter.ins().UnionBossInfoConfig).length;
        index = index >= maxLen ? maxLen : index;
        this.currentArr = this.bossArr[this.currentIndex];
        var cfg = DataCenter.ins().UnionBossInfoConfig[index];
        this.fightboss.source = cfg.ShowImg; //`gb_b${this.currentIndex + 1}`;
        for (var i = 0; i < this.itemLen; i++) {
            if (this.currentArr[i] != null) {
                this.itemArr[i].data = this.currentArr[i];
                this.itemArr[i].visible = true;
            }
            else {
                this.itemArr[i].visible = false;
            }
        }
        this.selfname.text = unionControl.guildName;
        this.enemyname.text = unionBossControl.otherGuildName;
        var maxBoss = CommonUtils.getObjectLength(DataCenter.ins().UnionBossInfoConfig);
        var id = unionBossControl.passId + 1 > maxBoss ? maxBoss : unionBossControl.passId + 1;
        var config = DataCenter.ins().UnionBossInfoConfig[id];
        var bossConfig = DataCenter.ins().MonstersConfig[config.boss["monId"]];
        var selfValue = 0;
        var emityValue = 0;
        selfValue = Math.ceil(((bossConfig.hp - unionBossControl.bossHP) / bossConfig.hp) * 10000) / 100;
        this.sbhpbar.value = selfValue;
        this.sbhpbar.maximum = 100;
        this.ebhpbar.value = emityValue;
        this.ebhpbar.maximum = 100;
        this.state.visible = !unionBossControl.isOpen();
        if (!this.currentIndex) {
            this.imgleft.visible = false;
            this.imgRight.visible = true;
        }
        else if (this.currentIndex == this.arrCount) {
            this.imgleft.visible = true;
            this.imgRight.visible = false;
        }
        else {
            this.imgleft.visible = true;
            this.imgRight.visible = true;
        }
    };
    UnionBossView.prototype.onTap = function (e) {
        switch (e.currentTarget) {
            case this.closeBtn:
                UIMgr.ins().close(UnionBossView);
                break;
            case this.imgleft:
                this.currentIndex--;
                if (this.currentIndex <= 0) {
                    this.imgleft.visible = false;
                }
                this.setView();
                this.imgRight.visible = true;
                break;
            case this.imgRight:
                this.currentIndex++;
                if (this.currentIndex >= this.arrCount) {
                    this.imgRight.visible = false;
                }
                this.setView();
                this.imgleft.visible = true;
                break;
        }
    };
    UnionBossView.prototype.onItemTap = function (e) {
        UIMgr.ins().open(UnionBossDetailView, e.currentTarget.data);
    };
    UnionBossView.prototype.challengeSuccess = function () {
        UIMgr.ins().close(UnionBossView);
        UIMgr.ins().close(UnionMapView);
    };
    return UnionBossView;
}(BaseEuiView));
__reflect(UnionBossView.prototype, "UnionBossView");
var UnionBossItemRender = (function (_super) {
    __extends(UnionBossItemRender, _super);
    function UnionBossItemRender() {
        var _this = _super.call(this) || this;
        _this.skinName = "UnionBossItemSkin";
        _this.bosshp.maximum = 100;
        _this.bosshp.slideDuration = 0;
        return _this;
    }
    UnionBossItemRender.prototype.dataChanged = function () {
        var id = unionBossControl.passId;
        var index = this.data + 1;
        var config = DataCenter.ins().UnionBossInfoConfig[index];
        var bossConfig = DataCenter.ins().MonstersConfig[config.boss["monId"]];
        this.bossImage.source = config.ShowImg; //`gb_b${index}`;
        if (this.data < id) {
            this.bossname.textColor = LangMgr.getColor('color56');
            this.bosshp.value = 0;
            var state = unionBossControl.passRecord[index];
            this.passImg.visible = true;
            this.redPoint0.visible = unionBossControl.isOpen() && (state == 1);
        }
        else if (this.data == id) {
            this.bossname.textColor = ColorUtils.NORMAL_COLOR;
            this.bosshp.value = Math.ceil(((bossConfig.hp - unionBossControl.bossHP) / bossConfig.hp) * 10000) / 100 >> 0;
            this.redPoint0.visible = unionBossControl.isOpen() && unionBossControl.leftTimes > 0 ? true : false;
            this.passImg.visible = false;
        }
        else {
            this.bossname.textColor = ColorUtils.NORMAL_COLOR;
            this.bosshp.value = 100;
            this.redPoint0.visible = false;
            this.passImg.visible = false;
        }
        this.bossname.text = index + "." + bossConfig.name;
    };
    UnionBossItemRender.prototype.isOpen = function () {
        return new Date().getDay() != DataCenter.ins().UnionBossConfig.notOpenDayOfWeek;
    };
    return UnionBossItemRender;
}(BaseItemRender));
__reflect(UnionBossItemRender.prototype, "UnionBossItemRender");
var UnionBossRankItemRender = (function (_super) {
    __extends(UnionBossRankItemRender, _super);
    function UnionBossRankItemRender() {
        var _this = _super.call(this) || this;
        _this.skinName = "UnionBossRankItemSkin";
        return _this;
    }
    UnionBossRankItemRender.prototype.dataChanged = function () {
        this.rank.text = this.data.rank;
        this.playerName.text = this.data.name;
        this.harm.text = this.data.damage;
        var isGet = false;
        var config = DataCenter.ins().UnionBossRankConfig;
        var conf;
        for (var id in config) {
            if (config[id].srank <= this.data.rank && config[id].erank >= this.data.rank) {
                isGet = true;
                this.reward.text = config[id].awards[0].count + "";
                break;
            }
            if (config[id].srank == 0 && config[id].erank == 0)
                conf = config[id];
        }
        if (!isGet) {
            this.reward.text = conf.awards[0].count + "";
        }
    };
    return UnionBossRankItemRender;
}(BaseItemRender));
__reflect(UnionBossRankItemRender.prototype, "UnionBossRankItemRender");
var DailyAwardView = (function (_super) {
    __extends(DailyAwardView, _super);
    function DailyAwardView() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DailyAwardView.prototype.initUI = function () {
        _super.prototype.initUI.call(this);
        this.skinName = "DailyAwardViewSkin";
        this.isTopLevel = true;
        this.list.itemRenderer = ItemBase;
    };
    DailyAwardView.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.addEventTouchTap(this.closeBtn, this.onTap);
        this.addEventTouchTap(this.closeBtn1, this.onTap);
        this.addEventTouchTap(this.sure, this.onTap);
        this.addEventTouchTap(this.bgClose, this.onTap);
        this.list.dataProvider = new eui.ArrayCollection(DataCenter.ins().UnionBattleDayAwardConfig[unionWarControl.getModel().rewardDay].award);
        if (unionWarControl.getModel().getDayReward) {
            this.sure.label = LangMgr.getValueByKey('activitAlreadingGet');
            this.sure.enabled = false;
        }
        else {
            this.sure.label = LangMgr.getValueByKey('activitGet');
            this.sure.enabled = true;
        }
    };
    DailyAwardView.prototype.close = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.removeEventTouchTap(this.closeBtn, this.onTap);
        this.removeEventTouchTap(this.closeBtn1, this.onTap);
        this.removeEventTouchTap(this.sure, this.onTap);
        this.removeEventTouchTap(this.bgClose, this.onTap);
    };
    DailyAwardView.prototype.onTap = function (e) {
        switch (e.currentTarget) {
            case this.closeBtn:
            case this.closeBtn1:
                UIMgr.ins().close(DailyAwardView);
                break;
            case this.sure:
                if (unionWarControl.getModel().getDayReward) {
                    tipsControl.showTips(LangMgr.getValueByKey('guildTips2'));
                    return;
                }
                else if (!unionWarControl.getModel().canGetDay) {
                    tipsControl.showTips(LangMgr.getValueByKey('guildTips3'));
                    return;
                }
                unionWarControl.upDayReward(unionWarControl.getModel().rewardDay);
                UIMgr.ins().close(DailyAwardView);
                break;
            case this.bgClose:
                UIMgr.ins().close(this);
                break;
        }
    };
    return DailyAwardView;
}(BaseEuiView));
__reflect(DailyAwardView.prototype, "DailyAwardView");
var DailyPresidentAwardView = (function (_super) {
    __extends(DailyPresidentAwardView, _super);
    function DailyPresidentAwardView() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DailyPresidentAwardView.prototype.initUI = function () {
        _super.prototype.initUI.call(this);
        this.skinName = "DailyPresidentAwardViewSkin";
        this.list.itemRenderer = ItemBase;
        this.dataArr = new eui.ArrayCollection();
    };
    DailyPresidentAwardView.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.addEventTouchTap(this.bgClose, this.onTap);
        var data1 = DataCenter.ins().UnionBattleConstConfig.occupationAward;
        this.dataArr.source = data1;
        this.list.dataProvider = this.dataArr;
        if (this.fgClose)
            this.addEventTouchEnd(this.fgClose, this.onTap);
    };
    DailyPresidentAwardView.prototype.close = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.removeEventTouchTap(this.bgClose, this.onTap);
    };
    DailyPresidentAwardView.prototype.onTap = function (e) {
        switch (e.currentTarget) {
            case this.fgClose:
            case this.bgClose:
                UIMgr.ins().close(this);
                break;
        }
    };
    return DailyPresidentAwardView;
}(BaseEuiView));
__reflect(DailyPresidentAwardView.prototype, "DailyPresidentAwardView");
var SelectMemberRewardView = (function (_super) {
    __extends(SelectMemberRewardView, _super);
    function SelectMemberRewardView() {
        var _this = _super.call(this) || this;
        _this.dataLen = [];
        _this.uilayer = GameLayer.POPUP;
        return _this;
    }
    SelectMemberRewardView.prototype.initUI = function () {
        _super.prototype.initUI.call(this);
        this.skinName = "SelectMemberRewardViewSkin";
        this.list.itemRenderer = SelectRewardItemRender;
    };
    SelectMemberRewardView.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        unionWarControl.upOwnMyGuildRank();
        this.addEventTouchTap(this.bgClose, this.onTap);
        this.addEventTouchTap(this.sendReward, this.onTap);
        this.addCustomEvent(428 /* UNION_WAR_SEND_LIST_CHANGE */, this.refushList);
        this.refushPanelInfo();
    };
    SelectMemberRewardView.prototype.close = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.removeEventTouchTap(this.bgClose, this.onTap);
        this.removeEventTouchTap(this.sendReward, this.onTap);
        this.removeCustomEvents();
        UIMgr.ins().open(UnionMapView);
    };
    SelectMemberRewardView.prototype.refushPanelInfo = function () {
        this.rankLabel.text = LangMgr.getValueByKey('guildTips18', unionWarControl.getModel().guildWarRank);
        this.dataLen.length = unionWarControl.getModel().getCanSendNumByRank();
        this.refushList();
    };
    SelectMemberRewardView.prototype.refushList = function () {
        this.list.dataProvider = new eui.ArrayCollection(this.dataLen);
    };
    SelectMemberRewardView.prototype.onTap = function (e) {
        var _this = this;
        switch (e.currentTarget) {
            case this.bgClose:
                UIMgr.ins().close(SelectMemberRewardView);
                break;
            case this.sendReward:
                TimerMgr.ins().doTimer(100, 1, function () {
                    if (unionWarControl.getModel().checkISSendAll()) {
                        unionWarControl.upFenReward(_this.dataLen.length, unionWarControl.getModel().sendList);
                    }
                }, this);
                break;
        }
    };
    return SelectMemberRewardView;
}(BaseEuiView));
__reflect(SelectMemberRewardView.prototype, "SelectMemberRewardView");
var SelectMemberView = (function (_super) {
    __extends(SelectMemberView, _super);
    function SelectMemberView() {
        var _this = _super.call(this) || this;
        _this.uilayer = GameLayer.POPUP;
        return _this;
    }
    SelectMemberView.prototype.initUI = function () {
        _super.prototype.initUI.call(this);
        this.skinName = "SelectMemberViewSkin";
        this.list.itemRenderer = MemberItem3Render;
    };
    SelectMemberView.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.index = param[0];
        this.maxNum = param[1];
        this.addEventTouchTap(this.bgClose, this.onTap);
        this.addEventTouchTap(this.list, this.onTap);
        this.addEventTouchTap(this.sureBtn, this.onTap);
        unionWarControl.getModel().sendList[this.index] = [];
        unionWarControl.getModel().sendNumList[this.index] = [];
        this.selectList = [];
        this.numList = [];
        this.selectItemList = [];
        this.chooseNum.text = LangMgr.getValueByKey('guilChoose') + this.countNum() + "/" + this.maxNum;
        this.sureBtn.enabled = this.selectList.length == this.maxNum;
        this.refushList();
    };
    SelectMemberView.prototype.refushList = function () {
        this.list.dataProvider = new eui.ArrayCollection(unionWarControl.getModel().getMyGuildPointRank());
    };
    SelectMemberView.prototype.close = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.removeEventTouchTap(this.bgClose, this.onTap);
        this.removeEventTouchTap(this.list, this.onTap);
        this.removeEventTouchTap(this.sureBtn, this.onTap);
        unionWarControl.dispatchSendListChange();
    };
    SelectMemberView.prototype.countNum = function () {
        var count = 0;
        if (this.selectItemList) {
            for (var k in this.selectItemList) {
                count += this.selectItemList[k].chooseNum;
            }
        }
        return count;
    };
    SelectMemberView.prototype.onTap = function (e) {
        switch (e.currentTarget) {
            case this.bgClose:
                UIMgr.ins().close(SelectMemberView);
                break;
            case this.sureBtn:
                this.toNumList();
                unionWarControl.getModel().sendList[this.index] = this.selectList;
                unionWarControl.getModel().sendNumList[this.index] = this.numList;
                UIMgr.ins().close(SelectMemberView);
                break;
            case this.list:
                var item = e.target.parent;
                if (item && item.data) {
                    var i = this.selectItemList.lastIndexOf(item);
                    switch (e.target) {
                        case item.btn1:
                            --item.chooseNum;
                            if (item.chooseNum < 1) {
                                item.chooseNum = 1;
                            }
                            break;
                        case item.btn2:
                            if (this.countNum() >= this.maxNum) {
                                tipsControl.showTips(LangMgr.getValueByKey('guildTips17'));
                                return;
                            }
                            ++item.chooseNum;
                            break;
                        default:
                            if (i >= 0) {
                                item.checkBoxs.selected = false;
                                item.chooseNum = 0;
                                this.selectItemList.splice(i, 1);
                            }
                            else {
                                if (this.countNum() >= this.maxNum) {
                                    item.checkBoxs.selected = false;
                                    tipsControl.showTips(LangMgr.getValueByKey('guildTips17'));
                                    return;
                                }
                                item.checkBoxs.selected = true;
                                this.selectItemList.push(item);
                                item.chooseNum = 1;
                            }
                    }
                    item.num1.text = item.chooseNum + "";
                    this.setAddInfoShow(item, item.checkBoxs.selected);
                    this.chooseNum.text = LangMgr.getValueByKey('guilChoose') + this.countNum() + "/" + this.maxNum;
                    this.sureBtn.enabled = this.countNum() == this.maxNum;
                }
                break;
        }
    };
    SelectMemberView.prototype.setAddInfoShow = function (item, show) {
        if (show === void 0) { show = false; }
        item.btn1.visible = item.btn2.visible = item.num1.visible = item.inputBg.visible = show;
    };
    SelectMemberView.prototype.toNumList = function () {
        if (this.selectItemList) {
            for (var k in this.selectItemList) {
                this.selectList.push(this.selectItemList[k].data.data);
                this.numList.push(this.selectItemList[k].chooseNum);
            }
        }
    };
    return SelectMemberView;
}(BaseEuiView));
__reflect(SelectMemberView.prototype, "SelectMemberView");
var UnionWarMainView = (function (_super) {
    __extends(UnionWarMainView, _super);
    function UnionWarMainView() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UnionWarMainView.prototype.initUI = function () {
        _super.prototype.initUI.call(this);
        this.isTopLevel = true;
        this.redEff = new GameMovieClip;
        this.enterEff = new GameMovieClip;
        this.titleEff = new GameMovieClip();
        this.skinName = "UnionWarMainViewSkin";
        this.roleEff = new GameMovieClip;
        this.player.addChild(this.roleEff);
    };
    UnionWarMainView.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.addEventTouchTap(this.closeBtn, this.onTap);
        this.addEventTouchTap(this.practiseBtn, this.onTap);
        this.addEventTouchTap(this.redBag, this.onTap);
        this.addEventTouchTap(this.play, this.onTap);
        this.addEventTouchTap(this.practiseBtn2, this.onTap);
        this.addEventTouchTap(this.practiseBtn0, this.onTap);
        this.addEventTouchTap(this.help, this.onTap);
        this.addEventTouchTap(this.practiseBtn1, this.onTap);
        this.addCustomEvent(413 /* UNION_WAR_DAY_REWARD_INFO */, this.refushRewardStatu);
        this.addCustomEvent(421 /* UNION_WAR_RED_POINT */, this.refushRewardStatu);
        this.addCustomEvent(409 /* UNION_WAR_JOIN_PLAY_BACK */, this.refushStartEffect);
        this.practiseBtn1.visible = (unionWarControl.getModel().guildRankList.length > 0 && !unionWarControl.getModel().isWatStart);
        this.refushPanelInfo();
        this.refushStartEffect();
        this.refushTitleEffect();
        this.addCustomEvent(673 /* UNION_HAVE_RED_BAG */, this.updateRedBag);
        this.addCustomEvent(670 /* UNION_DAY_REWARD */, this.updateRedBag);
        this.updateRedBag();
    };
    UnionWarMainView.prototype.updateRedBag = function () {
        this.redBag.visible = UnionRedPoint.ins().redBag;
        this.redPoint0.visible = UnionRedPoint.ins().dayReward;
    };
    UnionWarMainView.prototype.close = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        UIMgr.ins().open(UnionMapView);
    };
    UnionWarMainView.prototype.refushPanelInfo = function () {
        if (unionWarControl.getModel().isWatStart)
            this.openDesc.text = "";
        else
            this.openDesc.text = unionWarControl.getModel().setOpenDesc();
        this.refushRewardStatu();
        this.refushWinGuild();
    };
    UnionWarMainView.prototype.refushStartEffect = function () {
        if (unionWarControl.getModel().isWatStart) {
            this.enterEff.playFile(PATH_EFF + "chargeff1", -1);
            this.enterEff.x = this.play.width >> 1;
            this.enterEff.y = this.play.height >> 1;
            this.play.addChild(this.enterEff);
        }
        else {
            DisplayUtils.removeFromParent(this.enterEff);
        }
    };
    UnionWarMainView.prototype.refushTitleEffect = function () {
        this.titleEff.playFile(PATH_EFF + "chenghaolcbz", -1);
        this.titleGroup.addChild(this.titleEff);
    };
    UnionWarMainView.prototype.refushRewardStatu = function () {
        if (unionWarControl.getModel().canSend || unionWarControl.getModel().canRod) {
            this.redEff.playFile(PATH_EFF + "actIconCircle", -1);
            this.redEff.x = this.redEff.y = 28;
            this.redBag.addChild(this.redEff);
        }
        else {
            DisplayUtils.removeFromParent(this.redEff);
        }
    };
    UnionWarMainView.prototype.refushWinGuild = function () {
        var show = unionWarControl.getModel().winGuildInfo.guildId > 0;
        this.guildOwn.visible = show;
        this.guildName.visible = show;
        this.roleEff.visible = show;
        this.none.visible = !show;
        if (show) {
            var data = unionWarControl.getModel().winGuildInfo;
            this.guildName.text = data.guildName;
            this.guildOwn.text = data.guildOwnName;
            var effstr = data.guildOwnSex == 1 ? "junzhunv" : "junzhunan";
            this.roleEff.playFile(PATH_EFF + effstr, -1);
        }
    };
    UnionWarMainView.prototype.onTap = function (e) {
        switch (e.currentTarget) {
            case this.closeBtn:
                UIMgr.ins().close(UnionWarMainView);
                break;
            case this.practiseBtn:
                UIMgr.ins().open(UnionWarRewardView);
                break;
            case this.redBag:
                if (unionWarControl.getModel().canRod || unionWarControl.getModel().canSend)
                    UIMgr.ins().open(RedBagView);
                else
                    UIMgr.ins().open(RedBagDetailsView);
                break;
            case this.play:
                if (!unionWarControl.getModel().isWatStart) {
                    tipsControl.showTips(LangMgr.getValueByKey('guildTips4'));
                    return;
                }
                UIMgr.ins().close(UnionMapView);
                UIMgr.ins().close(UnionWarMainView);
                unionWarControl.upJoinAc();
                break;
            case this.practiseBtn0:
                UIMgr.ins().open(DailyPresidentAwardView);
                break;
            case this.practiseBtn2:
                UIMgr.ins().open(DailyAwardView);
                break;
            case this.help:
                HelpControl.openHelpWin(8 /* ID_8 */);
                break;
            case this.practiseBtn1:
                UIMgr.ins().open(UnionWarRewardView, 0, 1);
                break;
        }
    };
    return UnionWarMainView;
}(BaseEuiView));
__reflect(UnionWarMainView.prototype, "UnionWarMainView");
var UnionWarMemView = (function (_super) {
    __extends(UnionWarMemView, _super);
    function UnionWarMemView() {
        var _this = _super.call(this) || this;
        _this.uilayer = GameLayer.POPUP;
        return _this;
    }
    UnionWarMemView.prototype.initUI = function () {
        _super.prototype.initUI.call(this);
        this.skinName = "UnionWarMemViewSkin";
        this.list.itemRenderer = UnionWarMemListItemRender;
        this.data = new eui.ArrayCollection();
        this.isTopLevel = true;
    };
    UnionWarMemView.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.list.dataProvider = this.data;
        this.addCustomEvent(430 /* UNION_WAR_MY_RANK_CHANGE */, this.refushList);
        unionWarControl.upOwnMyGuildRank();
        this.addEventTouchTap(this.closeBtn, this.onTap);
        this.addEventTouchTap(this.closeBtn0, this.onTap);
        this.addEventTouchTap(this.bgClose, this.onTap);
    };
    UnionWarMemView.prototype.close = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.removeEventTouchTap(this.closeBtn, this.onTap);
        this.removeEventTouchTap(this.closeBtn0, this.onTap);
        this.removeCustomEvents();
    };
    UnionWarMemView.prototype.refushList = function () {
        this.data.replaceAll(unionWarControl.getModel().myRankList);
    };
    UnionWarMemView.prototype.onTap = function (e) {
        UIMgr.ins().close(UnionWarMemView);
    };
    return UnionWarMemView;
}(BaseEuiView));
__reflect(UnionWarMemView.prototype, "UnionWarMemView");
var UnionWarReliveView = (function (_super) {
    __extends(UnionWarReliveView, _super);
    function UnionWarReliveView() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UnionWarReliveView.prototype.initUI = function () {
        _super.prototype.initUI.call(this);
        this.skinName = "UnionWarReliveViewSkin";
    };
    UnionWarReliveView.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.type = param[0];
        this.sceneIndex = param[1];
        switch (this.type) {
            case 1:
                //进入下个场景
                this.currentState = "switch";
                this.defaultStr = LangMgr.getValueByKey('guildTips14');
                this.s = unionWarControl.getModel().getCdByType(this.type);
                break;
            case 2:
                //复活
                this.currentState = "revive";
                this.defaultStr = LangMgr.getValueByKey('guildTips15');
                this.s = param[1];
                break;
            case 3:
                //退出
                this.currentState = "exit";
                this.defaultStr = LangMgr.getValueByKey('guildTips16');
                this.s = unionWarControl.getModel().getCdByType(this.type);
                break;
        }
        this.addEventTouchTap(this.closeBtn, this.onTap);
        this.timeDown.text = "" + this.s + this.defaultStr;
        TimerMgr.ins().remove(this.updateCloseBtnLabel, this);
        TimerMgr.ins().doTimer(1000, this.s, this.updateCloseBtnLabel, this);
        this.refushMapInfo();
    };
    UnionWarReliveView.prototype.close = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.removeEventTouchTap(this.closeBtn, this.onTap);
        TimerMgr.ins().remove(this.updateCloseBtnLabel, this);
        if (this.type != 1) {
            unionWarControl.getModel().killName = "";
        }
    };
    UnionWarReliveView.prototype.refushMapInfo = function () {
        if (this.type == 1) {
            this.mapName.text = unionWarControl.getModel().getNextMapName(this.sceneIndex);
        }
        else if (this.type == 2) {
            this.killName.text = LangMgr.getValueByKey('bossFinghtLoss', unionWarControl.getModel().killName);
            this.guildName.text = LangMgr.getValueByKey('guildBelongClud', unionWarControl.getModel().killGuild);
        }
    };
    UnionWarReliveView.prototype.updateCloseBtnLabel = function () {
        this.s--;
        if (this.s <= 0) {
            if (this.type == 1) {
                unionWarControl.upPlayNextMap(this.sceneIndex);
            }
            if (this.type == 3) {
                copyControl.upExitFb();
            }
            UIMgr.ins().close(UnionWarReliveView);
        }
        this.timeDown.text = "" + this.s + this.defaultStr;
    };
    UnionWarReliveView.prototype.onTap = function (e) {
        switch (e.currentTarget) {
            case this.closeBtn:
                UIMgr.ins().close(UnionWarReliveView);
                break;
        }
    };
    return UnionWarReliveView;
}(BaseEuiView));
__reflect(UnionWarReliveView.prototype, "UnionWarReliveView");
var UnionWarResultView = (function (_super) {
    __extends(UnionWarResultView, _super);
    function UnionWarResultView() {
        var _this = _super.call(this) || this;
        _this.uilayer = GameLayer.POPUP;
        return _this;
    }
    UnionWarResultView.prototype.initUI = function () {
        _super.prototype.initUI.call(this);
        this.isTopLevel = true;
        this.skinName = "UnionWarResultViewSkin";
        this.closeBtn.label = LangMgr.getValueByKey('babelEnter');
        this.list1.itemRenderer = ItemBase;
        this.list2.itemRenderer = ItemBase;
    };
    UnionWarResultView.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.guildName.text = param[0] == "" ? LangMgr.getValueByKey('clanEmptyJob') : param[0];
        this.myPoint.text = param[1] + "";
        this.guildPoint.text = "" + param[2];
        this.guildRank.text = LangMgr.getValueByKey('ranking', param[3]);
        this.myRank.text = param[4] > 0 ? LangMgr.getValueByKey('ranking', param[4]) : LangMgr.getValueByKey('guanNoRank');
        var pointReward = unionWarControl.getModel().getRewardByPoint(param[1]);
        var pointRank = unionWarControl.getModel().getMyPointRankReward(param[4]);
        this.list1.dataProvider = new eui.ArrayCollection(pointRank.concat(pointReward));
        this.list2.dataProvider = new eui.ArrayCollection(unionWarControl.getModel().creatGuildRankReward(param[3]));
        this.s = 10;
        this.addEventTouchTap(this.closeBtn, this.onTap);
    };
    UnionWarResultView.prototype.close = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.removeEventTouchTap(this.closeBtn, this.onTap);
    };
    UnionWarResultView.prototype.onTap = function () {
        UIMgr.ins().close(UnionWarResultView);
    };
    return UnionWarResultView;
}(BaseEuiView));
__reflect(UnionWarResultView.prototype, "UnionWarResultView");
var UnionWarRewardView = (function (_super) {
    __extends(UnionWarRewardView, _super);
    function UnionWarRewardView() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = 0;
        return _this;
    }
    UnionWarRewardView.prototype.initUI = function () {
        _super.prototype.initUI.call(this);
        this.skinName = "UnionWarRewardViewSkin";
        this.isTopLevel = true;
    };
    UnionWarRewardView.prototype.addPanelList = function () {
        this.guildInteRankInfo = new UnionInteRankInfoPanel();
        this.viewStack.addChild(this.guildInteRankInfo);
        this.personalInteRankInfo = new PersonalInteRankInfoPanel();
        this.viewStack.addChild(this.personalInteRankInfo);
        this.guildInteRewardInfo = new UnionInteRewardInfoPanel();
        this.viewStack.addChild(this.guildInteRewardInfo);
        this.personInteRewardInfo = new PersonInteRewardInfoPanel();
        this.viewStack.addChild(this.personInteRewardInfo);
        this.cruPanel = this.viewStack.getChildAt(0);
        this.tab.dataProvider = this.viewStack;
    };
    UnionWarRewardView.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        if (param && param[1]) {
            this.type = param[1];
        }
        this.addPanelList();
        if (param && param[0])
            this.viewStack.selectedIndex = param[0];
        else
            this.viewStack.selectedIndex = 0;
        this.addEventTouchTap(this.closeBtn, this.onTap);
        this.addEventTouchTap(this.closeBtn0, this.onTap);
        this.addEventChange(this.tab, this.onTabTouch);
        this.cruPanel.open();
    };
    UnionWarRewardView.prototype.close = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.removeEventTouchTap(this.closeBtn, this.onTap);
        this.removeEventTouchTap(this.closeBtn0, this.onTap);
        this.cruPanel.close();
        this.viewStack.removeChildren();
        this.type = 0;
    };
    UnionWarRewardView.prototype.onTap = function (e) {
        switch (e.currentTarget) {
            case this.closeBtn:
            case this.closeBtn0:
                UIMgr.ins().close(UnionWarRewardView);
                break;
        }
    };
    UnionWarRewardView.prototype.onTabTouch = function (e) {
        if (this.cruPanel) {
            this.cruPanel.close();
        }
        this.cruPanel = this.viewStack.selectedChild;
        this.cruPanel.open();
    };
    return UnionWarRewardView;
}(BaseEuiView));
__reflect(UnionWarRewardView.prototype, "UnionWarRewardView");
var UnionWarRulesView = (function (_super) {
    __extends(UnionWarRulesView, _super);
    function UnionWarRulesView() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UnionWarRulesView.prototype.initUI = function () {
        _super.prototype.initUI.call(this);
        this.skinName = "UnionWarRulesViewSkin";
        this.isTopLevel = true;
    };
    UnionWarRulesView.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.addEventTouchTap(this.bigBg, this.onTap);
        this.addEventTouchTap(this.bg, this.onTap);
        this.addEventTouchTap(this.attr, this.onTap);
        this.addEventTouchTap(this.leftBtn, this.onTap);
        this.addEventTouchTap(this.rightBtn, this.onTap);
        this.cruIndex = unionWarControl.getModel().getMapLevelInfo().id;
        this.refushInfo();
    };
    UnionWarRulesView.prototype.close = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.removeEventTouchTap(this.bigBg, this.onTap);
        this.removeEventTouchTap(this.bg, this.onTap);
        this.removeEventTouchTap(this.attr, this.onTap);
        this.removeEventTouchTap(this.leftBtn, this.onTap);
        this.removeEventTouchTap(this.rightBtn, this.onTap);
    };
    UnionWarRulesView.prototype.refushInfo = function () {
        var data = DataCenter.ins().UnionBattleLvConfig;
        var info = data[this.cruIndex];
        this.mapName.text = info.name;
        this.attr.textFlow = TextUtils.generateTextFlow(info.help);
        this.rightBtn.visible = this.cruIndex < 4;
        this.leftBtn.visible = this.cruIndex > 1;
    };
    UnionWarRulesView.prototype.onTap = function (e) {
        switch (e.currentTarget) {
            case this.leftBtn:
                --this.cruIndex;
                this.refushInfo();
                break;
            case this.rightBtn:
                ++this.cruIndex;
                this.refushInfo();
                break;
            case this.bigBg:
                UIMgr.ins().close(UnionWarRulesView);
                break;
            default:
                UIMgr.ins().close(UnionWarRulesView);
        }
    };
    return UnionWarRulesView;
}(BaseEuiView));
__reflect(UnionWarRulesView.prototype, "UnionWarRulesView");
var UnionWarTipsView = (function (_super) {
    __extends(UnionWarTipsView, _super);
    function UnionWarTipsView() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UnionWarTipsView.prototype.initUI = function () {
        _super.prototype.initUI.call(this);
        this.skinName = "GameTipsSkin";
        this.isTopLevel = true;
    };
    UnionWarTipsView.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.addEventTouchTap(this, this.onTap);
    };
    UnionWarTipsView.prototype.close = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.removeEventTouchTap(this, this.onTap);
    };
    UnionWarTipsView.prototype.onTap = function (e) {
        UIMgr.ins().close(UnionWarTipsView);
    };
    return UnionWarTipsView;
}(BaseEuiView));
__reflect(UnionWarTipsView.prototype, "UnionWarTipsView");
var UnionWarUiInfoView = (function (_super) {
    __extends(UnionWarUiInfoView, _super);
    function UnionWarUiInfoView() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UnionWarUiInfoView.prototype.initUI = function () {
        _super.prototype.initUI.call(this);
        this.skinName = "UnionWarUiInfoViewSkin";
        this.clickEffc = new GameMovieClip;
        this.pointEff = new GameMovieClip;
        this.pointEff.x = 61;
        this.pointEff.y = 34;
        this.list1.itemRenderer = UnionWarMemberHeadItemRender;
        this.list2.itemRenderer = UnionWarMemberHeadItemRender;
        this.sceneBar.maximum = 300;
        this.sceneBar.labelFunction = function () {
            return "";
        };
        this.bloodBar1.slideDuration = 0;
        this.bloodBar.labelDisplay.visible = false;
    };
    UnionWarUiInfoView.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.addEventTouchTap(this.Nextchengnei, this.onTap);
        this.addEventTouchTap(this.Nextchengnei0, this.onTap);
        this.addEventTouchTap(this.Nextdianqian, this.onTap);
        this.addEventTouchTap(this.Nexthuanggong, this.onTap);
        this.addCustomEvent(353 /* ENTER_MAP */, this.refushShowInfo);
        this.addCustomEvent(410 /* UNION_WAR_POINT_UPDATE */, this.refushPoint);
        this.addCustomEvent(424 /* UNION_WAR_POINT_REWARD_CHANGE */, this.refushPointReward);
        this.addEventTouchTap(this.seeRank, this.onTap);
        this.addCustomEvent(412 /* UNION_WAR_CITY_OWN */, this.cityOwnChange);
        this.addEventTouchTap(this.seeMyGuild, this.onTap);
        this.addCustomEvent(420 /* UNION_WAR_THREATEN_CHANGE */, this.refushWeixieList);
        this.addCustomEvent(425 /* UNION_WAR_CAN_PLAY_CHANGE */, this.refushcanPlayList);
        this.addEventTouchTap(this.list1, this.listTap);
        this.addEventTouchTap(this.list2, this.listTap);
        this.addEventTouchTap(this.btn, this.onTap);
        this.addEventTouchTap(this.palaceFlag, this.onTap);
        this.addEventTouchTap(this.help, this.onTap);
        this.addEventTouchTap(this.mon, this.onTap);
        this.addEventTouchTap(this.guid2, this.onTap);
        this.addEventTouchTap(this.taskTraceBtn, this.onTap);
        this.addCustomEvent(414 /* UNION_WAR_FLAG_INFO_CHANGE */, this.refushFlagStatu);
        this.addCustomEvent(415 /* UNION_WAR_SHIELD */, this.hudunChange);
        this.addCustomEvent(426 /* UNION_WAR_RANK_LIST */, this.rankListChange);
        this.addCustomEvent(427 /* UNION_WAR_NUM */, this.refushGuildNum);
        this.addCustomEvent(409 /* UNION_WAR_JOIN_PLAY_BACK */, this.doorStatuChange);
        this.addCustomEvent(422 /* UNION_WAR_KILL_HUMAN */, this.showSkill);
        this.addCustomEvent(472 /* ENTITY_HP_CHANGE */, this.updateHP);
        this.addCustomEvent(363 /* CHANGE_TARGET */, this.updateTarget);
        this.addEventTouchTap(this.ruleDesc, this.onTap);
        this.belongGroup.visible = false;
        this.ruleDesc.textFlow = new egret.HtmlTextParser().parser(LangMgr.getValueByKey('guilPlayFunc'));
        this.refushShowInfo();
        this.refushPoint();
        this.cityOwnChange();
        this.refushWeixieList();
        this.refushcanPlayList();
        this.rankListChange();
        this.doorStatuChange();
        this.refushFlagStatu();
        this.refushGuildNum();
    };
    UnionWarUiInfoView.prototype.close = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        if (UIMgr.ins().isShow("UnionWarReliveView")) {
            UIMgr.ins().close("UnionWarReliveView");
        }
        if (UIMgr.ins().isShow("TargetPlayerBigBloodView")) {
            UIMgr.ins().close("TargetPlayerBigBloodView");
        }
        this.currAttackHandle = 0;
        TimerMgr.ins().removeAll(this);
        DisplayUtils.removeFromParent(this.clickEffc);
        DisplayUtils.removeFromParent(this.pointEff);
        this.clearRendererItem();
    };
    UnionWarUiInfoView.prototype.refushShowInfo = function () {
        this.gongxun.visible = unionWarControl.getModel().checkinAppoint(2);
        this.mon.visible = unionWarControl.getModel().checkinAppoint(2);
        this.bar1.y = this.mon.visible ? 99 : 30;
        this.flagGroup.visible = unionWarControl.getModel().checkinAppoint(4);
        this.flag.visible = unionWarControl.getModel().checkinAppoint(4);
        this.flag.y = 103;
        this.scene.text = unionWarControl.getModel().getNextMapName(0);
        this.guid.visible = (unionWarControl.getModel().checkinAppoint(2) && unionWarControl.getModel().getIntoNextMapGongxun() > unionWarControl.getModel().gongXun);
        if (this.guid.visible) {
            this.clickEffc.playFile(PATH_EFF + "tapCircle");
            this.clickEffc.x = this.guid.x - 23;
            this.clickEffc.y = this.guid.y + this.guid.height / 2 - 5;
            this.addChild(this.clickEffc);
        }
        else {
            DisplayUtils.removeFromParent(this.clickEffc);
        }
        var cruInfo = unionWarControl.getModel().getMapLevelInfo();
        this.sceneBar.value = (cruInfo.id - 1) * 100;
        this.weijihuo1.visible = !(cruInfo.id >= 1);
        this.jihuo1.visible = cruInfo.id >= 1;
        this.weijihuo2.visible = !(cruInfo.id >= 2);
        this.jihuo2.visible = cruInfo.id >= 2;
        this.weijihuo3.visible = !(cruInfo.id >= 3);
        this.jihuo3.visible = cruInfo.id >= 3;
        this.hgweijihuo.visible = !(cruInfo.id >= 4);
        this.hgjh.visible = cruInfo.id >= 4;
        this.Nextdianqian.visible = false;
        this.Nextchengnei.visible = cruInfo.id == 1;
        this.Nexthuanggong.visible = cruInfo.id == 3;
        this.Nextchengnei0.visible = cruInfo.id == 3;
        if (cruInfo.id == 4) {
            this.Nextdianqian.visible = true;
        }
        this.refreshLastTime();
        TimerMgr.ins().doTimer(1000, unionWarControl.getModel().acEndTime, this.refreshLastTime, this);
    };
    UnionWarUiInfoView.prototype.refreshLastTime = function () {
        this.lastTime.text = DateUtils.getFormatTimeByStyle(unionWarControl.getModel().acEndTime, DateUtils.STYLE_4);
    };
    UnionWarUiInfoView.prototype.refushGuildNum = function () {
        this.comNum.text = unionWarControl.getModel().guildNum + LangMgr.getValueByKey('guilPeople');
    };
    UnionWarUiInfoView.prototype.refushPoint = function () {
        this.guildPoint.text = unionWarControl.getModel().guildPoint + ""; //帮派积分
        this.ownPoint.text = unionWarControl.getModel().ownPoint + ""; //个人积分
        this.point.text = unionWarControl.getModel().gongXun + "/" + unionWarControl.getModel().getIntoNextMapGongxun(); //功勋值	
        var cruInfo = unionWarControl.getModel().getMapLevelInfo();
        if (unionWarControl.getModel().gongXun >= unionWarControl.getModel().getIntoNextMapGongxun()) {
            if (cruInfo.id == 2) {
                this.Nextdianqian.visible = true;
                this.point.visible = false;
                this.gongxun.visible = false;
            }
        }
        else {
            if (cruInfo.id != 4) {
                this.Nextdianqian.visible = false;
                this.point.visible = true;
            }
        }
        this.refushPointReward();
        this.doorStatuChange();
    };
    UnionWarUiInfoView.prototype.refushPointReward = function () {
        var info = unionWarControl.getModel().getMyPointReward();
        if (info) {
            this.taskTraceName0.y = 16;
            var str = LangMgr.getValueByKey('guilScoreAim') + "\r" + unionWarControl.getModel().ownPoint + "/" + info.integral;
            str += unionWarControl.getModel().pointInfo.isCan ? StringUtils.addColor(LangMgr.getValueByKey('guilFinsh'), '#35e62d') : "";
            this.taskTraceName0.textFlow = new egret.HtmlTextParser().parser(str);
            var itemData = info.award[0];
            if (unionWarControl.getModel().pointInfo.isCan) {
                this.taskTraceBtn.visible = true;
                this.pointEff.playFile(PATH_EFF + "actIconCircle", -1);
                this.taskTraceBtn.addChild(this.pointEff);
            }
            else {
                DisplayUtils.removeFromParent(this.pointEff);
            }
        }
        else {
            this.taskTraceAwards0.visible = false;
            DisplayUtils.removeFromParent(this.pointEff);
            this.taskTraceBtn.visible = false;
        }
        this.scorePoint.visible = this.pointEff.parent ? true : false;
    };
    UnionWarUiInfoView.prototype.cityOwnChange = function () {
        this.guildName.text = unionWarControl.getModel().cityOwn == "" ? LangMgr.getValueByKey('clanEmptyJob') : unionWarControl.getModel().cityOwn; //皇宫归属
    };
    UnionWarUiInfoView.prototype.refushWeixieList = function (refushPlayList) {
        if (refushPlayList === void 0) { refushPlayList = 0; }
        this.list2.dataProvider = new eui.ArrayCollection(unionWarControl.getModel().weixieList);
        if (refushPlayList == 1) {
            this.refushcanPlayList();
        }
        this.weixie.visible = unionWarControl.getModel().checkinAppoint(2, true) && unionWarControl.getModel().weixieList.length > 0;
    };
    UnionWarUiInfoView.prototype.refushcanPlayList = function (data) {
        data = data || unionWarControl.getModel().canPlayList;
        this.list1.dataProvider = new eui.ArrayCollection(data);
        this.attList.visible = unionWarControl.getModel().checkinAppoint(2, true) && (data.length > 0 || this.mon.visible);
    };
    UnionWarUiInfoView.prototype.doorStatuChange = function () {
        this.Nextchengnei.enabled = unionWarControl.getModel().doorDie;
    };
    UnionWarUiInfoView.prototype.rankListChange = function () {
        var dataList = unionWarControl.getModel().rankList;
        var info;
        for (var i = 0; i < 3; i++) {
            info = dataList[i];
            if (info) {
                this["rankName" + (i + 1)].text = info.name;
                this["rankPoint" + (i + 1)].text = info.point + "";
            }
            else {
                this["rankName" + (i + 1)].text = LangMgr.getValueByKey('notAvailable');
                this["rankPoint" + (i + 1)].text = "0";
            }
        }
    };
    //刷新旗子的状态
    UnionWarUiInfoView.prototype.refushFlagStatu = function () {
        TimerMgr.ins().remove(this.runTime, this);
        this.hudun1.visible = false;
        if (unionWarControl.getModel().flagStatu == 0) {
            this.clearTimeBar();
            this.runTime();
            TimerMgr.ins().doTimer(1000, unionWarControl.getModel().endTime, this.runTime, this);
        }
        else if (unionWarControl.getModel().flagStatu == 1) {
            this.clearTimeBar();
            this.timeDesc.text = LangMgr.getValueByKey('guilCanGetHQ');
        }
        else {
            this.runTime();
            this.bloodBar.maximum = DataCenter.ins().UnionBattleConstConfig.gatherTime;
            TimerMgr.ins().doTimer(1000, unionWarControl.getModel().endTime, this.runTime, this);
            this.hudun1.visible = true;
        }
        this.palaceFlag.enabled = unionWarControl.getModel().flagStatu == 1;
        //增加显示效果
        this.flagStatu.visible = (unionWarControl.getModel().flagStatu == 2 && !this.flagGroup.visible);
        if (this.flagStatu.visible) {
            var t = egret.Tween.get(this.flagStatu);
            this.flagStatu.x = 480;
            t.to({ "x": 106 }, 500).call(function () {
            }, this);
        }
    };
    UnionWarUiInfoView.prototype.clearTimeBar = function () {
        this.bloodBar.maximum = 0;
        this.bloodBar.value = 0;
        this.bloodBar.labelFunction = function () {
            return "";
        };
    };
    UnionWarUiInfoView.prototype.hudunChange = function (n) {
        this.hudun.maximum = n[1];
        this.hudun.value = n[0];
        this.hudun.labelFunction = function () {
            return Math.ceil(n[0] * 100 / n[1]) + "%";
        };
    };
    UnionWarUiInfoView.prototype.runTime = function () {
        --unionWarControl.getModel().endTime;
        if (unionWarControl.getModel().endTime >= 0) {
            if (unionWarControl.getModel().flagStatu != 2) {
                if (this.timeDesc) {
                    this.timeDesc.text = LangMgr.getValueByKey('guildTips5', Math.floor(unionWarControl.getModel().endTime / 60), unionWarControl.getModel().endTime % 60);
                }
            }
            else {
                if (this.timeDesc) {
                    this.timeDesc.text = LangMgr.getValueByKey('guildTips6', unionWarControl.getModel().flagName);
                }
                this.bloodBar.value = unionWarControl.getModel().endTime;
                this.bloodBar.labelFunction = function () {
                    return LangMgr.getValueByKey('guildTips7', Math.floor(unionWarControl.getModel().endTime / 60), unionWarControl.getModel().endTime % 60);
                };
                if (this.flagStatu.visible) {
                    var str = LangMgr.getValueByKey('guildTips8', unionWarControl.getModel().flagName, Math.floor(unionWarControl.getModel().endTime / 60), unionWarControl.getModel().endTime % 60);
                    if (this.flagTime) {
                        this.flagTime.textFlow = new egret.HtmlTextParser().parser(str);
                    }
                    if (this.guildName1) {
                        this.guildName1.text = LangMgr.getValueByKey('auctionPart1') + unionWarControl.getModel().flagGuild;
                    }
                }
            }
        }
        if (unionWarControl.getModel().endTime <= 0) {
            TimerMgr.ins().remove(this.runTime, this);
        }
    };
    UnionWarUiInfoView.prototype.onTap = function (e) {
        switch (e.currentTarget) {
            case this.Nextchengnei:
            case this.Nextchengnei0:
            case this.Nextdianqian:
            case this.Nexthuanggong:
                if (unionWarControl.getModel().killName != "") {
                    tipsControl.showTips(LangMgr.getValueByKey('guildTips9'));
                    return;
                }
                if (unionWarControl.getModel().getIntoNextMapGongxun() > unionWarControl.getModel().gongXun) {
                    tipsControl.showTips(LangMgr.getValueByKey('guildTips10'));
                    return;
                }
                if (!unionWarControl.getModel().doorDie) {
                    tipsControl.showTips(LangMgr.getValueByKey('guildTips11'));
                    return;
                }
                var index = 1; //场景索引
                if (e.currentTarget == this.Nextchengnei || e.currentTarget == this.Nextchengnei0) {
                    index = 2;
                }
                else if (e.currentTarget == this.Nextdianqian) {
                    index = 3;
                }
                else if (e.currentTarget == this.Nexthuanggong) {
                    index = 4;
                }
                UIMgr.ins().open(UnionWarReliveView, 1, index);
                break;
            case this.seeRank:
                UIMgr.ins().open(UnionWarRewardView);
                break;
            case this.seeMyGuild:
                UIMgr.ins().open(UnionWarMemView);
                break;
            case this.btn:
                if (this.btn.currentState == "down") {
                    this.refushcanPlayList([]);
                }
                else {
                    this.refushcanPlayList();
                }
                break;
            case this.palaceFlag:
                //去采集旗子
                if (unionWarControl.getModel().flagStatu != 0) {
                    unionWarControl.upStartGetFlag();
                }
                else {
                    tipsControl.showTips(LangMgr.getValueByKey('guildTips12'));
                }
                break;
            case this.mon:
                this.clickEffc.playFile(PATH_EFF + "tapCircle", 1);
                this.addChild(this.clickEffc);
                gameControl.dispatchChangeAttrPoint(0);
                this.guid.visible = false;
                break;
            case this.help:
                HelpControl.openHelpWin(7 /* ID_7 */);
                break;
            case this.taskTraceBtn:
                if (unionWarControl.getModel().pointInfo.isCan)
                    unionWarControl.upPointReward();
                break;
            case this.guid2:
                UIMgr.ins().open(UnionWarTipsView);
                break;
        }
    };
    UnionWarUiInfoView.prototype.listTap = function (e) {
        if (e.target.parent instanceof UnionWarMemberHeadItemRender) {
            var item_1 = e.target.parent;
            item_1.showEffect();
            //点击间隔
            if (!unionWarControl.getModel().canClick) {
                return;
            }
            if (unionWarControl.getModel().flagAcId == ActorControl.actorID) {
                warnControl.show(LangMgr.getValueByKey('guildTips13'), function () {
                    gameControl.dispatchChangeAttrPoint(item_1.data);
                    UnitShowMgr.ins().showHideSomeOne(item_1.data);
                }, this);
                return;
            }
            gameControl.dispatchChangeAttrPoint(item_1.data);
            if (this.guid.visible) {
                DisplayUtils.removeFromParent(this.clickEffc);
            }
            this.guid.visible = false;
            if (!(unionWarControl.getModel().attHandle == item_1.data))
                UnitShowMgr.ins().showHideSomeOne(item_1.data);
        }
    };
    UnionWarUiInfoView.prototype.clearRendererItem = function () {
        var len = this.list1.numChildren;
        for (var index = 0; index < len; index++) {
            var item = this.list1.getChildAt(index);
            item.clearEffect();
        }
        len = this.list2.numChildren;
        for (var index = 0; index < len; index++) {
            var item = this.list2.getChildAt(index);
            item.clearEffect();
        }
    };
    UnionWarUiInfoView.prototype.showSkill = function (value) {
        if (!value) {
            egret.Tween.removeTweens(this.lzlabel);
            egret.Tween.removeTweens(this.skillGroup);
            this.skillGroup.visible = false;
            return;
        }
        if (this.skillGroup.visible) {
            egret.Tween.removeTweens(this.lzlabel);
            egret.Tween.removeTweens(this.skillGroup);
        }
        this.skillGroup.visible = true;
        this.skillGroup.alpha = 1;
        this.lzlabel.scaleX = this.lzlabel.scaleY = 1;
        this.lzlabel.text = value + "";
        var self = this;
        egret.Tween.get(this.lzlabel).to({ scaleX: 2, scaleY: 2 }, 200).to({ scaleX: 1, scaleY: 1 }, 100).call(function () {
            egret.Tween.get(self.skillGroup).wait(1000).to({ alpha: 0 }, 1000).call(function () {
                egret.Tween.removeTweens(self.lzlabel);
                egret.Tween.removeTweens(self.skillGroup);
                self.skillGroup.visible = false;
            });
        });
    };
    /**变换攻击目标*/
    UnionWarUiInfoView.prototype.updateTarget = function () {
        var cruInfo = unionWarControl.getModel().getMapLevelInfo();
        if (cruInfo.id == 1) {
            this.belongGroup.visible = false;
        }
        else {
            this.belongGroup.visible = true;
        }
        if (gameControl.currAttackHandle == 0) {
            this.belongGroup.visible = false;
        }
        if (gameControl.currAttackHandle != 0 && this.currAttackHandle != gameControl.currAttackHandle) {
            this.currAttackHandle = gameControl.currAttackHandle;
            var mainRoleInfo = void 0;
            var roleList = UnitMgr.ins().getEntitysBymasterhHandle(this.currAttackHandle, 1 /* ROLE */);
            if (roleList && roleList.length > 0) {
                mainRoleInfo = roleList[0].infoModel;
                var tname = mainRoleInfo.name;
                var strlist = tname.split("\n");
                if (strlist[1])
                    tname = strlist[1];
                else
                    tname = strlist[0];
                this.belongNameTxt0.textFlow = TextUtils.generateTextFlow(tname);
                this.roleHead0.source = "yuanhead" + mainRoleInfo.job + mainRoleInfo.sex;
                this.changeHp();
            }
        }
        if (this.belongGroup.visible) {
            this.changeHp();
        }
    };
    /**更新敌方血量*/
    UnionWarUiInfoView.prototype.updateHP = function (param) {
        var targetRole = param[0];
        var sourceRole = param[1];
        var type = param[2];
        var value = param[3];
        if (targetRole && targetRole.infoModel.masterHandle == this.currAttackHandle) {
            this.changeHp();
        }
    };
    UnionWarUiInfoView.prototype.changeHp = function () {
        var roleList = UnitMgr.ins().getEntitysBymasterhHandle(this.currAttackHandle, 1 /* ROLE */);
        if (roleList && roleList.length > 0) {
            var len = roleList.length;
            var hpValue = 0;
            var hpTotal = 0;
            var neigongValue = 0;
            var neigongTotal = 0;
            for (var i = 0; i < len; i++) {
                var role = roleList[i];
                if (role) {
                    var curHp = role.infoModel.getAtt(0 /* atHp */) || 0;
                    var maxHp = role.infoModel.getAtt(2 /* atMaxHp */) || 0;
                    hpValue += curHp;
                    hpTotal += maxHp;
                    var curNeigong = role.infoModel.getAtt(25 /* cruNeiGong */) || 0;
                    var maxNeigong = role.infoModel.getAtt(26 /* maxNeiGong */) || 0;
                    neigongValue += curNeigong;
                    neigongTotal += maxNeigong;
                }
            }
            this.neigongBar1.maximum = neigongTotal;
            this.neigongBar1.value = neigongValue;
            this.bloodBar1.maximum = hpTotal;
            this.bloodBar1.value = hpValue;
            if (hpValue <= 0) {
                this.belongGroup.visible = false;
            }
        }
    };
    return UnionWarUiInfoView;
}(BaseEuiView));
__reflect(UnionWarUiInfoView.prototype, "UnionWarUiInfoView");
var MemberItem3Render = (function (_super) {
    __extends(MemberItem3Render, _super);
    function MemberItem3Render() {
        var _this = _super.call(this) || this;
        _this.chooseNum = 1;
        _this.skinName = "MemberItem3Skin";
        return _this;
    }
    MemberItem3Render.prototype.dataChanged = function () {
        if (this.data instanceof SelectInfoData) {
            var info = this.data;
            this.job.textFlow = new egret.HtmlTextParser().parser("[" + LangMgr.getValueByKey("officeName" + info.data.office) + "]");
            this.nameLable.text = info.data.name;
            this.payNum.text = "" + info.num;
            this.attr.text = "" + info.data.attack;
            this.face.source = "head_" + info.data.job + info.data.sex;
            this.headBg.source = "touxiangkuang" + info.data.sex;
        }
        this.checkBoxs.selected = false;
        this.btn1.visible = this.btn2.visible = this.num1.visible = this.inputBg.visible = false;
    };
    return MemberItem3Render;
}(BaseItemRender));
__reflect(MemberItem3Render.prototype, "MemberItem3Render");
var PersonRewardItemRender = (function (_super) {
    __extends(PersonRewardItemRender, _super);
    function PersonRewardItemRender() {
        var _this = _super.call(this) || this;
        _this.skinName = "PersonRewardItemSkin";
        _this.itemList.itemRenderer = ItemBase;
        return _this;
    }
    PersonRewardItemRender.prototype.dataChanged = function () {
        this.desc.text = +this.data.integral + "";
        this.itemList.dataProvider = new eui.ArrayCollection(this.data.award);
    };
    return PersonRewardItemRender;
}(BaseItemRender));
__reflect(PersonRewardItemRender.prototype, "PersonRewardItemRender");
var SelectRewardItemRender = (function (_super) {
    __extends(SelectRewardItemRender, _super);
    function SelectRewardItemRender() {
        var _this = _super.call(this) || this;
        _this.index = 0;
        _this.skinName = "SelectRewardItemSkin";
        _this.list.itemRenderer = UnionWarMemberHeadItemRender;
        _this.addEventTouchTap(_this.leftBtn, _this.onTap);
        _this.addEventTouchTap(_this.rightBtn, _this.onTap);
        _this.addEventTouchTap(_this.choosePeople, _this.onTap);
        return _this;
    }
    SelectRewardItemRender.prototype.dataChanged = function () {
        var reward = unionWarControl.getModel().creatGuildRankReward(unionWarControl.getModel().guildWarRank, this.itemIndex);
        this.goods.data = reward[0];
        this.boxname.text = DataCenter.ins().ItemConfig[reward[0].id].name;
        this.sendNum = unionWarControl.getModel().getCanSendNumByRank(this.itemIndex);
        var data = unionWarControl.getModel().getSelectDataByIndex(this.itemIndex);
        var count = 0;
        if (data.length > 0) {
            for (var k in data) {
                count += data[k].num;
            }
        }
        this.chooseNum.text = count + "/" + this.sendNum;
        this.list.dataProvider = new eui.ArrayCollection(data);
    };
    SelectRewardItemRender.prototype.onTap = function (e) {
        switch (e.currentTarget) {
            case this.choosePeople:
                unionWarControl.getModel().rewardIndex = this.itemIndex;
                UIMgr.ins().open(SelectMemberView, this.itemIndex, this.sendNum);
                break;
            case this.rightBtn:
                var gap = this.list.layout['gap'];
                if (this.list.numChildren <= 0)
                    return;
                var dis = this.list.getChildAt(0);
                if (!dis)
                    return;
                var step = dis.width + gap;
                var showNum = Math.ceil(this.list.width / step);
                this.index = Math.ceil(this.list.scrollH / step);
                if (this.index + showNum >= this.list.numElements)
                    return;
                this.index++;
                egret.Tween.removeTweens(this.list);
                var t = egret.Tween.get(this.list);
                t.to({ scrollH: step * this.index }, 100);
                break;
            case this.leftBtn:
                gap = this.list.layout['gap'];
                if (this.list.numChildren <= 0)
                    return;
                dis = this.list.getChildAt(0);
                if (!dis)
                    return;
                step = dis.width + gap;
                showNum = Math.ceil(this.list.width / step);
                this.index = Math.ceil(this.list.scrollH / step);
                if (this.index <= 0)
                    return;
                this.index--;
                egret.Tween.removeTweens(this.list);
                t = egret.Tween.get(this.list);
                t.to({ scrollH: step * this.index }, 100);
                break;
        }
    };
    return SelectRewardItemRender;
}(BaseItemRender));
__reflect(SelectRewardItemRender.prototype, "SelectRewardItemRender");
var UnionInteRankItemRender = (function (_super) {
    __extends(UnionInteRankItemRender, _super);
    function UnionInteRankItemRender() {
        var _this = _super.call(this) || this;
        _this.skinName = "UnionInteRankItemSkin";
        return _this;
    }
    UnionInteRankItemRender.prototype.dataChanged = function () {
        this.rank.text = (this.itemIndex + 1) + "";
        this.guildName.text = this.data.guildName;
        this.guildOwn.text = this.data.ownName;
        this.point.text = this.data.guildPoint;
    };
    return UnionInteRankItemRender;
}(BaseItemRender));
__reflect(UnionInteRankItemRender.prototype, "UnionInteRankItemRender");
var UnionInteRewardItemRender = (function (_super) {
    __extends(UnionInteRewardItemRender, _super);
    function UnionInteRewardItemRender() {
        var _this = _super.call(this) || this;
        _this.skinName = "UnionInteRewardItemSkin";
        _this.list.itemRenderer = ItemBase;
        return _this;
    }
    UnionInteRewardItemRender.prototype.dataChanged = function () {
        if (this.itemIndex < 3) {
            this.numImg.visible = true;
            this.rankLabel.visible = false;
            this.numImg.source = "guildpaihang" + (this.itemIndex + 1);
        }
        else {
            this.numImg.visible = false;
            this.rankLabel.visible = true;
            this.rankLabel.text = LangMgr.getValueByKey('ranking', (this.itemIndex + 1));
        }
        if (this.data.rank) {
            this.list.dataProvider = new eui.ArrayCollection(this.data.award);
        }
        else {
            this.list.dataProvider = new eui.ArrayCollection(unionWarControl.getModel().creatGuildRankReward(this.data));
        }
    };
    return UnionInteRewardItemRender;
}(BaseItemRender));
__reflect(UnionInteRewardItemRender.prototype, "UnionInteRewardItemRender");
var UnionWarMemberHeadItemRender = (function (_super) {
    __extends(UnionWarMemberHeadItemRender, _super);
    function UnionWarMemberHeadItemRender() {
        var _this = _super.call(this) || this;
        _this.skinName = "UnionWarMemberHeadItemSkin";
        _this.clickEffc = new GameMovieClip;
        _this.clickEffc.x = 52;
        _this.clickEffc.y = 37;
        return _this;
    }
    UnionWarMemberHeadItemRender.prototype.dataChanged = function () {
        this.haveGuildName(false);
        if (!isNaN(this.data)) {
            this.currentState = "war";
            var charSource = UnitMgr.ins().getEntityBymasterhHandle(this.data);
            if (charSource) {
                var info = charSource.infoModel;
                var guildName = info.guildName ? "\n<font color='#6495ed'>" + info.guildName + "</font>" : "";
                var str = devildomControl.isDevildomBattle && guildName ? info.name + guildName : info.getNameWithServer2();
                if (str.indexOf("\n") > -1) {
                    this.haveGuildName(true);
                }
                this.roleName.textFlow = new egret.HtmlTextParser().parser(str);
                this.roleHead.source = "yuanhead" + info.job + info.sex;
                if (unionWarControl.getModel().attHandle && unionWarControl.getModel().attHandle == this.data) {
                    this.addAttEffect();
                }
            }
            else {
                this.roleName.textFlow = new egret.HtmlTextParser().parser(LangMgr.getValueByKey('tipsDead'));
            }
        }
        else if (this.data instanceof SelectInfoData) {
            this.currentState = "panel";
            this.num.textFlow = new egret.HtmlTextParser().parser(LangMgr.getValueByKey('part', this.data.num));
            this.roleName.textFlow = new egret.HtmlTextParser().parser(this.data.data.name);
            this.roleHead.source = "yuanhead" + this.data.data.job + this.data.data.sex;
        }
    };
    UnionWarMemberHeadItemRender.prototype.addAttEffect = function () {
        if (!this.attEffect) {
            this.attEffect = new GameMovieClip;
            this.attEffect.x = 49;
            this.attEffect.y = 28;
        }
        this.attEffect.playFile(PATH_EFF + "FightingEff", -1);
        this.addChild(this.attEffect);
    };
    UnionWarMemberHeadItemRender.prototype.removeAttEffect = function () {
        if (this.attEffect) {
            this.attEffect.stop();
            this.attEffect.destroy();
            this.attEffect = null;
        }
    };
    UnionWarMemberHeadItemRender.prototype.showEffect = function () {
        this.clickEffc.playFile(PATH_EFF + "tapCircle", 1);
        this.addChild(this.clickEffc);
    };
    UnionWarMemberHeadItemRender.prototype.clearEffect = function () {
        DisplayUtils.removeFromParent(this.clickEffc);
        DisplayUtils.removeFromParent(this.attEffect);
    };
    UnionWarMemberHeadItemRender.prototype.haveGuildName = function (b) {
        if (b) {
            this.namebg.height = 45;
            this.height = 110;
        }
        else {
            this.namebg.height = 26;
            this.height = 98;
        }
    };
    return UnionWarMemberHeadItemRender;
}(BaseItemRender));
__reflect(UnionWarMemberHeadItemRender.prototype, "UnionWarMemberHeadItemRender");
var UnionWarMemListItemRender = (function (_super) {
    __extends(UnionWarMemListItemRender, _super);
    function UnionWarMemListItemRender() {
        var _this = _super.call(this) || this;
        _this.skinName = "UnionWarMemListItemSkin";
        return _this;
    }
    UnionWarMemListItemRender.prototype.dataChanged = function () {
        this.face.source = "head_" + this.data.job + this.data.sex;
        this.nameLab.text = "[" + LangMgr.getValueByKey("officeName" + this.data.office) + "]";
        this.nameLab0.text = this.data.myName;
        this.conLab.text = this.data.point + "";
        this.attack.text = this.data.attr + "";
        this.onLine.text = this.data.mapName == "" ? LangMgr.getValueByKey('tipsDragoneCity') : this.data.mapName;
    };
    return UnionWarMemListItemRender;
}(BaseItemRender));
__reflect(UnionWarMemListItemRender.prototype, "UnionWarMemListItemRender");
/**个人积分排行 */
var PersonalInteRankInfoPanel = (function (_super) {
    __extends(PersonalInteRankInfoPanel, _super);
    function PersonalInteRankInfoPanel() {
        var _this = _super.call(this) || this;
        _this.skinName = "PersonalInteRankInfoPanelSkin";
        _this.name = LangMgr.getValueByKey('individualRank');
        _this.list.itemRenderer = UnionInteRankItemRender;
        _this.data = new eui.ArrayCollection([]);
        return _this;
    }
    PersonalInteRankInfoPanel.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.list.dataProvider = this.data;
        this.addCustomEvent(411 /* UNION_WAR_PERSONAL_RANK */, this.refushList);
        unionWarControl.upOwnGuildRank();
        if (this.fgClose)
            this.addEventTouchEnd(this.fgClose, this.onTap);
    };
    PersonalInteRankInfoPanel.prototype.onTap = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        UIMgr.ins().close(this);
    };
    PersonalInteRankInfoPanel.prototype.close = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.removeCustomEvents();
    };
    PersonalInteRankInfoPanel.prototype.refushList = function (list) {
        this.data.replaceAll(list);
    };
    return PersonalInteRankInfoPanel;
}(BasePanel));
__reflect(PersonalInteRankInfoPanel.prototype, "PersonalInteRankInfoPanel");
/**个人奖励 */
var PersonInteRewardInfoPanel = (function (_super) {
    __extends(PersonInteRewardInfoPanel, _super);
    function PersonInteRewardInfoPanel() {
        var _this = _super.call(this) || this;
        _this.skinName = "PersonInteRewardInfoPanelSkin";
        _this.name = LangMgr.getValueByKey('individualWords');
        _this.list.itemRenderer = PersonRewardItemRender;
        _this.list1.itemRenderer = UnionInteRewardItemRender;
        _this.dataArr = new eui.ArrayCollection();
        _this.dataArr1 = new eui.ArrayCollection();
        return _this;
    }
    PersonInteRewardInfoPanel.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        if (!this.dataList) {
            this.dataList = [];
            var data = DataCenter.ins().UnionBattlePerAwardConfig;
            for (var str in data) {
                this.dataList.push(data[str]);
            }
        }
        this.dataArr.source = this.dataList;
        this.list.dataProvider = this.dataArr;
        if (!this.dataList1) {
            this.dataList1 = [];
            var data = DataCenter.ins().UnionBattlePerRankAwardConfig;
            for (var str in data) {
                this.dataList1.push(data[str]);
            }
        }
        this.dataArr1.source = this.dataList1;
        this.list1.dataProvider = this.dataArr1;
        if (this.fgClose)
            this.addEventTouchEnd(this.fgClose, this.close);
    };
    PersonInteRewardInfoPanel.prototype.close = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        UIMgr.ins().close(this);
    };
    return PersonInteRewardInfoPanel;
}(BasePanel));
__reflect(PersonInteRewardInfoPanel.prototype, "PersonInteRewardInfoPanel");
/**帮派积分排行 */
var UnionInteRankInfoPanel = (function (_super) {
    __extends(UnionInteRankInfoPanel, _super);
    function UnionInteRankInfoPanel() {
        var _this = _super.call(this) || this;
        _this.skinName = "UnionInteRankInfoPanelSkin";
        _this.name = LangMgr.getValueByKey('clanRank');
        _this.list.itemRenderer = UnionInteRankItemRender;
        _this.data = new eui.ArrayCollection([]);
        _this.model = unionWarControl.getModel();
        _this.lastName.text = _this.model.isWatStart ? LangMgr.getValueByKey('clanTimeRank') : LangMgr.getValueByKey('clanLastRank');
        _this.lastNameJie.text = _this.model.isWatStart ? LangMgr.getValueByKey('clanTimeResults') : LangMgr.getValueByKey('clanLastresults');
        return _this;
    }
    UnionInteRankInfoPanel.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.list.dataProvider = this.data;
        this.addCustomEvent(429 /* UNION_WAR_RANK_INFO */, this.refushList);
        unionWarControl.upGuildRank();
        if (this.fgClose)
            this.addEventTouchEnd(this.fgClose, this.onTap);
    };
    UnionInteRankInfoPanel.prototype.onTap = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        UIMgr.ins().close(this);
    };
    UnionInteRankInfoPanel.prototype.close = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.removeCustomEvents();
    };
    UnionInteRankInfoPanel.prototype.refushList = function () {
        this.data.replaceAll(this.model.guildRankList);
        if (this.model.guildRankList.length > 0) {
            this.guildName.text = this.model.guildRankList[0].guildName;
        }
        else {
            this.guildName.text = LangMgr.getValueByKey('clanEmptyJob');
        }
    };
    return UnionInteRankInfoPanel;
}(BasePanel));
__reflect(UnionInteRankInfoPanel.prototype, "UnionInteRankInfoPanel");
/**公会奖励 */
var UnionInteRewardInfoPanel = (function (_super) {
    __extends(UnionInteRewardInfoPanel, _super);
    function UnionInteRewardInfoPanel() {
        var _this = _super.call(this) || this;
        _this.skinName = "UnionInteRewardInfoPanelSkin";
        _this.name = LangMgr.getValueByKey('clanRewards');
        _this.dataArr = new eui.ArrayCollection();
        _this.dataArr1 = new eui.ArrayCollection();
        _this.itemList.itemRenderer = ItemBase;
        _this.list1.itemRenderer = UnionInteRewardItemRender;
        return _this;
    }
    UnionInteRewardInfoPanel.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        var data = unionWarControl.getModel().creatGuildRewardList();
        this.dataArr1.source = data;
        this.list1.dataProvider = this.dataArr1;
        var data1 = DataCenter.ins().UnionBattleConstConfig.occupationAward;
        this.dataArr.source = data1;
        this.itemList.dataProvider = this.dataArr;
        if (this.fgClose)
            this.addEventTouchEnd(this.fgClose, this.onTap);
    };
    UnionInteRewardInfoPanel.prototype.onTap = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        UIMgr.ins().close(this);
    };
    UnionInteRewardInfoPanel.prototype.close = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.dataArr.source = null;
        this.dataArr1.source = null;
    };
    return UnionInteRewardInfoPanel;
}(BasePanel));
__reflect(UnionInteRewardInfoPanel.prototype, "UnionInteRewardInfoPanel");
var RedBagDetailsView = (function (_super) {
    __extends(RedBagDetailsView, _super);
    function RedBagDetailsView() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RedBagDetailsView.prototype.initUI = function () {
        _super.prototype.initUI.call(this);
        this.skinName = "RedBagDetailsViewSkin";
        this.list.itemRenderer = RedBagItemRender;
        this.effect = new GameMovieClip;
        this.effect.x = 244;
        this.effect.y = 300;
    };
    RedBagDetailsView.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.addEventTouchTap(this.bgClose, this.onTap);
        this.num.text = unionWarControl.getModel().robYbNum + "";
        this.list.dataProvider = new eui.ArrayCollection(unionWarControl.getModel().rebList);
        if (param[0]) {
            this.effect.playFile(PATH_EFF + "yanhuaeff", 1);
            this.addChild(this.effect);
        }
    };
    RedBagDetailsView.prototype.close = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.removeEventTouchTap(this.bgClose, this.onTap);
        DisplayUtils.removeFromParent(this.effect);
    };
    RedBagDetailsView.prototype.onTap = function (e) {
        switch (e.currentTarget) {
            case this.bgClose:
                UIMgr.ins().close(RedBagDetailsView);
                break;
        }
    };
    return RedBagDetailsView;
}(BaseEuiView));
__reflect(RedBagDetailsView.prototype, "RedBagDetailsView");
var RedBagView = (function (_super) {
    __extends(RedBagView, _super);
    function RedBagView() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RedBagView.prototype.initUI = function () {
        _super.prototype.initUI.call(this);
        this.skinName = "RedBagViewSkin";
        this.model = unionWarControl.getModel();
        this.num1.restrict = "0-9";
        this.num2.restrict = "0-9";
    };
    RedBagView.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.addEventTouchTap(this.rob, this.onTap);
        this.addEventTouchTap(this.bgClose, this.onTap);
        this.addEventTouchTap(this.send, this.onTap);
        this.addEventTouchTap(this.btn1, this.onTap);
        this.addEventTouchTap(this.btn2, this.onTap);
        this.addEventTouchTap(this.btn3, this.onTap);
        this.addEventTouchTap(this.btn4, this.onTap);
        this.addEventTouchTap(this.btn5, this.onTap);
        this.addEventTouchTap(this.btn6, this.onTap);
        this.addEventChange(this.num1, this.onTxtChange);
        this.addEventChange(this.num2, this.onTxtChange);
        if (this.model.canRod) {
            this.currentState = "rob";
            this.refushInfo();
        }
        else {
            this.currentState = "send";
            this.refushSendInfo();
        }
    };
    RedBagView.prototype.onTxtChange = function (e) {
        var _this = this;
        var index = 1;
        switch (e.currentTarget) {
            case this.num1:
                index = 1;
                break;
            case this.num2:
                index = 2;
                break;
        }
        TimerMgr.ins().doTimer(500, 1, function () {
            _this.checkInputChange(index);
        }, this);
    };
    RedBagView.prototype.checkInputChange = function (index) {
        var num;
        switch (index) {
            case 1:
                num = Number(this.num1.text);
                if (num > this.sendYBMaxNum) {
                    num = this.sendYBMaxNum;
                }
                this.sendYb = num;
                this.num1.text = this.sendYb + "";
                break;
            case 2:
                num = Number(this.num2.text);
                if (num > this.sendMaxNum) {
                    num = this.sendMaxNum;
                }
                this.sendNum = num;
                this.num2.text = this.sendNum + "";
                break;
        }
        this.checkPercentage();
    };
    RedBagView.prototype.refushSendInfo = function () {
        //发红包状态
        this.sendYb = this.sendYBMaxNum = this.model.remainYB;
        this.sendMaxNum = this.sendNum = unionControl.getMemberNum();
        this.price.setPrice(this.sendYb);
        this.num1.text = this.sendYb + '';
        this.num2.text = this.sendNum + '';
    };
    RedBagView.prototype.refushInfo = function () {
        this.remainBag.text = this.model.remainRedNum + "/" + this.model.maxRedNum;
    };
    RedBagView.prototype.onTap = function (e) {
        switch (e.currentTarget) {
            case this.bgClose:
                UIMgr.ins().close(RedBagView);
                break;
            case this.rob:
                unionWarControl.upRobRedBag();
                break;
            case this.send:
                unionWarControl.upSendRedBag(this.sendYb, this.sendNum);
                break;
            case this.btn1:
                --this.sendYb;
                if (this.sendYb < this.sendNum) {
                    this.sendYb = this.sendNum;
                }
                this.num1.text = this.sendYb + "";
                break;
            case this.btn2:
                ++this.sendYb;
                if (this.sendYb > this.sendYBMaxNum) {
                    this.sendYb = this.sendYBMaxNum;
                }
                this.num1.text = this.sendYb + "";
                break;
            case this.btn3:
                --this.sendNum;
                if (this.sendNum < 1) {
                    this.sendNum = 1;
                }
                this.num2.text = this.sendNum + "";
                break;
            case this.btn4:
                ++this.sendNum;
                if (this.sendNum > this.sendMaxNum) {
                    this.sendNum = this.sendMaxNum;
                }
                this.num2.text = this.sendNum + "";
                break;
            case this.btn5:
                this.sendYb = this.sendYBMaxNum;
                this.num1.text = this.sendYb + "";
                break;
            case this.btn6:
                this.sendNum = this.sendMaxNum;
                this.num2.text = this.sendNum + "";
                break;
        }
    };
    RedBagView.prototype.checkPercentage = function () {
        if (this.sendYb < this.sendNum) {
            this.sendYb = this.sendNum;
            this.num1.text = this.sendYb + "";
        }
    };
    return RedBagView;
}(BaseEuiView));
__reflect(RedBagView.prototype, "RedBagView");
var RedBagItemRender = (function (_super) {
    __extends(RedBagItemRender, _super);
    function RedBagItemRender() {
        var _this = _super.call(this) || this;
        _this.skinName = "RedBagItemSkin";
        return _this;
    }
    RedBagItemRender.prototype.dataChanged = function () {
        this.num.text = this.data.robNum;
        this.nameLabel.text = this.data.robName;
    };
    return RedBagItemRender;
}(BaseItemRender));
__reflect(RedBagItemRender.prototype, "RedBagItemRender");
var WarnControl = (function (_super) {
    __extends(WarnControl, _super);
    function WarnControl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WarnControl.ins = function () {
        return _super.ins.call(this);
    };
    WarnControl.prototype.show = function (str, func, thisObj, func2, thisObj2, statu, align) {
        if (func2 === void 0) { func2 = null; }
        if (thisObj2 === void 0) { thisObj2 = null; }
        if (statu === void 0) { statu = "normal"; }
        if (align === void 0) { align = "center"; }
        var warnWin = warnControl.setWarnLabel(str, { "func": func, "thisObj": thisObj }, { "func2": func2, "thisObj2": thisObj2, }, statu, align);
        return warnWin;
    };
    WarnControl.prototype.showDangerWarn = function (callback) {
        if (ServerStorage.ins().getBitValue(ClientSetBit.playWarn)) {
            callback();
            if (DangerWarnView.sureCall) {
                DangerWarnView.sureCall();
                DangerWarnView.sureCall = null;
            }
            DangerWarnView.cancelCall = null;
        }
        else {
            DangerWarnView.show(callback);
        }
    };
    WarnControl.prototype.setWarnLabel = function (str, callBackFun, callBackFun2, statu, align) {
        if (statu === void 0) { statu = "normal"; }
        if (align === void 0) { align = "left"; }
        var rtn = UIMgr.ins().open(WarnView);
        rtn.setWarnLabel(str, callBackFun, callBackFun2, statu, align);
        return rtn;
    };
    WarnControl.prototype.setBuyGoodsWarn = function (id, num) {
        if (num === void 0) { num = 1; }
        var rtn = UIMgr.ins().open(ShopWarnView);
        rtn.setData(id, num);
        return rtn;
    };
    return WarnControl;
}(BaseSystem));
__reflect(WarnControl.prototype, "WarnControl");
/**
 * 危险提示
 */
var DangerWarnView = (function (_super) {
    __extends(DangerWarnView, _super);
    function DangerWarnView() {
        var _this = _super.call(this) || this;
        _this.skinName = "DangerWarnViewSkin";
        _this.uilayer = GameLayer.POPUP;
        return _this;
    }
    DangerWarnView.show = function (sureCallback, cancelCallback) {
        if (UIMgr.ins().isShow(DangerWarnView)) {
            var view = UIMgr.ins().getView(DangerWarnView);
            view.sureCallback = sureCallback;
            view.cancelCallback = cancelCallback;
        }
        else {
            UIMgr.ins().open(DangerWarnView, sureCallback, cancelCallback);
        }
    };
    DangerWarnView.prototype.open = function (sureCallback, cancelCallback) {
        this.sureCallback = sureCallback;
        this.cancelCallback = cancelCallback;
        this.addEventTouchTap(this.bgClose, this.onClick);
        this.addEventTouchTap(this.sureBtn, this.onClick);
        this.addEventTouchTap(this.cancelBtn, this.onClick);
        this.updateView();
    };
    DangerWarnView.prototype.onClick = function (e) {
        switch (e.currentTarget) {
            case this.bgClose:
                this.onCancel();
                break;
            case this.sureBtn:
                this.onSure();
                break;
            case this.cancelBtn:
                this.onCancel();
                break;
        }
    };
    DangerWarnView.prototype.onCancel = function () {
        if (this.cancelCallback) {
            this.cancelCallback();
            this.cancelCallback = null;
        }
        if (DangerWarnView.cancelCall) {
            DangerWarnView.cancelCall();
            DangerWarnView.cancelCall = null;
        }
        UIMgr.ins().close(this);
    };
    DangerWarnView.prototype.onSure = function () {
        if (this.hintState.selected) {
            ServerStorage.ins().setBitValue(ClientSetBit.playWarn, 1);
        }
        if (this.sureCallback) {
            this.sureCallback();
            this.sureCallback = null;
        }
        if (DangerWarnView.sureCall) {
            DangerWarnView.sureCall();
            DangerWarnView.sureCall = null;
        }
        UIMgr.ins().close(this);
    };
    DangerWarnView.prototype.close = function () {
        DangerWarnView.cancelCall = null;
        DangerWarnView.sureCall = null;
    };
    DangerWarnView.prototype.updateView = function () {
        this.hintState.selected = false;
        this.text.text = DataCenter.ins().WorldBossBaseConfig.pktips;
    };
    return DangerWarnView;
}(BaseEuiView));
__reflect(DangerWarnView.prototype, "DangerWarnView");
/**
 * 道具获取框
 */
var ShopWarnView = (function (_super) {
    __extends(ShopWarnView, _super);
    function ShopWarnView() {
        var _this = _super.call(this) || this;
        _this.uilayer = GameLayer.POPUP;
        return _this;
    }
    ShopWarnView.prototype.initUI = function () {
        _super.prototype.initUI.call(this);
        this.skinName = "ShopWarnViewSkin";
        this.gainList.itemRenderer = GainGoodsItem;
        this.countTxt.restrict = "0-9";
        this.price.setType(2 /* TYPE_2 */);
        this.totalPrice.setType(2 /* TYPE_2 */);
        this.itemIcon.imgJob.visible = false;
    };
    ShopWarnView.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.addEventTouchTap(this.decBtn, this.onTap);
        this.addEventTouchTap(this.addBtn, this.onTap);
        this.addEventTouchTap(this.dec10Btn, this.onTap);
        this.addEventTouchTap(this.add10Btn, this.onTap);
        this.addEventTouchTap(this.buyBtn, this.onTap);
        this.addEventTouchTap(this.topUpBtn, this.onTap);
        this.addEventTouchTap(this.bgClose, this.onTap);
        if (this.fgClose) {
            this.addEventTouchEnd(this.fgClose, this.onTap);
        }
        this.addEventItemTap(this.gainList, this.onTouchList);
        this.addEventChange(this.countTxt, this.onTxtChange);
        this.addCustomEvent(197 /* STORE_BUY_RESULT */, this.buyCallBack);
    };
    ShopWarnView.prototype.close = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.removeEventItemTap(this.gainList, this.onTouchList);
        this.removeEventTouchTap(this.decBtn, this.onTap);
        this.removeEventTouchTap(this.addBtn, this.onTap);
        this.removeEventTouchTap(this.dec10Btn, this.onTap);
        this.removeEventTouchTap(this.add10Btn, this.onTap);
        this.removeEventTouchTap(this.buyBtn, this.onTap);
        this.removeEventTouchTap(this.topUpBtn, this.onTap);
        this.removeEventTouchTap(this.bgClose, this.onTap);
        this.removeEventChange(this.countTxt, this.onTxtChange);
    };
    ShopWarnView.prototype.onTap = function (e) {
        switch (e.currentTarget) {
            case this.decBtn:
                this.setTotalPrice(this._totalNum - 1);
                break;
            case this.addBtn:
                this.setTotalPrice(this._totalNum + 1);
                break;
            case this.dec10Btn:
                this.setTotalPrice(this._totalNum - 10);
                break;
            case this.add10Btn:
                this.setTotalPrice(this._totalNum + 10);
                break;
            case this.buyBtn:
                if (ActorControl.yb >= this.totalPrice.getPrice()) {
                    storeControl.upBuy(1, [[this._goodsId, this._totalNum]]);
                }
                else {
                    tipsControl.showTips(LangMgr.getValueByKey('userNoMony'));
                    UIMgr.ins().close(this);
                }
                break;
            case this.topUpBtn:
                if (payControl.checkOpenWin()) {
                    UIMgr.ins().close(ShopWarnView);
                }
                break;
            case this.fgClose:
            case this.bgClose:
                UIMgr.ins().close(ShopWarnView);
                break;
        }
    };
    ShopWarnView.prototype.onTouchList = function (e) {
        var item = e.item;
        if (e.item == null) {
            return;
        }
        var openSuccess = UIMgr.ins().viewOpenCheck(item[1], item[2]);
        if (openSuccess) {
            var isShow = true;
            if (item[1] == "PayDailyView") {
                var payVo = payControl.getRechargeData(0);
                if (!payVo || !payVo.num) {
                    isShow = false;
                    UIMgr.ins().open("PayFirstView");
                }
            }
            if (isShow && item[1] != "") {
                GuideControl.guidance(item[1], item[2], item[3]);
            }
            UIMgr.ins().close(ShopWarnView);
            UIMgr.ins().close("BookUpView");
            UIMgr.ins().close("WeaponSoulFacadePanel");
            UIMgr.ins().close("WeaponSoulBreakView");
            if (item[1] != "HeirloomComposeView")
                UIMgr.ins().close("HeirloomComposeView");
            if (item[1] == "LadderView")
                UIMgr.ins().close("IntensifyView");
            if (item[1] == "PortalView") {
                UIMgr.ins().close("StoreView");
            }
        }
    };
    ShopWarnView.prototype.buyCallBack = function (num) {
        if (num > 0) {
            UIMgr.ins().close(ShopWarnView);
        }
        else {
            tipsControl.showTips(LangMgr.getValueByKey('userNoMony'));
            UIMgr.ins().close(this);
        }
    };
    ShopWarnView.prototype.onTxtChange = function (e) {
        var num = Number(this.countTxt.text);
        this.setTotalPrice(num);
    };
    ShopWarnView.prototype.setData = function (id, num) {
        var shopConfig;
        if (id > 20000) {
            var itemConfig = DataCenter.ins().ItemConfig[id];
            this.itemIcon.setData(itemConfig);
            this.nameTxt.text = "" + itemConfig.name;
            this.nameTxt.textColor = ItemUtils.getQualityColor(itemConfig);
            shopConfig = storeControl.getStoreByItemId(id);
            this.titleTxt.text = LangMgr.getValueByKey('warnTips5');
        }
        else {
            this.itemIcon.setData(null);
            switch (id) {
                case 1 /* TYPE_1 */:
                    this.itemIcon.imgIcon.source = Currency.getCurrencyRes(id);
                    this.nameTxt.text = Currency.getCurrencyName(id);
                    this.titleTxt.text = LangMgr.getValueByKey('warnTips6');
                    break;
                case 4 /* TYPE_4 */:
                    this.itemIcon.imgIcon.source = Currency.getCurrencyRes(id);
                    this.nameTxt.text = Currency.getCurrencyName(id);
                    this.titleTxt.text = LangMgr.getValueByKey('warnTips7');
                    break;
                case 7 /* TYPE_7 */:
                    this.itemIcon.imgIcon.source = Currency.getCurrencyRes(id);
                    this.nameTxt.text = Currency.getCurrencyName(id);
                    this.titleTxt.text = LangMgr.getValueByKey('warnTips8');
                    break;
                case 8 /* TYPE_8 */:
                    this.itemIcon.imgIcon.source = Currency.getCurrencyRes(id);
                    this.nameTxt.text = Currency.getCurrencyName(id);
                    this.titleTxt.text = LangMgr.getValueByKey('warnTips9');
                    break;
                case 14 /* TYPE_14 */://威望
                    this.itemIcon.imgIcon.source = Currency.getCurrencyRes(id);
                    this.nameTxt.text = Currency.getCurrencyName(id);
                    this.titleTxt.text = LangMgr.getValueByKey('warnTips10');
                    break;
            }
            this.nameTxt.textColor = 0xFFB82A;
        }
        var gainConfig = DataCenter.ins().PropsGainConfig[id];
        var listHeight = 0;
        if (gainConfig) {
            this.gainList.dataProvider = new eui.ArrayCollection(gainConfig.gainWay);
            listHeight = gainConfig.gainWay.length * 60;
        }
        else {
            this.gainList.dataProvider = new eui.ArrayCollection([]);
        }
        if (shopConfig) {
            this.nameTxt.textAlign = "center";
            this._goodsId = shopConfig.id;
            this.price.setPrice(shopConfig.price);
            this.setTotalPrice(num);
        }
        else {
            DisplayUtils.removeFromParent(this.goodsGroup);
            this.nameTxt.textAlign = "center";
        }
        this.tipGroup.y = this.gainListGroup.height + this.gainListGroup.y + 3;
    };
    ShopWarnView.prototype.setTotalPrice = function (num) {
        if (num <= 0)
            this._totalNum = 1;
        else if (num >= 10000)
            this._totalNum = 9999;
        else
            this._totalNum = num;
        this.countTxt.text = this._totalNum + "";
        this.totalPrice.setPrice(this._totalNum * this.price.getPrice());
    };
    return ShopWarnView;
}(BaseEuiView));
__reflect(ShopWarnView.prototype, "ShopWarnView");
/**
 * 弹出框
 */
var WarnView = (function (_super) {
    __extends(WarnView, _super);
    function WarnView() {
        var _this = _super.call(this) || this;
        _this.uilayer = GameLayer.POPUP;
        return _this;
    }
    WarnView.prototype.initUI = function () {
        _super.prototype.initUI.call(this);
        this.skinName = "WarnViewSkin";
    };
    WarnView.prototype.open = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.addEventTouchTap(this.sureBtn, this.onTap);
        this.addEventTouchTap(this.notBtn, this.onTap);
        this.addEventTouchTap(this.bgClose, this.onTap);
        this.addEventTouchTap(this.cbx, this.onTap);
        if (this.fgClose) {
            this.addEventTouchEnd(this.fgClose, this.onTap);
        }
        this.cbx.selected = daifugControl.autoTurnDice ? true : false;
    };
    WarnView.prototype.close = function () {
        var param = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            param[_i] = arguments[_i];
        }
        this.removeEventTouchTap(this.sureBtn, this.onTap);
        this.removeEventTouchTap(this.notBtn, this.onTap);
        this.removeEventTouchTap(this.bgClose, this.onTap);
        this.removeEventTouchTap(this.cbx, this.onTap);
    };
    WarnView.prototype.onTap = function (e) {
        switch (e.currentTarget) {
            case this.sureBtn:
                if (this.callBack.func != null)
                    this.callBack.func.call(this.callBack.thisObj);
                break;
            case this.notBtn:
            case this.fgClose:
            case this.bgClose:
                if (this.calback2.func2) {
                    this.calback2.func2.call(this.calback2.thisObj2);
                }
                break;
            case this.cbx:
                daifugControl.autoTurnDice = e.currentTarget.selected;
                break;
        }
        if (e.currentTarget != this.cbx) {
            UIMgr.ins().close(WarnView);
        }
    };
    Object.defineProperty(WarnView.prototype, "isShowWin", {
        /**
         * 是否显示框
         */
        get: function () {
            return this._isShowWin;
        },
        /**
         * 是否显示框
         */
        set: function (bool) {
            if (this._isShowWin == bool)
                return;
            this._isShowWin = bool;
        },
        enumerable: true,
        configurable: true
    });
    WarnView.prototype.setWarnLabel = function (str, callbackFunc, calbackFun2, statu, align) {
        if (calbackFun2 === void 0) { calbackFun2 = null; }
        if (statu === void 0) { statu = "normal"; }
        if (align === void 0) { align = "left"; }
        this.warnLabel.textFlow = TextUtils.generateTextFlow(str);
        this.callBack = callbackFunc;
        this.calback2 = calbackFun2;
        this.currentState = statu;
        this.warnLabel.textAlign = align;
    };
    WarnView.prototype.setBtnLabel = function (leftTxt, rightTxt) {
        if (leftTxt)
            this.sureBtn.label = leftTxt;
        if (rightTxt)
            this.notBtn.label = rightTxt;
    };
    WarnView.prototype.showUI = function (icon1, label1, icon2, label2) {
        this.leftGroup.visible = false;
        this.icon1.visible = false;
        this.label1.visible = false;
        this.rightGroup.visible = false;
        this.icon2.visible = false;
        this.label2.visible = false;
        if (icon1 || label1) {
            this.leftGroup.visible = true;
            if (icon1) {
                this.icon1.visible = true;
                this.icon1.source = icon1;
            }
            if (label1) {
                this.label1.visible = true;
                this.label1.text = label1;
            }
        }
        if (icon2 || label2) {
            this.rightGroup.visible = true;
            if (icon2) {
                this.icon2.visible = true;
                this.icon2.source = icon2;
            }
            if (label2) {
                this.label2.visible = true;
                this.label2.text = label2;
            }
        }
    };
    return WarnView;
}(BaseEuiView));
__reflect(WarnView.prototype, "WarnView");
/**
 * 游戏socket接口
 */
var SocketConnection = (function (_super) {
    __extends(SocketConnection, _super);
    function SocketConnection() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.hasShowReLoginWin = false;
        _this.disconnectTime = 0;
        return _this;
    }
    SocketConnection.ins = function () {
        return _super.ins.call(this);
    };
    SocketConnection.prototype.connect = function (host, port) {
        if (DeviceUtils.IsWxMiniGame) {
            this.connectSocket(host, port, GlobalModel.useWss);
        }
        else {
            this.connectSocket(host, port, GlobalModel.isHttps && GlobalModel.useWss);
        }
    };
    SocketConnection.prototype.onSocketConnected = function () {
        _super.prototype.onSocketConnected.call(this);
        TimerMgr.ins().remove(this.reLogin, this);
        if (this.onConnectedCallback) {
            this.onConnectedCallback();
        }
    };
    SocketConnection.prototype.onSocketClose = function (e) {
        if (e.data && e.data.code != 1006 && e.data.code != 1005) {
            var desc = "Code:" + e.data.code + ",Reason:" + e.data.reason + ",WasClean:" + e.data.wasClean;
            if (e.data.target) {
                desc += ",Url:" + e.data.target.url;
            }
            ReportData.getIns().reportClientErrorLog("SocketClose", desc);
        }
        debug.log("server disconnection!!! ip:" + this.host + " port:" + this.port);
        this.updateStatus(SocketConst.STATUS_DISCONNECT);
        TimerMgr.ins().remove(this.reLogin, this);
        crossFieldControl.closeSocket();
        this.showReLoginWin();
    };
    SocketConnection.prototype.connectError = function (e) {
        var desc = "SocketError";
        if (!isNaN(Number(e.data))) {
            desc = "Code:" + e.data;
        }
        ReportData.getIns().reportClientErrorLog("SocketError", desc);
        TimerMgr.ins().remove(this.reLogin, this);
        TimerMgr.ins().doTimer(1000, 1, this.reLogin, this);
    };
    SocketConnection.prototype.reLogin = function () {
        this.close();
        GlobalModel.checkClientVersion(this.loadGame);
    };
    SocketConnection.prototype.onFinishCheck = function (newStatus, oldStatus) {
        if (newStatus == SocketConst.STATUS_COMMUNICATION) {
            debug.log("connect server success！ip:" + this.host + " port:" + this.port);
            //连接成功后，判断是否在跨服状态中，如是则直接进入跨服登陆
            if (crossFieldControl.isCross) {
                crossFieldControl.upKFLogin();
            }
            else {
                this.sendCheckAccount();
            }
        }
        else if (newStatus == SocketConst.STATUS_DISCONNECT) {
            debug.log("connect server close！ip:" + this.host + " port:" + this.port);
        }
    };
    SocketConnection.prototype.sendCheckAccount = function () {
        loginControl.upCheckAccount();
    };
    SocketConnection.prototype.record = function (serverInfo) {
        GlobalModel.serverIP = null;
        GlobalModel.serverPort = null;
        //0.维护 1.上线
        if (serverInfo.serverState != "1") {
            alert(LangMgr.getValueByKey("serverState1"));
            return;
        }
        if (!serverInfo.isTestServer && GlobalModel.pf == "Test" && !GlobalModel.getUrlParamValue("isDebug")) {
            alert(LangMgr.getValueByKey("serverState2"));
            return;
        }
        if (serverInfo.isvirtual == 1) {
            GlobalModel.setUrlParamValue("isHw", true);
            if (GlobalModel.gameId == 62 || GlobalModel.gameId == 70) {
                GlobalModel.gameId = 28;
            }
            if (GlobalModel.pfid == "62" || GlobalModel.pfid == "70") {
                GlobalModel.pfid = "28";
            }
        }
        GlobalModel.srvid = Number(serverInfo.serverId);
        GlobalModel.mainSrvid = Number(serverInfo.mainServerid);
        GlobalModel.srvname = serverInfo.serverName;
        GlobalModel.serverIP = serverInfo.serverIp;
        GlobalModel.serverPort = Number(serverInfo.serverPort);
        GlobalModel.isCreateRole = !serverInfo.actorid || String(serverInfo.actorid).length <= 0;
        Launcher.ins().loadConfig();
    };
    SocketConnection.prototype.start = function () {
        if (GlobalModel.serverIP && GlobalModel.serverPort) {
            StartLoading.ins().showLoading();
            SocketConnection.ins().sendConnect(GlobalModel.serverIP, GlobalModel.serverPort);
            ReportData.getIns().reportPlayedServer();
        }
    };
    SocketConnection.prototype.showReLoginWin = function () {
        var _this = this;
        StartLoading.ins().hideLoading();
        if (this.hasShowReLoginWin && UIMgr.ins().isShow("WarnView")) {
            return;
        }
        this.hasShowReLoginWin = true;
        this.disconnectTime = egret.getTimer();
        var func = function () {
            _this.hasShowReLoginWin = false;
            if (_this.onClosedCallback) {
                _this.onClosedCallback();
            }
            TimerMgr.ins().remove(_this.reLogin, _this);
            if (egret.getTimer() - _this.disconnectTime >= 6000) {
                _this.reLogin();
            }
            else {
                TimerMgr.ins().doTimer(6000 - (egret.getTimer() - _this.disconnectTime), 1, _this.reLogin, _this);
            }
        };
        warnControl.show(LangMgr.getValueByKey("serverState3"), func, this, func, this, 'sure');
    };
    SocketConnection.prototype.loadGame = function () {
        SocketConnection.ins().newSocket();
        SocketConnection.ins().sendConnect(GlobalModel.serverIP, GlobalModel.serverPort);
    };
    ;
    SocketConnection.prototype.sendConnect = function (ip, port) {
        if (!SocketConnection.ins().getSocket().connected) {
            debug.log("connect to " + ip + " ,port: " + port);
            this.connect(ip, port);
        }
        else {
            this.sendCheckAccount();
        }
    };
    return SocketConnection;
}(SocketBase));
__reflect(SocketConnection.prototype, "SocketConnection");
/**
 * 共用方法
 */
var CommonFun = (function () {
    function CommonFun() {
    }
    /**
     * 货币不足提示
     */
    CommonFun.checkCurrency = function (num, currencyType, noTips, backFun) {
        if (currencyType === void 0) { currencyType = 2 /* TYPE_2 */; }
        if (noTips === void 0) { noTips = ""; }
        switch (currencyType) {
            case 1 /* TYPE_1 */:
                if (ActorControl.gold >= num) {
                    return true;
                }
                if (noTips == "") {
                    noTips = LangMgr.getValueByKey('bossMoneyEnought');
                }
                tipsControl.showTips(noTips);
                break;
            case 2 /* TYPE_2 */:
                if (ActorControl.yb >= num) {
                    return true;
                }
                if (noTips == "") {
                    noTips = LangMgr.getValueByKey('osaNoMoney');
                }
                tipsControl.showTips(noTips);
                if (!crossFieldControl.isCross) {
                    var warn = warnControl.show(LangMgr.getValueByKey('tipsTips3'), null, null, function () {
                        payControl.checkOpenWin();
                        if (backFun && typeof backFun == "function") {
                            backFun();
                        }
                    });
                    warn.setBtnLabel(LangMgr.getValueByKey('cancel'), LangMgr.getValueByKey('artRenderer1'));
                }
            default:
                debug.log("Money type error:", currencyType);
                return false;
        }
        return false;
    };
    CommonFun.checkBackpackCount = function (enough, type) {
        if (enough === void 0) { enough = BackpackControl.BAG_ENOUGH; }
        if (type === void 0) { type = 0; }
        if (backpackControl.getSurplusCount() < enough) {
            switch (type) {
                case 0:
                    UIMgr.ins().open("BackpackFullTipsView", enough);
                    break;
                case 1:
                    tipsControl.warnTips(LangMgr.getValueByKey("pactivityBag"));
                    break;
            }
            return false;
        }
        return true;
    };
    CommonFun.checkLevel = function (needLv, showTips, checkZs) {
        if (showTips === void 0) { showTips = true; }
        if (checkZs === void 0) { checkZs = true; }
        var state = false;
        var curLv = ActorControl.level;
        if (checkZs) {
            curLv = reincarnateControl.lv * 1000 + ActorControl.level;
        }
        state = curLv >= needLv;
        if (!state && showTips) {
            if (checkZs) {
                var zsLv = needLv / 1000 >> 0;
                var lv = needLv % 1000;
                if (zsLv > reincarnateControl.lv) {
                    tipsControl.warnTips(LangMgr.getValueByKey("commonFun1", zsLv));
                }
                else {
                    tipsControl.warnTips(LangMgr.getValueByKey("commonFun2", lv));
                }
            }
            else {
                tipsControl.warnTips(LangMgr.getValueByKey("commonFun2", needLv));
            }
        }
        return state;
    };
    /**1080 1转80级 */
    CommonFun.backZsAndLv = function (needLv) {
        var zsLv = needLv / 1000 >> 0;
        var lv = needLv % 1000;
        return [zsLv, lv];
    };
    CommonFun.checkVersion = function (func) {
        func && func();
    };
    CommonFun.viewItemTips = function (id, count) {
        var itemConfig = DataCenter.ins().ItemConfig[id];
        if (itemConfig) {
            var itemBase = new ItemBase;
            var type = 1;
            if (Currency.getCurrencyRes(id)) {
                type = 0;
            }
            itemBase.data = {
                id: id,
                type: type,
                count: count || 1
            };
            itemBase.onClick();
        }
    };
    CommonFun.dataToDropTag = function (dropAwards, dropTags) {
        dropAwards.map(function (data) {
            if (dropTags.indexOf(data.id) > -1) {
                data.isDrop = true;
            }
        }, this);
        return dropAwards;
    };
    CommonFun.mergeRewardList = function (rewards) {
        var result = {};
        for (var i = 0; i < rewards.length; i++) {
            var reward = rewards[i];
            if (result[reward.id]) {
                result[reward.id].count += reward.count;
            }
            else {
                result[reward.id] = reward;
            }
        }
        return CommonUtils.objectToArrayShallow(result);
    };
    CommonFun.dropEff = function (awardDatas, charRole, fun, flag) {
        if (flag === void 0) { flag = 0; }
        if (!charRole) {
            charRole = UnitMgr.ins().getNoDieRole();
        }
        if (flag == 0) {
            for (var i = 0; i < awardDatas.length; i++) {
                var awardData = awardDatas[i];
                if (awardData.type != 0 || awardData.id == 1 || awardData.id == 2 || awardData.id == 9 /* TYPE_9 */) {
                    DropControl.addDrop([
                        DropControl.tempDropPoint.x != 0 ? DropControl.tempDropPoint.x : Math.floor(charRole.x / MapControl.CELL_SIZE),
                        DropControl.tempDropPoint.y != 0 ? DropControl.tempDropPoint.y : Math.floor(charRole.y / MapControl.CELL_SIZE),
                        awardData
                    ]);
                }
            }
            DropControl.addCompleteFunc(fun, this);
            DropControl.start(charRole);
        }
    };
    CommonFun.regKFBackFun = function (method, delay) {
        if (delay === void 0) { delay = 200; }
        var self = this;
        if (!CrossServerSwitchView.backCloseFun) {
            var fun = function () {
                TimerMgr.ins().doTimer(delay, 1, method, self);
                CrossServerSwitchView.backCloseFun = null;
            };
            CrossServerSwitchView.backCloseFun = fun;
        }
    };
    CommonFun.getMailAwards = function (key) {
        var mailIdConfig = DataCenter.ins().EmailIdConfig[key];
        if (mailIdConfig) {
            if (mailIdConfig.attachmentShow)
                return mailIdConfig.attachmentShow;
            if (mailIdConfig.attachment)
                return mailIdConfig.attachment;
        }
        return [];
    };
    CommonFun.convertLevel = function (level) {
        var str = "";
        var zsLv = Math.floor(level / 1000);
        if (zsLv) {
            str += LangMgr.getValueByKey("numberRotation", zsLv);
        }
        var lv = level % 1000;
        if (lv) {
            str += LangMgr.getValueByKey("numberLevel", lv);
        }
        return str;
    };
    CommonFun.getTargetValue = function (showType, id) {
        switch (showType) {
            case 0 /* LEVEL */:
                return reincarnateControl.lv + ActorControl.level * 1000;
            case 1 /* WING */:
                return FeatherVo.getWingAllLevel();
            case 2 /* ZHUZAO */:
                return RoleModel.getIntensifyTotalLvByType(2 /* FORGE */);
            case 3 /* LONGHUN */:
                return DragonSoulDataVo.getLongHunAllLevel();
            case 5 /* BOOK */:
                return bookControl.getBookPowerNumEx();
            case 6 /* EQUIP */:
                return backpackControl.getEquipsScoreByRolesOfBody();
            case 7 /* RING */:
                var lv = 0;
                var ringData = superRingControl.getSpecialRingDataById(GameConst.FIRE_RING_ID);
                if (ringData && ringData.level) {
                    lv = ringData.level;
                }
                return lv;
            case 8 /* SAMSARA */:
                return ActorControl.samsaraLv;
            case 9 /* ZHANLING */:
                return ashtarteControl.getZhanLingDataByLevel(isNaN(id) ? 0 : id);
            case 10 /* DEMON_ACT */:
                return magicCircleControl.getPotentionTimes();
            case 11 /* SHENWU */:
                return crazybtplayControl.getStrengthenLvAll();
            case 12 /* POWER */:
                return ActorControl.power;
            case 13 /* MASTEREQUIP */:
                return dominateEquipControl.getTotalScore();
            case 14 /* ZHANWEN */:
                return runeControl.totalPower;
            case 15 /* SPECIALRING */:
                return superRingControl.totalPower;
            case 16 /* SHENBINLV */:
                return godWeaponControl.getMaxWeaponLv();
            case 17 /* SHENBINACT */:
                return godWeaponControl.getActWeapon();
            case 18 /* SHENBINQUALITY2 */:
                return godWeaponControl.getGodItemQuality(isNaN(id) ? 2 : id);
            case 19 /* SHENBINLAYER */:
                return godWeaponControl.dunInfoData && godWeaponControl.dunInfoData.listData ? godWeaponControl.dunInfoData.listData.length : 0;
            case 20 /* SHENSHOUFIGHT */:
                return beastControl.getCurBattle();
            case 21 /* SHENYUEQUIP */:
                return featherControl.getGodWingItem();
            case 22 /* BINHUNACT */:
                return weaponsSoulControl.getWeaponsCount();
            case 23 /* ZUDUITONGGUAN */:
                var teamFuBenConfig = DataCenter.ins().AsTeamCopyConfig[copyControl.tfPassID];
                return teamFuBenConfig ? teamFuBenConfig.id : 0;
            case 24 /* JOINUNION */:
                return unionControl.guildID ? 1 : 0;
            case 25 /* FRIEND_COUNT */:
                return partnerControl.friendsList.length;
            case 26 /* SHENBING_TOTAL_LV */:
                return godWeaponControl.getWeaponTotalLv();
            case 27 /* ROLE_NUM */:
                return heroControl.subRolesLen;
        }
        return 0;
    };
    CommonFun.showTargetValue = function (type, val, maxVal) {
        switch (type) {
            case 0 /* LEVEL */:
                return 1000 > maxVal ? [val % 1000, maxVal] : [val / 1000 >> 0, maxVal / 1000 >> 0];
            default:
                return [val, maxVal];
        }
    };
    CommonFun.showTaskValue = function (taskType, val, maxVal) {
        switch (taskType) {
            case 83 /* ladder */:
                val = val >= maxVal ? 1 : 0;
                maxVal = 1;
                return [val, maxVal];
            default:
                return [val, maxVal];
        }
    };
    CommonFun.sortAwards = function (itemDatas) {
        var fun = function (a, b) {
            var aItemConfig = DataCenter.ins().ItemConfig[a.id];
            var bItemConfig = DataCenter.ins().ItemConfig[b.id];
            var aQuality = ItemUtils.getQuality(aItemConfig);
            var bQuality = ItemUtils.getQuality(bItemConfig);
            return SortUtils.sortDescByKey(aQuality, bQuality);
        };
        itemDatas.sort(fun);
    };
    CommonFun.getMultInfo = function (multiLimits, dayKey, zsLvKey) {
        if (dayKey === void 0) { dayKey = "day"; }
        if (zsLvKey === void 0) { zsLvKey = "zsLevel"; }
        var serverDay = GameServer.serverOpenDay + 1;
        var zsLv = reincarnateControl.lv;
        var result = null;
        for (var i = 0; i < multiLimits.length; i++) {
            var multiLimit = multiLimits[i];
            if (dayKey && serverDay < multiLimit[dayKey])
                break;
            if (zsLvKey && zsLv < multiLimit[zsLvKey])
                break;
            result = multiLimit;
        }
        return result;
    };
    CommonFun.getWorldBossMultNum = function (id) {
        var multipleNum = DataCenter.ins().WorldBossBaseConfig.multipleNum[id];
        return multipleNum && GameServer.serverOpenDay + 1 >= multipleNum[0] ? multipleNum[1] : 1;
    };
    CommonFun.flyItemToBag = function (target, item) {
        if (!item) {
            if (!target.parent) {
                return;
            }
            item = {};
            var point = target.localToGlobal();
            item.parent = StageUtils.ins().getUIStage();
            item.x = point.x + target.width / 2;
            item.y = point.y + target.width / 2;
        }
        var itemBase = new ItemBase;
        itemBase.x = item.x;
        itemBase.y = item.y;
        itemBase.data = target.data;
        itemBase.anchorOffsetX = itemBase.width / 2;
        itemBase.anchorOffsetY = itemBase.height / 2;
        item.parent.addChild(itemBase);
        gameControl.dispatchFlyItemEx(itemBase);
    };
    CommonFun.openWin = function (args) {
        if (args) {
            var param = CommonUtils.copyDataHandler(args);
            var nameOrClass = param.shift();
            if (this.isCyberPuzzle(nameOrClass)) {
                this.gotoQuanQia();
                return;
            }
            else {
                (_a = UIMgr.ins()).open.apply(_a, [nameOrClass].concat(param));
            }
        }
        var _a;
    };
    CommonFun.isCyberPuzzle = function (target) {
        return target == "CyberPuzzle";
    };
    CommonFun.gotoQuanQia = function () {
        if (backpackControl.getSurplusCount() < BackpackControl.BAG_ENOUGH) {
            UIMgr.ins().closeTopLevel();
            UIMgr.ins().open("BackpackFullTipsView");
        }
        else if (copyControl.currentEnergy >= copyControl.energy) {
            UIMgr.ins().closeTopLevel();
            copyControl.autoPk();
        }
        else {
            tipsControl.showTips(LangMgr.getValueByKey("powerInsufficient"));
        }
        return false;
    };
    CommonFun.getJobName = function (index) {
        return LangMgr.getValueByKey("job" + (index + 1));
    };
    CommonFun.andState = function (list) {
        for (var k in list) {
            if (list[k] == true) {
                return true;
            }
        }
        return false;
    };
    /**
     * 激活升阶
     * @param type    		0-激活 1-升阶
     * @param name    		名字
     * @param imgName 		图片资源
     * @param effName 		动画资源
     * @param spotlight 	聚光灯
     * @param closeCallback 关闭回调
     */
    CommonFun.show = function (type, name, imgName, effName, spotlight, closeCallback, mcRotation, mcOffsetY) {
        if (spotlight === void 0) { spotlight = true; }
        if (closeCallback === void 0) { closeCallback = null; }
        if (mcRotation === void 0) { mcRotation = 120; }
        if (mcOffsetY === void 0) { mcOffsetY = 0; }
        UIMgr.ins().open(ActivationView, type, name, imgName, effName, spotlight, closeCallback, mcRotation, mcOffsetY);
    };
    CommonFun.instanceofByName = function (value, className) {
        return egret.getQualifiedClassName(value) == className;
    };
    CommonFun.convertCfgLvToComLv = function (level, zslevel) {
        return 1e3 * (zslevel ? zslevel : 0) + (level ? level : 1);
    };
    return CommonFun;
}());
__reflect(CommonFun.prototype, "CommonFun");
var EgretModify = (function () {
    function EgretModify() {
    }
    EgretModify.modify = function () {
        if (typeof generateEUI2 !== 'undefined') {
            EgretModify.fixDefaultThm();
            /*由于代码中itemRenderer依赖data为空的逻辑,所以这个补丁不能打上。只能去写脚本，把gameEui.json中所有皮肤空ArrayCollection的source清空，
            使皮肤加载不执行空数据(渲染itemRenderer那帧如果没有代码数据覆盖掉皮肤空数据，就会取皮肤空数据)*/
            //EgretModify.fixCommonJs2ItemRenderer();
        }
        else {
            this.fixEXMLParser();
            this.fixLoadThm();
            this.fixComponentSkinName();
            this.fixInputText();
            this.fixHTML5StageText();
            this.fixWebGLRenderContext();
            this.fixWebGLRenderTarget();
        }
    };
    EgretModify.fixCommonJs2ItemRenderer = function () {
        //ListBase有继承调用DataGroup的updateRenderer，重写DataGroup即可。
        var updateRenderer = eui.DataGroup.prototype.updateRenderer;
        eui.DataGroup.prototype.updateRenderer = function (renderer, itemIndex, data) {
            var values = this.$DataGroup;
            values[11 /* renderersBeingUpdated */] = true;
            if (data == null) {
                values[11 /* renderersBeingUpdated */] = false;
                return renderer;
            }
            //皮肤中List的ArrayCollection有数据，但是都是空对象,不存在任何自身属性,只有个原型链__proto__(这种情况commonjs2中皮肤加载,itemRenderer的DataChange中data为空)
            if (data instanceof Object) {
                var hasOwnProperty = false;
                for (var prop in data) {
                    if (data.hasOwnProperty(prop)) {
                        hasOwnProperty = true;
                        break;
                    }
                }
                if (!hasOwnProperty) {
                    values[11 /* renderersBeingUpdated */] = false;
                    return renderer;
                }
            }
            updateRenderer.call(this, renderer, itemIndex, data);
        };
    };
    EgretModify.fixDefaultThm = function () {
        window["JSONParseClass"].__proto__.createElementContentOrViewport = function (component, isViewStack) {
            var result;
            var typeStr = this.getNormalizeEuiName(this.skinClass[component].className ? this.skinClass[component].className : this.skinClass[component].$t);
            if (typeStr == "egret.tween.TweenGroup") {
                result = this.creatsEgretTweenGroup(component);
            }
            else {
                /** 有可能对象是从外面一定义的皮肤 */
                var type_1 = egret.getDefinitionByName(typeStr);
                //new type_1()这个构造函数，如果类type_1里面有this.skinName，skinClass可能会改变
                var selfSkinClass_1 = this.skinClass;
                this.$createNewObject(function () {
                    result = new type_1();
                    if (isViewStack && selfSkinClass_1[component].className) {
                        result["isViewStackPanel"] = true;
                    }
                });
                this.addCommonProperty(component, result);
            }
            this.target[component] = result;
            return result;
        };
        //commonjs2加载皮肤方式，对于皮肤有多个状态时，切换皮肤状态validatenow的时候，layout为字符串会报错,需要打补丁
        window["JSONParseClass"].__proto__.applyState = function () {
            if (this.skinClass["$s"] == undefined)
                return;
            var states = [];
            for (var state in this.skinClass["$s"]) {
                var setProperty = [];
                var tempState = this.skinClass["$s"][state];
                if (tempState["$saI"]) {
                    for (var _i = 0, _a = tempState["$saI"]; _i < _a.length; _i++) {
                        var property = _a[_i];
                        setProperty.push(new eui.AddItems(property["target"], property["property"], property["position"], property["relativeTo"]));
                    }
                }
                if (tempState["$ssP"]) {
                    for (var _b = 0, _c = tempState["$ssP"]; _b < _c.length; _b++) {
                        var property = _c[_b];
                        if (property["name"]) {
                            var value = property["value"];
                            if (property["name"] == "scale9Grid") {
                                value = this.getScale9Grid(property["value"]);
                            }
                            ////打上layout属性补丁 - start
                            if (typeof (value) == "string") {
                                var layoutMatch = null;
                                var layout = null;
                                if (layoutMatch = value.match(/this._HorizontalLayout\d+$/)) {
                                    layout = layoutMatch[0].replace("this.", "");
                                }
                                else if (layoutMatch = value.match(/this._VerticalLayout\d+$/)) {
                                    layout = layoutMatch[0].replace("this.", "");
                                }
                                else if (layoutMatch = value.match(/this._TileLayout\d+$/)) {
                                    layout = layoutMatch[0].replace("this.", "");
                                }
                                else if (layoutMatch = value.match(/this._BasicLayout\d+$/)) {
                                    layout = layoutMatch[0].replace("this.", "");
                                }
                                if (layout) {
                                    value = this.createLayout(layout);
                                }
                            }
                            ////打上layout属性补丁 - end
                            setProperty.push(new eui.SetProperty(property["target"], property["name"], value));
                        }
                        else {
                            setProperty.push(new eui.SetStateProperty(this.target, property["templates"], property["chainIndex"], this.target[property["target"]], property["property"]));
                        }
                    }
                }
                states.push(new eui.State(state, setProperty));
            }
            this.target["states"] = states;
        };
        //对于viewStack中的panel打上补丁
        window["JSONParseClass"].__proto__.addCommonProperty = function (componentName, target) {
            var eleC;
            var sId;
            var _loop_2 = function (prop) {
                var property = this_2.skinClass[componentName][prop];
                if (prop == "$t") {
                }
                else if (prop == "layout") {
                    target[prop] = this_2.createLayout(property);
                }
                else if (prop == "$eleC") {
                    eleC = property;
                }
                else if (prop == "$sId") {
                    sId = property;
                }
                else if (prop == "scale9Grid") {
                    target[prop] = this_2.getScale9Grid(property);
                }
                else if (prop == "skinName") {
                    this_2.$createNewObject(function () {
                        //viewStack中的panel，重写open close
                        if (target["isViewStackPanel"]) {
                            var proto = target.__proto__;
                            if (!proto.__skinName_1) {
                                proto.__skinName_1 = property;
                                var close_2 = proto.close;
                                if (close_2) {
                                    proto.close_1 = close_2;
                                    proto.close = function () {
                                        if (this.skinName) {
                                            this.close_1();
                                        }
                                    };
                                    close_2 = null;
                                }
                                var open_2 = proto.open;
                                if (open_2) {
                                    proto.open_1 = open_2;
                                    proto.open = function () {
                                        var param = [];
                                        for (var _d = 0; _d < arguments.length; _d++) {
                                            param[_d] = arguments[_d];
                                        }
                                        if (true) {
                                            if (!this.skinName) {
                                                this.$initSkin();
                                            }
                                            else if (!this.$isInitSkin) {
                                                var clsName = egret.getQualifiedClassName(this);
                                                debug.log("Class:" + clsName + ",skinName repeat!!!");
                                            }
                                        }
                                        else {
                                            if (!this.$isInitSkin) {
                                                this.$initSkin();
                                            }
                                        }
                                        this.open_1.apply(this, param);
                                    };
                                    open_2 = null;
                                }
                                var childrenCreated = proto.childrenCreated;
                                if (childrenCreated) {
                                    proto.childrenCreated_1 = childrenCreated;
                                    proto.childrenCreated = function () { };
                                    childrenCreated = null;
                                }
                                var initSkin = proto['$initSkin'];
                                if (true && initSkin) {
                                    debug.log("initSkin function can not be used");
                                }
                                proto['$initSkin'] = function () {
                                    this.skinName = this.__skinName_1;
                                    this.$isInitSkin = true;
                                    this.childrenCreated_1();
                                };
                            }
                        }
                        else {
                            target[prop] = property;
                        }
                    });
                }
                else if (prop == "itemRendererSkinName") {
                    this_2.$createNewObject(function () {
                        var dirPath = property.split(".");
                        var t = window;
                        for (var _i = 0, dirPath_1 = dirPath; _i < dirPath_1.length; _i++) {
                            var p = dirPath_1[_i];
                            t = t[p];
                        }
                        target[prop] = t;
                    });
                }
                else if (prop == "itemRenderer") {
                    target[prop] = egret.getDefinitionByName(property);
                }
                else if (prop == "dataProvider") {
                    target[prop] = this_2.createDataProvider(property);
                }
                else if (prop == "viewport") {
                    target[prop] = this_2.createElementContentOrViewport(property);
                }
                else {
                    target[prop] = property;
                }
            };
            var this_2 = this;
            for (var prop in this.skinClass[componentName]) {
                _loop_2(prop);
            }
            var ele = [];
            if (eleC && eleC.length > 0) {
                for (var _i = 0, eleC_1 = eleC; _i < eleC_1.length; _i++) {
                    var element = eleC_1[_i];
                    var e;
                    if (this.skinClass[componentName].$t == "$eV") {
                        e = this.createElementContentOrViewport(element, true);
                    }
                    else {
                        e = this.createElementContentOrViewport(element);
                    }
                    ele.push(e);
                }
            }
            target["elementsContent"] = ele;
            if (sId && sId.length > 0) {
                for (var _a = 0, sId_1 = sId; _a < sId_1.length; _a++) {
                    var element = sId_1[_a];
                    this.createElementContentOrViewport(element);
                }
            }
            return target;
        };
        //对于皮肤中List有ArrayCollection，但是ArrayCollection没有数据源，解析皮肤会报错，打上补丁
        window["JSONParseClass"].__proto__.createDataProvider = function (component) {
            if (component == "")
                return undefined;
            var result = this.createTypeObject(component);
            var source = [];
            //fix
            if (this.skinClass[component]["source"]) {
                for (var _i = 0, _a = this.skinClass[component]["source"]; _i < _a.length; _i++) {
                    var sour = _a[_i];
                    source.push(this.createItemRender(sour));
                }
            }
            result["source"] = source;
            return result;
        };
    };
    EgretModify.fixEXMLParser = function () {
        var EXMLParser = eui.sys.EXMLParser;
        EXMLParser.prototype['getOverrideClassNameOfNode'] = function (node) {
            if (node.attributes && node.attributes["className"]) {
                var Cls = egret.getDefinitionByName(node.attributes["className"]);
                if (Cls) {
                    if (node.parent && node.parent.localName == "ViewStack") {
                        if (node.attributes['skinName']) {
                            this.addInitSkin(Cls, node.attributes['skinName']);
                            delete node.attributes['skinName'];
                        }
                    }
                    return node.attributes["className"];
                }
            }
            return this['getClassNameOfNode'](node);
        };
        EXMLParser.prototype['addInitSkin'] = function (cls, skinName) {
            var proto = cls.prototype;
            if (!proto.__skinName_1) {
                proto.__skinName_1 = skinName;
                var close_3 = proto.close;
                if (close_3) {
                    proto.close_1 = close_3;
                    proto.close = function () {
                        if (this.skinName) {
                            this.close_1();
                        }
                    };
                    close_3 = null;
                }
                var open_3 = proto.open;
                if (open_3) {
                    proto.open_1 = open_3;
                    proto.open = function () {
                        var param = [];
                        for (var _d = 0; _d < arguments.length; _d++) {
                            param[_d] = arguments[_d];
                        }
                        if (true) {
                            if (!this.skinName) {
                                this.$initSkin();
                            }
                            else if (!this.$isInitSkin) {
                                var clsName = egret.getQualifiedClassName(this);
                                debug.log("Class:" + clsName + ",skinName repeat!!!");
                            }
                        }
                        else {
                            if (!this.$isInitSkin) {
                                this.$initSkin();
                            }
                        }
                        this.open_1.apply(this, param);
                    };
                    open_3 = null;
                }
                var childrenCreated = proto.childrenCreated;
                if (childrenCreated) {
                    proto.childrenCreated_1 = childrenCreated;
                    proto.childrenCreated = function () { };
                    childrenCreated = null;
                }
                var initSkin = proto['$initSkin'];
                if (true && initSkin) {
                    debug.log("initSkin function can not be used");
                }
                proto['$initSkin'] = function () {
                    this.skinName = this.__skinName_1;
                    this.$isInitSkin = true;
                    this.childrenCreated_1();
                };
            }
        };
        EXMLParser.prototype['createFuncForNode'] = function (node) {
            var className = node.localName;
            var isBasicType = this.isBasicTypeData(className);
            if (isBasicType) {
                return this.createBasicTypeForNode(node);
            }
            var moduleName = this.getOverrideClassNameOfNode(node);
            var func = new eui.sys.EXFunction();
            var tailName = "_i";
            var id = node.attributes.id;
            func.name = id + tailName;
            this.currentClass.addFunction(func);
            var cb = new eui.sys.EXCodeBlock();
            func.codeBlock = cb;
            var varName = "t";
            if (className == "Object") {
                cb.addVar(varName, "{}");
            }
            else {
                cb.addVar(varName, "new " + moduleName + "()");
            }
            var containsId = !!this.currentClass.getVariableByName(id);
            if (containsId) {
                cb.addAssignment("this." + id, varName);
            }
            this.addAttributesToCodeBlock(cb, varName, node);
            this.initlizeChildNode(node, cb, varName);
            var delayAssignments = this.delayAssignmentDic[id];
            if (delayAssignments) {
                var length_1 = delayAssignments.length;
                for (var i = 0; i < length_1; i++) {
                    var codeBlock = delayAssignments[i];
                    cb.concat(codeBlock);
                }
            }
            cb.addReturn(varName);
            return "this." + func.name + "()";
        };
        var formatValue = EXMLParser.prototype['formatValue'];
        EXMLParser.prototype['formatValue'] = function (key, value, node) {
            if (key == "itemRendererSkinName") {
                return this['formatString'](value);
            }
            return formatValue.call(this, key, value, node);
        };
        var innerClassCount = 1;
        EXMLParser.prototype.parse = function (text) {
            if (true) {
                if (!text) {
                    egret.$error(1003, "text");
                }
            }
            var xmlData = null;
            if (true) {
                try {
                    xmlData = egret.XML.parse(text);
                }
                catch (e) {
                    egret.$error(2002, text + "\n" + e.message);
                }
            }
            else {
                xmlData = egret.XML.parse(text);
            }
            var hasClass = false;
            var className = "";
            if (xmlData.attributes["class"]) {
                className = xmlData.attributes["class"];
                delete xmlData.attributes["class"];
                hasClass = !!className;
            }
            else {
                className = "$exmlClass_" + innerClassCount++;
            }
            var exClass = this.parseClass(xmlData, className);
            var code = exClass.toCode();
            var clazz = null;
            var geval = eval;
            if (true) {
                try {
                    clazz = geval(code);
                }
                catch (e) {
                    debug.log(code);
                    return null;
                }
            }
            else {
                clazz = geval(code);
            }
            if (hasClass && clazz) {
                egret.registerClass(clazz, className);
                var paths = className.split(".");
                var length_2 = paths.length;
                var definition = __global;
                for (var i = 0; i < length_2 - 1; i++) {
                    var path = paths[i];
                    definition = definition[path] || (definition[path] = {});
                }
                if (definition[paths[length_2 - 1]]) {
                }
                else {
                    definition[paths[length_2 - 1]] = clazz;
                }
            }
            xmlData = undefined;
            className = undefined;
            code = undefined;
            exClass = undefined;
            geval = undefined;
            text = undefined;
            return clazz;
        };
        EXMLParser = undefined;
    };
    EgretModify.fixLoadThm = function () {
        var exmlsDic = EgretModify.exmlsDic = {};
        var setSkinClassName = function (path, content) {
            var match = content.match(/ class="([^"]*)"/i);
            if (true && exmlsDic[match[1]]) {
                alert("Skin " + exmlsDic[match[1]].path + " and " + path + " repeat!!!");
            }
            exmlsDic[match[1]] = { path: path, content: content };
        };
        eui.Theme.prototype["onConfigLoaded"] = function (str) {
            var data;
            if (str) {
                if (true) {
                    try {
                        data = JSON.parse(str);
                    }
                    catch (e) {
                        egret.$error(3000);
                    }
                }
                else {
                    try {
                        data = JSON.parse(str);
                    }
                    catch (error) {
                        alert("Skin parse error!");
                    }
                }
            }
            else if (true) {
                egret.$error(3000, this.$configURL);
            }
            if (!data) {
                alert("Skins load fail\uFF0CPlease check the network login again");
                return;
            }
            if (data && data.skins) {
                var skinMap = this.skinMap;
                var skins = data.skins;
                var keys = Object.keys(skins);
                var length_3 = keys.length;
                for (var i = 0; i < length_3; i++) {
                    var key = keys[i];
                    if (!skinMap[key]) {
                        this.mapSkin(key, skins[key]);
                    }
                }
            }
            if (data.styles) {
                this.$styles = data.styles;
            }
            if (!data.exmls || data.exmls.length == 0) {
                this.onLoaded();
            }
            else if (data.exmls[0]['gjs']) {
                data.exmls.forEach(function (exml) { return EXML.$parseURLContentAsJs((exml).path, (exml).gjs, (exml).className); });
                this.onLoaded();
            }
            else if (data.exmls[0]['content']) {
                data.exmls.forEach(function (exml) { return setSkinClassName(exml.path, exml.content); });
                EgretModify.preParserExml();
                this.onLoaded();
            }
            else {
                EXML.$loadAll(data.exmls, this.onLoaded, this, true);
            }
        };
    };
    EgretModify.fixComponentSkinName = function () {
        var $parseSkinName = eui.Component.prototype.$parseSkinName;
        eui.Component.prototype.$parseSkinName = function () {
            var skinName = this.skinName;
            if (typeof (skinName) == "string") {
                EgretModify.parseSkinName(skinName);
            }
            $parseSkinName.call(this);
        };
    };
    EgretModify.parseSkinName = function (skinName) {
        var exmlsDic = EgretModify.exmlsDic;
        if (exmlsDic && exmlsDic.hasOwnProperty(skinName)) {
            var obj = exmlsDic[skinName];
            delete exmlsDic[skinName];
            EXML.$parseURLContent(obj.path, obj.content);
        }
    };
    EgretModify.preParserExml = function () {
        var prelist = [
            "skins.ButtonSkin",
            "skins.CheckBoxSkin",
            "skins.HScrollBarSkin",
            "skins.HSliderSkin",
            "skins.ItemRendererSkin",
            "skins.PanelSkin",
            "skins.ProgressBarSkin",
            "skins.RadioButtonSkin",
            "skins.ScrollerSkin",
            "skins.TextInputSkin",
            "skins.ToggleSwitchSkin",
            "skins.VScrollBarSkin",
            "skins.VSliderSkin",
            "PortalViewSkin",
            "GameSceneViewSkin",
            "GameBottomViewSkin"
        ];
        for (var _d = 0, prelist_1 = prelist; _d < prelist_1.length; _d++) {
            var skinName = prelist_1[_d];
            EgretModify.parseSkinName(skinName);
        }
    };
    EgretModify.fixInputText = function () {
        if (DeviceUtils.IsIPhone) {
            var value_1 = 0;
            var showCall_1 = function () {
                var scrollHeight = document.body.scrollHeight;
                if (value_1 - 50 <= scrollHeight) {
                    if (50 >= value_1) {
                        document.body.scrollTop = scrollHeight;
                    }
                    else {
                        document.body.scrollTop = scrollHeight - value_1 + 50;
                    }
                }
            };
            var hideCall_1 = function () {
                if (document.body.scrollTop) {
                    document.body.scrollTop = 0;
                }
            };
            var showFun_1 = egret.web["HTMLInput"].prototype.show;
            egret.web["HTMLInput"].prototype.show = function () {
                showFun_1.call(this);
                var stageText = this._stageText;
                var globalPoint = stageText.$textfield.localToGlobal(0, 0);
                value_1 = StageUtils.ins().getHeight() - globalPoint.y - stageText.$textfield.height;
                value_1 = value_1 * this.$scaleY * (window.devicePixelRatio || 1) >> 0;
                TimerMgr.ins().remove(hideCall_1, null);
                TimerMgr.ins().once(100, showCall_1, null);
            };
            var hideFun_1 = egret.StageText.prototype.$hide;
            egret.StageText.prototype.$hide = function () {
                hideFun_1.call(this);
                TimerMgr.ins().remove(showCall_1, null);
                TimerMgr.ins().once(100, hideCall_1, null);
            };
        }
    };
    EgretModify.fixHTML5StageText = function () {
        if (egret.web["HTMLInput"]) {
            var disconnectStageText_1 = egret.web["HTMLInput"].prototype.disconnectStageText;
            egret.web["HTMLInput"].prototype.disconnectStageText = function (e) {
                disconnectStageText_1.call(this, e);
                this._needShow = false;
            };
        }
    };
    EgretModify.fixWebGLRenderContext = function () {
        if (egret.web["WebGLRenderContext"]) {
            egret.web["WebGLRenderContext"].prototype.getWebGLTexture = function (bitmapData) {
                if (!bitmapData.webGLTexture) {
                    if (bitmapData.format == "image") {
                        bitmapData.webGLTexture = this.createTexture(bitmapData.source);
                    }
                    else if (bitmapData.format == "pvr") {
                        bitmapData.webGLTexture = this.createTextureFromCompressedData(bitmapData.source.pvrtcData, bitmapData.width, bitmapData.height, bitmapData.source.mipmapsCount, bitmapData.source.format);
                    }
                    if (bitmapData.$deleteSource && bitmapData.webGLTexture) {
                        bitmapData.source = null;
                    }
                    if (bitmapData.webGLTexture) {
                        bitmapData.webGLTexture.smoothing = true;
                    }
                }
                return bitmapData.webGLTexture;
            };
        }
    };
    EgretModify.fixWebGLRenderTarget = function () {
        if (egret.web["WebGLRenderTarget"]) {
            egret.web["WebGLRenderTarget"].prototype.createTexture = function () {
                var gl = this.gl;
                var texture = gl.createTexture();
                if (texture) {
                    texture["glContext"] = gl;
                    gl.bindTexture(gl.TEXTURE_2D, texture);
                    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.width, this.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
                }
                return texture;
            };
        }
    };
    return EgretModify;
}());
__reflect(EgretModify.prototype, "EgretModify");
var ItemUtils = (function () {
    function ItemUtils() {
    }
    /**
     * 计算普通装备的评分
     */
    ItemUtils.calculateBagItemScore = function (item, ignore) {
        var equipConfig = DataCenter.ins().EquipConfig[item.itemConfig.id];
        var powerConfig = DataCenter.ins().CombatPowerConfig;
        var allPower = 0;
        var attr = item.att;
        var value = 0;
        if (attr) {
            for (var k in AttributeData.itemTranslate) {
                value = 0;
                if (!equipConfig[k])
                    continue;
                for (var index = 0; index < attr.length; index++) {
                    if (attr[index].type == AttributeData.itemTranslate[k]) {
                        value = equipConfig[k] + attr[index].value;
                        break;
                    }
                }
                allPower += (value == undefined ? 0 : value) * powerConfig[AttributeData.itemTranslate[k]].power;
            }
        }
        else {
            for (var k in AttributeData.itemTranslate) {
                value = equipConfig[k];
                if (!value)
                    continue;
                var type = RoleModel.getAttrTypeByName(k);
                allPower += value * powerConfig[type].power;
            }
        }
        var expower = 0;
        if (equipConfig.baseAttr1) {
            if (ignore && ignore.indexOf(equipConfig.baseAttr1.type) == -1) {
                expower += BackpackControl.getAttrPower([equipConfig.baseAttr1]);
            }
        }
        if (equipConfig.baseAttr2) {
            expower += BackpackControl.getAttrPower([equipConfig.baseAttr2]);
        }
        if (equipConfig.exPower) {
            expower += equipConfig.exPower;
        }
        return Math.floor(allPower / 100) + Math.floor(expower);
    };
    /**
     * 计算神装&传奇装的评分
     */
    ItemUtils.pointCalNumber = function (item) {
        var itemId = item.id;
        if (ItemUtils.itemPoints[itemId] != undefined) {
            return ItemUtils.itemPoints[itemId];
        }
        var equipConfig = DataCenter.ins().EquipConfig[itemId];
        var powerConfig = DataCenter.ins().CombatPowerConfig;
        var allPower = 0;
        for (var k in AttributeData.itemTranslate) {
            var type = AttributeData.itemTranslate[k];
            var value = equipConfig[k];
            if (value) {
                var conf = powerConfig[type];
                allPower += (value + Math.floor(value * ItemBase.ADDITION_RANGE / 100)) * conf.power;
            }
        }
        ItemUtils.itemPoints[itemId] = Math.floor(allPower / 100);
        return ItemUtils.itemPoints[itemId];
    };
    /**
     * 获取基础属性
     */
    ItemUtils.getBaseAttrData = function (item) {
        var equipConfig = DataCenter.ins().EquipConfig[item.id];
        var otherBaseType = [57 /* atHolyDamege */];
        var baseAttr = [];
        for (var i in AttributeData.itemTranslate) {
            if (equipConfig[i]) {
                baseAttr.push(new AttributeData(AttributeData.itemTranslate[i], equipConfig[i]));
            }
        }
        if (equipConfig.baseAttr1) {
            if (otherBaseType.indexOf(equipConfig.baseAttr1.type) >= 0)
                baseAttr.push(new AttributeData(equipConfig.baseAttr1.type, equipConfig.baseAttr1.value));
        }
        if (equipConfig.baseAttr2) {
            if (otherBaseType.indexOf(equipConfig.baseAttr2.type) >= 0)
                baseAttr.push(new AttributeData(equipConfig.baseAttr2.type, equipConfig.baseAttr2.value));
        }
        return baseAttr;
    };
    /**
     * 计算关联属性战力
     */
    ItemUtils.calculateRelatePower = function (attrs, role) {
        var totalPower = 0;
        if (!attrs || !role) {
            return totalPower;
        }
        for (var _i = 0, attrs_1 = attrs; _i < attrs_1.length; _i++) {
            var attr = attrs_1[_i];
            totalPower += this.relatePower(attr, role);
        }
        return totalPower;
    };
    /**
     * 关联属性战力计算公式
     */
    ItemUtils.relatePower = function (attr, role) {
        var totalPower = 0;
        var powerConfig = DataCenter.ins().CombatPowerConfig;
        var config = powerConfig[attr.type];
        if (config && config.relate_type) {
            var value = role.getAtt(config.relate_type);
            var ex_type = AttributeData.exRelate[config.relate_type];
            if (ex_type) {
                var ex_value = role.getAtt(ex_type);
                if (ex_value) {
                    value = Math.floor(value / (1 + ex_value / 10000));
                }
            }
            totalPower += Math.floor(attr.value * value * config.relate_power / 100);
        }
        return totalPower;
    };
    ItemUtils.relatePowerEx = function (attrs, role) {
        var result = [];
        for (var i = 0; i < attrs.length; i++) {
            if (attrs[i] && attrs[i].type) {
                var aType = AttributeData.exRelateEx[attrs[i].type];
                if (aType) {
                    var precent = role.getAtt(aType);
                    if (precent) {
                        var value = Math.floor(attrs[i].value / 10000 * precent);
                        result.push(new AttributeData(aType, value));
                    }
                }
            }
        }
        return result;
    };
    ItemUtils.getQuality = function (config) {
        if (!config)
            return 0;
        if (DataCenter.ins().ItemDescConfig[config.descIndex])
            return DataCenter.ins().ItemDescConfig[config.descIndex].quality;
        return 0;
    };
    ItemUtils.getQualityColor = function (config) {
        return LangMgr.getColor("qualityColor" + this.getQuality(config));
    };
    ItemUtils.getType = function (config) {
        if (!config)
            return 0;
        if (DataCenter.ins().ItemDescConfig[config.descIndex])
            return DataCenter.ins().ItemDescConfig[config.descIndex].type;
        return 0;
    };
    ItemUtils.getSubType = function (config) {
        if (!config)
            return 0;
        if (DataCenter.ins().ItemDescConfig[config.descIndex])
            return DataCenter.ins().ItemDescConfig[config.descIndex].subType;
        return 0;
    };
    ItemUtils.getJob = function (config) {
        if (!config)
            return 0;
        if (DataCenter.ins().ItemDescConfig[config.descIndex])
            return DataCenter.ins().ItemDescConfig[config.descIndex].job;
        return 0;
    };
    ItemUtils.itemPoints = {};
    return ItemUtils;
}());
__reflect(ItemUtils.prototype, "ItemUtils");
var LinkUtils = (function () {
    function LinkUtils() {
    }
    LinkUtils.textLink = function (str, data) {
        if (str) {
            var list = void 0;
            if (str.indexOf(",") >= 0) {
                list = str.split(",");
            }
            else if (str.indexOf("*") >= 0) {
                list = str.split("*");
            }
            if (list && !(list.length <= 0)) {
                switch (+list[0]) {
                    case 1 /* teamFB */:
                        if (!crossArenaControl.checkIsMatching())
                            return;
                        if (data && data.roleId == ActorControl.actorID) {
                            tipsControl.showTips(LangMgr.getValueByKey("textLinkTips1"));
                            return;
                        }
                        copyControl.upEnterTFRoom(+list[1]);
                        break;
                    case 2 /* KfArena */:
                        crossArenaControl.upJoinTeam(+list[1]);
                        break;
                    case 4 /* fbHelp */:
                        copyHelpControl.checkEnterToHelp(list[1], data.time);
                        break;
                    case 5 /* revengeHelp */:
                        var vals = list[1].split("+");
                        var hatredActorId = +vals[1];
                        var helpActorId = +vals[2];
                        if (!hatredControl.isOpen()) {
                            var zsLv = DataCenter.ins().ServerEenemyBaseConfig.openZsLevel / 1000 >> 0;
                            var lv = DataCenter.ins().ServerEenemyBaseConfig.openZsLevel % 1000;
                            tipsControl.showTips(LangMgr.getValueByKey("textLinkTips2", zsLv, lv));
                            return;
                        }
                        if (ActorControl.actorID == helpActorId) {
                            tipsControl.showTips(LangMgr.getValueByKey("textLinkTips3"));
                            return;
                        }
                        if (MapControl.copyId != 0 && !toseongControl.isToseong) {
                            tipsControl.showCenterTips(LangMgr.getValueByKey("textLinkTips4"));
                            return;
                        }
                        if (!data.time || data.time < GameServer.serverTime) {
                            tipsControl.showTips(LangMgr.getValueByKey("textLinkTips5"));
                            return;
                        }
                        hatredControl.upAssist(helpActorId, hatredActorId);
                        break;
                    case 6 /* mineHelp */:
                        if (data.roleId == ActorControl.actorID) {
                            tipsControl.showTips(LangMgr.getValueByKey("textLinkTips6"));
                            return;
                        }
                        if (!mineControl.openCheck(true)) {
                            return;
                        }
                        if (copyControl.checkInFB()) {
                            return;
                        }
                        var mvals = list[1].split("+");
                        mineControl.upHelpOther(+mvals[0]);
                        break;
                    case 8 /* linkItem */:
                        CommonFun.viewItemTips(+list[1], +list[2]);
                        break;
                }
            }
        }
    };
    return LinkUtils;
}());
__reflect(LinkUtils.prototype, "LinkUtils");
var Md5Utils = (function () {
    function Md5Utils() {
    }
    Md5Utils.hex_md5 = function (s) {
        return EncryptMd5.hex_md5(s);
    };
    Md5Utils.obj_cntstr = function (obj, verifyKey, ignoreVerifyKeys, isASC) {
        if (ignoreVerifyKeys === void 0) { ignoreVerifyKeys = []; }
        if (isASC === void 0) { isASC = true; }
        //key排序
        var keys = [];
        for (var key in obj) {
            keys.push(key);
        }
        if (isASC)
            keys.sort();
        //key拼接
        var str = [];
        for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            if (ignoreVerifyKeys.indexOf(key) == -1) {
                str.push(key + "=" + obj[key]);
            }
        }
        var md5Str = str.join("&");
        return md5Str;
    };
    Md5Utils.obj_md5 = function (obj, verifyKey, ignoreVerifyKeys, isASC) {
        if (ignoreVerifyKeys === void 0) { ignoreVerifyKeys = []; }
        if (isASC === void 0) { isASC = true; }
        //key排序
        var keys = [];
        for (var key in obj) {
            keys.push(key);
        }
        if (isASC)
            keys.sort();
        //key拼接
        var str = [];
        for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            if (ignoreVerifyKeys.indexOf(key) == -1) {
                str.push(key + "=" + obj[key]);
            }
        }
        //md5串
        var md5Str = str.join("&");
        return EncryptMd5.hex_md5(md5Str + (verifyKey ? "&" + verifyKey : ""));
    };
    Md5Utils.obj_md5_args = function (obj, verifyKey, addSign, encodeKeys, ignoreVerifyKeys, isASC) {
        if (encodeKeys === void 0) { encodeKeys = []; }
        if (ignoreVerifyKeys === void 0) { ignoreVerifyKeys = []; }
        if (isASC === void 0) { isASC = true; }
        //md5签名
        var sign = this.obj_md5(obj, verifyKey, ignoreVerifyKeys, isASC);
        //key排序
        var keys = [];
        for (var key in obj) {
            keys.push(key);
        }
        if (isASC)
            keys.sort();
        //key拼接
        var str = [];
        for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            if (encodeKeys.indexOf(key) == -1) {
                str.push(key + "=" + obj[key]);
            }
            else {
                str.push(key + "=" + encodeURIComponent(obj[key]));
            }
        }
        //md5串
        var resultStr = str.join("&");
        if (addSign) {
            resultStr += "&sign=" + sign;
        }
        return resultStr;
    };
    return Md5Utils;
}());
__reflect(Md5Utils.prototype, "Md5Utils");
var Sha1Utils = (function () {
    function Sha1Utils() {
    }
    Sha1Utils.hex_sha1 = function (s) {
        return EncryptSha1.hex_sha1(s);
    };
    return Sha1Utils;
}());
__reflect(Sha1Utils.prototype, "Sha1Utils");
var SoundUtils = (function (_super) {
    __extends(SoundUtils, _super);
    function SoundUtils() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._delayTime = 0;
        _this._delayStartTime = 0;
        _this._runTimeGap = 700;
        _this._runTimeStart = 0;
        return _this;
    }
    SoundUtils.ins = function () {
        return _super.ins.call(this);
    };
    SoundUtils.prototype.playRunSound = function () {
        if (egret.getTimer() - this._runTimeStart >= this._runTimeGap) {
            this._runTimeStart = egret.getTimer();
            if (!GlobalModel.openSound)
                return;
            SoundManager.ins().playEffect(SoundUtils.RUN);
        }
    };
    SoundUtils.prototype.playRun = function () {
        if (egret.getTimer() - this._runTimeStart > this._runTimeGap + 100) {
            this.playRunSound();
        }
        if (!TimerMgr.ins().isExists(this.playRunSound, this)) {
            TimerMgr.ins().doTimer(this._runTimeGap, 0, this.playRunSound, this);
        }
    };
    SoundUtils.prototype.stopRun = function () {
        TimerMgr.ins().remove(this.playRunSound, this);
    };
    SoundUtils.prototype.playEffect = function (effectName) {
        if (egret.getTimer() - this._delayStartTime < this._delayTime) {
            return;
        }
        if (!GlobalModel.openSound)
            return;
        SoundManager.ins().playEffect(effectName);
    };
    SoundUtils.prototype.playBg = function (bgName) {
        if (!GlobalModel.openSound)
            return;
        SoundManager.ins().playBg(bgName);
    };
    SoundUtils.prototype.touchBg = function () {
        if (!GlobalModel.openSound)
            return;
        SoundManager.ins().touchBg();
    };
    SoundUtils.prototype.stopBg = function () {
        SoundManager.ins().stopBg();
    };
    SoundUtils.prototype.setEffectOn = function (val) {
        SoundManager.ins().setEffectOn(val);
    };
    SoundUtils.prototype.setBgOn = function (val) {
        SoundManager.ins().setBgOn(val);
    };
    SoundUtils.prototype.delayTime = function (time) {
        this._delayTime = time;
        this._delayStartTime = egret.getTimer();
    };
    //跑动
    SoundUtils.RUN = "run_mp3";
    //UI
    SoundUtils.VIEW = "view_mp3";
    //任务
    SoundUtils.TASK = "task_mp3";
    //升级
    SoundUtils.UPGRADE = "upgrade_mp3";
    //传送
    SoundUtils.TRANSFER = "transfer_mp3";
    //穿戴
    SoundUtils.WEAR = "wear_mp3";
    //创角
    SoundUtils.CREATE_ROLE = "createRole_mp3";
    //强化
    SoundUtils.STRENGTHEN = "strengthen_mp3";
    //熔炼
    SoundUtils.SMELT = "smelt_mp3";
    //技能
    SoundUtils.SKILL_UPGRADE = "skillUpgrade_mp3";
    //播放UI音效
    SoundUtils.PLAY_OPEN_VIEW = false;
    return SoundUtils;
}(SingleClass));
__reflect(SoundUtils.prototype, "SoundUtils");
var GameLoadingMJ = (function (_super) {
    __extends(GameLoadingMJ, _super);
    function GameLoadingMJ() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GameLoadingMJ.prototype.initUI = function () {
        this.bg = new eui.Image;
        var pfData = GlobalModel.pfData;
        if (pfData && pfData.startbg) {
            this.bg.source = pfData.startbg;
        }
        else {
            this.bg.source = PATH_ROOT + "loading/loading.png";
        }
        this.addChild(this.bg);
        this.bg.width = 580;
        this.bg.height = 1330;
        this.bg.anchorOffsetX = this.bg.width / 2;
        this.bg.anchorOffsetY = this.bg.height / 2;
        this.bg.x = this.stage.stageWidth / 2;
        this.bg.y = this.stage.stageHeight / 2;
        this.progressPane = new egret.DisplayObjectContainer;
        this.addChild(this.progressPane);
        this.messageText = new eui.Label;
        this.messageText.width = 360;
        this.messageText.height = 20;
        this.messageText.textAlign = egret.HorizontalAlign.CENTER;
        this.messageText.x = 0;
        this.messageText.y = 0;
        this.messageText.size = 20;
        this.progressPane.addChild(this.messageText);
        this.progressBg1 = new eui.Image;
        this.progressBg1.source = PATH_ROOT + "loading/bar3.png";
        this.progressBg1.x = 0;
        this.progressBg1.y = 30;
        this.progressPane.addChild(this.progressBg1);
        this.progressBg2 = new eui.Image;
        this.progressBg2.source = PATH_ROOT + "loading/bar2.png";
        this.progressBg2.scale9Grid = new egret.Rectangle(12, 8, 5, 5);
        this.progressBg2.width = 300;
        this.progressBg2.x = 30;
        this.progressBg2.y = this.progressBg1.y;
        this.progressPane.addChild(this.progressBg2);
        this.progressBg3 = new eui.Image;
        this.progressBg3.source = PATH_ROOT + "loading/bar4.png";
        this.progressBg3.x = this.progressBg2.x + this.progressBg2.width;
        this.progressBg3.y = this.progressBg1.y;
        this.progressPane.addChild(this.progressBg3);
        this.progress = new eui.Image;
        this.progress.source = PATH_ROOT + "loading/bar5.png";
        this.progress.scale9Grid = new egret.Rectangle(8, 8, 10, 3);
        this.progress.width = 0;
        this.progress.x = this.progressBg1.x + 16;
        this.progress.y = this.progressBg1.y;
        this.progressPane.addChild(this.progress);
        this.posImage = new eui.Image;
        this.posImage.source = PATH_ROOT + "loading/bar1.png";
        this.posImage.y = 15;
        this.posImage.x = 6;
        this.progressPane.addChild(this.posImage);
        this.progressText = new eui.Label;
        this.progressText.width = this.messageText.width;
        this.progressText.height = 20;
        this.progressText.textAlign = egret.HorizontalAlign.CENTER;
        this.progressText.x = 0;
        this.progressText.y = this.progressBg1.y;
        this.progressText.size = 20;
        this.progressPane.addChild(this.progressText);
        this.progressPane.x = (this.stage.stageWidth - 360) / 2;
        this.progressPane.y = 650;
        this.addLink(LangMgr.getValueByKey("loadingLink"), 720);
        this.gameHint = new eui.Label;
        this.gameHint.text = LangMgr.getValueByKey("loadingTips");
        this.gameHint.size = 14;
        this.gameHint.width = 392;
        this.gameHint.height = 40;
        this.gameHint.textAlign = "center";
        this.gameHint.verticalAlign = "middle";
        this.gameHint.textColor = 0xd8c8b1;
        this.gameHint.lineSpacing = 5;
        this.gameHint.x = (this.stage.stageWidth - this.gameHint.width) / 2;
        this.gameHint.y = this.stage.stageHeight - this.gameHint.height - 10;
        this.addChild(this.gameHint);
        this.setOwnerDes(GlobalModel.ownerDes);
    };
    return GameLoadingMJ;
}(GameLoadingUI));
__reflect(GameLoadingMJ.prototype, "GameLoadingMJ");
var GameLoadingQTT = (function (_super) {
    __extends(GameLoadingQTT, _super);
    function GameLoadingQTT() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GameLoadingQTT.prototype.initUI = function () {
        this.bg = new eui.Image;
        var pfData = GlobalModel.pfData;
        if (pfData && pfData.startbg) {
            this.bg.source = pfData.startbg;
        }
        else {
            this.bg.source = PATH_ROOT + "loading/loading.png";
        }
        this.addChild(this.bg);
        this.bg.width = 580;
        this.bg.height = 1330;
        this.bg.anchorOffsetX = this.bg.width / 2;
        this.bg.anchorOffsetY = this.bg.height / 2;
        this.bg.x = this.stage.stageWidth / 2;
        this.bg.y = this.stage.stageHeight / 2;
        this.progressPane = new egret.DisplayObjectContainer;
        this.addChild(this.progressPane);
        this.messageText = new eui.Label;
        this.messageText.width = 360;
        this.messageText.height = 20;
        this.messageText.textAlign = egret.HorizontalAlign.CENTER;
        this.messageText.textColor = 0xffe100;
        this.messageText.stroke = 1;
        this.messageText.strokeColor = 0x000000;
        this.messageText.x = 0;
        this.messageText.y = -40;
        this.messageText.size = 20;
        this.progressPane.addChild(this.messageText);
        this.progressBg1 = new eui.Image;
        this.progressBg1.source = PATH_ROOT + "loading/bar3.png";
        this.progressBg1.x = 0;
        this.progressBg1.y = 30;
        this.progressPane.addChild(this.progressBg1);
        this.progressBg2 = new eui.Image;
        this.progressBg2.source = PATH_ROOT + "loading/bar2.png";
        this.progressBg2.scale9Grid = new egret.Rectangle(12, 8, 5, 5);
        this.progressBg2.width = 300;
        this.progressBg2.x = 30;
        this.progressBg2.y = this.progressBg1.y;
        this.progressPane.addChild(this.progressBg2);
        this.progressBg3 = new eui.Image;
        this.progressBg3.source = PATH_ROOT + "loading/bar4.png";
        this.progressBg3.x = this.progressBg2.x + this.progressBg2.width;
        this.progressBg3.y = this.progressBg1.y;
        this.progressPane.addChild(this.progressBg3);
        this.progress = new eui.Image;
        this.progress.source = PATH_ROOT + "loading/bar5.png";
        this.progress.scale9Grid = new egret.Rectangle(8, 8, 10, 3);
        this.progress.width = 0;
        this.progress.x = this.progressBg1.x + 25;
        this.progress.y = this.progressBg1.y + 8;
        this.progressPane.addChild(this.progress);
        this.posImage = new eui.Image;
        this.posImage.source = PATH_ROOT + "loading/bar1.png";
        this.posImage.y = 15;
        this.posImage.x = 6;
        this.progressPane.addChild(this.posImage);
        this.progressText = new eui.Label;
        this.progressText.width = this.messageText.width;
        this.progressText.height = 20;
        this.progressText.textAlign = egret.HorizontalAlign.CENTER;
        this.progressText.x = 0;
        this.progressText.y = this.progressBg1.y - 40;
        this.progressText.size = 20;
        this.progressPane.addChild(this.progressText);
        this.progressPane.x = (this.stage.stageWidth - 360) / 2;
        this.progressPane.y = 650;
        this.addLink(LangMgr.getValueByKey("loadingLink"), 720);
        this.gameHint = new eui.Label;
        this.gameHint.text = LangMgr.getValueByKey("loadingTips");
        this.gameHint.size = 14;
        this.gameHint.width = 392;
        this.gameHint.height = 40;
        this.gameHint.textAlign = "center";
        this.gameHint.verticalAlign = "middle";
        this.gameHint.textColor = 0xd8c8b1;
        this.gameHint.lineSpacing = 5;
        this.gameHint.x = (this.stage.stageWidth - this.gameHint.width) / 2;
        this.gameHint.y = this.stage.stageHeight - this.gameHint.height - 10;
        this.addChild(this.gameHint);
        this.setOwnerDes(GlobalModel.ownerDes);
    };
    GameLoadingQTT.prototype.setProgress = function (value, tips, duration, barTotalWidth) {
        if (barTotalWidth === void 0) { barTotalWidth = 310; }
        var width = barTotalWidth * value / 100;
        egret.Tween.removeTweens(this.progress);
        if (this.posImage) {
            egret.Tween.removeTweens(this.posImage);
        }
        if (duration && duration > 0) {
            egret.Tween.get(this.progress).to({
                width: width
            }, duration);
            if (this.posImage) {
                egret.Tween.get(this.posImage).to({
                    x: width + 6
                }, duration);
            }
        }
        else {
            this.progress.width = width;
            if (this.posImage) {
                this.posImage.x = width + 6;
            }
        }
        this.progressText.text = Math.floor(value) + "%";
        this.messageText.text = tips;
    };
    return GameLoadingQTT;
}(GameLoadingUI));
__reflect(GameLoadingQTT.prototype, "GameLoadingQTT");
var GameLoadingZGBY = (function (_super) {
    __extends(GameLoadingZGBY, _super);
    function GameLoadingZGBY() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GameLoadingZGBY.prototype.initUI = function () {
        this.bg = new eui.Image;
        var notDFData = GlobalModel.notdifferentiate;
        var rawChannelId = GlobalModel.getUrlParamValue("rawChannelId");
        var pfDatas = GlobalModel.pfArgs[GlobalModel.pf];
        pfDatas = pfDatas ? pfDatas[rawChannelId] : "";
        if (rawChannelId && pfDatas && pfDatas.startbg) {
            this.bg.source = pfDatas.startbg;
        }
        else {
            this.bg.source = PATH_ROOT + "loading/loading.png";
        }
        this.addChild(this.bg);
        this.bg.width = 580;
        this.bg.height = 1200;
        this.bg.anchorOffsetX = this.bg.width / 2;
        this.bg.anchorOffsetY = this.bg.height / 2;
        this.bg.x = this.stage.stageWidth / 2;
        this.bg.y = this.stage.stageHeight / 2;
        this.progressPane = new egret.DisplayObjectContainer;
        this.addChild(this.progressPane);
        this.messageText = new eui.Label;
        this.messageText.width = 360;
        this.messageText.height = 20;
        this.messageText.textAlign = egret.HorizontalAlign.CENTER;
        this.messageText.x = 0;
        this.messageText.y = 0;
        this.messageText.size = 20;
        this.progressPane.addChild(this.messageText);
        this.progressBg1 = new eui.Image;
        this.progressBg1.source = PATH_ROOT + "loading/bar3.png";
        this.progressBg1.x = 0;
        this.progressBg1.y = 30;
        this.progressPane.addChild(this.progressBg1);
        this.progressBg2 = new eui.Image;
        this.progressBg2.source = PATH_ROOT + "loading/bar2.png";
        this.progressBg2.scale9Grid = new egret.Rectangle(12, 8, 5, 5);
        this.progressBg2.width = 300;
        this.progressBg2.x = 30;
        this.progressBg2.y = this.progressBg1.y;
        this.progressPane.addChild(this.progressBg2);
        this.progressBg3 = new eui.Image;
        this.progressBg3.source = PATH_ROOT + "loading/bar4.png";
        this.progressBg3.x = this.progressBg2.x + this.progressBg2.width;
        this.progressBg3.y = this.progressBg1.y;
        this.progressPane.addChild(this.progressBg3);
        this.progress = new eui.Image;
        this.progress.source = PATH_ROOT + "loading/bar5.png";
        this.progress.scale9Grid = new egret.Rectangle(8, 8, 10, 3);
        this.progress.width = 0;
        this.progress.x = this.progressBg1.x + 16;
        this.progress.y = this.progressBg1.y;
        this.progressPane.addChild(this.progress);
        this.posImage = new eui.Image;
        this.posImage.source = PATH_ROOT + "loading/bar1.png";
        this.posImage.y = 15;
        this.posImage.x = 6;
        this.progressPane.addChild(this.posImage);
        this.progressText = new eui.Label;
        this.progressText.width = this.messageText.width;
        this.progressText.height = 20;
        this.progressText.textAlign = egret.HorizontalAlign.CENTER;
        this.progressText.x = 0;
        this.progressText.y = this.progressBg1.y;
        this.progressText.size = 20;
        this.progressPane.addChild(this.progressText);
        this.progressPane.x = (this.stage.stageWidth - 360) / 2;
        this.progressPane.y = 650;
        this.pgrBg1 = new eui.Image;
        this.pgrBg1.source = PATH_ROOT + "loading/bar3.png";
        this.pgrBg1.x = 0;
        this.pgrBg1.y = 55;
        this.progressPane.addChild(this.pgrBg1);
        this.pgrBg2 = new eui.Image;
        this.pgrBg2.source = PATH_ROOT + "loading/bar2.png";
        this.pgrBg2.scale9Grid = new egret.Rectangle(12, 8, 5, 5);
        this.pgrBg2.width = 300;
        this.pgrBg2.x = 30;
        this.pgrBg2.y = this.pgrBg1.y;
        this.progressPane.addChild(this.pgrBg2);
        this.pgrBg3 = new eui.Image;
        this.pgrBg3.source = PATH_ROOT + "loading/bar4.png";
        this.pgrBg3.x = this.pgrBg2.x + this.pgrBg2.width;
        this.pgrBg3.y = this.pgrBg1.y;
        this.progressPane.addChild(this.pgrBg3);
        this.pgress = new eui.Image;
        this.pgress.source = PATH_ROOT + "loading/bar5.png";
        this.pgress.scale9Grid = new egret.Rectangle(8, 8, 10, 3);
        this.pgress.width = 0;
        this.pgress.x = this.pgrBg1.x + 16;
        this.pgress.y = this.pgrBg1.y;
        this.progressPane.addChild(this.pgress);
        this.addLink(LangMgr.getValueByKey("loadingLink"), 770);
        this.gameHint = new eui.Label;
        this.gameHint.text = "";
        this.gameHint.size = 14;
        this.gameHint.width = 392;
        this.gameHint.height = 40;
        this.gameHint.textAlign = "center";
        this.gameHint.verticalAlign = "middle";
        this.gameHint.textColor = 0xd8c8b1;
        this.gameHint.lineSpacing = 5;
        this.gameHint.x = (this.stage.stageWidth - this.gameHint.width) / 2;
        this.gameHint.y = this.stage.stageHeight - this.gameHint.height - 10;
        this.addChild(this.gameHint);
        if (rawChannelId && pfDatas && pfDatas.ownerDes) {
            GlobalModel.setUrlParamValue("ownerDes", pfDatas.ownerDes);
        }
        if (notDFData.length > 0) {
            for (var key in notDFData) {
                if (GlobalModel.gameId == notDFData[key]) {
                    var curpfData = GlobalModel.pfArgs[GlobalModel.pf];
                    //优先加载有loading配置的
                    if (curpfData && curpfData.loadbg) {
                        this.bg.source = curpfData.loadbg;
                    }
                    else if (curpfData && curpfData.startbg) {
                        this.bg.source = curpfData.startbg;
                    }
                    this.setOwnerDes(curpfData.ownerDes);
                    break;
                }
            }
        }
        else {
            this.setOwnerDes(GlobalModel.ownerDes);
        }
        this.fakePress();
        this.runTips();
    };
    GameLoadingZGBY.prototype.setOwnerDes = function (content) {
        if (!this.ownerDes && this.stage) {
            this.ownerDes = new eui.Label;
            this.ownerDes.size = 12;
            this.ownerDes.width = 506;
            this.ownerDes.height = 139;
            this.ownerDes.textAlign = "center";
            this.ownerDes.verticalAlign = "middle";
            this.ownerDes.lineSpacing = 5;
            this.ownerDes.textColor = 0xd8c8b1;
            this.ownerDes.horizontalCenter = 0;
            this.ownerDes.y = this.stage.stageHeight - 147;
            this.addChild(this.ownerDes);
        }
        if (this.ownerDes) {
            this.ownerDes.text = content;
        }
    };
    return GameLoadingZGBY;
}(GameLoadingUI));
__reflect(GameLoadingZGBY.prototype, "GameLoadingZGBY");
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//	 * Redistributions of source code must retain the above copyright
//	   notice, this list of conditions and the following disclaimer.
//	 * Redistributions in binary form must reproduce the above copyright
//	   notice, this list of conditions and the following disclaimer in the
//	   documentation and/or other materials provided with the distribution.
//	 * Neither the name of the Egret nor the
//	   names of its contributors may be used to endorse or promote products
//	   derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var LoadingUI = (function (_super) {
    __extends(LoadingUI, _super);
    function LoadingUI() {
        var _this = _super.call(this) || this;
        _this.createView();
        return _this;
    }
    LoadingUI.prototype.createView = function () {
        this.textField = new egret.TextField();
        this.addChild(this.textField);
        this.textField.y = 300;
        this.textField.width = 580;
        this.textField.height = 100;
        this.textField.textAlign = "center";
    };
    LoadingUI.prototype.setProgress = function (current, total) {
        this.textField.text = "Loading..." + current + "/" + total;
    };
    return LoadingUI;
}(egret.Sprite));
__reflect(LoadingUI.prototype, "LoadingUI");
var ResVersionMgr = (function (_super) {
    __extends(ResVersionMgr, _super);
    function ResVersionMgr() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ResVersionMgr.ins = function () {
        return _super.ins.call(this);
    };
    ResVersionMgr.prototype.loadConfig = function (versionPath, complateFunc, complateFuncTarget) {
        var _this = this;
        HttpUtils.getIns().sendUrl(versionPath, null, egret.HttpMethod.GET, this, function (event) {
            if (event.currentTarget.response) {
                _this.resVersionData = JSON.parse(event.currentTarget.response);
            }
            complateFunc.call(complateFuncTarget);
        }, function (event) {
            alert("version.json parse error!");
        });
    };
    ResVersionMgr.prototype.registerVersionController = function (resRoot) {
        if (RES["getVirtualUrl"]) {
            RES["getVirtualUrl"] = function (url) {
                return this.getResVerUrl(resRoot, url);
            }.bind(this);
        }
        else if (RES["web"]) {
            RES["web"].Html5VersionController.prototype.getVirtualUrl = function (url) {
                return this.getResVerUrl(resRoot, url);
            }.bind(this);
        }
        else {
            var vc = new RES.VersionController();
            vc.getVirtualUrl = function (url) {
                return this.getResVerUrl(resRoot, url);
            };
            RES.registerVersionController(vc);
        }
    };
    ResVersionMgr.prototype.getResVerUrl = function (resRoot, url) {
        if (ResVersionMgr.ins().resVersionData != undefined) {
            if (ResVersionMgr.ins().resVersionData[url]) {
                url += '?v=' + ResVersionMgr.ins().resVersionData[url];
            }
            else if (url.substring(url.length - 5, url.length) != ".exml") {
                url += '?v=1';
            }
        }
        if (url.lastIndexOf("http") == -1) {
            url = "" + resRoot + url;
        }
        return url;
    };
    return ResVersionMgr;
}(SingleClass));
__reflect(ResVersionMgr.prototype, "ResVersionMgr");
var GlobalModel = (function () {
    function GlobalModel() {
    }
    GlobalModel.getHosts = function () {
        return egret.getOption("hosts");
    };
    GlobalModel.init = function (pfCfg) {
        this.urlParam = {};
        debug.log("Init Platform data:", pfCfg);
        if (pfCfg) {
            try {
                var jsonCfg = JSON.parse(pfCfg);
            }
            catch (error) {
                alert("PfCfg parse error!");
            }
            for (var key in jsonCfg) {
                if (key == "gameId") {
                    this.urlParam["lzGameId"] = jsonCfg[key];
                }
                else if (key == "preloadLang") {
                    LangMgr.addValue(jsonCfg[key]);
                }
                else {
                    this.urlParam[key] = jsonCfg[key];
                }
            }
        }
        var urlSearch = window.location.search;
        if (urlSearch && urlSearch != "") {
            urlSearch = urlSearch.substring(1);
            if (urlSearch) {
                var param = urlSearch.split("&");
                var strArr = void 0;
                for (var i = 0; i < param.length; i++) {
                    strArr = param[i].split("=");
                    this.urlParam[strArr[0]] = decodeURIComponent(decodeURI(strArr[1]));
                }
            }
        }
        if (window["changeUrlParam"])
            window["changeUrlParam"](this);
        if (window["setHtmlTitle"] && this.urlParam['htmlTitle'])
            window["setHtmlTitle"](this.urlParam['htmlTitle']);
        //显示分享
        if (this.showShare) {
            platformAmuseControl.shareState = 0;
        }
        //显示关注
        if (this.showFocus && this.getUrlParamValue("isfollow") != 1) {
            platformAmuseControl.focusState = 0;
        }
        debug.log("Args:", this.urlParam);
    };
    /**
     * 获取URL参数
     * 参数包含特殊符号时使用
     */
    GlobalModel.GetSearchParamByName = function (name) {
        var regExp = new RegExp("(^|&)" + name + "=([^&]*)(&|$)", "i");
        var regExpMatchArray = window.location.search.substr(1).match(regExp);
        return regExpMatchArray ? decodeURIComponent(decodeURI(regExpMatchArray[2])) : "";
    };
    /**
     * 获取URL参数
     */
    GlobalModel.getUrlParamValue = function (key) {
        return this.urlParam[key] || "";
    };
    /**
     * 设置参数
     */
    GlobalModel.setUrlParamValue = function (key, value) {
        this.urlParam[key] = value;
    };
    Object.defineProperty(GlobalModel, "resAdd", {
        /**
         * 资源服地址
         */
        get: function () {
            return this.urlParam['hosts'] || "";
        },
        set: function (str) {
            this.urlParam['hosts'] = str;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GlobalModel, "isCreateRole", {
        /**
         * 需要创角
         */
        get: function () {
            return this.urlParam['isCreateRole'] || false;
        },
        set: function (v) {
            this.urlParam['isCreateRole'] = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GlobalModel, "createRolePreload", {
        /**
         * 创角预加载
         */
        get: function () {
            var preloadStr = "createRole";
            if (this.urlParam['createRolePreload']) {
                if (this.urlParam['createRolePreload'][this.pf]) {
                    preloadStr = this.urlParam['createRolePreload'][this.pf];
                }
                else {
                    preloadStr = this.urlParam['createRolePreload']["Test"];
                }
            }
            return preloadStr;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GlobalModel, "openID", {
        /**
         * 用户OpenID
         */
        get: function () {
            return this.urlParam['user'];
        },
        set: function (str) {
            this.urlParam['user'] = str;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GlobalModel, "srvid", {
        /**
         * 服务器ID
         */
        get: function () {
            return parseInt(this.urlParam['srvid']);
        },
        set: function (v) {
            this.urlParam['srvid'] = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GlobalModel, "mainSrvid", {
        /**
         * 合服服务器ID
         */
        get: function () {
            return parseInt(this.urlParam['mainSrvid']);
        },
        set: function (v) {
            this.urlParam['mainSrvid'] = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GlobalModel, "srvname", {
        /**
         * 服务器名称
         */
        get: function () {
            return this.urlParam['srvname'] || "";
        },
        set: function (v) {
            this.urlParam['srvname'] = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GlobalModel, "serverIP", {
        /**
         * 服务器IP
         */
        get: function () {
            return this.urlParam['srvaddr'];
        },
        set: function (str) {
            this.urlParam['srvaddr'] = str;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GlobalModel, "serverPort", {
        /**
         * 服务器端口
         */
        get: function () {
            return this.urlParam['srvport'];
        },
        set: function (v) {
            this.urlParam['srvport'] = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GlobalModel, "nickName", {
        /**
         * 平台昵称
         */
        get: function () {
            return this.urlParam['nickName'] || "";
        },
        set: function (v) {
            this.urlParam['nickName'] = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GlobalModel, "gameVersion", {
        /**
         * 客服端版本号
         */
        get: function () {
            return this.urlParam['version'] != undefined ? parseInt(this.urlParam['version']) : 1;
        },
        set: function (v) {
            this.urlParam['version'] = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GlobalModel, "gameId", {
        /**
         * 游戏ID
         */
        get: function () {
            return this.urlParam['lzGameId'] != undefined ? parseInt(this.urlParam['lzGameId']) : 1;
        },
        set: function (v) {
            this.urlParam['lzGameId'] = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GlobalModel, "appid", {
        get: function () {
            return this.urlParam['appid'] || this.gameId;
        },
        set: function (v) {
            this.urlParam['appid'] = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GlobalModel, "ownerDes", {
        /**
         * 著作权人描述
         */
        get: function () {
            var pfData = this.pfData;
            if (pfData && pfData.ownerDes) {
                return pfData.ownerDes;
            }
            return this.urlParam['ownerDes'] || "";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GlobalModel, "chOwnerDesPos", {
        /**
         * 著作权人描述 和忠告换位置
         */
        get: function () {
            return this.urlParam['chOwnerDesPos'] || false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GlobalModel, "oneKeySmelt", {
        /**
         * 是否开放一键熔炼
         */
        get: function () {
            return this.urlParam['oneKeySmelt'] || false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GlobalModel, "currentType", {
        /**
         * 货币类型
         */
        get: function () {
            return this.urlParam['currentType'] || "￥";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GlobalModel, "channelId", {
        /**
         * 渠道ID
         */
        get: function () {
            return this.urlParam['channelId'] || '0';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GlobalModel, "isAuditState", {
        /**
         * 提审状态
         */
        get: function () {
            return this.appVersion == this.auditVersion;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GlobalModel, "appVersion", {
        /**
         * APP版本号
         */
        get: function () {
            return this.urlParam['appVersion'] || '0';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GlobalModel, "auditVersion", {
        /**
         * 提审版本号
         */
        get: function () {
            return this.urlParam['auditVersion'] || '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GlobalModel, "openTab", {
        /**
         * 1元购后是否调用悬浮窗
         */
        get: function () {
            if (this.urlParam['openTab']) {
                return (this.urlParam['openTab'] == this.pf);
            }
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GlobalModel, "pfid", {
        /**
         * 平台ID
         */
        get: function () {
            return this.urlParam['pfid'] || '1';
        },
        set: function (v) {
            this.urlParam['pfid'] = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GlobalModel, "pf", {
        /**
         * 平台
         */
        get: function () {
            return this.urlParam['pf'] || "Test";
        },
        set: function (str) {
            this.urlParam['pf'] = str;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GlobalModel, "isWeb", {
        /**
         * 网页
         */
        get: function () {
            return this.urlParam['isWeb'] || false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GlobalModel, "createAccountTime", {
        /**
         * 创建账号时间
         */
        get: function () {
            return this.urlParam['createaccounttime'] != undefined ? parseInt(this.urlParam['createaccounttime']) : 0;
        },
        set: function (v) {
            this.urlParam['createaccounttime'] = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GlobalModel, "createActorTime", {
        /**
         * 角创建色时间(秒)
         */
        get: function () {
            return this.urlParam['createactortime'] != undefined ? parseInt(this.urlParam['createactortime']) : 0;
        },
        set: function (v) {
            this.urlParam['createactortime'] = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GlobalModel, "actorLoginTime", {
        /**
         * 角色登陆时间
         */
        get: function () {
            return this.urlParam['actorlogintime'] != undefined ? parseInt(this.urlParam['actorlogintime']) : 0;
        },
        set: function (v) {
            this.urlParam['actorlogintime'] = v;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 设置加载进度 & 描述
     */
    GlobalModel.setLoadProgress = function (n, str, duration) {
        GameLoadingUI.GetInstance().setProgress(n, str, duration);
    };
    /**
     * 检查版本号
     */
    GlobalModel.checkClientVersion = function (loadGame) {
        var _this = this;
        //小游戏断线检查更新,暂时判断微信，有其他平台小游戏再补充
        if (DeviceUtils.IsWxMiniGame) {
            var updateManager_1 = window.wx.getUpdateManager();
            updateManager_1.onCheckForUpdate(function (res) {
                console.log("wx hasUpdate:", res.hasUpdate);
            });
            updateManager_1.onUpdateReady(function () {
                //弹窗让用户确认应用最新版本
                window.wx.showModal({
                    title: LangMgr.getValueByKey("updataTips"),
                    content: LangMgr.getValueByKey("newversionready"),
                    success: function (res) {
                        if (res.confirm) {
                            updateManager_1.applyUpdate();
                        }
                    }
                });
            });
            updateManager_1.onUpdateFailed(function () {
                console.log(LangMgr.getValueByKey("newVersionFail"));
            });
            if (loadGame)
                loadGame();
        }
        else {
            if (loadGame)
                loadGame();
            var xhr = new egret.HttpRequest();
            xhr.open("" + this.resAdd + PATH_ROOT + "pfCfg.json?v=" + Date.now(), egret.HttpMethod.GET);
            xhr.send();
            xhr.addEventListener(egret.Event.COMPLETE, function (event) {
                var pfCfg = event.currentTarget.response;
                if (pfCfg) {
                    var jsonCfg = JSON.parse(pfCfg);
                    if (parseInt(jsonCfg['version']) != _this.gameVersion) {
                        alert(LangMgr.getValueByKey('gameverupdata', _this.gameVersion + "->" + parseInt(jsonCfg['version'])));
                        window.location.reload();
                    }
                }
            }, this);
        }
    };
    Object.defineProperty(GlobalModel, "mianUIState", {
        /**
         * 主UI显示状态
         */
        get: function () {
            return this.urlParam['mianUIState'] || "cq";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GlobalModel, "skinType", {
        /**
         * 游戏皮肤类型
         */
        get: function () {
            return this.urlParam['skinType'] || "cq";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GlobalModel, "changeUglyRes", {
        /**
         * 屏蔽丑资源
         */
        get: function () {
            return this.urlParam['changeUglyRes'] ? true : false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GlobalModel, "jobUIState", {
        /**
         * 职业显示UI
         */
        get: function () {
            return this.urlParam['jobUIState'] ? true : false;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 身体盖住武器
     */
    GlobalModel.bodyCoverWeapon = function (job) {
        var jobShowLayerAry = this.urlParam['jobShowLayer'];
        if (!jobShowLayerAry)
            return false;
        return jobShowLayerAry[job - 1] == 1;
    };
    Object.defineProperty(GlobalModel, "bodyBindWeapon", {
        /**
         * 衣服绑定武器
         */
        get: function () {
            return this.urlParam['bodyBindWeapon'] ? true : false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GlobalModel, "weaponBindBody", {
        /**
         * 武器绑定衣服
         */
        get: function () {
            return this.urlParam['weaponBindBody'] ? true : false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GlobalModel, "onlyShowDress", {
        /**
         * 时装不显示基础装备
         */
        get: function () {
            return this.urlParam['onlyShowDress'] ? true : false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GlobalModel, "chargeRate", {
        /**
         * 充值比例
         */
        get: function () {
            return this.urlParam['chargeRate'] != undefined ? Number(this.urlParam['chargeRate']) : 100;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GlobalModel, "openSound", {
        /**
         * 开放音效
         */
        get: function () {
            return this.urlParam['openSound'] ? true : false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GlobalModel, "openPatch", {
        /**
         * 开启补丁
         */
        get: function () {
            return this.urlParam['openPatch'] ? true : false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GlobalModel, "showShare", {
        /**
         * 显示分享
         */
        get: function () {
            return this.urlParam['showShare'] ? true : false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GlobalModel, "showFocus", {
        /**
         * 显示关注
         */
        get: function () {
            return this.urlParam['showFocus'] ? true : false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GlobalModel, "os", {
        /**
         * 系统
         */
        get: function () {
            return this.urlParam['os'] ? this.urlParam['os'] : egret.Capabilities.os;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GlobalModel, "baseVipLevel", {
        /**
         * 基础会员等级
         */
        get: function () {
            return this.urlParam['baseVipLevel'] != undefined ? Number(this.urlParam['baseVipLevel']) : 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GlobalModel, "roleNum", {
        /**
         * 角色数量
         */
        get: function () {
            return this.urlParam['roleNum'] != undefined ? Number(this.urlParam['roleNum']) : 3;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GlobalModel, "chatShowNum", {
        /**
         * 主UI聊天显示数量
         */
        get: function () {
            return this.urlParam['chatShowNum'] != undefined ? Number(this.urlParam['chatShowNum']) : 2;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GlobalModel, "iconsIsLeft", {
        /**
         * 主UI功能Icon位置
         */
        get: function () {
            return this.urlParam['iconsIsLeft'] ? true : false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GlobalModel, "isHw", {
        /**
         * 是否海外版本
         */
        get: function () {
            return this.urlParam['isHw'] ? true : false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GlobalModel, "isXJP", {
        /**
         * 是否新加坡版本
         */
        get: function () {
            return this.urlParam['isXJP'] ? true : false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GlobalModel, "sdkDomain", {
        /**
         * SDK域名
         */
        get: function () {
            if (this.urlParam['sdkDomain']) {
                return this.urlParam['sdkDomain'];
            }
            var domain;
            if (this.isHw) {
                domain = "http://hwltserver.lzhygame.com";
            }
            else if (this.isXJP) {
                domain = "http://xjpltserver.lzhygame.com";
            }
            else {
                domain = "http://ltserver.lzhygame.com";
            }
            ;
            switch (this.urlParam['serverSdkUrl']) {
                case 1:
                    domain = "http://hnltserver.hnlzhd.com";
                    break;
            }
            if (window["wxPlatform"] == "devtools") {
                if (!window["isMiniUseHttp"]) {
                    domain = domain.replace("http:", "https:");
                }
            }
            else {
                if (window.location.protocol == "https:") {
                    domain = domain.replace("http:", "https:");
                }
            }
            return domain;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GlobalModel, "gmDomain", {
        /**
         * GM后台域名
         */
        get: function () {
            if (this.urlParam['gmDomain']) {
                return this.urlParam['gmDomain'];
            }
            var domain;
            if (this.isHw) {
                domain = "http://hwadmin.lzhygame.com";
            }
            else if (this.isXJP) {
                domain = "http://xjpadmin.lzhygame.com";
            }
            else {
                //没特殊要求的话,小游戏定为走admin2
                if (DeviceUtils.IsWxMiniGame) {
                    domain = "http://admin2.lzhygame.com";
                }
                else {
                    domain = "http://admin.lzhygame.com";
                }
            }
            switch (this.urlParam['serverSdkUrl']) {
                case 1:
                    domain = "http://admin.hnlzhd.com";
                    break;
            }
            if (window["wxPlatform"] == "devtools") {
                if (!window["isMiniUseHttp"]) {
                    domain = domain.replace("http:", "https:");
                }
            }
            else {
                if (window.location.protocol == "https:") {
                    domain = domain.replace("http:", "https:");
                }
            }
            return domain;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GlobalModel, "showMicroclientDownload", {
        /**
         * 显示微端下载
         */
        get: function () {
            return this.urlParam['showMicroclientDownload'] ? true : false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GlobalModel, "isMicroclient", {
        /**
         * 是否微端登陆
         */
        get: function () {
            return this.urlParam['isMicroclient'] ? true : false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GlobalModel, "loadingClass", {
        /**
         * 加载界面配置
         */
        get: function () {
            return this.urlParam['loadingClass'];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GlobalModel, "playGameMusic", {
        /**
         * 进入游戏是否播放背景音乐
         */
        get: function () {
            return this.urlParam['playGameMusic'] || "";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GlobalModel, "IsQQHall", {
        /**
         * 是否为QQ大厅 平台
         */
        get: function () {
            if (this.pf != 'ZjH5')
                return false;
            var extt = this.urlParam['ext'];
            if (extt) {
                return extt.indexOf("qqgame") >= 0;
            }
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GlobalModel, "pfArgs", {
        /**
         * 渠道参数(pfCfg)配置
         */
        get: function () {
            return (this.urlParam['pfArgs'] && this.urlParam['pfArgs'][this.gameId]) || JSON.parse("{}");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GlobalModel, "pfData", {
        /**
         * 渠道数据
         */
        get: function () {
            var pfData = this.pfArgs[this.pf];
            if (pfData) {
                var rawChannelId = this.getUrlParamValue("rawChannelId");
                if (rawChannelId) {
                    return pfData[rawChannelId];
                }
                return pfData;
            }
            return null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GlobalModel, "QuickH5ProductCode", {
        /**
         * QuickCode兼容一皮多游戏
         */
        get: function () {
            var code = SDKConst.QuickH5ProductCode;
            switch (GlobalModel.pfid) {
                case "67":
                    code = '64471295314902425659433702151527';
                    break;
                case "68":
                    code = '27680011050649275531612882595457';
                    break;
                case "34":
                    code = '34789611540670077461401175602316';
                    break;
                case "76":
                    code = '34846589717708876982183812111684';
                    break;
                case "78":
                    code = '52055892179132852231891496402018';
                    break;
                case "79":
                    code = '60675537160606593525271611859746';
                    break;
                case "81":
                    code = '89691063088127017199691906683251';
                    break;
                case "84":
                    code = '40534930470743900377240499134808';
                case "85":
                    code = '09494619042009704294211351557687';
                    break;
                case "86":
                    code = '69783721435275683076639266333759';
                    break;
                case "88":
                    code = '59648970473706468815878465795500';
                    break;
                case "89":
                    code = "53818074046796660417022772109144";
                    break;
                case "91":
                    code = "88420418265069997078423668799827";
                    break;
                case "92":
                    code = "23596528987337064167579130472505";
                    break;
                case "93":
                    code = "08969832438978932605843658089179";
                    break;
                case "95":
                    code = "84786000655006738038353438325044";
                    break;
                case "97":
                    code = "14899204300540764539330828701393";
                    break;
            }
            return code;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GlobalModel, "QuickH5ProductKey", {
        /**
         * QuickKey兼容一皮多游戏
         */
        get: function () {
            var key = SDKConst.QuickH5ProductKey;
            switch (GlobalModel.pfid) {
                case "67":
                    key = '07520473';
                    break;
                case "68":
                    key = '22623743';
                    break;
                case "34":
                    key = '88475690';
                    break;
                case '76':
                    key = '07972870';
                    break;
                case "78":
                    key = '22381313';
                    break;
                case "79":
                    key = '80446717';
                    break;
                case "81":
                    key = '11132763';
                    break;
                case "84":
                    key = '96235539';
                case "85":
                    key = '63709999';
                    break;
                case "86":
                    key = '62800024';
                    break;
                case "88":
                    key = '46525220';
                    break;
                case "89":
                    key = '42633473';
                    break;
                case "91":
                    key = '66970053';
                    break;
                case "92":
                    key = '86452741';
                    break;
                case "93":
                    key = '97686011';
                    break;
                case "95":
                    key = '52312328';
                    break;
                case "97":
                    key = '87379323';
                    break;
            }
            return key;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GlobalModel, "openQuickReload", {
        /**
         * Quick切换刷新开关
         */
        get: function () {
            return this.urlParam['openQuickReload'] ? this.urlParam['openQuickReload'] : false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GlobalModel, "isHttps", {
        /**
         * 是否Https
         */
        get: function () {
            if (window["wxPlatform"] == "devtools") {
                return !window["isMiniUseHttp"];
            }
            else {
                return window.location.protocol.indexOf("https:") != -1;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GlobalModel, "useWss", {
        /**
         * 是否启用wss协议
         */
        get: function () {
            return this.urlParam['useWss'] != null ? this.urlParam['useWss'] : true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GlobalModel, "serverNumberPlyer", {
        /**
         * 自己玩过的区服数量
         */
        get: function () {
            return this.urlParam['serverNumberPlyer'] || 0;
        },
        set: function (num) {
            this.urlParam['serverNumberPlyer'] = num;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GlobalModel, "autoEnterGame", {
        /**
         * 是否自动进入
         */
        get: function () {
            return this.urlParam['autoEnterGame'] || 0;
        },
        set: function (num) {
            this.urlParam['autoEnterGame'] = num;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GlobalModel, "notdifferentiate", {
        /**
         * 兼容不区分渠道共用加载图片
         */
        get: function () {
            return this.urlParam['notdifferentiate'] || [];
        },
        set: function (value) {
            this.urlParam['notdifferentiate'] = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GlobalModel, "serverStyle", {
        /**
         * 返回服务器菜单风格的渠道id列表
         */
        get: function () {
            return this.urlParam['serverStyle'] || [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GlobalModel, "isMangleCfgWeb", {
        /**
         * 是否混淆配置表名
         */
        get: function () {
            return this.urlParam["isMangleCfgWeb"] || false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GlobalModel, "realNameState", {
        /**
         * 实名认证状态
         */
        get: function () {
            return this.urlParam["realNameState"];
        },
        /**
         * 实名认证状态
         */
        set: function (val) {
            this.urlParam["realNameState"] = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GlobalModel, "clientPlayerIp", {
        /**
         * 客服端玩家IP
         */
        get: function () {
            return this.urlParam['clientPlayerIp'] || "";
        },
        set: function (ip) {
            this.urlParam['clientPlayerIp'] = ip;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GlobalModel, "showPayWay", {
        /**
         * 选择充值方式
         */
        get: function () {
            return this.urlParam['showPayWay'] || false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GlobalModel, "openClientErrorLog", {
        /**
         * 开启客服端错误日志打点
         */
        get: function () {
            return this.urlParam['openClientErrorLog'] || false;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 获取计费id
     * 规则1:os和pfid为“” 不区分系统和平台，通过包和档位确认计费点
     * 规则2:packageName和pfid为“” 不区分包和平台，通过系统和档位确认计费点
     * 规则3:全部匹配
     * @param pfid 平台id
     * @param items 计费id
     * @param osType 系统类型
     * @param packageName 包名
     */
    GlobalModel.productIdByItems = function (pfid, items, osType, packageName) {
        if (packageName === void 0) { packageName = "Product"; }
        var data = DataCenter.ins().RechargePointConfig;
        var productId = "";
        for (var key in data) {
            if (data[key].packageName == packageName && data[key].pfid == pfid && data[key].itemId == items && data[key].os == osType) {
                productId = data[key].productId; //规则3
                break;
            }
            else if (!osType && !pfid && data[key].packageName == packageName && data[key].itemId == items) {
                productId = data[key].productId; //规则1
                break;
            }
            else if (!pfid && data[key].packageName == "Product" && data[key].itemId == items && data[key].os == osType) {
                productId = data[key].productId; //规则2
                break;
            }
        }
        debug.log("productId:", productId);
        return productId;
    };
    return GlobalModel;
}());
__reflect(GlobalModel.prototype, "GlobalModel");
var PHPConfig = (function () {
    function PHPConfig() {
    }
    Object.defineProperty(PHPConfig, "GET_PATCH_URL", {
        get: function () {
            var url = GlobalModel.gmDomain + ":8080/api/getclientversion";
            if (GlobalModel.isHttps) {
                url = GlobalModel.gmDomain + "/api/getclientversion";
            }
            return url;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PHPConfig, "SET_GM_REPORT", {
        get: function () {
            var url = GlobalModel.gmDomain + ":81/api/report";
            if (GlobalModel.isHttps) {
                url = GlobalModel.gmDomain + "/api/report";
            }
            return url;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PHPConfig, "GET_CHANNEL_URL", {
        get: function () {
            var url = GlobalModel.sdkDomain + "/api/report";
            return url;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PHPConfig, "REGISTER_LOGIN_URL", {
        get: function () {
            var url = GlobalModel.pf != "Test" ? GlobalModel.sdkDomain + "/braintree/" + GlobalModel.gameId + "/sdkurlcallback" : "http://www.xcvgame.cn/braintree/" + GlobalModel.gameId + "/sdkurlcallback";
            if (GlobalModel.isHttps) {
                url = url.replace("http:", "https:");
            }
            return url;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PHPConfig, "GET_SERVER_URL", {
        get: function () {
            var url = GlobalModel.pf != "Test" ? GlobalModel.sdkDomain + "/api/getserver" : "http://www.xcvgame.cn/api/getserver";
            if (GlobalModel.isHttps) {
                url = url.replace("http:", "https:");
            }
            return url;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PHPConfig, "SET_USER_URL", {
        get: function () {
            var url = GlobalModel.pf != "Test" ? GlobalModel.sdkDomain + "/api/setuser" : "http://www.xcvgame.cn/api/setuser";
            if (GlobalModel.isHttps) {
                url = url.replace("http:", "https:");
            }
            return url;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PHPConfig, "SET_ACTOR_INFO", {
        get: function () {
            var url = GlobalModel.pf != "Test" ? GlobalModel.sdkDomain + "/api/setactorinfo" : "http://www.xcvgame.cn/api/setactorinfo";
            if (GlobalModel.isHttps) {
                url = url.replace("http:", "https:");
            }
            return url;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PHPConfig, "MAKE_ORDER_URL", {
        get: function () {
            var url = GlobalModel.pf != "Test" ? GlobalModel.sdkDomain + "/api/makeorder" : "http://www.xcvgame.cn/api/makeorder";
            if (GlobalModel.isHttps) {
                url = url.replace("http:", "https:");
            }
            return url;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PHPConfig, "SET_ROLE_INFO", {
        get: function () {
            var url = GlobalModel.pf != "Test" ? GlobalModel.sdkDomain + "/api/roleinfo" : "http://www.xcvgame.cn/api/roleinfo";
            if (GlobalModel.isHttps) {
                url = url.replace("http:", "https:");
            }
            return url;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PHPConfig, "SET_LANZHUAN_INFO", {
        get: function () {
            var url = GlobalModel.sdkDomain + "/api/bluevip";
            if (GlobalModel.isHttps) {
                url = url.replace("http:", "https:");
            }
            return url;
        },
        enumerable: true,
        configurable: true
    });
    PHPConfig.requestPhpData = function (url, params, completeListener, thisObject, errorListener, method, responseType) {
        var argArray = [];
        for (var _i = 7; _i < arguments.length; _i++) {
            argArray[_i - 7] = arguments[_i];
        }
        var request = new egret.HttpRequest();
        request.responseType = responseType ? responseType : egret.HttpResponseType.TEXT;
        request.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        if (method == egret.HttpMethod.POST) {
            request.open(url, egret.HttpMethod.POST);
            request.send(params);
        }
        else {
            request.open(url + "?" + params, egret.HttpMethod.GET);
            request.send();
        }
        request.addEventListener(egret.Event.COMPLETE, function (event) {
            argArray.unshift(event);
            completeListener.apply(thisObject, argArray);
        }, this);
        request.addEventListener(egret.IOErrorEvent.IO_ERROR, function (event) {
            argArray.unshift(event);
            errorListener.apply(thisObject, argArray);
        }, this);
    };
    PHPConfig.VERIFY_KEY = "123@#$567&*(adscv";
    return PHPConfig;
}());
__reflect(PHPConfig.prototype, "PHPConfig");
var Platform7724H5 = (function (_super) {
    __extends(Platform7724H5, _super);
    function Platform7724H5() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.SbPulSdk = window["SbPulSdk"];
        return _this;
    }
    /**
     * 初始化SDK
     */
    Platform7724H5.prototype.SDKInitNative = function () {
        GlobalModel.openID = GlobalModel.getUrlParamValue("qqesuid");
        var loginParams = {
            qqesuid: GlobalModel.getUrlParamValue("qqesuid"),
            channelid: GlobalModel.getUrlParamValue("channelid"),
            channeluid: GlobalModel.getUrlParamValue("channeluid"),
            qqesnickname: GlobalModel.getUrlParamValue("qqesnickname"),
            qqesavatar: GlobalModel.getUrlParamValue("qqesavatar"),
            cpgameid: GlobalModel.getUrlParamValue("cpgameid"),
            ext: GlobalModel.getUrlParamValue("ext"),
            qqestimestamp: GlobalModel.getUrlParamValue("qqestimestamp"),
            sign: GlobalModel.getUrlParamValue("sign")
        };
        this.SbPulSdk.init(loginParams, function (channelSdk) {
            if (channelSdk.channelId == 1) {
                SDKManager.ins()["channelSdk"] = channelSdk;
                //分享（微信初始化）
                channelSdk.shareConfig(function () {
                    platformAmuseControl.upWeiXinInviteGift();
                }, {
                    'cp_p1': '',
                    'cp_p2': ''
                });
                //关注
                channelSdk.isSubscribe(function (subStatus) {
                    if (subStatus != 1) {
                        platformAmuseControl.dispatchGuanZhu(0);
                    }
                    else {
                        platformAmuseControl.focusState = 1;
                    }
                });
            }
            SDKManager.ins().NativeCallback(JSON.stringify({ callType: "init" }));
        });
    };
    /**
     * 是否需要登录
     */
    Platform7724H5.prototype.SDKIsNeedLoginNative = function () {
        return false;
    };
    /**
     * SDK登陆验证参数
     */
    Platform7724H5.prototype.GetSDKCheckAccountArgs = function () {
        var jsonObj = {
            pf: GlobalModel.pf,
            gameId: GlobalModel.gameId,
            channelId: GlobalModel.channelId,
            gameVersion: GlobalModel.gameVersion,
            appId: GlobalModel.appid,
            qqesuid: GlobalModel.getUrlParamValue("qqesuid"),
            channelid: GlobalModel.getUrlParamValue("channelid"),
            channeluid: GlobalModel.getUrlParamValue("channeluid"),
            qqesnickname: GlobalModel.getUrlParamValue("qqesnickname"),
            qqesavatar: GlobalModel.getUrlParamValue("qqesavatar"),
            cpgameid: GlobalModel.getUrlParamValue("cpgameid"),
            ext: GlobalModel.getUrlParamValue("ext"),
            qqestimestamp: GlobalModel.getUrlParamValue("qqestimestamp"),
            sign: GlobalModel.getUrlParamValue("sign"),
            shellext: GlobalModel.getUrlParamValue("shellext")
        };
        return JSON.stringify(jsonObj);
    };
    /**
     * SDK创建角色
     */
    Platform7724H5.prototype.SDKCreateRoleNative = function (params) {
        var roleInfo = {
            cpgameid: GlobalModel.getUrlParamValue("cpgameid"),
            qqesuid: GlobalModel.getUrlParamValue("qqesuid"),
            channelid: GlobalModel.getUrlParamValue("channelid"),
            channeluid: GlobalModel.getUrlParamValue("channeluid"),
            cpguid: SDKConst.SbCpguId,
            roleName: params.nickName,
            serverid: params.serverId,
            level: params.level,
            ext: GlobalModel.getUrlParamValue("ext"),
            timestamp: Date.now() //请求时间戳(用来防止重放攻击)
        };
        roleInfo['sign'] = Md5Utils.obj_md5(roleInfo, SDKConst.SbKey);
        this.SbPulSdk.createRole(roleInfo);
    };
    /**
     * SDK进入游戏
     */
    Platform7724H5.prototype.SDKEnterGameNative = function (params) {
        var roleInfo = {
            cpgameid: GlobalModel.getUrlParamValue("cpgameid"),
            qqesuid: GlobalModel.getUrlParamValue("qqesuid"),
            channelid: GlobalModel.getUrlParamValue("channelid"),
            channeluid: GlobalModel.getUrlParamValue("channeluid"),
            cpguid: SDKConst.SbCpguId,
            roleName: params.nickName,
            serverid: params.serverId,
            level: params.level,
            servername: params.serverName,
            vip: params.vip,
            ext: GlobalModel.getUrlParamValue("ext"),
            timestamp: Date.now() //请求时间戳(用来防止重放攻击)
        };
        roleInfo['sign'] = Md5Utils.obj_md5(roleInfo, SDKConst.SbKey);
        this.SbPulSdk.loginRole(roleInfo);
    };
    /**
     * SDK角色升级
     */
    Platform7724H5.prototype.SDKUserUpgradeNative = function (params) {
    };
    /**
     * SDK支付
     */
    Platform7724H5.prototype.SDKPayNative = function (params) {
        var cpPayParams = {
            order: params.order,
            cpgameid: GlobalModel.getUrlParamValue("cpgameid"),
            qqesuid: GlobalModel.getUrlParamValue("qqesuid"),
            channelid: GlobalModel.getUrlParamValue("channelid"),
            channeluid: GlobalModel.getUrlParamValue("channeluid"),
            cpguid: SDKConst.SbCpguId,
            goodsname: params.goodsname,
            fee: params.fee,
            ext: GlobalModel.getUrlParamValue("ext"),
            timestamp: Date.now() //请求时间戳(用来防止重放攻击)
        };
        cpPayParams['sign'] = Md5Utils.obj_md5(cpPayParams, SDKConst.SbKey);
        this.SbPulSdk.pay(cpPayParams);
    };
    /**
     * SDK分享
     */
    Platform7724H5.prototype.SDKShowShare = function () {
        if (SDKManager.ins()["channelSdk"] && SDKManager.ins()["channelSdk"].share) {
            SDKManager.ins()["channelSdk"].share(function () {
                platformAmuseControl.upWeiXinInviteGift();
            }, {
                'cp_p1': "",
                'cp_p2': ""
            });
        }
    };
    /**
     * SDK二维码
     */
    Platform7724H5.prototype.SDKShowQRCode = function () {
        if (SDKManager.ins()["channelSdk"] && SDKManager.ins()["channelSdk"].follow) {
            SDKManager.ins()["channelSdk"].follow();
        }
    };
    return Platform7724H5;
}(PlatformBase));
__reflect(Platform7724H5.prototype, "Platform7724H5");
var Platform99KH5 = (function (_super) {
    __extends(Platform99KH5, _super);
    function Platform99KH5() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.TPGAME_SDK = window["TPGAME_SDK"];
        return _this;
    }
    /**
     * 初始化SDK
     */
    Platform99KH5.prototype.SDKInitNative = function () {
        GlobalModel.openID = GlobalModel.getUrlParamValue("uid");
        this.TPGAME_SDK.config({
            share: {
                friend: {
                    title: '',
                    desc: '',
                    imgUrl: '',
                    success: function () {
                        //分享好友成功回调
                        platformAmuseControl.upWeiXinInviteGift();
                    },
                    cancel: function () {
                        //分享好友取消回调
                    }
                },
                timeline: {
                    title: '',
                    imgUrl: '',
                    success: function () {
                        //分享朋友圈成功回调
                        platformAmuseControl.upWeiXinInviteGift();
                    },
                    cancel: function () {
                        //分享朋友圈取消或失败回调
                    },
                }
            },
            pay: {
                success: function () {
                    //支付成功回调
                },
                cancel: function () {
                    //支付失败回调
                }
            }
        });
        this.nativeCallback(JSON.stringify({ callType: "init" }));
    };
    /**
     * 是否需要登录
     */
    Platform99KH5.prototype.SDKIsNeedLoginNative = function () {
        return false;
    };
    /**
     * SDK登陆验证参数
     */
    Platform99KH5.prototype.GetSDKCheckAccountArgs = function () {
        var jsonObj = {
            pf: GlobalModel.pf,
            gameId: GlobalModel.gameId,
            channelId: GlobalModel.channelId,
            gameVersion: GlobalModel.gameVersion,
            appId: GlobalModel.appid,
            access_token: GlobalModel.getUrlParamValue("access_token"),
            sign: GlobalModel.getUrlParamValue("sign"),
            isfollow: GlobalModel.getUrlParamValue("isfollow")
        };
        return JSON.stringify(jsonObj);
    };
    /**
     * SDK创建角色
     */
    Platform99KH5.prototype.SDKCreateRoleNative = function (params) {
        this.setData(params, true);
    };
    /**
     * SDK进入游戏
     */
    Platform99KH5.prototype.SDKEnterGameNative = function (params) {
        this.setData(params);
    };
    /**
     * SDK角色升级
     */
    Platform99KH5.prototype.SDKUserUpgradeNative = function (params) {
        this.setData(params, false, true);
    };
    Platform99KH5.prototype.setData = function (params, isCreate, isUpLv) {
        if (isCreate === void 0) { isCreate = false; }
        if (isUpLv === void 0) { isUpLv = false; }
        var action = "2";
        if (isCreate) {
            action = "1";
        }
        if (isUpLv) {
            action = "3";
        }
        var roleInfo = {
            action: action,
            data: {
                server_id: params.serverId,
                server_name: params.serverName,
                role_id: ActorControl.actorID,
                role_name: params.nickName,
                role_level: ActorControl.level
            }
        };
        this.TPGAME_SDK.reportGameInfo(roleInfo);
    };
    /**
     * SDK支付
     */
    Platform99KH5.prototype.SDKPayNative = function (params) {
        var orderInfo = {
            out_trade_no: params.order,
            product_id: params.itemid,
            total_fee: params.fee * 100,
            body: params.goodsname,
            detail: params.goodsname,
            attach: params.order
        };
        var resultStr = Md5Utils.obj_md5_args(orderInfo);
        resultStr += SDKConst.JBH5Key;
        orderInfo["sign"] = Sha1Utils.hex_sha1(resultStr);
        this.TPGAME_SDK.pay(orderInfo);
    };
    /**
     * SDK二维码
     */
    Platform99KH5.prototype.SDKShowQRCode = function () {
        this.TPGAME_SDK.showQRCode();
    };
    return Platform99KH5;
}(PlatformBase));
__reflect(Platform99KH5.prototype, "Platform99KH5");
/**
 * AiwanH5
 */
var PlatformAiwanH5 = (function (_super) {
    __extends(PlatformAiwanH5, _super);
    function PlatformAiwanH5() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.AiwanSDK = window["AiwanSDK"];
        return _this;
    }
    /**
     * 初始化SDK
     */
    PlatformAiwanH5.prototype.SDKInitNative = function () {
        this.AiwanSDK.init(function (res) {
            if (res.code == 200) {
                SDKManager.ins().NativeCallback(JSON.stringify({
                    callType: "init",
                    sdkcode: 0,
                    data: res
                }));
            }
        });
    };
    /**
     * SDK需要登陆
     */
    PlatformAiwanH5.prototype.SDKIsNeedLoginNative = function () {
        return true;
    };
    /**
     * SDK登陆验证参数
     */
    PlatformAiwanH5.prototype.GetSDKCheckAccountArgs = function () {
        var jsonObj = {
            pf: GlobalModel.pf,
            gameId: GlobalModel.gameId,
            channelId: GlobalModel.channelId,
            gameVersion: GlobalModel.gameVersion,
            appId: GlobalModel.appid,
            token: GlobalModel.getUrlParamValue("token")
        };
        return JSON.stringify(jsonObj);
    };
    /**
     * 登录
     */
    PlatformAiwanH5.prototype.SDKLoginNative = function () {
    };
    /**
     * SDK创建角色
     */
    PlatformAiwanH5.prototype.SDKCreateRoleNative = function (params) {
        this.setData(params, true);
    };
    /**
     * SDK进入游戏
     */
    PlatformAiwanH5.prototype.SDKEnterGameNative = function (params) {
        this.setData(params);
    };
    /**
     * SDK角色升级
     */
    PlatformAiwanH5.prototype.SDKUserUpgradeNative = function (params) {
        this.setData(params, false, true);
    };
    PlatformAiwanH5.prototype.setData = function (params, isCreate, isUpLv) {
        if (isCreate === void 0) { isCreate = false; }
        if (isUpLv === void 0) { isUpLv = false; }
        var roleType = 1;
        if (isCreate)
            roleType = 2;
        else if (isUpLv)
            roleType = 3;
        var roleInfo = {
            roleId: ActorControl.actorID,
            roleName: ActorControl.myName,
            roleLevel: ActorControl.level,
            roleVip: vipControl.lv,
            serverId: params.serverId,
            serverName: params.serverName,
            event: roleType //角色上传事件类型，1：角色登录，2：创建角色，3：提升等级，4：角色退出，5：其他，6：删除角色
        };
        this.AiwanSDK.uploadRole(roleInfo, function (res) {
            if (res.code == 200) {
                console.log('GameDemo:AiwanSDK successfully upload ');
            }
            else {
                console.log('GameDemo:AiwanSDK fail to upload :' + res.code + ':' + res.msg);
            }
        });
    };
    /**
     * SDK支付
     */
    PlatformAiwanH5.prototype.SDKPayNative = function (params) {
        var orderInfo = {
            cpOrderId: params.order,
            productPrice: params.fee * 100,
            productId: params.itemid,
            productCount: params.amount,
            productName: params.goodsname,
            productDesc: params.goodsname,
            ext: params.order
        };
        this.AiwanSDK.payOrder(orderInfo, function (res) {
            if (res.code == 200) {
                console.log('GameDemo:AiwanSDK checkout success');
            }
            else {
                console.log('GameDemo:AiwanSDK order failed:' + res.code + ':' + res.msg);
            }
        });
    };
    /**
     * SDK登出
     */
    PlatformAiwanH5.prototype.SDKLogoutNative = function () {
        SDKManager.ins().NativeCallback(JSON.stringify({
            callType: "logout",
            sdkcode: 0,
        }));
    };
    /**
     * SDK回调
     */
    PlatformAiwanH5.prototype.nativeCallback = function (msg) {
        _super.prototype.nativeCallback.call(this, msg);
        var jsonObj = JSON.parse(msg);
        var callType = jsonObj['callType'];
        if (callType == 'init') {
            if (jsonObj['sdkcode'] == 0) {
                this.AiwanSDK.login(function (res) {
                    if (res.code == 200) {
                        console.log('GameDemo:AiwanSDK LoginOK: data=', res.data);
                        SDKManager.ins().NativeCallback(JSON.stringify({
                            callType: "login",
                            sdkcode: 0,
                            data: res.data
                        }));
                    }
                    else {
                        console.log('GameDemo:AiwanSDK Login failed:' + res.msg);
                        SDKManager.ins().NativeCallback(JSON.stringify({
                            callType: "login",
                            sdkcode: -1
                        }));
                    }
                });
            }
        }
        else if (callType == 'login') {
            if (jsonObj['sdkcode'] == 0) {
                var data = jsonObj['data'];
                GlobalModel.openID = data.cp_mem_id;
                GlobalModel.setUrlParamValue("token", data.cp_user_token);
                SceneMgr.ins().runScene(StartGameScene);
            }
            else {
                //失败就重新加载
                window.location.reload();
            }
        }
        else if (callType == 'logout') {
            if (jsonObj['sdkcode'] == 0) {
                window.location.reload();
            }
        }
    };
    return PlatformAiwanH5;
}(PlatformBase));
__reflect(PlatformAiwanH5.prototype, "PlatformAiwanH5");
/**
 * AiwanH5H5
 */
var PlatformAiwanH5WD = (function (_super) {
    __extends(PlatformAiwanH5WD, _super);
    function PlatformAiwanH5WD() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.AiwanSDK = window["AiwanSDK"];
        return _this;
    }
    /**
     * 初始化SDK
     */
    PlatformAiwanH5WD.prototype.SDKInitNative = function () {
        //兼容
        if (GlobalModel.gameId == 56) {
            GlobalModel.setUrlParamValue("pfid", 56);
        }
        this.AiwanSDK.init(function (res) {
            if (res.code == 200) {
                console.log('GameDemo:AiwanSDK init');
                SDKManager.ins().NativeCallback(JSON.stringify({
                    callType: "init",
                    sdkcode: 0,
                    data: res
                }));
            }
            else {
                console.log('GameDemo:AiwanSDK initFail:' + res.msg);
            }
        });
        window['CpGame'] = {
            logout: function () {
                //游戏内部逻辑，先退出游戏，再调SDK登录
                window.location.reload();
            }
        };
    };
    /**
     * SDK需要登陆
     */
    PlatformAiwanH5WD.prototype.SDKIsNeedLoginNative = function () {
        return true;
    };
    /**
     * SDK登陆验证参数
     */
    PlatformAiwanH5WD.prototype.GetSDKCheckAccountArgs = function () {
        var jsonObj = {
            pf: GlobalModel.pf,
            gameId: GlobalModel.gameId,
            channelId: GlobalModel.channelId,
            gameVersion: GlobalModel.gameVersion,
            appId: GlobalModel.appid,
            token: GlobalModel.getUrlParamValue("token")
        };
        return JSON.stringify(jsonObj);
    };
    /**
     * 登录
     */
    PlatformAiwanH5WD.prototype.SDKLoginNative = function () { };
    /**
     * SDK创建角色
     */
    PlatformAiwanH5WD.prototype.SDKCreateRoleNative = function (params) {
        this.setData(params, true);
    };
    /**
     * SDK进入游戏
     */
    PlatformAiwanH5WD.prototype.SDKEnterGameNative = function (params) {
        this.setData(params);
    };
    /**
     * SDK角色升级
     */
    PlatformAiwanH5WD.prototype.SDKUserUpgradeNative = function (params) {
        this.setData(params, false, true);
    };
    PlatformAiwanH5WD.prototype.setData = function (params, isCreate, isUpLv) {
        if (isCreate === void 0) { isCreate = false; }
        if (isUpLv === void 0) { isUpLv = false; }
        var roleType = 1;
        if (isCreate)
            roleType = 2;
        else if (isUpLv)
            roleType = 3;
        var roleInfo = {
            roleId: ActorControl.actorID,
            roleName: ActorControl.myName,
            roleLevel: ActorControl.level,
            roleVip: vipControl.lv,
            serverId: params.serverId,
            serverName: params.serverName,
            event: roleType //角色上传事件类型，1：角色登录，2：创建角色，3：提升等级，4：角色退出，5：其他，6：删除角色
        };
        this.AiwanSDK.uploadRole(roleInfo, function (res) {
            if (res.code == 200) {
                console.log('GameDemo:AiwanSDK successfully upload ');
            }
            else {
                console.log('GameDemo:AiwanSDK fail to upload :' + res.code + ':' + res.msg);
            }
        });
    };
    /**
     * SDK支付
     */
    PlatformAiwanH5WD.prototype.SDKPayNative = function (params) {
        var orderInfo = {
            cpOrderId: params.order,
            productPrice: params.fee * 100,
            productId: params.itemid,
            productCount: params.amount,
            productName: params.goodsname,
            productDesc: params.goodsname,
            ext: params.order
        };
        this.AiwanSDK.payOrder(orderInfo, function (res) {
            if (res.code == 200) {
                console.log('GameDemo:AiwanSDK checkout success');
            }
            else {
                console.log('GameDemo:AiwanSDK order failed:' + res.code + ':' + res.msg);
            }
        });
    };
    /**
     * SDK登出
     */
    PlatformAiwanH5WD.prototype.SDKLogoutNative = function () {
        this.AiwanSDK.logout(function (res) {
            if (res.code == 200) {
                SDKManager.ins().NativeCallback(JSON.stringify({
                    callType: "logout",
                    sdkcode: 0,
                }));
            }
            else {
                console.log('GameDemo:AiwanSDK exitFail:' + res.msg);
            }
        });
    };
    PlatformAiwanH5WD.prototype.SDKShowLogout = function () {
        return true;
    };
    /**
     * SDK回调
     */
    PlatformAiwanH5WD.prototype.nativeCallback = function (msg) {
        _super.prototype.nativeCallback.call(this, msg);
        var jsonObj = JSON.parse(msg);
        var callType = jsonObj['callType'];
        if (callType == 'init') {
            if (jsonObj['sdkcode'] == 0) {
                this.AiwanSDK.login(function (res) {
                    if (res.code == 200) {
                        console.log('GameDemo:AiwanSDK loginOk: data=', res.data);
                        SDKManager.ins().NativeCallback(JSON.stringify({
                            callType: "login",
                            sdkcode: 0,
                            data: res.data
                        }));
                    }
                    else {
                        console.log('GameDemo:AiwanSDK loginfail:' + res.msg);
                        SDKManager.ins().NativeCallback(JSON.stringify({
                            callType: "login",
                            sdkcode: -1
                        }));
                    }
                });
            }
        }
        else if (callType == 'login') {
            if (jsonObj['sdkcode'] == 0) {
                var data = jsonObj['data'];
                GlobalModel.openID = data.cp_mem_id;
                GlobalModel.setUrlParamValue("token", data.cp_user_token);
                SceneMgr.ins().runScene(StartGameScene);
            }
            else {
                //失败就重新加载
                window.location.reload();
            }
        }
        else if (callType == 'logout') {
            if (jsonObj['sdkcode'] == 0) {
                window.location.reload();
            }
        }
    };
    return PlatformAiwanH5WD;
}(PlatformBase));
__reflect(PlatformAiwanH5WD.prototype, "PlatformAiwanH5WD");
/**
 * Braintree
 */
var PlatformBraintree = (function (_super) {
    __extends(PlatformBraintree, _super);
    function PlatformBraintree() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.payObj = null;
        _this.PayWay = "";
        _this.isComplete = false;
        return _this;
    }
    /**
     * 初始化SDK
     */
    PlatformBraintree.prototype.SDKInitNative = function () {
        SDKManager.ins()["PayWay"];
        this.httpRequest = new egret.HttpRequest();
    };
    /**
     * SDK需要登陆
     */
    PlatformBraintree.prototype.SDKIsNeedLoginNative = function () {
        return true;
    };
    PlatformBraintree.prototype.SDKLoginNative = function () {
        SceneMgr.ins().runScene(RegisterLoginScene);
    };
    /**
     * SDK登陆验证参数
     */
    PlatformBraintree.prototype.GetSDKCheckAccountArgs = function () {
        var jsonObj = {
            pf: GlobalModel.pf,
            uid: egret.localStorage.getItem("loginAccount"),
            gameId: GlobalModel.gameId,
            channelId: GlobalModel.channelId,
            gameVersion: GlobalModel.gameVersion,
            appId: GlobalModel.appid,
            token: GlobalModel.getUrlParamValue("token"),
            isLogin: GlobalModel.getUrlParamValue("isLogin"),
            shellext: GlobalModel.getUrlParamValue("shellext")
        };
        console.log("login info:", JSON.stringify(jsonObj));
        return JSON.stringify(jsonObj);
    };
    /**
     * SDK支付
     */
    PlatformBraintree.prototype.SDKPayNative = function (params) {
        this.payObj = {
            serverId: params.serverId,
            serverName: params.serverName,
            goodsID: this.GetChannelItemId(params.itemid),
            cpOrderID: params.order,
            fee: params.fee,
            productName: params.goodsname,
            timestamp: params.timestamp
        };
        console.log(params);
        if (params.paydata.payurl) {
            if (SDKManager.ins()["PayWay"] == 'paypal') {
                window.open(params.paydata.payurl);
            }
            else if (SDKManager.ins()["PayWay"] == 'alipay') {
                this.isComplete = false;
                var alpayObj = this.getRequest(params.paydata.payurl);
                this.sendReportUrl(params.paydata.payurl.split("?")[0], alpayObj, egret.HttpMethod.POST);
            }
        }
        else if (params.paydata.wechatpay) {
            //weichat pay
            console.log('wechatpay', params.paydata.wechatpay);
            this.weiChatPay(params.paydata.wechatpay);
        }
    };
    PlatformBraintree.prototype.getRequest = function (urlStr) {
        if (typeof urlStr == "undefined") {
            var url = decodeURI(location.search); //获取url中"?"符后的字符串
        }
        else {
            var url = "?" + urlStr.split("?")[1];
        }
        var theRequest = new Object();
        if (url.indexOf("?") != -1) {
            var str = url.substr(1);
            var strs = str.split("&");
            for (var i = 0; i < strs.length; i++) {
                theRequest[strs[i].split("=")[0]] = decodeURI(strs[i].split("=")[1]);
            }
        }
        return theRequest;
    };
    PlatformBraintree.prototype.sendReportUrl = function (url, params, method) {
        this.httpRequest.setRequestHeader("Content-Type", "application/x-www-form-urlencoded;charset=UTF-8");
        if (method == egret.HttpMethod.POST) {
            this.httpRequest.open(url, egret.HttpMethod.POST);
            this.httpRequest.send(params);
        }
        else {
            this.httpRequest.open(url + "?" + params, egret.HttpMethod.GET);
            this.httpRequest.send();
        }
        this.isComplete = true;
        this.httpRequest.addEventListener(egret.Event.COMPLETE, this.onGetComplete, this);
        this.httpRequest.addEventListener(egret.IOErrorEvent.IO_ERROR, this.onGetIOError, this);
    };
    PlatformBraintree.prototype.onGetComplete = function (event) {
        console.log("onGetComplete:", event.currentTarget.response);
    };
    PlatformBraintree.prototype.onGetIOError = function (event) {
        console.log('onGetIOError:', event);
    };
    PlatformBraintree.prototype.GetMakeOrderSdkArgs = function (params) {
        params['paytype'] = SDKManager.ins()["PayWay"];
        return JSON.stringify(params);
    };
    PlatformBraintree.prototype.upperCase = function (str) {
        return !!str ? str.substring(0, 1).toUpperCase() + str.substring(1) : "";
    };
    /**返回拼接好的数据 */
    PlatformBraintree.prototype.getUrl = function (obj) {
        var cc = '';
        for (var key in obj) {
            cc += key + "=" + obj[key] + "&";
        }
        cc = cc.substring(0, cc.length - 1);
        return cc;
    };
    /**
     * 获取加密
     */
    PlatformBraintree.prototype.getSign = function (obj) {
        var obj2 = this.getUrl(obj);
        return EncryptMd5.hex_md5(obj2);
    };
    /**
     * 渠道计费点
     */
    PlatformBraintree.prototype.GetChannelItemId = function (itemid) {
        var apptype = SDKManager.ins()["UgameAppType"];
        apptype = this.upperCase(apptype);
        switch (GlobalModel.os) {
            case "android":
                itemid = SDKConst["GooglePayProductIds" + apptype][itemid];
                break;
            case "ios":
                itemid = SDKConst["IosProductIds" + apptype][itemid];
                break;
        }
        return itemid;
    };
    /**
     * SDK支付
     */
    PlatformBraintree.prototype.weiChatPay = function (params) {
        egret.ExternalInterface.call("weiChatPay", JSON.stringify({
            "appId": params.appId,
            "bizType": params.bizType,
            "nonceStr": params.nonceStr,
            "package_": params.package_,
            "partnerId": params.partnerId,
            "paySign": params.paySign,
            "prepay_id": params.prepay_id,
            "reAmount": params.reAmount,
            "timeStamp": params.timeStamp,
            "tradeNo": params.tradeNo,
            "wxapikey": params.wxapikey
        }));
    };
    /**
     * SDK回调
     */
    PlatformBraintree.prototype.nativeCallback = function (msg) {
        _super.prototype.nativeCallback.call(this, msg);
        var jsonObj = JSON.parse(msg);
        var callType = jsonObj['callType'];
        if (callType == 'weiChatPay') {
            if (jsonObj['sdkcode'] == 0) {
                var data = jsonObj['data'];
                GlobalModel.openID = data.userID;
                GlobalModel.nickName = data.loginName;
                GlobalModel.setUrlParamValue("token", data.loginToken);
                GlobalModel.setUrlParamValue("isLogin", data.resultType);
                SceneMgr.ins().runScene(StartGameScene);
            }
            else {
                this.SDKLoginNative();
            }
        }
    };
    return PlatformBraintree;
}(PlatformBase));
__reflect(PlatformBraintree.prototype, "PlatformBraintree");
var PlatformBZ = (function (_super) {
    __extends(PlatformBZ, _super);
    function PlatformBZ() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.BZ_SDK = window["BZ_SDK"];
        return _this;
    }
    /**
     * 初始化SDK
     */
    PlatformBZ.prototype.SDKInitNative = function () {
        // 初始化需要传的参数，参数由我方提供
        var params = {
            gid: SDKConst.BZGid,
            sub_gid: 10066,
            opr_cid: SDKConst.BZOprCid,
            adv_cid: 101,
            pkg_id: 0,
            sdk_ver: '1.0.0' // SDK版本
        };
        this.BZ_SDK.init(params, function (data, status) {
            // 初始化成功后，会调用此函数
            console.log('bzmessage:', data.msg, 'bzstatus:', status);
            SDKManager.ins().NativeCallback(JSON.stringify({
                callType: "init",
                sdkcode: 0,
                data: data
            }));
        });
    };
    /**
     * 是否需要登录
     */
    PlatformBZ.prototype.SDKIsNeedLoginNative = function () {
        return true;
    };
    /**
     * SDK登陆验证参数
     */
    PlatformBZ.prototype.GetSDKCheckAccountArgs = function () {
        var jsonObj = {
            pf: GlobalModel.pf,
            gameId: GlobalModel.gameId,
            channelId: GlobalModel.channelId,
            gameVersion: GlobalModel.gameVersion,
            appId: GlobalModel.appid,
            uid: GlobalModel.openID,
            token: GlobalModel.getUrlParamValue("token")
        };
        return JSON.stringify(jsonObj);
    };
    /**
     * 登录
     */
    PlatformBZ.prototype.SDKLoginNative = function () {
    };
    /**
     * SDK创建角色
     */
    PlatformBZ.prototype.SDKCreateRoleNative = function (params) {
        this.setData(params, true);
    };
    /**
     * SDK进入游戏
     */
    PlatformBZ.prototype.SDKEnterGameNative = function (params) {
        this.setData(params);
    };
    /**
     * SDK角色升级
     */
    PlatformBZ.prototype.SDKUserUpgradeNative = function (params) {
        this.setData(params, false, true);
    };
    PlatformBZ.prototype.setData = function (params, isCreate, isUpLv) {
        if (isCreate === void 0) { isCreate = false; }
        if (isUpLv === void 0) { isUpLv = false; }
        // 角色上报需要传的参数
        var obj = {
            rtype: isCreate ? "create" : (isUpLv ? "lvup" : "login"),
            cp_server_id: params.serverId,
            cp_server_name: params.serverName,
            role_id: ActorControl.actorID,
            role_name: ActorControl.myName,
            level: ActorControl.level,
            vip_lv: vipControl.lv,
            gender: "",
            part_id: unionControl.guildID,
            part_name: unionControl.guildName,
            part_leader_id: '',
            part_leader_name: '',
            power: (ActorControl.power == 0 ? params.power : ActorControl.power),
            profession_id: params.job,
            profession_name: CommonFun.getJobName(params.job),
            gold: ActorControl.yb,
            coin: ActorControl.gold,
            create_ts: GlobalModel.createActorTime
        };
        this.BZ_SDK.reportLog(obj);
    };
    /**
     * SDK支付
     */
    PlatformBZ.prototype.SDKPayNative = function (params) {
        // 支付需要的参数
        var obj = {
            product_id: params.itemid,
            product_name: params.goodsname,
            product_desc: params.goodsname,
            pay_money: params.fee,
            cp_order_id: params.order,
            cp_server_id: params.serverId,
            cp_server_name: params.serverName,
            role_id: ActorControl.actorID,
            role_name: ActorControl.myName,
            level: ActorControl.level,
            vip_lv: vipControl.lv,
            gender: "",
            gold: ActorControl.yb,
            coin: ActorControl.gold,
            ext: params.order
        };
        this.BZ_SDK.genOrder(obj);
    };
    /**
     * SDK登出
     */
    PlatformBZ.prototype.SDKLogoutNative = function () {
        SDKManager.ins().NativeCallback(JSON.stringify({
            callType: "logout",
            sdkcode: 0,
        }));
    };
    /**
     * 显示切换账号
     */
    PlatformBZ.prototype.SDKShowLogout = function () {
        return true;
    };
    /**
     * SDK回调
     */
    PlatformBZ.prototype.nativeCallback = function (msg) {
        _super.prototype.nativeCallback.call(this, msg);
        var jsonObj = JSON.parse(msg);
        var callType = jsonObj['callType'];
        console.log("SDK callback:", JSON.stringify(jsonObj));
        if (callType == 'init') {
            if (jsonObj['sdkcode'] == 0) {
                // 确保初始化完成后再调用登录方法
                this.BZ_SDK.login(function (data, status) {
                    // 登录后，会调用此函数。成功会返回 {token: "", uname: "", uid: ""} 的对象
                    // 注：切换账号后，登录成功也会调用此函数
                    console.log('data:', data, 'status:', status);
                    SDKManager.ins().NativeCallback(JSON.stringify({
                        callType: "login",
                        sdkcode: 0,
                        data: data
                    }));
                });
            }
        }
        else if (callType == 'login') {
            if (jsonObj['sdkcode'] == 0) {
                var data = jsonObj['data'];
                GlobalModel.openID = data.uid + "";
                GlobalModel.setUrlParamValue("token", data.token);
                GlobalModel.setUrlParamValue("uname", data.uname);
                SceneMgr.ins().runScene(StartGameScene);
            }
            else {
                //失败就重新加载
                window.location.reload();
            }
        }
        else if (callType == 'logout') {
            if (jsonObj['sdkcode'] == 0) {
                // 切换账号后
                this.BZ_SDK.switchAccount();
                window.location.reload();
            }
        }
    };
    return PlatformBZ;
}(PlatformBase));
__reflect(PlatformBZ.prototype, "PlatformBZ");
var PlatformBZH5 = (function (_super) {
    __extends(PlatformBZH5, _super);
    function PlatformBZH5() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.BZ_SDK = window["BZ_SDK"];
        return _this;
    }
    /**
     * 初始化SDK
     */
    PlatformBZH5.prototype.SDKInitNative = function () {
    };
    /**
     * 是否需要登录
     */
    PlatformBZH5.prototype.SDKIsNeedLoginNative = function () {
        return true;
    };
    /**
     * SDK登陆验证参数
     */
    PlatformBZH5.prototype.GetSDKCheckAccountArgs = function () {
        var jsonObj = {
            pf: GlobalModel.pf,
            gameId: GlobalModel.gameId,
            channelId: GlobalModel.channelId,
            gameVersion: GlobalModel.gameVersion,
            appId: GlobalModel.appid,
            uid: GlobalModel.openID,
            token: GlobalModel.getUrlParamValue("token")
        };
        return JSON.stringify(jsonObj);
    };
    /**
     * 登录
     */
    PlatformBZH5.prototype.SDKLoginNative = function () {
        // 初始化需要传的参数，参数由我方提供
        var params = {
            gid: SDKConst.BZGid,
            sub_gid: SDKConst.BZSubGid,
            opr_cid: SDKConst.BZOprCid,
            adv_cid: 101,
            pkg_id: 0,
            sdk_ver: '1.0.0' // SDK版本
        };
        this.BZ_SDK.init(params, function (data, status) {
            // 初始化成功后，会调用此函数
            console.log('bzmessage:', data.msg, 'bzstatus:', status);
            SDKManager.ins().NativeCallback(JSON.stringify({
                callType: "init",
                sdkcode: 0,
                data: data
            }));
        });
    };
    /**
     * SDK创建角色
     */
    PlatformBZH5.prototype.SDKCreateRoleNative = function (params) {
        this.setData(params, true);
    };
    /**
     * SDK进入游戏
     */
    PlatformBZH5.prototype.SDKEnterGameNative = function (params) {
        this.setData(params);
    };
    /**
     * SDK角色升级
     */
    PlatformBZH5.prototype.SDKUserUpgradeNative = function (params) {
        this.setData(params, false, true);
    };
    PlatformBZH5.prototype.setData = function (params, isCreate, isUpLv) {
        if (isCreate === void 0) { isCreate = false; }
        if (isUpLv === void 0) { isUpLv = false; }
        // 角色上报需要传的参数
        var obj = {
            rtype: isCreate ? "create" : (isUpLv ? "lvup" : "login"),
            cp_server_id: params.serverId,
            cp_server_name: params.serverName,
            role_id: ActorControl.actorID,
            role_name: ActorControl.myName,
            level: ActorControl.level,
            vip_lv: vipControl.lv,
            gender: "",
            part_id: unionControl.guildID,
            part_name: unionControl.guildName,
            part_leader_id: '',
            part_leader_name: '',
            power: (ActorControl.power == 0 ? params.power : ActorControl.power),
            profession_id: params.job,
            profession_name: CommonFun.getJobName(params.job),
            gold: ActorControl.yb,
            coin: ActorControl.gold,
            create_ts: GlobalModel.createActorTime
        };
        this.BZ_SDK.reportLog(obj);
    };
    /**
     * SDK支付
     */
    PlatformBZH5.prototype.SDKPayNative = function (params) {
        // 支付需要的参数
        var obj = {
            product_id: params.itemid,
            product_name: params.goodsname,
            product_desc: params.goodsname,
            pay_money: params.fee,
            cp_order_id: params.order,
            cp_server_id: params.serverId,
            cp_server_name: params.serverName,
            role_id: ActorControl.actorID,
            role_name: ActorControl.myName,
            level: ActorControl.level,
            vip_lv: vipControl.lv,
            gender: "",
            gold: ActorControl.yb,
            coin: ActorControl.gold,
            ext: params.order
        };
        this.BZ_SDK.genOrder(obj);
    };
    /**
     * SDK登出
     */
    PlatformBZH5.prototype.SDKLogoutNative = function () {
        SDKManager.ins().NativeCallback(JSON.stringify({
            callType: "logout",
            sdkcode: 0,
        }));
    };
    /**
     * 显示切换账号
     */
    PlatformBZH5.prototype.SDKShowLogout = function () {
        return true;
    };
    /**
     * SDK回调
     */
    PlatformBZH5.prototype.nativeCallback = function (msg) {
        _super.prototype.nativeCallback.call(this, msg);
        var jsonObj = JSON.parse(msg);
        var callType = jsonObj['callType'];
        console.log("SDK callback:", JSON.stringify(jsonObj));
        if (callType == 'init') {
            if (jsonObj['sdkcode'] == 0) {
                // 确保初始化完成后再调用登录方法
                this.BZ_SDK.login(function (data, status) {
                    // 登录后，会调用此函数。成功会返回 {token: "", uname: "", uid: ""} 的对象
                    // 注：切换账号后，登录成功也会调用此函数
                    console.log('data:', data, 'status:', status);
                    SDKManager.ins().NativeCallback(JSON.stringify({
                        callType: "login",
                        sdkcode: 0,
                        data: data
                    }));
                });
            }
        }
        else if (callType == 'login') {
            if (jsonObj['sdkcode'] == 0) {
                var data = jsonObj['data'];
                GlobalModel.openID = data.uid + "";
                GlobalModel.setUrlParamValue("token", data.token);
                GlobalModel.setUrlParamValue("uname", data.uname);
                SceneMgr.ins().runScene(StartGameScene);
            }
            else {
                //失败就重新加载
                window.location.reload();
            }
        }
        else if (callType == 'logout') {
            if (jsonObj['sdkcode'] == 0) {
                // 切换账号后
                this.BZ_SDK.switchAccount();
                window.location.reload();
            }
        }
    };
    return PlatformBZH5;
}(PlatformBase));
__reflect(PlatformBZH5.prototype, "PlatformBZH5");
/**
 * CandyH5
 */
var PlatformCandyH5 = (function (_super) {
    __extends(PlatformCandyH5, _super);
    function PlatformCandyH5() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.CYSDK = window["CYSDK"];
        return _this;
    }
    /**
     * 初始化SDK
     */
    PlatformCandyH5.prototype.SDKInitNative = function () {
        this.CYSDK.CYInitialization(SDKConst.CandyAPP_ID, SDKConst.CandyApp_KEY);
    };
    /**
     * SDK需要登陆
     */
    PlatformCandyH5.prototype.SDKIsNeedLoginNative = function () {
        return true;
    };
    /**
     * SDK登陆验证参数
     */
    PlatformCandyH5.prototype.GetSDKCheckAccountArgs = function () {
        var jsonObj = {
            pf: GlobalModel.pf,
            gameId: GlobalModel.gameId,
            channelId: GlobalModel.channelId,
            gameVersion: GlobalModel.gameVersion,
            appId: GlobalModel.appid,
            token: GlobalModel.getUrlParamValue("token")
        };
        return JSON.stringify(jsonObj);
    };
    /**
     * 登录
     */
    PlatformCandyH5.prototype.SDKLoginNative = function () {
        this.CYSDK.CYLogin(function (userInfo) {
            SDKManager.ins().NativeCallback(JSON.stringify({
                callType: "login",
                sdkcode: 0,
                data: userInfo
            }));
        });
    };
    /**
     * SDK创建角色
     */
    PlatformCandyH5.prototype.SDKCreateRoleNative = function (params) {
        this.setData(params, true);
    };
    /**
     * SDK进入游戏
     */
    PlatformCandyH5.prototype.SDKEnterGameNative = function (params) {
        this.setData(params);
    };
    /**
     * SDK角色升级
     */
    PlatformCandyH5.prototype.SDKUserUpgradeNative = function (params) {
        this.setData(params, false, true);
    };
    PlatformCandyH5.prototype.setData = function (params, isCreate, isUpLv) {
        if (isCreate === void 0) { isCreate = false; }
        if (isUpLv === void 0) { isUpLv = false; }
        var roleInfo = {
            token: GlobalModel.getUrlParamValue("token"),
            rolesId: ActorControl.actorID + "",
            roles: {
                name: ActorControl.myName,
                le: ActorControl.level
            }
        };
        if (isUpLv || isCreate) {
            this.CYSDK.CYReport(roleInfo);
        }
    };
    /**
     * SDK支付
     */
    PlatformCandyH5.prototype.SDKPayNative = function (params) {
        var orderInfo = {
            token: GlobalModel.getUrlParamValue("token"),
            productId: this.getItemID(params.itemid),
            info: params.order
        };
        this.CYSDK.CYPayment(JSON.parse(JSON.stringify(orderInfo)), function (param) {
            // console.log('DataSdk:下单通知' + JSON.stringify(param));
        });
    };
    PlatformCandyH5.prototype.getItemID = function (itemid) {
        var item = "";
        switch (itemid) {
            case 509:
                item = "com.zsby.188";
                break;
            case 510:
                item = "com.zsby.68";
                break;
            default:
                item = itemid;
                break;
        }
        return item;
    };
    /**
     * SDK回调
     */
    PlatformCandyH5.prototype.nativeCallback = function (msg) {
        _super.prototype.nativeCallback.call(this, msg);
        var jsonObj = JSON.parse(msg);
        var callType = jsonObj['callType'];
        if (callType == 'init') {
            debug.log("SDK init ok");
        }
        else if (callType == 'login') {
            if (jsonObj['sdkcode'] == 0) {
                var data = jsonObj['data'];
                GlobalModel.openID = data.userID;
                GlobalModel.nickName = data.loginName;
                GlobalModel.setUrlParamValue("token", data.loginToken);
                GlobalModel.setUrlParamValue("isLogin", data.resultType);
                SceneMgr.ins().runScene(StartGameScene);
            }
            else {
                this.SDKLoginNative();
            }
        }
        else if (callType == 'logout') {
            if (jsonObj['sdkcode'] == 0) {
                window.location.reload();
            }
        }
        else if (callType == 'switchAccount') {
            if (jsonObj['sdkcode'] == 0) {
                window.location.reload();
            }
        }
    };
    return PlatformCandyH5;
}(PlatformBase));
__reflect(PlatformCandyH5.prototype, "PlatformCandyH5");
/**
 * CGamex
 */
var PlatformCGamex = (function (_super) {
    __extends(PlatformCGamex, _super);
    function PlatformCGamex() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * SDK需要登陆
     */
    PlatformCGamex.prototype.SDKIsNeedLoginNative = function () {
        return true;
    };
    /**
     * SDK登陆验证参数
     */
    PlatformCGamex.prototype.GetSDKCheckAccountArgs = function () {
        var jsonObj = {
            pf: GlobalModel.pf,
            gameId: GlobalModel.gameId,
            channelId: GlobalModel.channelId,
            gameVersion: GlobalModel.gameVersion,
            appId: GlobalModel.appid,
            token: GlobalModel.getUrlParamValue("token")
        };
        console.log("CGamex loginData:", JSON.stringify(jsonObj));
        return JSON.stringify(jsonObj);
    };
    /**
     * SDK创建角色
     */
    PlatformCGamex.prototype.SDKCreateRoleNative = function (params) {
        this.setData(params, true);
    };
    /**
     * SDK进入游戏
     */
    PlatformCGamex.prototype.SDKEnterGameNative = function (params) {
        this.setData(params);
    };
    /**
     * SDK角色升级
     */
    PlatformCGamex.prototype.SDKUserUpgradeNative = function (params) {
        this.setData(params, false, true);
    };
    PlatformCGamex.prototype.setData = function (params, isCreate, isUpLv) {
        if (isCreate === void 0) { isCreate = false; }
        if (isUpLv === void 0) { isUpLv = false; }
        egret.ExternalInterface.call("SDKsetDataNative", JSON.stringify({
            gameRoleID: ActorControl.actorID,
            gameRoleName: params.nickName,
            gameUserLevel: ActorControl.level,
            serverId: params.serverId,
            serverName: params.serverName,
        }));
    };
    /**
     * SDK支付
     */
    PlatformCGamex.prototype.SDKPayNative = function (params) {
        egret.ExternalInterface.call("SDKPayNative", JSON.stringify({
            amount: params.fee,
            cpOrderID: params.order,
            serverId: params.serverId,
            serverName: params.serverName,
            gameRoleID: ActorControl.actorID,
            gameRoleName: params.roleName,
            gameUserLevel: ActorControl.level,
            extrasParams: params.order,
        }));
    };
    /**
     * SDK回调
     */
    PlatformCGamex.prototype.nativeCallback = function (msg) {
        msg = Base64.base64decode(msg);
        _super.prototype.nativeCallback.call(this, msg);
        var jsonObj = JSON.parse(msg);
        var callType = jsonObj['callType'];
        if (callType == 'login') {
            if (jsonObj['sdkcode'] == 0) {
                GlobalModel.appid = jsonObj['appId'];
                GlobalModel.openID = jsonObj['userId'];
                GlobalModel.nickName = jsonObj['userName'];
                GlobalModel.setUrlParamValue("token", jsonObj['token']);
                SceneMgr.ins().runScene(StartGameScene);
            }
            else {
                this.SDKLoginNative();
            }
        }
        else if (callType == 'logout') {
            if (jsonObj['sdkcode'] == 0) {
                window.location.reload();
            }
        }
    };
    return PlatformCGamex;
}(PlatformBase));
__reflect(PlatformCGamex.prototype, "PlatformCGamex");
/**
 * ChengZi
 */
var PlatformChengZi = (function (_super) {
    __extends(PlatformChengZi, _super);
    function PlatformChengZi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * SDK需要登陆
     */
    PlatformChengZi.prototype.SDKIsNeedLoginNative = function () {
        return true;
    };
    /**
     * SDK登陆验证参数
     */
    PlatformChengZi.prototype.GetSDKCheckAccountArgs = function () {
        var times = Date.now();
        var signObj = {
            uid: GlobalModel.openID,
            time: times,
            appkey: SDKConst.ChengZiKey
        };
        var signs = Md5Utils.obj_cntstr(signObj);
        var jsonObj = {
            pf: GlobalModel.pf,
            gameId: GlobalModel.gameId,
            channelId: GlobalModel.channelId,
            gameVersion: GlobalModel.gameVersion,
            appId: GlobalModel.appid,
            time: times,
            sign: signs
        };
        console.log("ChengZi loginData:", JSON.stringify(jsonObj));
        return JSON.stringify(jsonObj);
    };
    /**
     * SDK进入游戏
     */
    PlatformChengZi.prototype.SDKEnterGameNative = function (params) {
        this.setData(params);
    };
    /**
     * SDK创建角色
     */
    PlatformChengZi.prototype.SDKCreateRoleNative = function (params) {
        this.setData(params, true);
    };
    /**
     * SDK角色升级
     */
    PlatformChengZi.prototype.SDKUserUpgradeNative = function (params) {
        this.setData(params, false, true);
    };
    PlatformChengZi.prototype.setData = function (params, isCreate, isUpLv) {
        if (isCreate === void 0) { isCreate = false; }
        if (isUpLv === void 0) { isUpLv = false; }
        var roleInfo = {
            role_id: ActorControl.actorID,
            role_name: ActorControl.myName,
            role_vip: vipControl.lv,
            role_leve: ActorControl.level,
            role_serverid: params.serverId
        };
        var roleInfoJson = JSON.stringify(roleInfo);
        egret.ExternalInterface.call("SDKLevelUpdate", roleInfoJson);
    };
    /**
     * SDK下单参数
     */
    PlatformChengZi.prototype.GetMakeOrderSdkArgs = function (params) {
        return JSON.stringify({
            paytype: GlobalModel.os == "android" ? "gp" : (GlobalModel.os == "ios" ? "ios" : "home")
        });
    };
    /**
     * SDK支付
     */
    PlatformChengZi.prototype.SDKPayNative = function (params) {
        egret.ExternalInterface.call("SDKPayNative", JSON.stringify({
            order_price: params.fee,
            order_itemid: this.GetChannelItemId(params.itemid),
            order_id: params.order,
            order_payType: "USD",
            role_id: ActorControl.actorID,
            role_name: ActorControl.myName,
            role_lv: ActorControl.level,
            serverId: params.serverId,
            serverName: params.serverName,
            ext: params.order
        }));
    };
    /**
     * 渠道计费点
     */
    PlatformChengZi.prototype.GetChannelItemId = function (itemid) {
        //GooglePay
        if (GlobalModel.os == "android") {
            itemid = SDKConst.GooglePayProductIdsLzby[itemid];
        }
        else if (GlobalModel.os == "ios") {
            itemid = SDKConst.IosProductIds[itemid];
        }
        return itemid;
    };
    /**
     * SDK回调
     */
    PlatformChengZi.prototype.nativeCallback = function (msg) {
        msg = Base64.base64decode(msg);
        _super.prototype.nativeCallback.call(this, msg);
        var jsonObj = JSON.parse(msg);
        var callType = jsonObj['callType'];
        console.log('SDKCallBack', JSON.stringify(jsonObj));
        if (callType == 'init') {
            debug.log("SDK init ok");
        }
        else if (callType == 'login') {
            if (jsonObj['sdkcode'] == 0) {
                GlobalModel.openID = jsonObj['userId'];
                GlobalModel.setUrlParamValue("os", jsonObj["os"]);
                GlobalModel.setUrlParamValue("token", jsonObj["user_token"]);
                SceneMgr.ins().runScene(StartGameScene);
            }
            else {
                this.SDKLoginNative();
            }
        }
        else if (callType == 'checkFailBill') {
            platformAmuseControl.dispatchGameFBGift(jsonObj['fbflag']);
            platformAmuseControl.dispatchGameFBRate(jsonObj['rateFlag']);
        }
        else if (callType == 'logout') {
            if (jsonObj['sdkcode'] == 0) {
                window.location.reload();
            }
        }
        else if (callType == 'switchAccount') {
            if (jsonObj['sdkcode'] == 0) {
                window.location.reload();
            }
        }
    };
    return PlatformChengZi;
}(PlatformBase));
__reflect(PlatformChengZi.prototype, "PlatformChengZi");
/**
 * Ugame
 */
var PlatformGame8UH5 = (function (_super) {
    __extends(PlatformGame8UH5, _super);
    function PlatformGame8UH5() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * SDK需要登陆
     */
    PlatformGame8UH5.prototype.SDKIsNeedLoginNative = function () {
        return true;
    };
    /**
     * SDK登陆验证参数
     */
    PlatformGame8UH5.prototype.GetSDKCheckAccountArgs = function () {
        var times = Date.now();
        var jsonObj = {
            uid: GlobalModel.openID,
            appId: GlobalModel.appid,
            time: times,
            support_share: 1,
            support_follow: 1,
            follow: 1,
            age: 1,
            sign: Md5Utils.obj_md5_args({
                uid: GlobalModel.openID,
                appid: GlobalModel.appid,
                time: times,
                appkey: SDKConst.Game8UH5
            })
        };
        console.log("Game8u loginData:", JSON.stringify(jsonObj));
        return JSON.stringify(jsonObj);
    };
    /**
    * SDK创建角色
    */
    PlatformGame8UH5.prototype.SDKCreateRoleNative = function (params) {
        this.setData(params, true);
    };
    /**
     * SDK进入游戏
     */
    PlatformGame8UH5.prototype.SDKEnterGameNative = function (params) {
        this.setData(params);
    };
    /**
     * SDK角色升级
     */
    PlatformGame8UH5.prototype.SDKUserUpgradeNative = function (params) {
        this.setData(params, false, true);
    };
    PlatformGame8UH5.prototype.setData = function (params, isCreate, isUpLv) {
        if (isCreate === void 0) { isCreate = false; }
        if (isUpLv === void 0) { isUpLv = false; }
        var roleInfo = {
            isCreateRole: isCreate,
            isLevelUp: isUpLv,
            roleCreateTime: GlobalModel.createActorTime,
            uid: GlobalModel.openID,
            username: GlobalModel.nickName,
            serverId: params.serverId,
            serverName: params.serverName,
            userRoleId: ActorControl.actorID,
            userRoleName: params.nickName,
            userRoleBalance: ActorControl.yb,
            vipLevel: vipControl.lv,
            userRoleLevel: ActorControl.level,
            partyId: unionControl.guildID,
            partyName: unionControl.guildName,
            gameRoleGender: "",
            gameRolePower: ActorControl.power,
            partyRoleId: unionControl.guildID,
            partyRoleName: unionControl.guildName,
            professionId: params.job,
            profession: CommonFun.getJobName(params.job),
            friendlist: LangMgr.getValueByKey('persontNone'),
        };
    };
    /**
     * SDK下单参数
     */
    PlatformGame8UH5.prototype.GetMakeOrderSdkArgs = function (params) {
        return JSON.stringify({
            paytype: GlobalModel.os == "android" ? "gp" : (GlobalModel.os == "ios" ? "ios" : "home")
        });
    };
    /**
     * SDK支付
     */
    PlatformGame8UH5.prototype.SDKPayNative = function (params) {
        egret.ExternalInterface.call("SDKPayNative", JSON.stringify({
            serverId: params.serverId,
            serverName: params.serverName,
            goodsID: this.GetChannelItemId(params.itemid),
            cpOrderID: params.order,
            productName: params.goodsname
        }));
    };
    /**
     * 渠道计费点
     */
    PlatformGame8UH5.prototype.GetChannelItemId = function (itemid) {
        //GooglePay
        if (GlobalModel.os == "android") {
            itemid = SDKConst.GooglePayProductIds[itemid];
        }
        else if (GlobalModel.os == "ios") {
            itemid = SDKConst.IosProductIds[itemid];
        }
        return itemid;
    };
    /**
     * facebook礼包
     */
    PlatformGame8UH5.prototype.SDKStartForGift = function () {
        egret.ExternalInterface.call("SDKStartForGift", GlobalModel.srvid.toString());
    };
    /**
     * 活动
     */
    PlatformGame8UH5.prototype.SDKFaceStartGift = function () {
        egret.ExternalInterface.call("SDKFaceStartGift", GlobalModel.srvid.toString());
    };
    /**
     * SDK回调
     */
    PlatformGame8UH5.prototype.nativeCallback = function (msg) {
        msg = Base64.base64decode(msg);
        _super.prototype.nativeCallback.call(this, msg);
        var jsonObj = JSON.parse(msg);
        var callType = jsonObj['callType'];
        if (callType == 'init') {
            debug.log("SDK init ok");
        }
        else if (callType == 'login') {
            if (jsonObj['sdkcode'] == 0) {
                GlobalModel.openID = jsonObj['userId'];
                GlobalModel.setUrlParamValue("os", jsonObj["os"]);
                SceneMgr.ins().runScene(StartGameScene);
            }
            else {
                this.SDKLoginNative();
            }
        }
        else if (callType == 'checkFailBill') {
            platformAmuseControl.dispatchGameFBGift(jsonObj['fbflag']);
            platformAmuseControl.dispatchGameFBRate(jsonObj['rateFlag']);
        }
        else if (callType == 'logout') {
            if (jsonObj['sdkcode'] == 0) {
                window.location.reload();
            }
        }
        else if (callType == 'switchAccount') {
            if (jsonObj['sdkcode'] == 0) {
                window.location.reload();
            }
        }
    };
    return PlatformGame8UH5;
}(PlatformBase));
__reflect(PlatformGame8UH5.prototype, "PlatformGame8UH5");
var PlatformHaoWanBaH5 = (function (_super) {
    __extends(PlatformHaoWanBaH5, _super);
    function PlatformHaoWanBaH5() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.url = "https://api.ehw8.com";
        return _this;
    }
    /**
     * 初始化SDK
     */
    PlatformHaoWanBaH5.prototype.SDKInitNative = function () {
        GlobalModel.openID = GlobalModel.getUrlParamValue("uid");
    };
    /**
     * 是否需要登录
     */
    PlatformHaoWanBaH5.prototype.SDKIsNeedLoginNative = function () {
        return false;
    };
    /**返回拼接好的数据 */
    PlatformHaoWanBaH5.prototype.getUrl = function (obj) {
        var cc = '';
        for (var key in obj) {
            cc += key + "=" + obj[key] + "&";
        }
        cc = cc.substring(0, cc.length - 1);
        return cc;
    };
    /**
     * SDK登陆验证参数
     */
    PlatformHaoWanBaH5.prototype.GetSDKCheckAccountArgs = function () {
        var jsonObj = {
            pf: GlobalModel.pf,
            gameId: GlobalModel.gameId,
            channelId: GlobalModel.channelId,
            gameVersion: GlobalModel.gameVersion,
            appId: GlobalModel.appid,
            uid: GlobalModel.getUrlParamValue("uid"),
            token: GlobalModel.getUrlParamValue("token"),
            shellext: GlobalModel.getUrlParamValue("shellext")
        };
        console.log("loginData:", JSON.stringify(jsonObj));
        return JSON.stringify(jsonObj);
    };
    /**
     * SDK支付
     */
    PlatformHaoWanBaH5.prototype.SDKPayNative = function (params) {
        var obj = {
            orderno: params.orderno,
            sign: params.gamesign,
        };
        window["iframePay"].open(this.url + "/game/v1/pay?" + this.getUrl(obj), function (e) {
            console.log('close pay:', e);
        });
    };
    /**
     * SDK回调
     */
    PlatformHaoWanBaH5.prototype.nativeCallback = function (msg) {
        _super.prototype.nativeCallback.call(this, msg);
        var jsonObj = JSON.parse(msg);
        var callType = jsonObj['callType'];
        if (callType == 'init') {
            debug.log("SDK init ok");
        }
        else if (callType == 'login') {
            if (jsonObj['sdkcode'] == 0) {
                SceneMgr.ins().runScene(StartGameScene);
            }
            else {
                this.SDKLoginNative();
            }
        }
        else if (callType == 'logout') {
            if (jsonObj['sdkcode'] == 0) {
                window.location.reload();
            }
        }
        else if (callType == 'switchAccount') {
            if (jsonObj['sdkcode'] == 0) {
                window.location.reload();
            }
        }
    };
    return PlatformHaoWanBaH5;
}(PlatformBase));
__reflect(PlatformHaoWanBaH5.prototype, "PlatformHaoWanBaH5");
/**
 * 华为
 */
var PlatformHuaWei = (function (_super) {
    __extends(PlatformHuaWei, _super);
    function PlatformHuaWei() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * SDK需要登陆
     */
    PlatformHuaWei.prototype.SDKIsNeedLoginNative = function () {
        return true;
    };
    /**
     * SDK登陆验证参数
     */
    PlatformHuaWei.prototype.GetSDKCheckAccountArgs = function () {
        var jsonObj = {
            pf: GlobalModel.pf,
            gameId: GlobalModel.gameId,
            channelId: GlobalModel.channelId,
            gameVersion: GlobalModel.gameVersion,
            appId: GlobalModel.appid
        };
        console.log("loginData:", JSON.stringify(jsonObj));
        return JSON.stringify(jsonObj);
    };
    /**
     * SDK支付
     */
    PlatformHuaWei.prototype.SDKPayNative = function (params) {
        egret.ExternalInterface.call("SDKPayNative", JSON.stringify({
            amount: params.fee,
            cpOrderID: params.order,
            serverId: params.serverId,
            serverName: params.serverName,
            gameRoleID: ActorControl.actorID,
            gameRoleName: params.roleName,
            gameUserLevel: ActorControl.level,
            extrasParams: params.order,
            gameSign: params.gameSign
        }));
    };
    /**
     * SDK回调
     */
    PlatformHuaWei.prototype.nativeCallback = function (msg) {
        msg = Base64.base64decode(msg);
        _super.prototype.nativeCallback.call(this, msg);
        var jsonObj = JSON.parse(msg);
        var callType = jsonObj['callType'];
        if (callType == 'login') {
            if (jsonObj['sdkcode'] == 0) {
                GlobalModel.openID = jsonObj['playerId'];
                SceneMgr.ins().runScene(StartGameScene);
            }
            else {
                this.SDKLoginNative();
            }
        }
        else if (callType == 'logout') {
            if (jsonObj['sdkcode'] == 0) {
                window.location.reload();
            }
        }
    };
    return PlatformHuaWei;
}(PlatformBase));
__reflect(PlatformHuaWei.prototype, "PlatformHuaWei");
var PlatformHuoSdk = (function (_super) {
    __extends(PlatformHuoSdk, _super);
    function PlatformHuoSdk() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * SDK需要登陆
     */
    PlatformHuoSdk.prototype.SDKIsNeedLoginNative = function () {
        return true;
    };
    /**
     * SDK登陆验证参数
     */
    PlatformHuoSdk.prototype.GetSDKCheckAccountArgs = function () {
        var jsonObj = {
            pf: GlobalModel.pf,
            gameId: GlobalModel.gameId,
            channelId: GlobalModel.channelId,
            gameVersion: GlobalModel.gameVersion,
            appId: GlobalModel.appid,
            token: GlobalModel.getUrlParamValue("token")
        };
        return JSON.stringify(jsonObj);
    };
    /**
     * SDK创建角色
     */
    PlatformHuoSdk.prototype.SDKCreateRoleNative = function (params) {
        this.setData(params, true);
    };
    /**
     * SDK进入游戏
     */
    PlatformHuoSdk.prototype.SDKEnterGameNative = function (params) {
        this.setData(params);
    };
    /**
     * SDK角色升级
     */
    PlatformHuoSdk.prototype.SDKUserUpgradeNative = function (params) {
        this.setData(params, false, true);
    };
    PlatformHuoSdk.prototype.setData = function (params, isCreate, isUpLv) {
        if (isCreate === void 0) { isCreate = false; }
        if (isUpLv === void 0) { isUpLv = false; }
        // RoleType 类型
        // int ONLINE = 1;
        // int CREATE = 2;
        // int LEVELUP = 3;
        // int OFFLINE = 4;
        // int OTHER = 5;
        // int DELETE = 6;
        var roletype = "1";
        if (isCreate) {
            roletype = "2";
        }
        if (isUpLv) {
            roletype = "3";
        }
        var upLeveData = this.getRoleInfo(params, roletype);
        egret.ExternalInterface.call("SDKLevelUpdate", JSON.stringify(upLeveData));
    };
    PlatformHuoSdk.prototype.getRoleInfo = function (params, roleType) {
        var roleObj = {
            role_id: ActorControl.actorID,
            role_level: ActorControl.level,
            role_name: ActorControl.myName,
            role_vip: vipControl.lv,
            server_id: params.serverId,
            server_name: params.serverName,
            role_type: roleType,
            scene: LangMgr.getValueByKey('guanGK', copyControl.guanqiaID),
            pos: "(0,0)",
            desc: LangMgr.getValueByKey('levelbattleing', copyControl.guanqiaID)
        };
        return roleObj;
    };
    /**
     * SDK支付
     */
    PlatformHuoSdk.prototype.SDKPayNative = function (params) {
        egret.ExternalInterface.call("SDKPayNative", JSON.stringify({
            order_id: params.order,
            price: params.fee,
            product_id: params.itemid,
            product_name: params.goodsname,
            product_desc: params.goodsname,
            cny: 'CNY',
            shellext: params.order,
            playinfo: this.getRoleInfo(params, 5)
        }));
    };
    /**
     * 切换账号
     */
    PlatformHuoSdk.prototype.SDKLogoutNative = function () {
        egret.ExternalInterface.call("SDKSwitchAccount", null);
    };
    /**
     * SDK回调
     */
    PlatformHuoSdk.prototype.nativeCallback = function (msg) {
        msg = Base64.base64decode(msg);
        _super.prototype.nativeCallback.call(this, msg);
        var jsonObj = JSON.parse(msg);
        var callType = jsonObj['callType'];
        console.log('SDK callback', JSON.stringify(jsonObj));
        if (callType == 'init') {
            debug.log("SDK init ok");
        }
        else if (callType == 'login') {
            if (jsonObj['sdkcode'] == 0) {
                GlobalModel.openID = jsonObj['userId'];
                GlobalModel.setUrlParamValue("os", jsonObj["os"]);
                SceneMgr.ins().runScene(StartGameScene);
            }
            else {
                this.SDKLoginNative();
            }
        }
        else if (callType == 'logout') {
            if (jsonObj['sdkcode'] == 0) {
                window.location.reload();
            }
        }
        else if (callType == 'switchAccount') {
            if (jsonObj['sdkcode'] == 0) {
                window.location.reload();
            }
        }
    };
    return PlatformHuoSdk;
}(PlatformBase));
__reflect(PlatformHuoSdk.prototype, "PlatformHuoSdk");
var PlatformHuoSdkH5 = (function (_super) {
    __extends(PlatformHuoSdkH5, _super);
    function PlatformHuoSdkH5() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.HuoSdk = window["HuoSdk"];
        return _this;
    }
    /**
     * 初始化SDK
     */
    PlatformHuoSdkH5.prototype.SDKInitNative = function () {
        this.HuoSdk.callback = {
            init: function (res) {
                console.log("init:", res);
                SDKManager.ins().NativeCallback(JSON.stringify({ callType: "init" }));
            },
            login: function (res) {
            },
            pay: function (res) {
            },
            uprole: function (res) {
            },
            logout: function (res) {
                if (res.status == 2) {
                    SDKManager.ins().NativeCallback(JSON.stringify({
                        callType: "logout",
                        sdkcode: 0
                    }));
                }
            }
        };
        this.HuoSdk.init({ app_id: SDKConst.HuoAppId });
    };
    /**
     * 是否需要登录
     */
    PlatformHuoSdkH5.prototype.SDKIsNeedLoginNative = function () {
        return false;
    };
    /**
     * SDK登陆验证参数
     */
    PlatformHuoSdkH5.prototype.GetSDKCheckAccountArgs = function () {
        var jsonObj = {
            pf: GlobalModel.pf,
            gameId: GlobalModel.gameId,
            channelId: GlobalModel.channelId,
            gameVersion: GlobalModel.gameVersion,
            appId: GlobalModel.appid,
            token: GlobalModel.getUrlParamValue("token")
        };
        return JSON.stringify(jsonObj);
    };
    /**
     * SDK创建角色
     */
    PlatformHuoSdkH5.prototype.SDKCreateRoleNative = function (params) {
        this.setData(params, true);
    };
    /**
     * SDK进入游戏
     */
    PlatformHuoSdkH5.prototype.SDKEnterGameNative = function (params) {
        this.setData(params);
    };
    /**
     * SDK角色升级
     */
    PlatformHuoSdkH5.prototype.SDKUserUpgradeNative = function (params) {
        this.setData(params, false, true);
    };
    PlatformHuoSdkH5.prototype.setData = function (params, isCreate, isUpLv) {
        if (isCreate === void 0) { isCreate = false; }
        if (isUpLv === void 0) { isUpLv = false; }
        this.HuoSdk.uprole({
            'role-event': 5,
            'role-server_id': params.serverId,
            'role-server_name': params.serverName,
            'role-role_id': ActorControl.actorID,
            'role-role_name': params.nickName,
            'role-role_level': ActorControl.level,
            'role-role_vip': vipControl.lv,
            'role-onlineTime': 0,
            'role-scene': '',
            'role-axis': ''
        });
    };
    /**
     * SDK支付
     */
    PlatformHuoSdkH5.prototype.SDKPayNative = function (params) {
        this.HuoSdk.pay({
            'order-currency': 'CNY',
            'order-cp_order_id': params.order,
            'order-product_price': params.fee,
            'order-product_id': params.itemid,
            'order-product_name': params.goodsname,
            'order-product_desc': params.goodsname,
            'order-ext': params.order,
            'role-event': 5,
            'role-server_id': params.serverId,
            'role-server_name': params.serverName,
            'role-role_id': ActorControl.actorID,
            'role-role_name': params.roleName,
            'role-role_level': ActorControl.level,
            'role-role_vip': vipControl.lv
        });
    };
    /**
     * SDK登出
     */
    PlatformHuoSdkH5.prototype.SDKLogoutNative = function () {
        this.HuoSdk.logout();
    };
    /**
     * SDK回调
     */
    PlatformHuoSdkH5.prototype.nativeCallback = function (msg) {
        _super.prototype.nativeCallback.call(this, msg);
        var jsonObj = JSON.parse(msg);
        var callType = jsonObj['callType'];
        if (callType == 'init') {
            GlobalModel.appid = GlobalModel.getUrlParamValue("app_id");
            GlobalModel.openID = GlobalModel.getUrlParamValue("mem_id") + "";
            GlobalModel.setUrlParamValue("token", GlobalModel.getUrlParamValue("user_token"));
        }
        else if (callType == 'logout') {
            if (jsonObj['sdkcode'] == 0) {
                window.location.reload();
            }
        }
    };
    return PlatformHuoSdkH5;
}(PlatformBase));
__reflect(PlatformHuoSdkH5.prototype, "PlatformHuoSdkH5");
/**
 * Jianwan
 */
var PlatformJianwan = (function (_super) {
    __extends(PlatformJianwan, _super);
    function PlatformJianwan() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * SDK需要登陆
     */
    PlatformJianwan.prototype.SDKIsNeedLoginNative = function () {
        return true;
    };
    PlatformJianwan.prototype.SDKLoginNative = function () {
        GameLoadingUI.GetInstance().showLogin();
        _super.prototype.SDKLoginNative.call(this);
    };
    /**
     * SDK登陆验证参数
     */
    PlatformJianwan.prototype.GetSDKCheckAccountArgs = function () {
        var jsonObj = {
            pf: GlobalModel.pf,
            gameId: GlobalModel.gameId,
            channelId: GlobalModel.channelId,
            gameVersion: GlobalModel.gameVersion,
            appId: GlobalModel.appid,
            token: GlobalModel.getUrlParamValue("token")
        };
        console.log("Jianwan loginData:", JSON.stringify(jsonObj));
        return JSON.stringify(jsonObj);
    };
    /**
    * SDK创建角色
    */
    PlatformJianwan.prototype.SDKCreateRoleNative = function (params) {
        this.setData(params, true);
    };
    /**
     * SDK进入游戏
     */
    PlatformJianwan.prototype.SDKEnterGameNative = function (params) {
        this.setData(params);
    };
    /**
     * SDK角色升级
     */
    PlatformJianwan.prototype.SDKUserUpgradeNative = function (params) {
        this.setData(params, false, true);
    };
    PlatformJianwan.prototype.setData = function (params, isCreate, isUpLv) {
        if (isCreate === void 0) { isCreate = false; }
        if (isUpLv === void 0) { isUpLv = false; }
        egret.ExternalInterface.call("SDKsetDataNative", JSON.stringify({
            serverId: params.serverId,
            serverName: params.serverName,
            gameRoleName: params.nickName,
            gameRoleID: ActorControl.actorID,
            gameUserBalance: ActorControl.yb,
            vipLevel: vipControl.lv,
            gameUserLevel: ActorControl.level,
            partyName: unionControl.guildName,
            roleCreateTime: GlobalModel.createAccountTime,
            partyId: unionControl.guildID,
            gameRoleGender: "",
            gameRolePower: ActorControl.power,
            partyRoleId: unionControl.guildID,
            partyRoleName: unionControl.guildName,
            professionId: params.job,
            profession: CommonFun.getJobName(params.job),
            friendlist: LangMgr.getValueByKey('persontNone'),
            isCreate: isCreate,
            isUpLv: isUpLv //是否升级
        }));
    };
    /**
     * SDK支付
     */
    PlatformJianwan.prototype.SDKPayNative = function (params) {
        egret.ExternalInterface.call("SDKPayNative", JSON.stringify({
            serverName: params.serverName,
            gameRoleName: params.roleName,
            serverId: params.serverId,
            gameRoleID: ActorControl.actorID,
            gameUserBalance: ActorControl.yb,
            vipLevel: vipControl.lv,
            gameUserLevel: ActorControl.level,
            partyName: unionControl.guildName,
            goodsID: params.itemid,
            productName: params.goodsname,
            cpOrderID: params.order,
            count: params.amount,
            amount: params.fee,
            extrasParams: params.order
        }));
    };
    /**
     * SDK回调
     */
    PlatformJianwan.prototype.nativeCallback = function (msg) {
        msg = Base64.base64decode(msg);
        _super.prototype.nativeCallback.call(this, msg);
        var jsonObj = JSON.parse(msg);
        var callType = jsonObj['callType'];
        if (callType == 'init') {
            debug.log("SDK init ok");
        }
        else if (callType == 'login') {
            if (jsonObj['sdkcode'] == 0) {
                GlobalModel.setUrlParamValue("channelId", jsonObj['channelId']);
                GlobalModel.openID = jsonObj['userId'];
                GlobalModel.nickName = jsonObj['userName'];
                GlobalModel.setUrlParamValue("token", jsonObj['token']);
                SceneMgr.ins().runScene(StartGameScene);
            }
            else {
                this.SDKLoginNative();
            }
        }
        else if (callType == 'logout') {
            if (jsonObj['sdkcode'] == 0) {
                window.location.reload();
            }
        }
        else if (callType == 'switchAccount') {
            if (jsonObj['sdkcode'] == 0) {
                window.location.reload();
            }
        }
    };
    return PlatformJianwan;
}(PlatformBase));
__reflect(PlatformJianwan.prototype, "PlatformJianwan");
/**
 * JianwanH5
 */
var PlatformJianwanH5 = (function (_super) {
    __extends(PlatformJianwanH5, _super);
    function PlatformJianwanH5() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.DataSdk = window["DataSDK"];
        return _this;
    }
    /**
     * 初始化SDK
     */
    PlatformJianwanH5.prototype.SDKInitNative = function () {
        this.DataSdk.init(SDKConst.JianwanH5Code, SDKConst.JianwanH5Key, true, function () {
            console.log("SDK init ok");
        });
        this.DataSdk.setLogoutNotification(function (logoutObject) {
            SDKManager.ins().NativeCallback(JSON.stringify({
                callType: "logout",
                sdkcode: 0,
            }));
        });
    };
    /**
     * SDK需要登陆
     */
    PlatformJianwanH5.prototype.SDKIsNeedLoginNative = function () {
        return true;
    };
    /**
     * SDK登陆验证参数
     */
    PlatformJianwanH5.prototype.GetSDKCheckAccountArgs = function () {
        var jsonObj = {
            pf: GlobalModel.pf,
            gameId: GlobalModel.gameId,
            channelId: GlobalModel.channelId,
            gameVersion: GlobalModel.gameVersion,
            appId: GlobalModel.appid,
            token: GlobalModel.getUrlParamValue("token")
        };
        console.log("Jianwan loginData:", JSON.stringify(jsonObj));
        return JSON.stringify(jsonObj);
    };
    /**
     * 登录
     */
    PlatformJianwanH5.prototype.SDKLoginNative = function () {
        this.DataSdk.login(function (callbackData) {
            if (callbackData.status) {
                SDKManager.ins().NativeCallback(JSON.stringify({
                    callType: "login",
                    sdkcode: 0,
                    data: callbackData.data
                }));
            }
            else {
                SDKManager.ins().NativeCallback(JSON.stringify({
                    callType: "login",
                    sdkcode: -1
                }));
            }
        });
    };
    /**
    * SDK创建角色
    */
    PlatformJianwanH5.prototype.SDKCreateRoleNative = function (params) {
        this.setData(params, true);
    };
    /**
     * SDK进入游戏
     */
    PlatformJianwanH5.prototype.SDKEnterGameNative = function (params) {
        this.setData(params);
    };
    /**
     * SDK角色升级
     */
    PlatformJianwanH5.prototype.SDKUserUpgradeNative = function (params) {
        this.setData(params, false, true);
    };
    PlatformJianwanH5.prototype.setData = function (params, isCreate, isUpLv) {
        if (isCreate === void 0) { isCreate = false; }
        if (isUpLv === void 0) { isUpLv = false; }
        var roleInfo = {
            isCreateRole: isCreate,
            isLevelUp: isUpLv,
            roleCreateTime: GlobalModel.createActorTime,
            uid: GlobalModel.openID,
            username: GlobalModel.nickName,
            serverId: params.serverId,
            serverName: params.serverName,
            userRoleId: ActorControl.actorID,
            userRoleName: params.nickName,
            userRoleBalance: ActorControl.yb,
            vipLevel: vipControl.lv,
            userRoleLevel: ActorControl.level,
            partyId: unionControl.guildID,
            partyName: unionControl.guildName,
            gameRoleGender: "",
            gameRolePower: ActorControl.power,
            partyRoleId: unionControl.guildID,
            partyRoleName: unionControl.guildName,
            professionId: params.job,
            profession: CommonFun.getJobName(params.job),
            friendlist: LangMgr.getValueByKey('persontNone'),
        };
        var roleInfoJson = JSON.stringify(roleInfo);
        this.DataSdk.uploadGameRoleInfo(roleInfoJson, function (response) {
            if (response.status) {
                debug.log("Upload information successfully");
            }
            else {
                debug.log("upload information" + response.message);
            }
        });
    };
    /**
     * SDK支付
     */
    PlatformJianwanH5.prototype.SDKPayNative = function (params) {
        var orderInfo = {
            productCode: SDKConst.JianwanH5Code,
            uid: GlobalModel.openID,
            username: GlobalModel.nickName,
            userRoleId: ActorControl.actorID,
            userRoleName: params.roleName,
            userServer: params.serverName,
            userLevel: ActorControl.level,
            cpOrderNo: params.order,
            amount: params.fee,
            count: params.amount,
            quantifier: LangMgr.getValueByKey('howmany'),
            subject: params.goodsname,
            desc: params.goodsname,
            callbackUrl: params.callbackUrl != undefined ? params.callbackUrl : "",
            extrasParams: params.order,
            goodsId: params.itemid
        };
        var orderInfoJson = JSON.stringify(orderInfo);
        this.DataSdk.pay(orderInfoJson, function (payStatusObject) {
            console.log('DataSdk:Order to inform' + JSON.stringify(payStatusObject));
        });
    };
    /**
     * SDK登出
     */
    PlatformJianwanH5.prototype.SDKLogoutNative = function () {
        this.DataSdk.logout(function (logoutObject) {
            SDKManager.ins().NativeCallback(JSON.stringify({
                callType: "logout",
                sdkcode: 0,
            }));
        });
    };
    /**
     * SDK回调
     */
    PlatformJianwanH5.prototype.nativeCallback = function (msg) {
        _super.prototype.nativeCallback.call(this, msg);
        var jsonObj = JSON.parse(msg);
        var callType = jsonObj['callType'];
        if (callType == 'init') {
            var rawChannelId = this.DataSdk.getChannelType();
            GlobalModel.setUrlParamValue("rawChannelId", rawChannelId);
            debug.log("SDK init ok channelID:" + rawChannelId);
        }
        else if (callType == 'login') {
            if (jsonObj['sdkcode'] == 0) {
                var data = jsonObj['data'];
                GlobalModel.openID = data.uid;
                GlobalModel.nickName = data.username;
                GlobalModel.setUrlParamValue("token", data.token);
                GlobalModel.setUrlParamValue("isLogin", data.isLogin);
                //原始渠道ID
                var rawChannelId = this.DataSdk.getChannelType() || data.channelId;
                GlobalModel.setUrlParamValue("rawChannelId", rawChannelId);
                //自定义渠道ID(账号互通)
                var channelId = this.DataSdk.getExtrasConfig("channel");
                if (!channelId || channelId == "") {
                    channelId = rawChannelId;
                }
                GlobalModel.setUrlParamValue("channelId", channelId);
                //显示微端下载(3733H5)
                if (rawChannelId == 4338) {
                    GlobalModel.setUrlParamValue("showMicroclientDownload", true);
                }
                //是否微端登陆(3733微端)
                if (rawChannelId == 386 || rawChannelId == 1034) {
                    GlobalModel.setUrlParamValue("isMicroclient", true);
                }
                SceneMgr.ins().runScene(StartGameScene);
            }
            else {
                this.SDKLoginNative();
            }
        }
        else if (callType == 'logout') {
            if (jsonObj['sdkcode'] == 0) {
                window.location.reload();
            }
        }
        else if (callType == 'switchAccount') {
            if (jsonObj['sdkcode'] == 0) {
                window.location.reload();
            }
        }
    };
    return PlatformJianwanH5;
}(PlatformBase));
__reflect(PlatformJianwanH5.prototype, "PlatformJianwanH5");
var PlatformJiuYuanH5 = (function (_super) {
    __extends(PlatformJiuYuanH5, _super);
    function PlatformJiuYuanH5() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.xgGame = window["xgGame"];
        return _this;
    }
    /**
     * 初始化SDK
     */
    PlatformJiuYuanH5.prototype.SDKInitNative = function () {
        GlobalModel.openID = GlobalModel.getUrlParamValue("user_id");
        DeviceUtils.IsBluntBangs = DeviceUtils.IsIPhone && (MobileDevice.getResolution() == "1125x2436" || MobileDevice.getResolution() == "1242x2688");
    };
    /**
     * 是否需要初始化
     */
    PlatformJiuYuanH5.prototype.SDKIsNeedInit = function () {
        return false;
    };
    /**
     * 是否需要登录
     */
    PlatformJiuYuanH5.prototype.SDKIsNeedLoginNative = function () {
        return false;
    };
    /**
     * 登录
     */
    PlatformJiuYuanH5.prototype.SDKLoginNative = function () {
        this.xgGame.login(function (callbackData) {
            if (callbackData.status) {
                SDKManager.ins().NativeCallback(JSON.stringify({
                    callType: "login",
                    sdkcode: 0,
                    data: callbackData.data
                }));
            }
            else {
                SDKManager.ins().NativeCallback(JSON.stringify({
                    callType: "login",
                    sdkcode: -1
                }));
            }
        });
    };
    /**
     * SDK登陆验证参数
     */
    PlatformJiuYuanH5.prototype.GetSDKCheckAccountArgs = function () {
        var jsonObj = {
            pf: GlobalModel.pf,
            gameId: GlobalModel.gameId,
            channelId: GlobalModel.channelId,
            gameVersion: GlobalModel.gameVersion,
            appId: GlobalModel.appid,
            uid: GlobalModel.openID,
            game_appid: GlobalModel.getUrlParamValue("game_appid"),
            email: GlobalModel.getUrlParamValue("email"),
            new_time: GlobalModel.getUrlParamValue("new_time"),
            user_id: GlobalModel.getUrlParamValue("user_id"),
            sdkloginmodel: GlobalModel.getUrlParamValue("sdkloginmodel"),
            sdklogindomain: GlobalModel.getUrlParamValue("sdklogindomain"),
            loginplatform2cp: GlobalModel.getUrlParamValue("loginplatform2cp"),
            channelExt: GlobalModel.getUrlParamValue("channelExt"),
            sign: GlobalModel.getUrlParamValue("sign")
        };
        return JSON.stringify(jsonObj);
    };
    /**
     * SDK创建角色
     */
    PlatformJiuYuanH5.prototype.SDKCreateRoleNative = function (params) {
        this.setData(params, true);
    };
    /**
     * SDK进入游戏
     */
    PlatformJiuYuanH5.prototype.SDKEnterGameNative = function (params) {
        //this.setData(params);
    };
    /**
     * SDK角色升级
     */
    PlatformJiuYuanH5.prototype.SDKUserUpgradeNative = function (params) {
        // this.setData(params, false, true);
    };
    PlatformJiuYuanH5.prototype.setData = function (params, isCreate, isUpLv) {
        if (isCreate === void 0) { isCreate = false; }
        if (isUpLv === void 0) { isUpLv = false; }
        var jsondata = {
            user_id: GlobalModel.openID,
            game_appid: SDKConst.JiuYuanAppid,
            server_id: params.serverId,
            server_name: params.serverName,
            role_id: ActorControl.actorID,
            role_name: ActorControl.myName,
        };
        var sign = this.signData(jsondata, SDKConst.JiuYuanKey);
        jsondata['sign'] = sign;
        jsondata['level'] = this.GetChannelLevel(GlobalModel.channelId, ActorControl.level, reincarnateControl.lv);
        jsondata['Power'] = (ActorControl.power == 0 ? params.power : ActorControl.power);
        console.log('Upload parameters:', JSON.stringify(jsondata));
        this.xgGame.jointCreateRole(jsondata);
    };
    /**
     * 渠道上报等级
     */
    PlatformJiuYuanH5.prototype.GetChannelLevel = function (channelId, level, zsLevel) {
        level = zsLevel * 10000 + level;
        return level;
    };
    /**
     * SDK支付
     */
    PlatformJiuYuanH5.prototype.SDKPayNative = function (params) {
        var jsondata = {
            amount: params.fee * 100,
            channelExt: GlobalModel.getUrlParamValue("channelExt"),
            game_appid: SDKConst.JiuYuanAppid,
            props_name: params.goodsname,
            sdkloginmodel: GlobalModel.getUrlParamValue("sdkloginmodel"),
            trade_no: params.order,
            user_id: GlobalModel.openID,
        };
        var sign = this.signData(jsondata, SDKConst.JiuYuanKey);
        jsondata['sign'] = sign;
        jsondata['server_id'] = params.serverId;
        jsondata['server_name'] = params.serverName;
        jsondata['role_id'] = ActorControl.actorID;
        jsondata['role_name'] = params.roleName;
        console.log('pay', JSON.stringify(jsondata));
        this.xgGame.h5paySdk(jsondata, function (data) {
            console.log("jiuyuanPay:", data);
        });
    };
    PlatformJiuYuanH5.prototype.ksort = function (vm, inputArr, sort_flags) {
        var tmp_arr = {}, keys = [], sorter, i, k, that = vm, strictForIn = false, populateArr = {};
        switch (sort_flags) {
            case 'SORT_STRING':
                sorter = function (a, b) {
                    return that.strnatcmp(a, b);
                };
                break;
            case 'SORT_LOCALE_STRING':
                var loc = vm.i18n_loc_get_default();
                sorter = vm.php_js.i18nLocales[loc].sorting;
                break;
            case 'SORT_NUMERIC':
                sorter = function (a, b) {
                    return ((a + 0) - (b + 0));
                };
                break;
            default:
                sorter = function (a, b) {
                    var aFloat = parseFloat(a), bFloat = parseFloat(b), aNumeric = aFloat + '' === a, bNumeric = bFloat + '' === b;
                    if (aNumeric && bNumeric) {
                        return aFloat > bFloat ? 1 : aFloat < bFloat ? -1 : 0;
                    }
                    else if (aNumeric && !bNumeric) {
                        return 1;
                    }
                    else if (!aNumeric && bNumeric) {
                        return -1;
                    }
                    return a > b ? 1 : a < b ? -1 : 0;
                };
                break;
        }
        for (k in inputArr) {
            if (inputArr.hasOwnProperty(k)) {
                keys.push(k);
            }
        }
        keys.sort(sorter);
        vm.php_js = vm.php_js || {};
        vm.php_js.ini = vm.php_js.ini || {};
        strictForIn = vm.php_js.ini['phpjs.strictForIn'] && vm.php_js.ini['phpjs.strictForIn'].local_value && vm.php_js.ini['phpjs.strictForIn'].local_value !== 'off';
        populateArr = strictForIn ? inputArr : populateArr;
        for (i = 0; i < keys.length; i++) {
            k = keys[i];
            tmp_arr[k] = inputArr[k];
            if (strictForIn) {
                delete inputArr[k];
            }
        }
        for (i in tmp_arr) {
            if (tmp_arr.hasOwnProperty(i)) {
                populateArr[i] = tmp_arr[i];
            }
        }
        return strictForIn || populateArr;
    };
    PlatformJiuYuanH5.prototype.getUrl = function (obj) {
        var cc = '';
        for (var key in obj) {
            cc += key + "=" + obj[key] + "&";
        }
        cc = cc.substring(0, cc.length - 1);
        return cc;
    };
    PlatformJiuYuanH5.prototype.signData = function (data, game_key) {
        data = this.ksort(this, data);
        data = this.getUrl(data) + game_key;
        return EncryptMd5.hex_md5(data);
    };
    /**
     * SDK登出
     */
    PlatformJiuYuanH5.prototype.SDKLogoutNative = function () {
        window.location.reload();
    };
    /**
     * SDK回调
     */
    PlatformJiuYuanH5.prototype.nativeCallback = function (msg) {
        _super.prototype.nativeCallback.call(this, msg);
        var jsonObj = JSON.parse(msg);
        var callType = jsonObj['callType'];
        if (callType == 'init') { }
        else if (callType == 'login') { }
        else if ((callType == 'logout' || callType == 'switchAccount') && jsonObj['sdkcode'] == 0) {
            window.location.reload();
        }
    };
    PlatformJiuYuanH5.prototype.getStatusHeight = function () {
        return 40;
    };
    /**
     * SDK分享
     */
    PlatformJiuYuanH5.prototype.SDKShowShare = function () {
        this.xgGame.shareSdk({
            game_appid: SDKConst.JiuYuanAppid,
            title: LangMgr.getValueByKey('rexueqidaozhan'),
            desc: LangMgr.getValueByKey('rexueqidaozhan')
        }, function (data) {
            //分享结果status  1分享成功   0分享失败
            console.log("Share the results:", data);
            if (data.status == 1) {
                platformAmuseControl.upWeiXinInviteGift();
            }
        });
    };
    return PlatformJiuYuanH5;
}(PlatformBase));
__reflect(PlatformJiuYuanH5.prototype, "PlatformJiuYuanH5");
/**
 * 九尊SDK JAR
 */
var PlatformJiuZun = (function (_super) {
    __extends(PlatformJiuZun, _super);
    function PlatformJiuZun() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.loginComplete = false;
        return _this;
    }
    /**
     * SDK需要登陆
     */
    PlatformJiuZun.prototype.SDKIsNeedLoginNative = function () {
        return true;
    };
    /**
     * SDK登陆
     */
    PlatformJiuZun.prototype.SDKLoginNative = function (args) {
        egret.ExternalInterface.call("SDKLoginNative", "");
    };
    /**
     * SDK自定义登陆界面
     */
    PlatformJiuZun.prototype.SDKHasLoginScene = function () {
        return egret.getDefinitionByName('JiuZunYHGameScene');
    };
    /**
     * SDK登陆验证参数
     */
    PlatformJiuZun.prototype.GetSDKCheckAccountArgs = function () {
        var jsonObj = {
            pf: GlobalModel.pf,
            gameId: GlobalModel.gameId,
            channelId: GlobalModel.channelId,
            gameVersion: GlobalModel.gameVersion,
            appId: GlobalModel.appid,
            serverid: GlobalModel.srvid,
            Isnew: GlobalModel.getUrlParamValue("Isnew"),
            Extension: GlobalModel.getUrlParamValue("Extension"),
            Realuserid: GlobalModel.getUrlParamValue("Realuserid"),
            ResultCode: GlobalModel.getUrlParamValue("ResultCode"),
            Token: GlobalModel.getUrlParamValue("Token"),
            Useraccount: GlobalModel.getUrlParamValue("Useraccount"),
            Userid: GlobalModel.getUrlParamValue("Userid"),
        };
        console.log("loginData:", JSON.stringify(jsonObj));
        return JSON.stringify(jsonObj);
    };
    /**
    * SDK创建角色
    */
    PlatformJiuZun.prototype.SDKCreateRoleNative = function (params) {
        this.setData(params, true);
    };
    /**
     * SDK进入游戏
     */
    PlatformJiuZun.prototype.SDKEnterGameNative = function (params) {
        this.setData(params);
    };
    /**
     * SDK角色升级
     */
    PlatformJiuZun.prototype.SDKUserUpgradeNative = function (params) {
        this.setData(params, false, true);
    };
    PlatformJiuZun.prototype.setData = function (params, isCreate, isUpLv) {
        if (isCreate === void 0) { isCreate = false; }
        if (isUpLv === void 0) { isUpLv = false; }
        var roletype = "0";
        if (isCreate) {
            roletype = "1";
        }
        else if (isUpLv) {
            roletype = "2";
        }
        egret.ExternalInterface.call("SDKRoleDataNative", JSON.stringify({
            level: ActorControl.level,
            pf: GlobalModel.getUrlParamValue("pf"),
            role: params.nickName || GlobalModel.openID,
            roleid: ActorControl.actorID,
            roletype: roletype,
            serverid: params.serverId,
            servername: params.serverName,
            useraccount: GlobalModel.openID,
            rolegender: params.sex + "",
            rolebalance: ActorControl.yb + "",
            rolepower: ActorControl.power + "",
            viplevel: vipControl.lv + "",
            partyid: unionControl.guildID + "",
            partyname: unionControl.guildName + "",
            partyroleid: "0",
            partyrolename: "",
            professionid: ActorControl.job + "",
            profession: "",
            friendlist: "",
            createAccountTime: GlobalModel.createAccountTime,
            rolecreatetime: GlobalModel.createActorTime,
        }));
    };
    /**
     * SDK支付
     */
    PlatformJiuZun.prototype.SDKPayNative = function (params) {
        egret.ExternalInterface.call("SDKPayNative", JSON.stringify({
            serverName: params.serverName,
            roleName: params.roleName,
            serverId: params.serverId,
            roleId: ActorControl.actorID,
            coinNum: ActorControl.yb,
            vip: vipControl.lv,
            roleLevel: ActorControl.level,
            union: unionControl.guildName,
            productId: params.itemid,
            productName: params.goodsname,
            productDesc: "",
            cpOrderID: params.order,
            buyNum: params.amount,
            price: params.fee * SDKConst.YYBMoneyRate,
            extension: params.order,
            createAccountTime: GlobalModel.createAccountTime,
            createActorTime: GlobalModel.createActorTime,
        }));
    };
    /**
     * SDK回调
     */
    PlatformJiuZun.prototype.nativeCallback = function (msg) {
        msg = Base64.base64decode(msg);
        _super.prototype.nativeCallback.call(this, msg);
        var jsonObj = JSON.parse(msg);
        var callType = jsonObj['callType'];
        if (callType == 'init') {
            debug.log("Game and NetiveSDK init ok");
            GlobalModel.setUrlParamValue("appver", jsonObj['appver']);
        }
        else if (callType == 'login') {
            if (jsonObj['sdkcode'] == 0) {
                GlobalModel.openID = jsonObj['Userid'];
                GlobalModel.setUrlParamValue("Isnew", jsonObj['Isnew']);
                GlobalModel.setUrlParamValue("Extension", jsonObj['Extension']);
                GlobalModel.setUrlParamValue("Realuserid", jsonObj['Realuserid']);
                GlobalModel.setUrlParamValue("ResultCode", jsonObj['ResultCode']);
                GlobalModel.setUrlParamValue("Token", jsonObj['Token']);
                GlobalModel.setUrlParamValue("Useraccount", jsonObj['Useraccount']);
                GlobalModel.setUrlParamValue("Userid", jsonObj['Userid']);
                if (!this.loginComplete) {
                    this.loginComplete = true;
                    SceneMgr.ins().runScene(StartGameScene);
                }
            }
            else if (jsonObj['sdkcode'] == -2) {
                debug.log("aoto login fail");
            }
            else {
                debug.log("login fail");
            }
        }
        else if (callType == 'logout' || callType == 'switchAccount') {
            if (jsonObj['sdkcode'] == 0) {
                window.location.reload();
            }
        }
        else if (callType == 'pay') {
            if (jsonObj['sdkcode'] == 0) {
                // var obj: Object = {
                // 	orderid: jsonObj['ysdkExtInfo'],
                // 	platform: jsonObj['platform'],
                // 	ts: Date.now(),
                // 	openid: GlobalModel.openID,
                // 	pf: GlobalModel.getUrlParamValue("yyb_pf"),
                // 	openkey: jsonObj['platform'] == 1 ? GlobalModel.getUrlParamValue("pay_token") : GlobalModel.getUrlParamValue("access_token"),
                // 	pfkey: GlobalModel.getUrlParamValue("pf_key"),
                // 	zoneid: SDKConst.YYBZoneId + Number(GlobalModel.srvid),
                // 	saveValue: jsonObj['realSaveNum'],
                // 	access_token: GlobalModel.getUrlParamValue("pay_token"),
                // 	pay_token: GlobalModel.getUrlParamValue("pay_token"),
                // 	refresh_token: GlobalModel.getUrlParamValue("pay_token")
                // }
                // var args = md5.obj_md5_args(obj, PHPConfig.VERIFY_KEY, true);
                // console.log("应用宝支付回调参数:" + args);
                // ReportYybPayData.getIns().reportUrl(`${GlobalModel.sdkDomain}/yyb/${GlobalModel.gameId}/sdkpaycallback`, args);
            }
        }
    };
    /**
     * 显示切换账号
     */
    PlatformJiuZun.prototype.SDKShowLogout = function () {
        return true;
    };
    /**
     * 显示切换账号
     */
    PlatformJiuZun.prototype.SDKLogoutNative = function () {
        egret.ExternalInterface.call("SDKLogoutNative", "");
    };
    return PlatformJiuZun;
}(PlatformBase));
__reflect(PlatformJiuZun.prototype, "PlatformJiuZun");
var PlatformJiuZunH5 = (function (_super) {
    __extends(PlatformJiuZunH5, _super);
    function PlatformJiuZunH5() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * 初始化SDK
     */
    PlatformJiuZunH5.prototype.SDKInitNative = function () {
        this.JiuZunSDK = window["H5SDK"](GlobalModel.getUrlParamValue("sdkappid"), GlobalModel.getUrlParamValue("jzpf"));
        var obj = {
            pf: GlobalModel.getUrlParamValue("jzpf"),
            sdkappid: GlobalModel.getUrlParamValue("sdkappid"),
            useraccount: GlobalModel.openID
        };
        var sign = EncryptMd5.hex_md5(this.toolStr(obj, SDKConst.JiuZunKey));
        this.JiuZunSDK.init(GlobalModel.openID, sign);
    };
    /**
     * 是否需要登录
     */
    PlatformJiuZunH5.prototype.SDKIsNeedLoginNative = function () {
        return false;
    };
    /**返回拼接string */
    PlatformJiuZunH5.prototype.toolStr = function (obj, key) {
        var cc = '';
        for (var key_1 in obj) {
            cc += key_1 + "=" + obj[key_1] + "&";
        }
        cc = cc.substring(0, cc.length - 1) + key;
        return cc;
    };
    /**
     * SDK登陆验证参数
     */
    PlatformJiuZunH5.prototype.GetSDKCheckAccountArgs = function () {
        var jsonObj = {
            pf: GlobalModel.pf,
            gameId: GlobalModel.gameId,
            channelId: GlobalModel.channelId,
            gameVersion: GlobalModel.gameVersion,
            appId: GlobalModel.appid,
            sdkappid: GlobalModel.getUrlParamValue("sdkappid"),
            sdkpf: GlobalModel.getUrlParamValue("jzpf"),
            sign: GlobalModel.getUrlParamValue("sign"),
            shellext: GlobalModel.getUrlParamValue("shellext")
        };
        return JSON.stringify(jsonObj);
    };
    /**
     * SDK创建角色
     */
    PlatformJiuZunH5.prototype.SDKCreateRoleNative = function (params) {
        this.setData(params, true);
    };
    /**
     * SDK进入游戏
     */
    PlatformJiuZunH5.prototype.SDKEnterGameNative = function (params) {
        this.setData(params);
    };
    /**
     * SDK角色升级
     */
    PlatformJiuZunH5.prototype.SDKUserUpgradeNative = function (params) {
        this.setData(params, false, true);
    };
    PlatformJiuZunH5.prototype.setData = function (params, isCreate, isUpLv) {
        if (isCreate === void 0) { isCreate = false; }
        if (isUpLv === void 0) { isUpLv = false; }
        var roletype = "0";
        if (isCreate) {
            roletype = "1";
        }
        if (isUpLv) {
            roletype = "2";
        }
        //转生等级+等级
        var leve = "";
        //硬核不要转数
        if (GlobalModel.gameId == 48 || GlobalModel.gameId == 54 || GlobalModel.gameId == 75 || GlobalModel.gameId == 80) {
            leve += ActorControl.level;
        }
        else {
            if (reincarnateControl.lv && reincarnateControl.lv > 0) {
                leve += LangMgr.getValueByKey('numberRotation', reincarnateControl.lv);
            }
            leve += LangMgr.getValueByKey('numberLevel', ActorControl.level);
        }
        var obj = {
            level: leve,
            pf: GlobalModel.getUrlParamValue("jzpf"),
            role: params.nickName || GlobalModel.openID,
            roleid: ActorControl.actorID,
            roletype: roletype,
            sdkappid: GlobalModel.getUrlParamValue("sdkappid"),
            serverid: params.serverId,
            servername: params.serverName,
            useraccount: GlobalModel.openID,
        };
        var sign = EncryptMd5.hex_md5(this.toolStr(obj, SDKConst.JiuZunKey));
        var attach = JSON.stringify({
            rolegender: params.sex + "",
            rolebalance: ActorControl.yb + "",
            rolepower: (ActorControl.power == 0 ? params.power : ActorControl.power) + "",
            viplevel: vipControl.lv + "",
            partyid: unionControl.guildID + "",
            partyname: unionControl.guildName + "",
            partyroleid: "0",
            partyrolename: "",
            professionid: ActorControl.job ? ActorControl.job : 0 + "",
            profession: "",
            friendlist: "" //好友列表(没有默认:无) String
        });
        debug.log(attach, 'Report the information attach', roletype);
        this.JiuZunSDK.login(roletype, GlobalModel.openID, params.serverId, params.serverName, ActorControl.actorID, params.nickName || GlobalModel.openID, leve, sign, attach);
    };
    /**
     * SDK支付
     */
    PlatformJiuZunH5.prototype.SDKPayNative = function (params) {
        var obj = {
            ext: params.order,
            itemname: params.itemid,
            level: ActorControl.level,
            money: params.fee * 100,
            pf: GlobalModel.getUrlParamValue("jzpf"),
            role: ActorControl.myName,
            roleid: ActorControl.actorID,
            sdkappid: GlobalModel.getUrlParamValue("sdkappid"),
            serverid: params.serverId,
            servername: params.serverName,
            useraccount: GlobalModel.openID,
        };
        var sign = EncryptMd5.hex_md5(this.toolStr(obj, SDKConst.JiuZunKey));
        this.JiuZunSDK.pay(GlobalModel.openID, params.itemid, params.fee * 100, params.order, params.serverId, params.serverName, ActorControl.actorID, ActorControl.myName, ActorControl.level, sign);
    };
    /**
     * SDK分享
     */
    PlatformJiuZunH5.prototype.SDKShowShare = function () {
        this.JiuZunSDK.share(GlobalModel.openID, function (code, msg) {
            if (code == 100) {
                console.log("Share success!");
            }
            else {
                console.log("Share the failure:", msg);
            }
        });
    };
    /**
     * SDK关注
     */
    PlatformJiuZunH5.prototype.SDKShowQRCode = function () {
        this.JiuZunSDK.guanzhu(GlobalModel.openID, function (code, msg) {
            if (code == 100) {
                console.log("Focus on success!");
            }
            else {
                console.log("Pay attention to fail:", msg);
            }
        });
    };
    return PlatformJiuZunH5;
}(PlatformBase));
__reflect(PlatformJiuZunH5.prototype, "PlatformJiuZunH5");
var PlatformKu25H5 = (function (_super) {
    __extends(PlatformKu25H5, _super);
    function PlatformKu25H5() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.Ku25Sdk = window["ku25sdk"];
        return _this;
    }
    /**
     * 初始化SDK
     */
    PlatformKu25H5.prototype.SDKInitNative = function () {
        GlobalModel.openID = GlobalModel.getUrlParamValue("userid") + "";
    };
    /**
     * 是否需要登录
     */
    PlatformKu25H5.prototype.SDKIsNeedLoginNative = function () {
        return false;
    };
    /**
     * SDK登陆验证参数
     */
    PlatformKu25H5.prototype.GetSDKCheckAccountArgs = function () {
        var jsonObj = {
            pf: GlobalModel.pf,
            gameId: GlobalModel.gameId,
            channelId: GlobalModel.channelId,
            gameVersion: GlobalModel.gameVersion,
            appId: GlobalModel.appid,
            ext: GlobalModel.getUrlParamValue("ext"),
            sign: GlobalModel.getUrlParamValue("sign"),
            gameid: GlobalModel.getUrlParamValue("gameid")
        };
        return JSON.stringify(jsonObj);
    };
    /**
     * SDK创建角色
     */
    PlatformKu25H5.prototype.SDKCreateRoleNative = function (params) {
        this.setData(params, true);
    };
    /**
     * SDK进入游戏
     */
    PlatformKu25H5.prototype.SDKEnterGameNative = function (params) {
        this.setData(params);
    };
    /**
     * SDK角色升级
     */
    PlatformKu25H5.prototype.SDKUserUpgradeNative = function (params) {
        this.setData(params, false, true);
    };
    PlatformKu25H5.prototype.setData = function (params, isCreate, isUpLv) {
        if (isCreate === void 0) { isCreate = false; }
        if (isUpLv === void 0) { isUpLv = false; }
        var roleInfo = {
            uid: GlobalModel.openID,
            gid: GlobalModel.getUrlParamValue("gameid"),
            server: params.serverId,
            rolename: params.nickName,
            rolelevel: ActorControl.level,
            rolefight: ActorControl.power
        };
        roleInfo["sign"] = EncryptMd5.hex_md5(roleInfo.uid + "" + roleInfo.gid + "" + roleInfo.server + "" + roleInfo.rolelevel + "" + SDKConst.Ku25H5LoginKey);
        var args = Md5Utils.obj_md5_args(roleInfo);
        ReportData.getIns().reportUrl("http://www.ku25.com/ku25tg/h5report/api.php", args);
    };
    /**
     * SDK支付
     */
    PlatformKu25H5.prototype.SDKPayNative = function (params) {
        var data = {
            userid: GlobalModel.openID,
            cpuserid: ActorControl.actorID,
            role: params.roleName,
            gameid: GlobalModel.getUrlParamValue("gameid"),
            serverid: params.serverId,
            orderno: params.order,
            body: params.goodsname,
            fee: params.fee,
            ext: GlobalModel.getUrlParamValue("ext"),
            time: (Date.now() / 1000).toFixed(0),
        };
        data["sign"] = EncryptMd5.hex_md5(data.userid + "" + data.cpuserid + "" + data.orderno + "" + data.gameid + "" + data.serverid + "" + data.fee + "" + data.time + "" + SDKConst.Ku25H5PayKey);
        this.Ku25Sdk.pay(data);
    };
    return PlatformKu25H5;
}(PlatformBase));
__reflect(PlatformKu25H5.prototype, "PlatformKu25H5");
var PlatformLuoTuoH5 = (function (_super) {
    __extends(PlatformLuoTuoH5, _super);
    function PlatformLuoTuoH5() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.url = "https://gameluotuo.com/index.php";
        return _this;
    }
    /**
     * 获取加密
     */
    PlatformLuoTuoH5.prototype.getSign = function (obj) {
        var obj1 = this.ksort(this, obj);
        var obj2 = this.getUrl(obj1);
        return EncryptMd5.hex_md5(obj2 + SDKConst.LuoTuoAppSecret);
    };
    PlatformLuoTuoH5.prototype.payOnComplete = function (event) {
        try {
            var responseJson = JSON.parse(event.currentTarget.response);
            if (responseJson.status == 1001) {
                console.log('pay info get ok');
                window.parent.postMessage(responseJson.data, '*');
            }
            else {
                console.log('pay info get fail' + responseJson.info);
            }
        }
        catch (e) {
            console.log('pay fail', e);
        }
    };
    return PlatformLuoTuoH5;
}(PlatformZwH5));
__reflect(PlatformLuoTuoH5.prototype, "PlatformLuoTuoH5");
/**
 * Orange
 */
var PlatformOrange = (function (_super) {
    __extends(PlatformOrange, _super);
    function PlatformOrange() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * SDK需要登陆
     */
    PlatformOrange.prototype.SDKIsNeedLoginNative = function () {
        return true;
    };
    /**
     * SDK登陆验证参数
     */
    PlatformOrange.prototype.GetSDKCheckAccountArgs = function () {
        var times = Date.now();
        var signObj = {
            uid: GlobalModel.openID,
            time: times,
            appkey: SDKConst.ChengZiKey
        };
        var signs = this.getSign(signObj);
        var jsonObj = {
            pf: GlobalModel.pf,
            gameId: GlobalModel.gameId,
            channelId: GlobalModel.channelId,
            gameVersion: GlobalModel.gameVersion,
            appId: GlobalModel.appid,
            time: times,
            sign: signs
        };
        console.log("Orange loginData:", JSON.stringify(jsonObj));
        return JSON.stringify(jsonObj);
    };
    /**
     * 返回拼接好的数据
     */
    PlatformOrange.prototype.getUrl = function (obj) {
        var cc = '';
        for (var key in obj) {
            cc += key + "=" + obj[key] + "&";
        }
        cc = cc.substring(0, cc.length - 1);
        return cc;
    };
    /**
     * 获取加密
     */
    PlatformOrange.prototype.getSign = function (obj) {
        var obj2 = this.getUrl(obj);
        return EncryptMd5.hex_md5(obj2);
    };
    /**
     * SDK进入游戏
     */
    PlatformOrange.prototype.SDKEnterGameNative = function (params) {
        this.setData(params);
    };
    /**
     * SDK创建角色
     */
    PlatformOrange.prototype.SDKCreateRoleNative = function (params) {
        this.setData(params, true);
    };
    /**
     * SDK角色升级
     */
    PlatformOrange.prototype.SDKUserUpgradeNative = function (params) {
        this.setData(params, false, true);
    };
    PlatformOrange.prototype.setData = function (params, isCreate, isUpLv) {
        if (isCreate === void 0) { isCreate = false; }
        if (isUpLv === void 0) { isUpLv = false; }
        var roleInfo = {
            role_id: ActorControl.actorID,
            role_name: ActorControl.myName,
            role_vip: vipControl.lv,
            role_leve: ActorControl.level,
            role_serverid: params.serverId
        };
        var roleInfoJson = JSON.stringify(roleInfo);
        egret.ExternalInterface.call("SDKLevelUpdate", roleInfoJson);
    };
    /**
     * SDK支付
     */
    PlatformOrange.prototype.SDKPayNative = function (params) {
        egret.ExternalInterface.call("SDKPayNative", JSON.stringify({
            order_price: params.fee,
            order_itemid: this.GetChannelItemId(params.itemid),
            order_id: params.order,
            order_payType: "USD",
            role_id: ActorControl.actorID,
            role_name: ActorControl.myName,
            role_lv: ActorControl.level,
            serverId: params.serverId,
            serverName: params.serverName,
            ext: params.order
        }));
    };
    PlatformOrange.prototype.upperCase = function (str) {
        return !!str ? str.substring(0, 1).toUpperCase() + str.substring(1) : "";
    };
    /**
     * 渠道计费点
     */
    PlatformOrange.prototype.GetChannelItemId = function (itemid) {
        var apptype = SDKManager.ins()["OrangeAppType"];
        apptype = this.upperCase(apptype);
        apptype = apptype ? apptype : "Lzby";
        switch (GlobalModel.os) {
            case "android":
                itemid = SDKConst["GooglePayProductIds" + apptype][itemid];
                break;
            case "ios":
                itemid = SDKConst["IosProductIds" + apptype][itemid];
                break;
        }
        return itemid;
    };
    /**
     * SDK回调
     */
    PlatformOrange.prototype.nativeCallback = function (msg) {
        msg = Base64.base64decode(msg);
        _super.prototype.nativeCallback.call(this, msg);
        var jsonObj = JSON.parse(msg);
        var callType = jsonObj['callType'];
        console.log('SDK callback', JSON.stringify(jsonObj));
        if (callType == 'init') {
            debug.log("SDK init ok");
        }
        else if (callType == 'login') {
            if (jsonObj['sdkcode'] == 0) {
                GlobalModel.openID = jsonObj['userId'];
                GlobalModel.setUrlParamValue("os", jsonObj["os"]);
                GlobalModel.setUrlParamValue("token", jsonObj["user_token"]);
                SceneMgr.ins().runScene(StartGameScene);
            }
            else {
                this.SDKLoginNative();
            }
        }
        else if (callType == 'checkFailBill') {
            platformAmuseControl.dispatchGameFBGift(jsonObj['fbflag']);
            platformAmuseControl.dispatchGameFBRate(jsonObj['rateFlag']);
        }
        else if (callType == 'logout') {
            if (jsonObj['sdkcode'] == 0) {
                window.location.reload();
            }
        }
        else if (callType == 'switchAccount') {
            if (jsonObj['sdkcode'] == 0) {
                window.location.reload();
            }
        }
    };
    return PlatformOrange;
}(PlatformBase));
__reflect(PlatformOrange.prototype, "PlatformOrange");
/**
 * OrangeH5
 */
var PlatformOrangeH5 = (function (_super) {
    __extends(PlatformOrangeH5, _super);
    function PlatformOrangeH5() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.SbPulSdk = window["SbPulSdk"];
        //一开始时的关卡数
        _this.baseGKLeve = 0;
        return _this;
    }
    /**
     * 初始化SDK
     */
    PlatformOrangeH5.prototype.SDKInitNative = function () {
        var loginParams = {
            qqesuid: GlobalModel.getUrlParamValue("qqesuid"),
            channelid: GlobalModel.getUrlParamValue("channelid"),
            channeluid: GlobalModel.getUrlParamValue("channeluid"),
            qqesnickname: GlobalModel.getUrlParamValue("qqesnickname"),
            qqesavatar: GlobalModel.getUrlParamValue("qqesavatar"),
            cpgameid: GlobalModel.getUrlParamValue("cpgameid"),
            ext: GlobalModel.GetSearchParamByName("ext"),
            qqestimestamp: GlobalModel.getUrlParamValue("qqestimestamp")
        };
        loginParams['sign'] = Md5Utils.obj_md5(loginParams, SDKConst.BZSecret, ["qqesavatar"]);
        GlobalModel.openID = GlobalModel.getUrlParamValue("qqesuid");
        this.SbPulSdk.init(loginParams, function (channelSdk) { });
        //退出时调用
        window.onunload = this.SDKLogoutNative;
    };
    /**
     * SDK登陆验证参数
     */
    PlatformOrangeH5.prototype.GetSDKCheckAccountArgs = function () {
        var jsonObj = {
            pf: GlobalModel.pf,
            gameId: GlobalModel.gameId,
            channelId: GlobalModel.channelId,
            gameVersion: GlobalModel.gameVersion,
            appId: GlobalModel.appid,
            time: Date.now(),
            sign: GlobalModel.getUrlParamValue("sign"),
            qqesuid: GlobalModel.getUrlParamValue("qqesuid"),
            channelid: GlobalModel.getUrlParamValue("channelid"),
            channeluid: GlobalModel.getUrlParamValue("channeluid"),
            qqesnickname: GlobalModel.getUrlParamValue("qqesnickname"),
            qqesavatar: GlobalModel.getUrlParamValue("qqesavatar"),
            cpgameid: GlobalModel.getUrlParamValue("cpgameid"),
            ext: GlobalModel.GetSearchParamByName("ext"),
            qqestimestamp: GlobalModel.getUrlParamValue("qqestimestamp")
        };
        return JSON.stringify(jsonObj);
    };
    /**
     * SDK进入游戏
     */
    PlatformOrangeH5.prototype.SDKEnterGameNative = function (params) {
        var roleInfo = {
            cpgameid: GlobalModel.getUrlParamValue("cpgameid"),
            qqesuid: GlobalModel.getUrlParamValue("qqesuid"),
            channelid: GlobalModel.getUrlParamValue("channelid"),
            channeluid: GlobalModel.getUrlParamValue("channeluid"),
            serverId: params.serverId,
            serverName: params.serverName,
            roleId: ActorControl.actorID,
            rolePower: (ActorControl.power == 0 ? params.power : ActorControl.power),
            roleName: CommonFun.getJobName(params.job),
            nickName: params.nickName,
            level: params.zsLevel * 1000 + params.level,
            vip: params.vip //用户vip等级
        };
        this.SbPulSdk.beginGame(roleInfo);
        this.baseGKLeve = copyControl.guanqiaID;
    };
    /**
     * SDK创建角色
     */
    PlatformOrangeH5.prototype.SDKCreateRoleNative = function (params) {
        var roleInfo = {
            qqesuid: GlobalModel.getUrlParamValue("qqesuid"),
            cpgameid: GlobalModel.getUrlParamValue("cpgameid"),
            channelid: GlobalModel.getUrlParamValue("channelid"),
            channeluid: GlobalModel.getUrlParamValue("channeluid"),
            serverId: params.serverId,
            serverName: params.serverName,
            roleId: ActorControl.actorID,
            rolePower: (ActorControl.power == 0 ? params.power : ActorControl.power),
            roleLevel: ActorControl.level,
            roleName: CommonFun.getJobName(params.job),
            nickName: params.nickName //游戏昵称
        };
        this.SbPulSdk.createRole(roleInfo);
        if (GlobalModel.serverNumberPlyer <= 1) {
            this.SbPulSdk.finishRegister();
        }
    };
    /**
     * SDK角色升级
     */
    PlatformOrangeH5.prototype.SDKUserUpgradeNative = function (params) {
        var roleInfo = {
            cpgameid: GlobalModel.getUrlParamValue("cpgameid"),
            qqesuid: GlobalModel.getUrlParamValue("qqesuid"),
            channelid: GlobalModel.getUrlParamValue("channelid"),
            channeluid: GlobalModel.getUrlParamValue("channeluid"),
            serverId: params.serverId,
            serverName: params.serverName,
            roleId: ActorControl.actorID,
            rolePower: (ActorControl.power == 0 ? params.power : ActorControl.power),
            roleName: CommonFun.getJobName(params.job),
            professionId: params.job,
            nickName: params.nickName,
            level: params.zsLevel * 1000 + params.level,
            vip: vipControl.lv //用户vip等级
        };
        this.SbPulSdk.userUpgrade(roleInfo);
        //18关后再上报 一个账号只报一次
        if (copyControl.guanqiaID >= 18 && this.baseGKLeve < 18 && GlobalModel.serverNumberPlyer <= 1) {
            this.SbPulSdk.finishLead();
            this.baseGKLeve = copyControl.guanqiaID;
        }
    };
    /**
     * SDK支付
     */
    PlatformOrangeH5.prototype.SDKPayNative = function (params) {
        var cpPayParams = {
            order: params.order,
            cpgameid: GlobalModel.getUrlParamValue("cpgameid"),
            qqesuid: GlobalModel.getUrlParamValue("qqesuid"),
            channelid: GlobalModel.getUrlParamValue("channelid"),
            channeluid: GlobalModel.getUrlParamValue("channeluid"),
            goodsname: params.goodsname,
            fee: params.fee,
            serverID: params.serverId,
            serverName: params.serverName,
            roleName: params.roleName,
            roleId: ActorControl.actorID,
            ext: GlobalModel.GetSearchParamByName("ext"),
            timestamp: Date.now() //请求时间戳(用来防止重放攻击)
        };
        cpPayParams['sign'] = Md5Utils.obj_md5(cpPayParams, SDKConst.BZSecret, ["serverID", "serverName", "roleName", "roleId"]);
        console.log("SDK pay:", cpPayParams);
        this.SbPulSdk.pay(cpPayParams);
    };
    /**
     * SDK埋点
     */
    PlatformOrangeH5.prototype.SDKSetDataNative = function (params) {
        this.SbPulSdk.buryingPoint({
            roleName: params.roleName,
            nickName: params.nickName,
            serverId: params.serverId,
            level: params.level,
            pointId: params.pointId,
            pointName: params.pointName,
            roleId: ActorControl.actorID,
            serverName: params.serverName,
            vip: params.vip,
            cpgameid: params.cpgameid,
            qqesuid: params.qqesuid,
            channelid: params.channelid,
            channeluid: params.channeluid //渠道用户id
        });
    };
    /**
     * SDK登出
     */
    PlatformOrangeH5.prototype.SDKLogoutNative = function () {
        this.SbPulSdk.loginout(function () {
            debug.log("exit ok");
        });
    };
    return PlatformOrangeH5;
}(PlatformBase));
__reflect(PlatformOrangeH5.prototype, "PlatformOrangeH5");
/**
 * QQ小游戏
 */
var PlatformQQMiniGame = (function (_super) {
    __extends(PlatformQQMiniGame, _super);
    function PlatformQQMiniGame() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.startTime = 0;
        return _this;
    }
    PlatformQQMiniGame.prototype.SDKInitNative = function () {
        var _this = this;
        window.qq.getSystemInfo({
            success: function (res) {
                if (res.model.search('iPhone X') != -1 || res.model.search('iPhone XR') != -1 || res.model.search('iPhone XS Max') != -1) {
                    DeviceUtils.IsBluntBangs = true;
                }
            }
        });
        window.qq.onShow(function (res) {
            if (_this.startTime != 0 && egret.getTimer() - _this.startTime > 5000) {
                _this.startTime = 0;
                SocketConnection.ins().reLogin();
            }
            var updateManager = window.qq.getUpdateManager();
            updateManager.onCheckForUpdate(function (res) {
                console.log("upData:", res.hasUpdate);
            });
            updateManager.onUpdateReady(function () {
                window.qq.showModal({
                    title: LangMgr.getValueByKey('updataTips'),
                    content: LangMgr.getValueByKey('newversionready'),
                    success: function (res) {
                        if (res.confirm) {
                            updateManager.applyUpdate();
                        }
                    }
                });
            });
            updateManager.onUpdateFailed(function () {
                console.log("new ver load fail");
            });
        });
        window.qq.onHide(function () {
            _this.startTime = egret.getTimer();
        });
    };
    PlatformQQMiniGame.prototype.SDKIsNeedLoginNative = function () {
        return !GlobalModel.openID;
    };
    PlatformQQMiniGame.prototype.SDKLoginNative = function () {
        window.qq.login({
            success: function (res) {
                console.log("login ok:", res);
            },
            fail: function () {
                console.log("login fail!");
            }
        });
        SceneMgr.ins().runScene(LoginScene);
    };
    /**
     * SDK登陆验证参数
     */
    PlatformQQMiniGame.prototype.GetSDKCheckAccountArgs = function () {
        var jsonObj = {
            pf: GlobalModel.pf,
            gameId: GlobalModel.gameId,
            channelId: GlobalModel.channelId,
            gameVersion: GlobalModel.gameVersion
        };
        console.log("QQMiniGame loginData:", JSON.stringify(jsonObj));
        return JSON.stringify(jsonObj);
    };
    /**
     * SDK下单参数
     */
    PlatformQQMiniGame.prototype.GetMakeOrderSdkArgs = function (params) {
        return JSON.stringify({
            subject: params.itemName
        });
    };
    PlatformQQMiniGame.prototype.SDKPayNative = function (params) {
    };
    return PlatformQQMiniGame;
}(PlatformBase));
__reflect(PlatformQQMiniGame.prototype, "PlatformQQMiniGame");
/**
 * Quick
 */
var PlatformQuick = (function (_super) {
    __extends(PlatformQuick, _super);
    function PlatformQuick() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * SDK需要登陆
     */
    PlatformQuick.prototype.SDKIsNeedLoginNative = function () {
        return true;
    };
    /**
     * SDK登陆验证参数
     */
    PlatformQuick.prototype.GetSDKCheckAccountArgs = function () {
        var jsonObj = {
            pf: GlobalModel.pf,
            gameId: GlobalModel.gameId,
            channelId: GlobalModel.channelId,
            gameVersion: GlobalModel.gameVersion,
            appId: GlobalModel.appid,
            token: GlobalModel.getUrlParamValue("token")
        };
        console.log("Quick loginData:", JSON.stringify(jsonObj));
        return JSON.stringify(jsonObj);
    };
    /**
    * SDK创建角色
    */
    PlatformQuick.prototype.SDKCreateRoleNative = function (params) {
        this.setData(params, true);
    };
    /**
     * SDK进入游戏
     */
    PlatformQuick.prototype.SDKEnterGameNative = function (params) {
        this.setData(params);
    };
    /**
     * SDK角色升级
     */
    PlatformQuick.prototype.SDKUserUpgradeNative = function (params) {
        this.setData(params, false, true);
    };
    PlatformQuick.prototype.setData = function (params, isCreate, isUpLv) {
        if (isCreate === void 0) { isCreate = false; }
        if (isUpLv === void 0) { isUpLv = false; }
        egret.ExternalInterface.call("SDKsetDataNative", JSON.stringify({
            serverId: params.serverId,
            serverName: params.serverName,
            gameRoleName: params.nickName,
            gameRoleID: ActorControl.actorID,
            gameUserBalance: ActorControl.yb,
            vipLevel: vipControl.lv,
            gameUserLevel: ActorControl.level,
            partyName: unionControl.guildName,
            roleCreateTime: GlobalModel.createAccountTime,
            partyId: unionControl.guildID,
            gameRoleGender: "",
            gameRolePower: ActorControl.power,
            partyRoleId: unionControl.guildID,
            partyRoleName: unionControl.guildName,
            professionId: params.job,
            profession: CommonFun.getJobName(params.job),
            friendlist: LangMgr.getValueByKey('persontNone'),
            isCreate: isCreate,
            isUpLv: isUpLv,
            createAccountTime: GlobalModel.createAccountTime,
            createActorTime: GlobalModel.createActorTime
        }));
    };
    /**
     * SDK支付
     */
    PlatformQuick.prototype.SDKPayNative = function (params) {
        egret.ExternalInterface.call("SDKPayNative", JSON.stringify({
            serverName: params.serverName,
            gameRoleName: params.roleName,
            serverId: params.serverId,
            gameRoleID: ActorControl.actorID,
            gameUserBalance: ActorControl.yb,
            vipLevel: vipControl.lv,
            gameUserLevel: ActorControl.level,
            partyName: unionControl.guildName,
            goodsID: params.itemid,
            productName: params.goodsname,
            cpOrderID: params.order,
            count: params.amount,
            amount: params.fee,
            extrasParams: params.order,
            createAccountTime: GlobalModel.createAccountTime,
            createActorTime: GlobalModel.createActorTime
        }));
    };
    /**
     * SDK回调
     */
    PlatformQuick.prototype.nativeCallback = function (msg) {
        msg = Base64.base64decode(msg);
        _super.prototype.nativeCallback.call(this, msg);
        var jsonObj = JSON.parse(msg);
        var callType = jsonObj['callType'];
        if (callType == 'init') {
            debug.log("SDK init ok");
        }
        else if (callType == 'login') {
            if (jsonObj['sdkcode'] == 0) {
                if (jsonObj['channelId']) {
                    GlobalModel.setUrlParamValue("channelId", jsonObj['channelId']);
                }
                GlobalModel.openID = jsonObj['userId'];
                GlobalModel.nickName = jsonObj['userName'];
                GlobalModel.setUrlParamValue("token", jsonObj['token']);
                SceneMgr.ins().runScene(StartGameScene);
            }
            else {
                this.SDKLoginNative();
            }
        }
        else if (callType == 'logout') {
            if (jsonObj['sdkcode'] == 0) {
                window.location.reload();
            }
        }
        else if (callType == 'switchAccount') {
            if (jsonObj['sdkcode'] == 0) {
                window.location.reload();
            }
        }
    };
    return PlatformQuick;
}(PlatformBase));
__reflect(PlatformQuick.prototype, "PlatformQuick");
var PlatformQuickH5 = (function (_super) {
    __extends(PlatformQuickH5, _super);
    function PlatformQuickH5() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.QuickSDK = window["QuickSDK"];
        return _this;
    }
    /**
     * 初始化SDK
     */
    PlatformQuickH5.prototype.SDKInitNative = function () {
        this.QuickSDK.init(SDKConst.QuickH5ProductCode, SDKConst.QuickH5ProductKey, false, function () {
            SDKManager.ins().NativeCallback(JSON.stringify({ callType: "init" }));
        });
        this.QuickSDK.setSwitchAccountNotification(function (callbackData) {
            SDKManager.ins().NativeCallback(JSON.stringify({
                callType: "switchAccount",
                sdkcode: 0
            }));
        });
        this.QuickSDK.setLogoutNotification(function (logoutObject) {
            SDKManager.ins().NativeCallback(JSON.stringify({
                callType: "logout",
                sdkcode: 0
            }));
        });
    };
    /**
     * 是否需要初始化
     */
    PlatformQuickH5.prototype.SDKIsNeedInit = function () {
        return true;
    };
    /**
     * 是否需要登录
     */
    PlatformQuickH5.prototype.SDKIsNeedLoginNative = function () {
        return true;
    };
    /**
     * 登录
     */
    PlatformQuickH5.prototype.SDKLoginNative = function () {
        this.QuickSDK.login(function (callbackData) {
            if (callbackData.status) {
                SDKManager.ins().NativeCallback(JSON.stringify({
                    callType: "login",
                    sdkcode: 0,
                    data: callbackData.data
                }));
            }
            else {
                SDKManager.ins().NativeCallback(JSON.stringify({
                    callType: "login",
                    sdkcode: -1
                }));
            }
        });
    };
    /**
     * SDK登陆验证参数
     */
    PlatformQuickH5.prototype.GetSDKCheckAccountArgs = function () {
        var jsonObj = {
            pf: GlobalModel.pf,
            gameId: GlobalModel.gameId,
            channelId: GlobalModel.channelId,
            gameVersion: GlobalModel.gameVersion,
            appId: GlobalModel.appid,
            token: GlobalModel.getUrlParamValue("token"),
            isLogin: GlobalModel.getUrlParamValue("isLogin"),
            shellext: GlobalModel.getUrlParamValue("shellext")
        };
        return JSON.stringify(jsonObj);
    };
    /**
     * SDK创建角色
     */
    PlatformQuickH5.prototype.SDKCreateRoleNative = function (params) {
        this.setData(params, true);
    };
    /**
     * SDK进入游戏
     */
    PlatformQuickH5.prototype.SDKEnterGameNative = function (params) {
        this.setData(params);
    };
    /**
     * SDK角色升级
     */
    PlatformQuickH5.prototype.SDKUserUpgradeNative = function (params) {
        this.setData(params, false, true);
    };
    PlatformQuickH5.prototype.setData = function (params, isCreate, isUpLv) {
        if (isCreate === void 0) { isCreate = false; }
        if (isUpLv === void 0) { isUpLv = false; }
        var roleInfo = {
            isCreateRole: isCreate,
            uid: GlobalModel.openID,
            username: GlobalModel.nickName,
            serverId: params.serverId,
            serverName: params.serverName,
            userRoleId: ActorControl.actorID,
            userRoleName: params.nickName,
            userRoleBalance: ActorControl.yb,
            vipLevel: vipControl.lv,
            userRoleLevel: this.GetChannelLevel(GlobalModel.channelId, ActorControl.level, reincarnateControl.lv),
            partyId: unionControl.guildID,
            partyName: unionControl.guildName,
            gameRoleGender: "",
            gameRolePower: (ActorControl.power == 0 ? params.power : ActorControl.power),
            partyRoleId: unionControl.guildID,
            partyRoleName: unionControl.guildName,
            professionId: params.job,
            profession: CommonFun.getJobName(params.job),
            friendlist: LangMgr.getValueByKey('persontNone'),
            roleCreateTime: GlobalModel.createActorTime
        };
        var roleInfoJson = JSON.stringify(roleInfo);
        this.QuickSDK.uploadGameRoleInfo(roleInfoJson, function (response) {
            if (response.status) {
                debug.log("Upload information successfully");
            }
            else {
                debug.log("Upload information fail:", response.message);
            }
        });
    };
    /**
     * 渠道上报等级
     */
    PlatformQuickH5.prototype.GetChannelLevel = function (channelId, level, zsLevel) {
        if (zsLevel == undefined)
            return level;
        //188wan
        if (channelId == 4289 || channelId == 4326) {
            level = zsLevel * 10000 + level;
        }
        return level;
    };
    /**
     * SDK支付
     */
    PlatformQuickH5.prototype.SDKPayNative = function (params) {
        var orderInfo = {
            productCode: SDKConst.QuickH5ProductCode,
            uid: GlobalModel.openID,
            username: GlobalModel.nickName,
            userRoleId: ActorControl.actorID,
            userRoleName: params.roleName,
            serverId: params.serverId,
            userServer: params.serverName,
            userLevel: ActorControl.level,
            cpOrderNo: params.order,
            amount: params.fee,
            count: params.amount,
            quantifier: LangMgr.getValueByKey('howmany'),
            subject: params.goodsname,
            desc: params.goodsname,
            callbackUrl: params.callbackUrl != undefined ? params.callbackUrl : "",
            extrasParams: params.order,
            goodsId: this.GetChannelItemId(GlobalModel.channelId, params.itemid)
        };
        var orderInfoJson = JSON.stringify(orderInfo);
        this.QuickSDK.pay(orderInfoJson, function (payStatusObject) {
            console.log('QuickH5:Order to inform' + JSON.stringify(payStatusObject));
        });
    };
    /**
     * 渠道计费点
     */
    PlatformQuickH5.prototype.GetChannelItemId = function (channelId, itemid) {
        //1758微游戏H5
        if (channelId == 4245) {
            itemid = SDKConst.Quick1758H5[itemid];
        }
        return itemid;
    };
    /**
     * SDK登出
     */
    PlatformQuickH5.prototype.SDKLogoutNative = function () {
        this.QuickSDK.logout(function (logoutObject) {
            console.log('Game:exit ok');
        });
    };
    /**
     * SDK回调
     */
    PlatformQuickH5.prototype.nativeCallback = function (msg) {
        _super.prototype.nativeCallback.call(this, msg);
        var jsonObj = JSON.parse(msg);
        var callType = jsonObj['callType'];
        if (callType == 'init') {
            var rawChannelId = this.QuickSDK.getChannelType();
            GlobalModel.setUrlParamValue("rawChannelId", rawChannelId);
            debug.log("SDK init ok ChannelId:", rawChannelId);
            if (this.SDKIsNeedInit()) {
                SDKManager.ins().SDKInitComplete();
            }
        }
        else if (callType == 'login') {
            if (jsonObj['sdkcode'] == 0) {
                var data = jsonObj['data'];
                GlobalModel.openID = "" + data.uid;
                GlobalModel.nickName = data.username;
                GlobalModel.setUrlParamValue("token", data.token);
                GlobalModel.setUrlParamValue("isLogin", data.isLogin);
                //原始渠道ID
                var rawChannelId = this.QuickSDK.getChannelType() || data.channelId;
                GlobalModel.setUrlParamValue("rawChannelId", rawChannelId);
                //自定义渠道ID(账号互通)
                var channelId = this.QuickSDK.getExtrasConfig("channel");
                if (!channelId || channelId == "") {
                    channelId = rawChannelId;
                }
                GlobalModel.setUrlParamValue("channelId", channelId);
                //显示微端下载(3733H5)
                if (rawChannelId == 4338) {
                    GlobalModel.setUrlParamValue("showMicroclientDownload", true);
                }
                //是否微端登陆(3733微端)
                if (rawChannelId == 386 || rawChannelId == 1034) {
                    GlobalModel.setUrlParamValue("isMicroclient", true);
                }
                SceneMgr.ins().runScene(StartGameScene);
            }
            else {
                this.SDKLoginNative();
            }
        }
        else if ((callType == 'logout' || callType == 'switchAccount') && jsonObj['sdkcode'] == 0) {
            if (GlobalModel.openQuickReload) {
                window.location.reload();
            }
        }
    };
    return PlatformQuickH5;
}(PlatformBase));
__reflect(PlatformQuickH5.prototype, "PlatformQuickH5");
var PlatformQuickH5TY = (function (_super) {
    __extends(PlatformQuickH5TY, _super);
    function PlatformQuickH5TY() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.QuickSDK = window["QuickSDK"];
        return _this;
    }
    /**
     * 初始化SDK
     */
    PlatformQuickH5TY.prototype.SDKInitNative = function () {
        this.QuickSDK.init(GlobalModel.QuickH5ProductCode, GlobalModel.QuickH5ProductKey, false, function () {
            SDKManager.ins().NativeCallback(JSON.stringify({
                callType: "init"
            }));
        });
        this.QuickSDK.setSwitchAccountNotification(function (callbackData) {
            SDKManager.ins().NativeCallback(JSON.stringify({
                callType: "switchAccount",
                sdkcode: 0
            }));
        });
        this.QuickSDK.setLogoutNotification(function (logoutObject) {
            SDKManager.ins().NativeCallback(JSON.stringify({
                callType: "logout",
                sdkcode: 0
            }));
        });
        DeviceUtils.IsBluntBangs = DeviceUtils.IsIPhone && (MobileDevice.getResolution() == "1125x2436" || MobileDevice.getResolution() == "1242x2688");
    };
    /**
     * 是否需要初始化
     */
    PlatformQuickH5TY.prototype.SDKIsNeedInit = function () {
        return true;
    };
    /**
     * 是否需要登录
     */
    PlatformQuickH5TY.prototype.SDKIsNeedLoginNative = function () {
        return true;
    };
    /**
     * 登录
     */
    PlatformQuickH5TY.prototype.SDKLoginNative = function () {
        this.QuickSDK.login(function (callbackData) {
            if (callbackData.status) {
                SDKManager.ins().NativeCallback(JSON.stringify({
                    callType: "login",
                    sdkcode: 0,
                    data: callbackData.data
                }));
            }
            else {
                SDKManager.ins().NativeCallback(JSON.stringify({
                    callType: "login",
                    sdkcode: -1
                }));
            }
        });
    };
    /**
     * SDK登陆验证参数
     */
    PlatformQuickH5TY.prototype.GetSDKCheckAccountArgs = function () {
        var jsonObj = {
            pf: GlobalModel.pf,
            gameId: GlobalModel.gameId,
            channelId: GlobalModel.channelId,
            gameVersion: GlobalModel.gameVersion,
            appId: GlobalModel.appid,
            token: GlobalModel.getUrlParamValue("token"),
            isLogin: GlobalModel.getUrlParamValue("isLogin"),
            shellext: GlobalModel.getUrlParamValue("shellext")
        };
        return JSON.stringify(jsonObj);
    };
    /**
     * SDK创建角色
     */
    PlatformQuickH5TY.prototype.SDKCreateRoleNative = function (params) {
        this.setData(params, true);
    };
    /**
     * SDK进入游戏
     */
    PlatformQuickH5TY.prototype.SDKEnterGameNative = function (params) {
        this.setData(params);
    };
    /**
     * SDK角色升级
     */
    PlatformQuickH5TY.prototype.SDKUserUpgradeNative = function (params) {
        this.setData(params, false, true);
    };
    PlatformQuickH5TY.prototype.setData = function (params, isCreate, isUpLv) {
        if (isCreate === void 0) { isCreate = false; }
        if (isUpLv === void 0) { isUpLv = false; }
        var roleInfo = {
            isCreateRole: isCreate,
            uid: GlobalModel.openID,
            username: GlobalModel.nickName,
            serverId: params.serverId,
            serverName: params.serverName,
            userRoleId: ActorControl.actorID,
            userRoleName: params.nickName,
            userRoleBalance: ActorControl.yb,
            vipLevel: vipControl.lv,
            userRoleLevel: this.GetChannelLevel(GlobalModel.channelId, ActorControl.level, reincarnateControl.lv),
            partyId: unionControl.guildID,
            partyName: unionControl.guildName,
            gameRoleGender: "",
            gameRolePower: (ActorControl.power == 0 ? params.power : ActorControl.power),
            partyRoleId: unionControl.guildID,
            partyRoleName: unionControl.guildName,
            professionId: params.job,
            profession: CommonFun.getJobName(params.job),
            friendlist: LangMgr.getValueByKey('persontNone'),
            roleCreateTime: GlobalModel.createActorTime
        };
        var roleInfoJson = JSON.stringify(roleInfo);
        this.QuickSDK.uploadGameRoleInfo(roleInfoJson, function (response) {
            if (response.status) {
                debug.log("Upload information successfully");
            }
            else {
                debug.log("Upload information fail:", response.message);
            }
        });
        if (GlobalModel.channelId == "4515") {
            ReportData.getIns().reportChannelData(ActorControl.level, 1);
        }
    };
    /**
     * 渠道上报等级
     */
    PlatformQuickH5TY.prototype.GetChannelLevel = function (channelId, level, zsLevel) {
        if (zsLevel == undefined)
            return level;
        //188wan
        if (channelId == 4289 || channelId == 4326) {
            level = zsLevel * 10000 + level;
        }
        return level;
    };
    /**
     * SDK支付
     */
    PlatformQuickH5TY.prototype.SDKPayNative = function (params) {
        var orderInfo = {
            productCode: SDKConst.QuickH5ProductCode,
            uid: GlobalModel.openID,
            username: GlobalModel.nickName,
            userRoleId: ActorControl.actorID,
            userRoleName: params.roleName,
            serverId: params.serverId,
            userServer: params.serverName,
            userLevel: ActorControl.level,
            cpOrderNo: params.order,
            amount: params.fee,
            count: params.amount,
            quantifier: LangMgr.getValueByKey('howmany'),
            subject: params.goodsname,
            desc: params.goodsname,
            callbackUrl: params.callbackUrl != undefined ? params.callbackUrl : "",
            extrasParams: params.order,
            goodsId: this.GetChannelItemId(GlobalModel.channelId, params.itemid)
        };
        var orderInfoJson = JSON.stringify(orderInfo);
        this.QuickSDK.pay(orderInfoJson, function (payStatusObject) {
            console.log('QuickH5:Order to inform' + JSON.stringify(payStatusObject));
            if (GlobalModel.channelId == "4515") {
                ReportData.getIns().reportChannelData(params.fee, 2);
            }
        });
    };
    /**
     * 渠道计费点
     */
    PlatformQuickH5TY.prototype.GetChannelItemId = function (channelId, itemid) {
        //1758微游戏H5
        if (channelId == 4245) {
            itemid = SDKConst.Quick1758H5[itemid];
        }
        return itemid;
    };
    /**
     * SDK登出
     */
    PlatformQuickH5TY.prototype.SDKLogoutNative = function () {
        this.QuickSDK.logout(function (logoutObject) {
            window.location.reload();
        });
    };
    /**
     * SDK回调
     */
    PlatformQuickH5TY.prototype.nativeCallback = function (msg) {
        _super.prototype.nativeCallback.call(this, msg);
        var jsonObj = JSON.parse(msg);
        var callType = jsonObj['callType'];
        if (callType == 'init') {
            var rawChannelId = this.QuickSDK.getChannelType();
            GlobalModel.setUrlParamValue("rawChannelId", rawChannelId);
            debug.log("SDK init ok ChannelId:", rawChannelId);
            if (this.SDKIsNeedInit()) {
                SDKManager.ins().SDKInitComplete();
            }
        }
        else if (callType == 'login') {
            if (jsonObj['sdkcode'] == 0) {
                var data = jsonObj['data'];
                GlobalModel.openID = "" + data.uid;
                GlobalModel.nickName = data.username;
                GlobalModel.setUrlParamValue("token", data.token);
                GlobalModel.setUrlParamValue("isLogin", data.isLogin);
                //原始渠道ID
                var rawChannelId = this.QuickSDK.getChannelType() || data.channelId;
                GlobalModel.setUrlParamValue("rawChannelId", rawChannelId);
                //自定义渠道ID(账号互通)
                var channelId = this.QuickSDK.getExtrasConfig("channel");
                if (!channelId || channelId == "") {
                    channelId = rawChannelId;
                }
                GlobalModel.setUrlParamValue("channelId", channelId);
                //显示微端下载(3733H5)
                if (rawChannelId == 4338) {
                    GlobalModel.setUrlParamValue("showMicroclientDownload", true);
                }
                //是否微端登陆(3733微端)
                if (rawChannelId == 386 || rawChannelId == 1034) {
                    GlobalModel.setUrlParamValue("isMicroclient", true);
                }
                //调用实名认证
                if (rawChannelId == 4552) {
                    GlobalModel.realNameState = data.realName;
                    if (data.realName <= 0) {
                        this.QuickSDK.getExtendsVal("getRealNameMsg", this.realNameCallBack);
                    }
                }
                SceneMgr.ins().runScene(StartGameScene);
            }
            else {
                this.SDKLoginNative();
            }
        }
        else if ((callType == 'logout' || callType == 'switchAccount') && jsonObj['sdkcode'] == 0) {
            if (GlobalModel.openQuickReload) {
                window.location.reload();
            }
        }
    };
    PlatformQuickH5TY.prototype.realNameCallBack = function (data) {
        //4552
        GlobalModel.realNameState = 1;
    };
    /**
     * 显示切换账号
     */
    PlatformQuickH5TY.prototype.SDKShowLogout = function () {
        var rawChannelId = GlobalModel.getUrlParamValue("rawChannelId");
        //应用宝显示切换账号
        return rawChannelId == 32;
    };
    PlatformQuickH5TY.prototype.getStatusHeight = function () {
        return 40;
    };
    return PlatformQuickH5TY;
}(PlatformBase));
__reflect(PlatformQuickH5TY.prototype, "PlatformQuickH5TY");
var PlatformQuickH5WD = (function (_super) {
    __extends(PlatformQuickH5WD, _super);
    function PlatformQuickH5WD() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.QuickSDK = window["QuickSDK"];
        return _this;
    }
    /**
     * 初始化SDK
     */
    PlatformQuickH5WD.prototype.SDKInitNative = function () {
        this.QuickSDK.init(SDKConst.QuickH5WDProductCode, SDKConst.QuickH5WDProductKey, false);
        this.QuickSDK.setSwitchAccountNotification(function (callbackData) {
            SDKManager.ins().NativeCallback(JSON.stringify({
                callType: "switchAccount",
                sdkcode: 0
            }));
        });
        this.QuickSDK.setLogoutNotification(function (logoutObject) {
            SDKManager.ins().NativeCallback(JSON.stringify({
                callType: "logout",
                sdkcode: 0
            }));
        });
        this.nativeCallback(JSON.stringify({ callType: "init" }));
    };
    /**
     * 是否需要登录
     */
    PlatformQuickH5WD.prototype.SDKIsNeedLoginNative = function () {
        return true;
    };
    /**
     * 登录
     */
    PlatformQuickH5WD.prototype.SDKLoginNative = function () {
        this.QuickSDK.login(function (callbackData) {
            if (callbackData.status) {
                SDKManager.ins().NativeCallback(JSON.stringify({
                    callType: "login",
                    sdkcode: 0,
                    data: callbackData.data
                }));
            }
            else {
                SDKManager.ins().NativeCallback(JSON.stringify({
                    callType: "login",
                    sdkcode: -1
                }));
            }
        });
    };
    /**
     * SDK登陆验证参数
     */
    PlatformQuickH5WD.prototype.GetSDKCheckAccountArgs = function () {
        var jsonObj = {
            pf: GlobalModel.pf,
            gameId: GlobalModel.gameId,
            channelId: GlobalModel.channelId,
            gameVersion: GlobalModel.gameVersion,
            appId: GlobalModel.appid,
            token: GlobalModel.getUrlParamValue("token"),
            isLogin: GlobalModel.getUrlParamValue("isLogin")
        };
        return JSON.stringify(jsonObj);
    };
    /**
     * SDK创建角色
     */
    PlatformQuickH5WD.prototype.SDKCreateRoleNative = function (params) {
        this.setData(params, true);
    };
    /**
     * SDK进入游戏
     */
    PlatformQuickH5WD.prototype.SDKEnterGameNative = function (params) {
        this.setData(params);
    };
    /**
     * SDK角色升级
     */
    PlatformQuickH5WD.prototype.SDKUserUpgradeNative = function (params) {
        this.setData(params, false, true);
    };
    PlatformQuickH5WD.prototype.setData = function (params, isCreate, isUpLv) {
        if (isCreate === void 0) { isCreate = false; }
        if (isUpLv === void 0) { isUpLv = false; }
        var roleInfo = {
            isCreateRole: isCreate,
            uid: GlobalModel.openID,
            username: GlobalModel.nickName,
            serverId: params.serverId,
            serverName: params.serverName,
            userRoleId: ActorControl.actorID,
            userRoleName: params.nickName,
            userRoleBalance: ActorControl.yb,
            vipLevel: vipControl.lv,
            userRoleLevel: this.GetChannelLevel(GlobalModel.channelId, ActorControl.level, reincarnateControl.lv),
            partyId: unionControl.guildID,
            partyName: unionControl.guildName,
            gameRoleGender: "",
            gameRolePower: (ActorControl.power == 0 ? params.power : ActorControl.power),
            partyRoleId: unionControl.guildID,
            partyRoleName: unionControl.guildName,
            professionId: params.job,
            profession: CommonFun.getJobName(params.job),
            friendlist: LangMgr.getValueByKey('persontNone'),
            roleCreateTime: GlobalModel.createActorTime
        };
        var roleInfoJson = JSON.stringify(roleInfo);
        this.QuickSDK.uploadGameRoleInfo(roleInfoJson, function (response) {
            if (response.status) {
                debug.log("Upload information successfully");
            }
            else {
                debug.log("Upload information fail:", response.message);
            }
        });
    };
    /**
     * 渠道上报等级
     */
    PlatformQuickH5WD.prototype.GetChannelLevel = function (channelId, level, zsLevel) {
        if (zsLevel == undefined)
            return level;
        //188wan
        if (channelId == 4289 || channelId == 4326) {
            level = zsLevel * 10000 + level;
        }
        return level;
    };
    /**
     * SDK支付
     */
    PlatformQuickH5WD.prototype.SDKPayNative = function (params) {
        var orderInfo = {
            productCode: SDKConst.QuickH5ProductCode,
            uid: GlobalModel.openID,
            username: GlobalModel.nickName,
            userRoleId: ActorControl.actorID,
            userRoleName: params.roleName,
            serverId: params.serverId,
            userServer: params.serverName,
            userLevel: ActorControl.level,
            cpOrderNo: params.order,
            amount: params.fee,
            count: params.amount,
            quantifier: LangMgr.getValueByKey('howmany'),
            subject: params.goodsname,
            desc: params.goodsname,
            callbackUrl: params.callbackUrl != undefined ? params.callbackUrl : "",
            extrasParams: params.order,
            goodsId: this.GetChannelItemId(GlobalModel.channelId, params.itemid)
        };
        var orderInfoJson = JSON.stringify(orderInfo);
        this.QuickSDK.pay(orderInfoJson, function (payStatusObject) {
            console.log('QuickH5:Order to inform' + JSON.stringify(payStatusObject));
        });
    };
    /**
     * 渠道计费点
     */
    PlatformQuickH5WD.prototype.GetChannelItemId = function (channelId, itemid) {
        //1758微游戏H5
        if (channelId == 4245) {
            itemid = SDKConst.Quick1758H5[itemid];
        }
        return itemid;
    };
    /**
     * SDK登出
     */
    PlatformQuickH5WD.prototype.SDKLogoutNative = function () {
        this.QuickSDK.logout(function (logoutObject) {
            console.log('Game:exit ok');
        });
    };
    /**
     * SDK回调
     */
    PlatformQuickH5WD.prototype.nativeCallback = function (msg) {
        _super.prototype.nativeCallback.call(this, msg);
        var jsonObj = JSON.parse(msg);
        var callType = jsonObj['callType'];
        if (callType == 'init') {
            debug.log("SDK init ok");
        }
        else if (callType == 'login') {
            if (jsonObj['sdkcode'] == 0) {
                var data = jsonObj['data'];
                GlobalModel.openID = "" + data.uid;
                GlobalModel.nickName = data.username;
                GlobalModel.setUrlParamValue("token", data.token);
                GlobalModel.setUrlParamValue("isLogin", data.isLogin);
                var channelId = this.QuickSDK.getExtrasConfig("channel");
                if (!channelId || channelId == "") {
                    channelId = this.QuickSDK.getChannelType() || data.channelId;
                }
                GlobalModel.setUrlParamValue("channelId", channelId);
                SceneMgr.ins().runScene(StartGameScene);
            }
            else {
                this.SDKLoginNative();
            }
        }
        else if (callType == 'logout') {
            if (jsonObj['sdkcode'] == 0) {
                window.location.reload();
            }
        }
        else if (callType == 'switchAccount') {
            if (jsonObj['sdkcode'] == 0) {
                window.location.reload();
            }
        }
    };
    return PlatformQuickH5WD;
}(PlatformBase));
__reflect(PlatformQuickH5WD.prototype, "PlatformQuickH5WD");
var PlatformQunHeiH5 = (function (_super) {
    __extends(PlatformQunHeiH5, _super);
    function PlatformQunHeiH5() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.QhSdk = window["qhsdk"];
        return _this;
    }
    /**
     * 初始化SDK
     */
    PlatformQunHeiH5.prototype.SDKInitNative = function () {
        GlobalModel.openID = GlobalModel.getUrlParamValue("username");
        this.QhSdk.init({
            "username": GlobalModel.openID,
            "gid": SDKConst.QhGameId,
            "qhchannel": GlobalModel.getUrlParamValue("qhchannel"),
            "qhchannelid": GlobalModel.getUrlParamValue("qhchannelid"),
            "time": GlobalModel.getUrlParamValue("time") //用户登录时间戳，群黑登录接口里面time参数
        });
        this.QhSdk.iswxgz(function (res) {
            console.log("state:", res.code);
            if (res.code != 1) {
                platformAmuseControl.dispatchGuanZhu(0);
            }
            else {
                platformAmuseControl.focusState = 1;
            }
        });
    };
    /**
     * 是否需要登录
     */
    PlatformQunHeiH5.prototype.SDKIsNeedLoginNative = function () {
        return false;
    };
    /**
     * SDK登陆验证参数
     */
    PlatformQunHeiH5.prototype.GetSDKCheckAccountArgs = function () {
        var jsonObj = {
            pf: GlobalModel.pf,
            gameId: GlobalModel.gameId,
            channelId: GlobalModel.channelId,
            gameVersion: GlobalModel.gameVersion,
            appId: GlobalModel.appid,
            serverid: GlobalModel.getUrlParamValue("serverid"),
            isadult: GlobalModel.getUrlParamValue("isadult"),
            time: GlobalModel.getUrlParamValue("time"),
            flag: GlobalModel.getUrlParamValue("flag")
        };
        return JSON.stringify(jsonObj);
    };
    /**
     * SDK创建角色
     */
    PlatformQunHeiH5.prototype.SDKCreateRoleNative = function (params) {
        this.setData(params, true);
    };
    /**
     * SDK进入游戏
     */
    PlatformQunHeiH5.prototype.SDKEnterGameNative = function (params) {
        this.setData(params);
    };
    /**
     * SDK角色升级
     */
    PlatformQunHeiH5.prototype.SDKUserUpgradeNative = function (params) {
        // this.setData(params, false, true);
    };
    PlatformQunHeiH5.prototype.setData = function (params, isCreate, isUpLv) {
        if (isCreate === void 0) { isCreate = false; }
        if (isUpLv === void 0) { isUpLv = false; }
        this.QhSdk.role({
            "act": isCreate ? "1" : "2",
            "serverid": params.serverId,
            "rolename": params.serverName,
            "roleid": ActorControl.actorID,
            "level": ActorControl.level,
            "power": ActorControl.power
        });
    };
    /**
     * SDK支付
     */
    PlatformQunHeiH5.prototype.SDKPayNative = function (params) {
        var paydata = {
            "userId": GlobalModel.openID,
            "gid": SDKConst.QhGameId,
            "roleName": params.roleName,
            'goodsId': params.itemid,
            "goodsName": params.goodsname,
            "money": params.fee,
            "ext": params.order,
            "serverId": params.serverId,
            "roleId": ActorControl.actorID,
            "sign": EncryptMd5.hex_md5(params.fee + GlobalModel.openID + params.order + SDKConst.QunHeiH5ChargeKey),
        };
        this.QhSdk.pay(paydata, function (code, msg) {
            //充值结果通知，code为编号，msg为信息。该结果不能作为发货依据。该回调已经取消！！请使用后端回调判断发货
            //code=1充值成功 ，其他为充值失败。
            //alert(code+','+msg);
        });
    };
    /**
     * SDK分享
     */
    PlatformQunHeiH5.prototype.SDKShowShare = function () {
        this.QhSdk.share();
    };
    /**
     * SDK二维码
     */
    PlatformQunHeiH5.prototype.SDKShowQRCode = function () {
        this.QhSdk.wxgz();
    };
    return PlatformQunHeiH5;
}(PlatformBase));
__reflect(PlatformQunHeiH5.prototype, "PlatformQunHeiH5");
var PlatformQuTouTiaoCPL = (function (_super) {
    __extends(PlatformQuTouTiaoCPL, _super);
    function PlatformQuTouTiaoCPL() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * 是否需要登录
     */
    PlatformQuTouTiaoCPL.prototype.SDKIsNeedLoginNative = function () {
        return false;
    };
    /**
     * SDK登陆验证参数
     */
    PlatformQuTouTiaoCPL.prototype.GetSDKCheckAccountArgs = function () {
        var jsonObj = {
            pf: GlobalModel.pf,
            gameId: GlobalModel.gameId,
            channelId: GlobalModel.channelId,
            gameVersion: GlobalModel.gameVersion,
            appId: GlobalModel.appid,
            shellext: GlobalModel.getUrlParamValue("shellext")
        };
        return JSON.stringify(jsonObj);
    };
    /**
     * SDK创建角色
     */
    PlatformQuTouTiaoCPL.prototype.SDKCreateRoleNative = function (params) {
        // this.QttSDK.addNewRole({ game_role:params.nickName, game_region:params.serverName, extend_info:{type:"newRole"} });
    };
    /**
     * SDK进入游戏
     */
    PlatformQuTouTiaoCPL.prototype.SDKEnterGameNative = function (params) {
        //this.QttSDK.startPlayGame({ open_id:GlobalModel.openID, extend_info:{type:"enterGame"} });
    };
    /**
     * SDK角色升级
     */
    PlatformQuTouTiaoCPL.prototype.SDKUserUpgradeNative = function (params) {
        //this.QttSDK.userInfo({role:params.nickName, region:params.serverName, level:ActorControl.level, ce:ActorControl.power, extend_info:{type:"up"} })
    };
    /**
     * SDK支付
     */
    PlatformQuTouTiaoCPL.prototype.SDKPayNative = function (params) {
        egret.ExternalInterface.call("SDKPayNative", JSON.stringify({
            ServerName: params.serverName,
            serverId: Number(params.serverId),
            UserId: GlobalModel.openID,
            RoleId: ActorControl.actorID,
            GoodsName: params.goodsname,
            OrderId: params.order,
            amount: params.fee * SDKConst.YYBMoneyRate,
            extrasParams: params.order,
            NoticeUrl: GlobalModel.getUrlParamValue("notifyUrl"),
        }));
    };
    /**
     * 弹出SDK悬浮窗并进入任务tab
     */
    PlatformQuTouTiaoCPL.prototype.SDKTapExecute = function () {
        //this.QttSDK.openDialogMission();
    };
    return PlatformQuTouTiaoCPL;
}(PlatformBase));
__reflect(PlatformQuTouTiaoCPL.prototype, "PlatformQuTouTiaoCPL");
var PlatformQuTouTiaoH5 = (function (_super) {
    __extends(PlatformQuTouTiaoH5, _super);
    function PlatformQuTouTiaoH5() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.QttSDK = window["qttGame"];
        return _this;
    }
    /**
     * 是否需要登录
     */
    PlatformQuTouTiaoH5.prototype.SDKIsNeedLoginNative = function () {
        return false;
    };
    /**
     * SDK登陆验证参数
     */
    PlatformQuTouTiaoH5.prototype.GetSDKCheckAccountArgs = function () {
        var jsonObj = {
            pf: GlobalModel.pf,
            gameId: GlobalModel.gameId,
            channelId: GlobalModel.channelId,
            gameVersion: GlobalModel.gameVersion,
            appId: GlobalModel.appid,
            shellext: GlobalModel.getUrlParamValue("shellext")
        };
        return JSON.stringify(jsonObj);
    };
    /**
     * SDK创建角色
     */
    PlatformQuTouTiaoH5.prototype.SDKCreateRoleNative = function (params) {
        this.QttSDK.addNewRole({ game_role: params.nickName, game_region: params.serverName, extend_info: { type: "newRole" } });
    };
    /**
     * SDK进入游戏
     */
    PlatformQuTouTiaoH5.prototype.SDKEnterGameNative = function (params) {
        this.QttSDK.startPlayGame({ open_id: GlobalModel.openID, extend_info: { type: "enterGame" } });
    };
    /**
     * SDK角色升级
     */
    PlatformQuTouTiaoH5.prototype.SDKUserUpgradeNative = function (params) {
        this.QttSDK.userInfo({ role: params.nickName, region: params.serverName, level: ActorControl.level, ce: ActorControl.power, extend_info: { type: "up" } });
    };
    /**
     * SDK支付
     */
    PlatformQuTouTiaoH5.prototype.SDKPayNative = function (params) {
        var orderInfo = {
            money: params.fee * 100,
            notifyUrl: GlobalModel.getUrlParamValue("notifyUrl"),
            openId: GlobalModel.openID,
            platform: GlobalModel.getUrlParamValue("platform"),
            land: GlobalModel.getUrlParamValue("land"),
            gameName: GlobalModel.getUrlParamValue("htmlTitle"),
            appId: GlobalModel.getUrlParamValue("appId"),
            ext: JSON.stringify({ orderid: params.order })
        };
        this.QttSDK.pay(orderInfo);
    };
    /**
     * 弹出SDK悬浮窗并进入任务tab
     */
    PlatformQuTouTiaoH5.prototype.SDKTapExecute = function () {
        this.QttSDK.openDialogMission();
    };
    return PlatformQuTouTiaoH5;
}(PlatformBase));
__reflect(PlatformQuTouTiaoH5.prototype, "PlatformQuTouTiaoH5");
var PlatformSdwH5 = (function (_super) {
    __extends(PlatformSdwH5, _super);
    function PlatformSdwH5() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.SdwSDK = window["sdw"];
        return _this;
    }
    /**
     * 初始化SDK
     */
    PlatformSdwH5.prototype.SDKInitNative = function () {
        GlobalModel.openID = GlobalModel.getUrlParamValue("uid");
        this.SdwSDK.getSdwQcodeInfo(GlobalModel.getUrlParamValue("appid"), function (res) {
            console.log("state:", res.atSDW);
            if (res.atSDW != 1) {
                platformAmuseControl.dispatchGuanZhu(0);
            }
            else {
                platformAmuseControl.focusState = 1;
            }
        });
        this.SdwSDK.onSetShareOperate({
            title: "",
            desc: "",
            link: "",
            imgUrl: "",
            success: function () {
                platformAmuseControl.upWeiXinInviteGift();
            },
            cancel: function () { },
            fail: function () { }
        });
    };
    /**
     * 是否需要登录
     */
    PlatformSdwH5.prototype.SDKIsNeedLoginNative = function () {
        return false;
    };
    /**
     * SDK登陆验证参数
     */
    PlatformSdwH5.prototype.GetSDKCheckAccountArgs = function () {
        var jsonObj = {
            pf: GlobalModel.pf,
            gameId: GlobalModel.gameId,
            channelId: GlobalModel.channelId,
            gameVersion: GlobalModel.gameVersion,
            appId: GlobalModel.appid,
            channel: GlobalModel.getUrlParamValue("channel"),
            appid: GlobalModel.getUrlParamValue("appid"),
            time: GlobalModel.getUrlParamValue("time"),
            sign: GlobalModel.getUrlParamValue("sign")
        };
        console.log("loginData:", JSON.stringify(jsonObj));
        return JSON.stringify(jsonObj);
    };
    /**
     * SDK创建角色
     */
    PlatformSdwH5.prototype.SDKCreateRoleNative = function (params) {
        this.setData(params, true);
    };
    /**
     * SDK进入游戏
     */
    PlatformSdwH5.prototype.SDKEnterGameNative = function (params) {
        this.setData(params);
    };
    /**
     * SDK角色升级
     */
    PlatformSdwH5.prototype.SDKUserUpgradeNative = function (params) {
        this.setData(params);
    };
    PlatformSdwH5.prototype.setData = function (params, isCreate) {
        if (isCreate === void 0) { isCreate = false; }
        this.SdwSDK.postGameInfo({
            uid: Number(GlobalModel.openID),
            appid: GlobalModel.getUrlParamValue("appid"),
            channel: Number(GlobalModel.getUrlParamValue("channel")),
            id: GlobalModel.openID,
            nick: params.nickName,
            sid: params.serverId + "",
            sname: params.serverName,
            level: ActorControl.level,
            type: "RPG",
            vip: vipControl.lv,
            power: ActorControl.power,
            new: isCreate ? 0 : 1 //是否创角（0|1）
        });
    };
    /**
     * SDK下单参数
     */
    PlatformSdwH5.prototype.GetMakeOrderSdkArgs = function (params) {
        return JSON.stringify({
            timestamp: params.timestamp,
            channel: GlobalModel.getUrlParamValue("channel"),
            subject: params.itemName,
            wxopenid: GlobalModel.getUrlParamValue("openid") || "",
            call_back_url: GlobalModel.getUrlParamValue("cburl"),
            merchant_url: GlobalModel.getUrlParamValue("cburl")
        });
    };
    /**
     * SDK支付
     */
    PlatformSdwH5.prototype.SDKPayNative = function (params) {
        this.SdwSDK.chooseSDWPay({
            subject: params.goodsname,
            appId: GlobalModel.getUrlParamValue("appid"),
            gameName: GlobalModel.getUrlParamValue("gamename"),
            accountId: GlobalModel.openID,
            amount: params.fee * 100,
            cpOrderId: params.order,
            paychannel: "",
            call_back_url: GlobalModel.getUrlParamValue("cburl"),
            merchant_url: GlobalModel.getUrlParamValue("cburl"),
            sign: params.gameSign,
            timestamp: params.timestamp,
            channel: GlobalModel.getUrlParamValue("channel"),
            wxopenid: GlobalModel.getUrlParamValue("openid") || "",
            complete: function (res) { }
        });
        //sdw.closeSDWPay()
    };
    /**
     * SDK二维码
     */
    PlatformSdwH5.prototype.SDKShowQRCode = function () {
        this.SdwSDK.onShowQcode(GlobalModel.getUrlParamValue("appid"));
    };
    return PlatformSdwH5;
}(PlatformBase));
__reflect(PlatformSdwH5.prototype, "PlatformSdwH5");
/**
 * SmileGamesH5
 */
var PlatformSmileGamesH5 = (function (_super) {
    __extends(PlatformSmileGamesH5, _super);
    function PlatformSmileGamesH5() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.gameUrl = "https://game.smilegames.cn/unicomPlugin/";
        return _this;
    }
    PlatformSmileGamesH5.prototype.SDKInitNative = function () {
        GlobalModel.openID = GlobalModel.getUrlParamValue("uid");
    };
    /**
     * SDK登陆验证参数
     */
    PlatformSmileGamesH5.prototype.GetSDKCheckAccountArgs = function () {
        var jsonObj = {
            pf: GlobalModel.pf,
            gameId: GlobalModel.gameId,
            channelId: GlobalModel.channelId,
            gameVersion: GlobalModel.gameVersion,
            appId: GlobalModel.appid,
            sign: GlobalModel.getUrlParamValue("sign"),
            u_token: GlobalModel.getUrlParamValue("u_token"),
            time: GlobalModel.getUrlParamValue("time"),
            appid: SDKConst['SmileGamesH5Appid'],
            uid: GlobalModel.getUrlParamValue("uid"),
            shellext: GlobalModel.GetSearchParamByName("shellext"),
        };
        return JSON.stringify(jsonObj);
    };
    PlatformSmileGamesH5.prototype.getUrlData = function (urlStr) {
        var theRequest = new Object();
        var url = urlStr; //location.search;
        if (url.indexOf("?") != -1) {
            var str = url.substr(1);
            var strs = str.split("&");
            for (var i = 0; i < strs.length; i++) {
                theRequest[strs[i].split("=")[0]] = (strs[i].split("=")[1]);
            }
        }
        return theRequest;
    };
    /**
     * SDK支付
     */
    PlatformSmileGamesH5.prototype.SDKPayNative = function (params) {
        var data = this.getUrlData(params.paydata.url);
        var payData = {
            money: data['amount'],
            appid: data['appid'],
            serverid: data['serverid'],
            uid: data['uid'],
            amount: data['amount'],
            extinfo: data['extinfo'],
            sign: data['sign']
        };
        window.parent.postMessage(payData, '*');
    };
    return PlatformSmileGamesH5;
}(PlatformBase));
__reflect(PlatformSmileGamesH5.prototype, "PlatformSmileGamesH5");
var PlatformSoeasyH5 = (function (_super) {
    __extends(PlatformSoeasyH5, _super);
    function PlatformSoeasyH5() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.ZmSdk = window["ZmSdk"];
        return _this;
    }
    /**
     * 初始化SDK
     */
    PlatformSoeasyH5.prototype.SDKInitNative = function () {
        // var issupport = ZmSdk.getInstance().isSupportMethod(methodStr);
        // methodStr:检测的方法名
        // return: 返回值 false 不支持 true 支持
    };
    /**
     * 是否需要登录
     */
    PlatformSoeasyH5.prototype.SDKIsNeedLoginNative = function () {
        return false;
    };
    /**
     * SDK登陆验证参数
     */
    PlatformSoeasyH5.prototype.GetSDKCheckAccountArgs = function () {
        var jsonObj = {
            pf: GlobalModel.pf,
            gameId: GlobalModel.gameId,
            channelId: GlobalModel.channelId,
            gameVersion: GlobalModel.gameVersion,
            appId: GlobalModel.appid,
            token: GlobalModel.getUrlParamValue("token"),
            isLogin: GlobalModel.getUrlParamValue("isLogin"),
            t: GlobalModel.getUrlParamValue("t"),
            sign: GlobalModel.getUrlParamValue("sign")
        };
        return JSON.stringify(jsonObj);
    };
    /**
     * SDK创建角色
     */
    PlatformSoeasyH5.prototype.SDKCreateRoleNative = function (params) {
        this.setData(params, true);
    };
    /**
     * SDK进入游戏
     */
    PlatformSoeasyH5.prototype.SDKEnterGameNative = function (params) {
        this.setData(params);
    };
    /**
     * SDK角色升级
     */
    PlatformSoeasyH5.prototype.SDKUserUpgradeNative = function (params) {
        this.setData(params, false, true);
    };
    PlatformSoeasyH5.prototype.setData = function (params, isCreate, isUpLv) {
        if (isCreate === void 0) { isCreate = false; }
        if (isUpLv === void 0) { isUpLv = false; }
        var datatype = 3;
        if (isCreate) {
            datatype = 2;
        }
        if (isUpLv) {
            datatype = 4;
        }
        var roleInfoJSON = {
            "datatype": datatype,
            "serverid": params.serverId,
            "servername": params.serverName,
            "roleid": ActorControl.actorID,
            "rolename": params.nickName,
            "rolelevel": ActorControl.level,
            "fightvalue": ActorControl.power,
            //以上字段为必填字段
            "moneynum": ActorControl.yb,
            "rolecreatetime": GlobalModel.createActorTime,
            "rolelevelmtime": "",
            "gender": "",
            "professionid": params.job,
            "profession": CommonFun.getJobName(params.job),
            "vip": vipControl.lv,
            "partyid": unionControl.guildID,
            "partyname": unionControl.guildName,
            "partyroleid": unionControl.guildID,
            "partyrolename": unionControl.guildName,
            "friendlist": []
        };
        this.ZmSdk.getInstance().reportRoleStatus(roleInfoJSON);
    };
    /**
     * SDK支付
     */
    PlatformSoeasyH5.prototype.SDKPayNative = function (params) {
        var fee = params.fee * 100;
        var payinfojson = {
            "check": EncryptMd5.hex_md5(fee + "" + params.itemid + SDKConst.SoeasyH5SeceretKey),
            "feeid": params.itemid,
            "fee": fee,
            "feename": params.goodsname,
            "extradata": params.order,
            "serverid": params.serverId,
            "rolename": params.roleName,
            "roleid": ActorControl.actorID,
            "servername": params.serverName,
            "rolelevel": ActorControl.level
        };
        this.ZmSdk.getInstance().pay(payinfojson, function (payStatusObject) {
            console.log('SoeasyH5:Order to inform' + JSON.stringify(payStatusObject));
        });
    };
    /**
     * SDK回调
     */
    PlatformSoeasyH5.prototype.nativeCallback = function (msg) {
        _super.prototype.nativeCallback.call(this, msg);
        var jsonObj = JSON.parse(msg);
        var callType = jsonObj['callType'];
        if (callType == 'init') {
            this.ZmSdk = window["ZmSdk"];
            var data = jsonObj['data'];
            GlobalModel.setUrlParamValue("channelId", data.common.channel);
            GlobalModel.setUrlParamValue("sdkindx", data.common.sdkindx);
            GlobalModel.setUrlParamValue("sdkname", data.common.sdkname);
            GlobalModel.openID = data.userdata.uid;
            GlobalModel.nickName = data.userdata.name;
            GlobalModel.setUrlParamValue("t", data.userdata.t);
            GlobalModel.setUrlParamValue("sign", data.userdata.sign);
        }
    };
    return PlatformSoeasyH5;
}(PlatformBase));
__reflect(PlatformSoeasyH5.prototype, "PlatformSoeasyH5");
/**
 * 测试平台
 */
var PlatformTest = (function (_super) {
    __extends(PlatformTest, _super);
    function PlatformTest() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PlatformTest.prototype.SDKInitNative = function () {
        this.nativeCallback(JSON.stringify({ callType: "init" }));
    };
    PlatformTest.prototype.SDKIsNeedLoginNative = function () {
        return !GlobalModel.openID;
    };
    PlatformTest.prototype.SDKLoginNative = function () {
        SceneMgr.ins().runScene(LoginScene);
    };
    /**
     * SDK登陆验证参数
     */
    PlatformTest.prototype.GetSDKCheckAccountArgs = function () {
        var jsonObj = {
            pf: GlobalModel.pf,
            gameId: GlobalModel.gameId,
            channelId: GlobalModel.channelId,
            gameVersion: GlobalModel.gameVersion,
            isSupper: GlobalModel.getUrlParamValue("isDebug") ? 1 : 0
        };
        return JSON.stringify(jsonObj);
    };
    /**显示超级会员 */
    PlatformTest.prototype.showSuperVip = function () {
        return GlobalModel.pfid == "52";
    };
    /**
     * SDK下单参数
     */
    PlatformTest.prototype.GetMakeOrderSdkArgs = function (params) {
        return JSON.stringify({
            subject: params.itemName
        });
    };
    PlatformTest.prototype.SDKPayNative = function (params) {
        //翻倍特殊处理
        if ((params.itemid / 100) >> 0 == 2 || (params.itemid / 100) >> 0 == 4) {
            params.itemid = (params.itemid % 100) >> 0;
        }
        payControl.upPayDebug(params.itemid);
    };
    //测试下微信小游戏用的
    PlatformTest.prototype.SDKMiniAuditVer = function () {
        return SDKConst["WXTestMiniAuditVer"];
    };
    //测试微信小游戏分享
    PlatformTest.prototype.SDKShowShare = function (param) {
        window.wx && window.wx.shareAppMessage && window.wx.shareAppMessage({
            title: "TestShare",
            imageUrl: "",
            query: param && param.query ? param && param.query : "",
        });
        if (param && param instanceof Function) {
            param();
        }
        else {
            if (param && param.callback instanceof Function) {
                param.callback();
            }
        }
        if (DeviceUtils.IsHtml5 && param && param.query && param.query != "") {
            var href = window.location.href;
            var urlSearch = window.location.search;
            href = (urlSearch && urlSearch != "") ? href + ("&" + param.query) : href + ("?" + param.query);
            console.log(href);
        }
    };
    /** 是否显示分享入口 */
    PlatformTest.prototype.isShowSharePortalIcon = function () {
        return true;
    };
    /** 邀请人数据 */
    PlatformTest.prototype.getInviterInfo = function () {
        return {
            inviterId: Number(GlobalModel.getUrlParamValue("inviterId")),
            inviterSid: Number(GlobalModel.getUrlParamValue("inviterSid")),
        };
    };
    return PlatformTest;
}(PlatformBase));
__reflect(PlatformTest.prototype, "PlatformTest");
var PlatformTongChengH5 = (function (_super) {
    __extends(PlatformTongChengH5, _super);
    function PlatformTongChengH5() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.TCYSDK = window["TCYSDK"];
        return _this;
    }
    /**
     * 初始化SDK
     */
    PlatformTongChengH5.prototype.SDKInitNative = function () {
        GlobalModel.openID = GlobalModel.getUrlParamValue("UserId");
    };
    /**
     * 是否需要登录
     */
    PlatformTongChengH5.prototype.SDKIsNeedLoginNative = function () {
        return false;
    };
    /**
     * 登录
     */
    PlatformTongChengH5.prototype.SDKLoginNative = function () { };
    /**
     * SDK登陆验证参数
     */
    PlatformTongChengH5.prototype.GetSDKCheckAccountArgs = function () {
        var jsonObj = {
            pf: GlobalModel.pf,
            gameId: GlobalModel.gameId,
            channelId: GlobalModel.channelId,
            gameVersion: GlobalModel.gameVersion,
            appId: GlobalModel.appid,
            timestamp: GlobalModel.getUrlParamValue("Timestamp"),
            sign: GlobalModel.getUrlParamValue("Sign"),
            shellext: GlobalModel.getUrlParamValue("shellext"),
            accesstoken: GlobalModel.getUrlParamValue("accesstoken")
        };
        console.log('SDK loginData', JSON.stringify(jsonObj));
        return JSON.stringify(jsonObj);
    };
    /**
     * SDK创建角色
     */
    PlatformTongChengH5.prototype.SDKCreateRoleNative = function (params) {
        this.setData(params, true);
    };
    /**
     * SDK进入游戏
     */
    PlatformTongChengH5.prototype.SDKEnterGameNative = function (params) {
        //上报登录
        var data = {
            AppId: SDKConst.TongChengAppid,
            ServerId: params.serverId
        };
        this.TCYSDK.start("TCYSDK_LOGIN", data);
    };
    /**
     * SDK角色升级
     */
    PlatformTongChengH5.prototype.SDKUserUpgradeNative = function (params) {
        this.setData(params, false, true);
    };
    PlatformTongChengH5.prototype.setData = function (params, isCreate, isUpLv) {
        if (isCreate === void 0) { isCreate = false; }
        if (isUpLv === void 0) { isUpLv = false; }
        var pushData = {
            AppId: SDKConst.TongChengAppid,
            ServerId: params.serverId,
            RoleName: params.nickName,
            GameLevel: ActorControl.level,
            CreateTime: GlobalModel.createActorTime
        };
        this.TCYSDK.start("TCYSDK_PUT_ROLE", pushData);
    };
    PlatformTongChengH5.prototype.getAES = function (str) {
        var key = SDKConst.TongChengAppSecret;
        var iv = SDKConst.TongChengAppSecret.substr(0, 16);
        var encrypted = this.getAesString(str, key, iv);
        return encrypted;
    };
    PlatformTongChengH5.prototype.getAesString = function (data, key, iv) {
        var key = window["CryptoJS"].enc.Utf8.parse(key);
        var iv = window["CryptoJS"].enc.Utf8.parse(iv);
        var encrypted = window["CryptoJS"].AES.encrypt(data, key, {
            iv: iv,
            mode: window["CryptoJS"].mode.CBC,
            padding: window["CryptoJS"].pad.Pkcs7
        });
        return encrypted.toString();
    };
    /**
     * SDK支付
     */
    PlatformTongChengH5.prototype.SDKPayNative = function (params) {
        // let singOgj = {
        //     AppId: SDKConst.TongChengAppid,
        //     OutOrderNo: params.order,
        //     Price: params.fee,
        //     ProductSubject: params.goodsname,
        //     ProductBody: params.goodsname,
        //     Timestamp: params.timestamp
        // }
        // let plaintText: string = JSON.stringify(singOgj); // 对象序列化成JSON字符串
        // var encryptedData = this.getAES(plaintText);
        // console.log("加密前：" + plaintText);
        // console.log("加密后：" + encryptedData);
        // let outOrderInfo: string = encodeURIComponent(encryptedData); //URL编码
        // let sign: string = md5.hex_md5(outOrderInfo + SDKConst.TongChengAppSecret); //md5加
        var payObj = {
            ProductSubject: params.goodsname,
            Price: params.fee,
            ProductBody: params.goodsname,
            OutOrderInfo: params.OutOrderInfo,
            OutOrderInfoSign: params.OutOrderInfoSign,
            Ext: params.order
        };
        console.log("pay data:", payObj);
        this.TCYSDK.start("TCYSDK_PAY", payObj, function (type, data) {
            console.log(type, data);
        });
    };
    /**
     * SDK登出
     */
    PlatformTongChengH5.prototype.SDKLogoutNative = function () {
        window.location.reload();
    };
    return PlatformTongChengH5;
}(PlatformBase));
__reflect(PlatformTongChengH5.prototype, "PlatformTongChengH5");
/**
 * UC(九游)
 */
var PlatformUc = (function (_super) {
    __extends(PlatformUc, _super);
    function PlatformUc() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * SDK需要登陆
     */
    PlatformUc.prototype.SDKIsNeedLoginNative = function () {
        return true;
    };
    /**
     * SDK登陆验证参数
     */
    PlatformUc.prototype.GetSDKCheckAccountArgs = function () {
        var jsonObj = {
            pf: GlobalModel.pf,
            gameId: GlobalModel.gameId,
            channelId: GlobalModel.channelId,
            gameVersion: GlobalModel.gameVersion,
            appId: GlobalModel.appid,
            sid: GlobalModel.getUrlParamValue("sid"),
            shellext: GlobalModel.getUrlParamValue("shellext")
        };
        console.log("UC loginData:", JSON.stringify(jsonObj));
        return JSON.stringify(jsonObj);
    };
    /**
    * SDK创建角色
    */
    PlatformUc.prototype.SDKCreateRoleNative = function (params) {
        this.setData(params, true);
    };
    /**
     * SDK进入游戏
     */
    PlatformUc.prototype.SDKEnterGameNative = function (params) {
        this.setData(params);
    };
    /**
     * SDK角色升级
     */
    PlatformUc.prototype.SDKUserUpgradeNative = function (params) {
        this.setData(params, false, true);
    };
    PlatformUc.prototype.setData = function (params, isCreate, isUpLv) {
        if (isCreate === void 0) { isCreate = false; }
        if (isUpLv === void 0) { isUpLv = false; }
    };
    /**
     * SDK支付
     */
    PlatformUc.prototype.SDKPayNative = function (params) {
        egret.ExternalInterface.call("SDKPayNative", JSON.stringify({
            openID: GlobalModel.openID,
            serverName: params.serverName,
            gameRoleName: params.roleName,
            serverId: params.serverId,
            gameRoleID: ActorControl.actorID,
            gameUserBalance: ActorControl.yb,
            vipLevel: vipControl.lv,
            gameUserLevel: ActorControl.level,
            partyName: unionControl.guildName,
            goodsID: params.itemid,
            productName: params.goodsname,
            cpOrderID: params.order,
            count: params.amount,
            amount: params.fee,
            extrasParams: params.order,
            createAccountTime: GlobalModel.createAccountTime,
            createActorTime: GlobalModel.createActorTime,
            gameSign: params.gameSign
        }));
    };
    /**
     * SDK回调
     */
    PlatformUc.prototype.nativeCallback = function (msg64) {
        var msg = Base64.base64decode(msg64);
        _super.prototype.nativeCallback.call(this, msg);
        var jsonObj = JSON.parse(msg);
        var callType = jsonObj['callType'];
        if (callType == 'init') {
            debug.log("SDK init ok");
        }
        else if (callType == 'login') {
            if (jsonObj['sdkcode'] == 0) {
                GlobalModel.setUrlParamValue("sid", jsonObj['sid']);
                var obj = {
                    sid: jsonObj['sid'],
                };
                var args = Md5Utils.obj_md5_args(obj);
                debug.log("UC Get UID parm:" + args);
                PHPConfig.requestPhpData("https://ltserver.xcvgame.top/uc/" + GlobalModel.gameId + "/sdkurlcallback", args, function (event) {
                    var responseJson = JSON.parse(event.currentTarget.response);
                    console.log("UC parm:", event.currentTarget.response);
                    if (responseJson["status"] == 1) {
                        GlobalModel.openID = responseJson["guid"];
                        GlobalModel.setUrlParamValue("shellext", responseJson['shellext']);
                        SceneMgr.ins().runScene(StartGameScene);
                    }
                    else {
                        console.log("get UC id error!!!");
                        SDKManager.ins().NativeCallback(msg64);
                    }
                }, this, function (event) {
                    console.log("get UC id error!!!");
                    SDKManager.ins().NativeCallback(msg64);
                });
            }
            else {
                this.SDKLoginNative();
            }
        }
        else if (callType == 'logout') {
            if (jsonObj['sdkcode'] == 0) {
                window.location.reload();
            }
        }
    };
    return PlatformUc;
}(PlatformBase));
__reflect(PlatformUc.prototype, "PlatformUc");
/**
 * UC小游戏
 */
var PlatformUCMiniGame = (function (_super) {
    __extends(PlatformUCMiniGame, _super);
    function PlatformUCMiniGame() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PlatformUCMiniGame.prototype.SDKInitNative = function () {
        DeviceUtils.IsBluntBangs = true;
        window.uc.getSystemInfo({
            success: function (res) {
                PlatformUCMiniGame.systemInfo = res;
                console.log('phone Info', res);
                console.log('phone Type', MobileDevice.model);
            }
        });
    };
    /**
     * 小游戏提审版本
     */
    PlatformUCMiniGame.prototype.SDKMiniAuditVer = function () {
        return SDKConst.UCMiniAuditVer;
    };
    PlatformUCMiniGame.prototype.SDKIsNeedLoginNative = function () {
        return true;
    };
    PlatformUCMiniGame.prototype.SDKLoginNative = function () {
        window.uc.login({
            success: function (res) {
                console.log("login ok:", res);
                PlatformUCMiniGame.getUserOpenId(res.code);
            },
            fail: function (res) {
                console.log("login fail:", res);
                PlatformUCMiniGame.ucLoginFail();
            }
        });
    };
    PlatformUCMiniGame.ucLoginFail = function () {
        window.uc.showModal({
            title: LangMgr.getValueByKey('loginfail'),
            content: LangMgr.getValueByKey('needrelogin'),
            cancelText: LangMgr.getValueByKey('relogin'),
            success: function (data) {
                SDKManager.ins().SDKLoginNative();
            },
            fail: function (err) {
                SDKManager.ins().SDKLoginNative();
            }
        });
    };
    /**
     * 获取玩家OpenId
     * @param loginCode
     */
    PlatformUCMiniGame.getUserOpenId = function (loginCode) {
        var loginData = {
            code: loginCode
        };
        var args = Md5Utils.obj_md5_args(loginData);
        console.log("UC get UID parm:" + args);
        PHPConfig.requestPhpData(GlobalModel.sdkDomain + "/" + GlobalModel.pf.toLowerCase() + "/" + GlobalModel.gameId + "/sdkurlcallback", args, function (event) {
            console.log("UC parm:", event.currentTarget.response);
            var responseJson = JSON.parse(event.currentTarget.response);
            if (responseJson["status"] == 1) {
                GlobalModel.openID = responseJson["uid"];
                GlobalModel.setUrlParamValue("session_key", responseJson['session_key']);
                GlobalModel.setUrlParamValue("shellext", responseJson['shellext']);
                SceneMgr.ins().runScene(StartGameScene);
            }
            else {
                console.log("get UC account error!!!");
            }
        }, this, function (event) {
            console.log("get UC account error!!!");
        });
    };
    /**
     * SDK登陆验证参数
     */
    PlatformUCMiniGame.prototype.GetSDKCheckAccountArgs = function () {
        var jsonObj = {
            pf: GlobalModel.pf,
            gameId: GlobalModel.gameId,
            channelId: GlobalModel.channelId,
            gameVersion: GlobalModel.gameVersion,
            shellext: GlobalModel.getUrlParamValue("shellext")
        };
        console.log("UCMiniGame loginParm:", JSON.stringify(jsonObj));
        return JSON.stringify(jsonObj);
    };
    /**
     * SDK是否支持支付
     */
    PlatformUCMiniGame.prototype.CheckSupportRecharge = function () {
        if (PlatformUCMiniGame.systemInfo && PlatformUCMiniGame.systemInfo.platform == "iOS") {
            window.uc.showToast({ content: LangMgr.getValueByKey('iosnonsupportpay') });
            return false;
        }
        return true;
    };
    PlatformUCMiniGame.prototype.SDKPayNative = function (params) {
        if (PlatformUCMiniGame.systemInfo && this.compareVersion(PlatformUCMiniGame.systemInfo.SDKVersion, '1.0.1') < 0) {
            window.uc.showToast({ content: LangMgr.getValueByKey('updataucie') });
            return;
        }
        console.log("call Uc pay:", SDKConst.UcPayBizId, params);
        window.uc.requestPayment({
            biz_id: SDKConst.UcPayBizId,
            token: params.paydata.token,
            trade_id: params.paydata.trade_id,
            success: function (data) {
                console.log("pay ok:", data);
            },
            fail: function (data) {
                console.log("pay fail:", data);
            }
        });
    };
    PlatformUCMiniGame.prototype.compareVersion = function (v1, v2) {
        v1 = v1.split('.');
        v2 = v2.split('.');
        var len = Math.max(v1.length, v2.length);
        while (v1.length < len) {
            v1.push('0');
        }
        while (v2.length < len) {
            v2.push('0');
        }
        for (var i = 0; i < len; i++) {
            var num1 = parseInt(v1[i]);
            var num2 = parseInt(v2[i]);
            if (num1 > num2) {
                return 1;
            }
            else if (num1 < num2) {
                return -1;
            }
        }
        return 0;
    };
    ;
    PlatformUCMiniGame.prototype.getStatusHeight = function () {
        var topHeight = 60;
        if (MobileDevice.isFringeScreen()) {
            topHeight += 40;
        }
        return topHeight;
    };
    return PlatformUCMiniGame;
}(PlatformBase));
__reflect(PlatformUCMiniGame.prototype, "PlatformUCMiniGame");
/**
 * Ugame
 */
var PlatformUgame = (function (_super) {
    __extends(PlatformUgame, _super);
    function PlatformUgame() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * SDK需要登陆
     */
    PlatformUgame.prototype.SDKIsNeedLoginNative = function () {
        return true;
    };
    /**返回拼接好的数据 */
    PlatformUgame.prototype.getUrl = function (obj) {
        var cc = '';
        for (var key in obj) {
            cc += key + "=" + obj[key] + "&";
        }
        cc = cc.substring(0, cc.length - 1);
        return cc;
    };
    /**
     * 获取加密
     */
    PlatformUgame.prototype.getSign = function (obj) {
        var obj2 = this.getUrl(obj);
        return EncryptMd5.hex_md5(obj2);
    };
    /**
     * SDK登陆
     */
    PlatformUgame.prototype.SDKLoginNative = function (args) {
        var obj = {
            type: args
        };
        egret.ExternalInterface.call("SDKLoginNative", JSON.stringify(obj));
    };
    /**
     * SDK登陆验证参数
     */
    PlatformUgame.prototype.GetSDKCheckAccountArgs = function () {
        var times = Date.now();
        var apptype = SDKManager.ins()["UgameAppType"];
        apptype = this.upperCase(apptype);
        var clientType = this.upperCase(GlobalModel.os);
        var appkey = SDKConst["UGameKey" + clientType + apptype];
        var signObj = {
            uid: GlobalModel.openID,
            time: times,
            appkey: appkey
        };
        var signs = this.getSign(signObj);
        var jsonObj = {
            pf: GlobalModel.pf,
            gameId: GlobalModel.gameId,
            channelId: GlobalModel.channelId,
            gameVersion: GlobalModel.gameVersion,
            appId: GlobalModel.appid,
            time: times,
            sign: signs
        };
        console.log("Ugame loginParm:", JSON.stringify(jsonObj), JSON.stringify(signObj));
        return JSON.stringify(jsonObj);
    };
    /**
     * SDK进入游戏
     */
    PlatformUgame.prototype.SDKEnterGameNative = function (params) {
        egret.ExternalInterface.call("SDKCheckFailBill", JSON.stringify({
            serverId: params.serverId,
            roleId: ActorControl.actorID,
            sdkUid: GlobalModel.openID,
            sPcText: GlobalModel.channelId
        }));
        this.setData(1);
    };
    /**
     * SDK创建角色
     */
    PlatformUgame.prototype.SDKCreateRoleNative = function (params) {
        this.setData(2);
    };
    /**
     * SDK角色升级
     */
    PlatformUgame.prototype.SDKUserUpgradeNative = function (params) {
        this.setData(3);
    };
    /**创建类型*/
    PlatformUgame.prototype.setData = function (type) {
        var roleInfo = {
            type: type,
            lv: ActorControl.level,
            actorID: ActorControl.actorID,
            serverId: GlobalModel.srvid,
        };
        var roleInfoJson = JSON.stringify(roleInfo);
        egret.ExternalInterface.call("SDKLevelUpdate", roleInfoJson);
    };
    /**
     * SDK下单参数
     */
    PlatformUgame.prototype.GetMakeOrderSdkArgs = function (params) {
        return JSON.stringify({
            paytype: GlobalModel.os == "android" ? "gp" : (GlobalModel.os == "ios" ? "ios" : "home")
        });
    };
    /**
     * SDK支付
     */
    PlatformUgame.prototype.SDKPayNative = function (params) {
        var payObj = {
            serverId: params.serverId,
            serverName: params.serverName,
            goodsID: this.GetChannelItemId(params.itemid),
            cpOrderID: params.order,
            productName: params.goodsname
        };
        egret.ExternalInterface.call("SDKPayNative", JSON.stringify(payObj));
        console.log("SDK pay info：", JSON.stringify(payObj));
    };
    /**显示超级会员 */
    PlatformUgame.prototype.showSuperVip = function () {
        return true;
    };
    PlatformUgame.prototype.upperCase = function (str) {
        return !!str ? str.substring(0, 1).toUpperCase() + str.substring(1) : "";
    };
    /**
     * 渠道计费点
     */
    PlatformUgame.prototype.GetChannelItemId = function (itemid) {
        var apptype = SDKManager.ins()["UgameAppType"];
        apptype = this.upperCase(apptype);
        switch (GlobalModel.os) {
            case "android":
                itemid = SDKConst["GooglePayProductIds" + apptype][itemid];
                break;
            case "ios":
                itemid = SDKConst["IosProductIds" + apptype][itemid];
                break;
        }
        return itemid;
    };
    /**
     * facebook礼包
     */
    PlatformUgame.prototype.SDKStartForGift = function () {
        egret.ExternalInterface.call("SDKStartForGift", GlobalModel.srvid.toString());
    };
    /**
     * 活动
     */
    PlatformUgame.prototype.SDKFaceStartGift = function () {
        egret.ExternalInterface.call("SDKFaceStartGift", GlobalModel.srvid.toString());
    };
    /**
     * 提审
     */
    PlatformUgame.prototype.SDKMiniAuditVer = function () {
        if (GlobalModel.os == "ios") {
            return 1;
        }
        return 0;
    };
    /**
     * SDK回调
     */
    PlatformUgame.prototype.nativeCallback = function (msg) {
        msg = Base64.base64decode(msg);
        _super.prototype.nativeCallback.call(this, msg);
        var jsonObj = JSON.parse(msg);
        var callType = jsonObj['callType'];
        console.log('SDK callback', JSON.stringify(jsonObj));
        if (callType == 'init') {
            debug.log("SDK init suc");
        }
        else if (callType == 'login') {
            if (jsonObj['sdkcode'] == 0) {
                GlobalModel.openID = jsonObj['userId'];
                GlobalModel.setUrlParamValue("os", jsonObj["os"]);
                SceneMgr.ins().runScene(StartGameScene);
            }
            else {
                this.SDKLoginNative();
            }
        }
        else if (callType == 'checkFailBill') {
            platformAmuseControl.dispatchGameFBGift(jsonObj['fbflag']);
            platformAmuseControl.dispatchGameFBRate(jsonObj['rateFlag']);
        }
        else if (callType == 'logout') {
            if (jsonObj['sdkcode'] == 0) {
                window.location.reload();
            }
        }
        else if (callType == 'switchAccount') {
            if (jsonObj['sdkcode'] == 0) {
                window.location.reload();
            }
        }
        else if (callType == 'appType') {
            if (jsonObj['sdkcode'] == 1) {
                SDKManager.ins()["UgameAppType"] = jsonObj['appType'];
            }
        }
    };
    return PlatformUgame;
}(PlatformBase));
__reflect(PlatformUgame.prototype, "PlatformUgame");
/**
 * UgameH5
 */
var PlatformUgameH5 = (function (_super) {
    __extends(PlatformUgameH5, _super);
    function PlatformUgameH5() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * 初始化SDK
     */
    PlatformUgameH5.prototype.SDKInitNative = function () {
        GlobalModel.openID = GlobalModel.getUrlParamValue("Uid");
        GlobalModel.setUrlParamValue("exText", "ugameh5");
        if (GlobalModel.pfid == "82") {
            SDKConst["Ugameid"] = "10216";
            SDKManager.ins()["UgameAppType"] = "F1game";
        }
        if (SDKConst["Ugameid"] == "10207" || SDKConst["Ugameid"] == "10216") {
            GlobalModel.pf = "Ugame";
        }
    };
    /**
     * 是否需要登录
     */
    PlatformUgameH5.prototype.SDKIsNeedLoginNative = function () {
        return false;
    };
    /**
     * 获取加密
     */
    PlatformUgameH5.prototype.getSign = function (obj) {
        var obj2 = this.getUrl(obj) + SDKConst['UGameKeyAndroid'];
        return EncryptMd5.hex_md5(obj2);
    };
    /**
     * 返回拼接好的数据
     */
    PlatformUgameH5.prototype.getUrl = function (obj) {
        var cc = '';
        for (var key in obj) {
            cc += key + "=" + obj[key] + "&";
        }
        cc = cc.substring(0, cc.length - 1);
        return cc;
    };
    /**
     * SDK登陆验证参数
     */
    PlatformUgameH5.prototype.GetSDKCheckAccountArgs = function () {
        var signObj = {
            Ugameid: SDKConst["Ugameid"],
            Uid: GlobalModel.openID,
            Time: Date.now()
        };
        var signs = this.getSign(signObj);
        var jsonObj = {
            pf: GlobalModel.pf,
            gameId: GlobalModel.gameId,
            channelId: GlobalModel.channelId,
            gameVersion: GlobalModel.gameVersion,
            appId: GlobalModel.appid,
            uid: GlobalModel.openID,
            lzext: "ugameh5",
            Ugameid: SDKConst["Ugameid"],
            Uid: GlobalModel.openID,
            Time: GlobalModel.getUrlParamValue("Time"),
            sign: GlobalModel.getUrlParamValue("Sign"),
            Sign: GlobalModel.getUrlParamValue("Sign")
        };
        console.log("UgameH5 Login Args:", JSON.stringify(jsonObj), JSON.stringify(signObj));
        return JSON.stringify(jsonObj);
    };
    /**
     * SDK进入游戏
     */
    PlatformUgameH5.prototype.SDKEnterGameNative = function (params) {
        this.setData(1, params);
    };
    /**
     * SDK创建角色
     */
    PlatformUgameH5.prototype.SDKCreateRoleNative = function (params) {
        // this.setData(2,params);
    };
    /**
     * SDK角色升级
     */
    PlatformUgameH5.prototype.SDKUserUpgradeNative = function (params) {
        this.setData(3, params);
    };
    /**
     * sdk 上报数据
     */
    PlatformUgameH5.prototype.setData = function (type, params) {
        var obj = {
            Ugameid: SDKConst["Ugameid"],
            Uid: GlobalModel.openID,
            Serverid: params.serverId,
            ServerName: params.serverName,
            Roleid: ActorControl.actorID,
            RoleName: params.nickName,
            Method: type == 3 ? "levelUp" : "createRole",
            Time: GlobalModel.getUrlParamValue("Time")
        };
        window.parent.postMessage(obj, '*');
    };
    /**
     * SDK支付
     */
    PlatformUgameH5.prototype.SDKPayNative = function (params) {
        var payObj = {
            Ugameid: SDKConst["Ugameid"],
            Uid: GlobalModel.openID,
            Serverid: params.serverId,
            Roleid: ActorControl.actorID,
            Method: "createPay",
            Time: GlobalModel.getUrlParamValue("Time"),
            Cp_orderid: params.order,
            Ctext: GlobalModel.getUrlParamValue("exText"),
            Sku: this.GetChannelItemId(params.itemid),
            UPrice: params.fee
        };
        window.parent.postMessage(payObj, '*');
        console.log("SDK Pay Info：", JSON.stringify(payObj));
    };
    /**
     * 显示超级会员
     */
    PlatformUgameH5.prototype.showSuperVip = function () {
        return true;
    };
    PlatformUgameH5.prototype.upperCase = function (str) {
        return !!str ? str.substring(0, 1).toUpperCase() + str.substring(1) : "";
    };
    /**
     * 渠道计费点
     */
    PlatformUgameH5.prototype.GetChannelItemId = function (itemid) {
        var apptype = SDKManager.ins()["UgameAppType"];
        apptype = this.upperCase(apptype);
        var channelItem = SDKConst["GooglePayProductIds" + apptype][itemid];
        return channelItem;
    };
    return PlatformUgameH5;
}(PlatformBase));
__reflect(PlatformUgameH5.prototype, "PlatformUgameH5");
/**
 * 游趣
 */
var PlatformWmsdH5 = (function (_super) {
    __extends(PlatformWmsdH5, _super);
    function PlatformWmsdH5() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * 初始化SDK
     */
    PlatformWmsdH5.prototype.SDKInitNative = function () {
        GlobalModel.openID = GlobalModel.getUrlParamValue("uid");
    };
    /**
     * SDK需要登陆
     */
    PlatformWmsdH5.prototype.SDKIsNeedLoginNative = function () {
        return false;
    };
    /**
     * SDK登陆验证参数
     */
    PlatformWmsdH5.prototype.GetSDKCheckAccountArgs = function () {
        var jsonObj = {
            pf: GlobalModel.pf,
            gameId: GlobalModel.gameId,
            channelId: GlobalModel.channelId,
            gameVersion: GlobalModel.gameVersion,
            appId: GlobalModel.appid,
            shellext: GlobalModel.getUrlParamValue("shellext")
        };
        console.log("Wmsd loginParm:", JSON.stringify(jsonObj));
        return JSON.stringify(jsonObj);
    };
    /**
     * SDK支付
     */
    PlatformWmsdH5.prototype.SDKPayNative = function (params) {
        window.top.postMessage({
            cmd: 'pay',
            args: {
                amount: params.fee,
                gameId: GlobalModel.getUrlParamValue("gameid"),
                serverId: params.serverId,
                subject: params.goodsname,
                body: params.goodsname,
                outTradeNo: params.order,
                attach: params.order
            }
        }, "*");
    };
    return PlatformWmsdH5;
}(PlatformBase));
__reflect(PlatformWmsdH5.prototype, "PlatformWmsdH5");
/**
 * 微信
 */
var PlatformWx = (function (_super) {
    __extends(PlatformWx, _super);
    function PlatformWx() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * SDK需要登陆
     */
    PlatformWx.prototype.SDKIsNeedLoginNative = function () {
        return true;
    };
    /**
     * SDK自定义登陆界面
     */
    PlatformWx.prototype.SDKHasLoginScene = function () {
        return WXGameScene;
    };
    /**
     * SDK登陆验证参数
     */
    PlatformWx.prototype.GetSDKCheckAccountArgs = function () {
        var jsonObj = {
            pf: GlobalModel.pf,
            gameId: GlobalModel.gameId,
            channelId: GlobalModel.channelId,
            gameVersion: GlobalModel.gameVersion,
            appId: GlobalModel.appid,
            serverid: GlobalModel.srvid,
            code: GlobalModel.getUrlParamValue("code"),
            shellext: GlobalModel.getUrlParamValue("shellext")
        };
        return JSON.stringify(jsonObj);
    };
    /**
     * SDK支付
     */
    PlatformWx.prototype.SDKPayNative = function (params) {
        egret.ExternalInterface.call("SDKPayNative", JSON.stringify({
            appid: params.wxPayData.appid,
            partnerid: params.wxPayData.partnerid,
            prepayid: params.wxPayData.prepayid,
            noncestr: params.wxPayData.noncestr,
            timestamp: params.wxPayData.timestamp,
            package: params.wxPayData.package,
            gamesign: params.gameSign,
            orderid: params.order
        }));
    };
    /**
     * SDK回调
     */
    PlatformWx.prototype.nativeCallback = function (msg) {
        msg = Base64.base64decode(msg);
        _super.prototype.nativeCallback.call(this, msg);
        var jsonObj = JSON.parse(msg);
        var callType = jsonObj['callType'];
        if (callType == 'init') {
            debug.log("SDK init suc");
        }
        else if (callType == 'login') {
            if (jsonObj['sdkcode'] == 0) {
                GlobalModel.setUrlParamValue("code", jsonObj['code']);
                GlobalModel.setUrlParamValue("os", jsonObj['os']);
                var obj = {
                    code: jsonObj['code'],
                    os: jsonObj['os'],
                    gameVersion: GlobalModel.gameVersion
                };
                var args = Md5Utils.obj_md5_args(obj);
                debug.log("wx get UID parm:" + args);
                PHPConfig.requestPhpData("https://ltserver.lzhygame.com/wx/" + GlobalModel.gameId + "/sdkurlcallback", args, function (event) {
                    var responseJson = JSON.parse(event.currentTarget.response);
                    debug.log("wx parm:", event.currentTarget.response);
                    if (responseJson["errcode"] == 200) {
                        GlobalModel.openID = responseJson["open_id"];
                        GlobalModel.setUrlParamValue("shellext", responseJson['shellext']);
                        SceneMgr.ins().runScene(StartGameScene);
                    }
                    else {
                        debug.log("get wx Account error!!!");
                    }
                }, function (event) {
                    debug.log("get wx Account error!!!");
                });
            }
            else {
                debug.log("login fail");
            }
        }
        else if (callType == 'logout') {
            if (jsonObj['sdkcode'] == 0) {
                window.location.reload();
            }
        }
        else if (callType == 'switchAccount') {
            if (jsonObj['sdkcode'] == 0) {
                window.location.reload();
            }
        }
    };
    return PlatformWx;
}(PlatformBase));
__reflect(PlatformWx.prototype, "PlatformWx");
/**
 * 小7海外
 */
var PlatformX7syHW = (function (_super) {
    __extends(PlatformX7syHW, _super);
    function PlatformX7syHW() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return PlatformX7syHW;
}(PlatformX7sy));
__reflect(PlatformX7syHW.prototype, "PlatformX7syHW");
var PlatformXcH5 = (function (_super) {
    __extends(PlatformXcH5, _super);
    function PlatformXcH5() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**只有一个init 方法 返回 sdk 实例 */
        _this.XCVGAMEH5SDKObj = window["XCVGAMEH5SDK"];
        return _this;
    }
    /**
     * 初始化SDK
     */
    PlatformXcH5.prototype.SDKInitNative = function () {
        GlobalModel.openID = GlobalModel.getUrlParamValue("useraccount");
        //关注
        platformAmuseControl.focusState = GlobalModel.getUrlParamValue("isfollow");
        var showshare = GlobalModel.getUrlParamValue("showshare");
        platformAmuseControl.shareState = (showshare == 0 ? -1 : showshare);
        platformAmuseControl.wxInviteCount = GlobalModel.getUrlParamValue("sharenumber");
        this.XCVGAMEH5SDK = this.XCVGAMEH5SDKObj.init(SDKConst.XiaoChouSdkappid, GlobalModel.getUrlParamValue("xcpf"));
    };
    /**
     * 是否需要登录
     */
    PlatformXcH5.prototype.SDKIsNeedLoginNative = function () {
        return false;
    };
    /**
     * SDK登陆验证参数
     */
    PlatformXcH5.prototype.GetSDKCheckAccountArgs = function () {
        var jsonObj = {
            pf: GlobalModel.pf,
            useraccount: GlobalModel.openID,
            gameId: GlobalModel.gameId,
            channelId: GlobalModel.channelId,
            gameVersion: GlobalModel.gameVersion,
            appId: GlobalModel.appid,
            shellext: GlobalModel.getUrlParamValue("shellext")
        };
        console.log("loginParm:", JSON.stringify(jsonObj));
        return JSON.stringify(jsonObj);
    };
    /**
     * SDK创建角色
     */
    PlatformXcH5.prototype.SDKCreateRoleNative = function (params) {
        var jsonstr = {
            "power": ActorControl.power,
            "moneynum": ActorControl.yb,
            "balance": "",
            "partyname": "",
            "partyrolename": "",
            "partyid": "",
            "professionid": ActorControl.job,
            "profession": "",
            "gender": "" //性别
        };
        this.XCVGAMEH5SDK.logingame(GlobalModel.openID, //用户帐号
        params.serverId, //游戏区服id 
        params.serverName, //区服名称
        ActorControl.actorID, //角色id
        ActorControl.myName, //角色名
        ActorControl.level, //玩家等级
        params.vip, //玩家VIP等级
        JSON.stringify(jsonstr));
    };
    /**
     * SDK进入游戏
     */
    PlatformXcH5.prototype.SDKEnterGameNative = function (params) {
        var jsonstr = {
            "power": ActorControl.power,
            "moneynum": ActorControl.yb,
            "balance": "",
            "partyname": "",
            "partyrolename": "",
            "partyid": "",
            "professionid": ActorControl.job,
            "profession": "",
            "gender": "" //性别
        };
        this.XCVGAMEH5SDK.logingame(GlobalModel.openID, //用户帐号
        params.serverId, //游戏区服id 
        params.serverName, //区服名称
        ActorControl.actorID, //角色id
        ActorControl.myName, //角色名
        ActorControl.level, //玩家等级
        params.vip, //玩家VIP等级
        JSON.stringify(jsonstr));
    };
    /**
     * SDK角色升级
     */
    PlatformXcH5.prototype.SDKUserUpgradeNative = function (params) {
        var jsonstr = {
            "power": ActorControl.power,
            "moneynum": ActorControl.yb,
            "balance": "",
            "partyname": "",
            "partyrolename": "",
            "partyid": "",
            "professionid": ActorControl.job,
            "profession": "",
            "gender": "" //性别
        };
        this.XCVGAMEH5SDK.roleupdate(GlobalModel.openID, //用户帐号
        params.serverId, //为游戏区服id
        params.nickName, //区服名称
        ActorControl.actorID, //角色id
        ActorControl.myName, //角色名
        ActorControl.level, //玩家等级
        vipControl.lv, //玩家VIP
        JSON.stringify(jsonstr));
    };
    /**
     * SDK支付
     */
    PlatformXcH5.prototype.SDKPayNative = function (params) {
        var cpPayParams = {
            sdkappid: SDKConst.XiaoChouSdkappid,
            pf: GlobalModel.getUrlParamValue("xcpf"),
            useraccount: GlobalModel.openID,
            money: params.fee,
            itemname: params.itemid,
            attach: params.order,
            serviceid: GlobalModel.srvid,
            role: ActorControl.myName,
        };
        var jiami = 'attach=' + cpPayParams.attach + '&itemname=' + cpPayParams.itemname + '&money=' + cpPayParams.money + '&pf=' + cpPayParams.pf +
            '&role=' + cpPayParams.role + '&sdkappid=' + cpPayParams.sdkappid + '&serviceid=' + cpPayParams.serviceid +
            '&useraccount=' + cpPayParams.useraccount;
        var sign = EncryptMd5.hex_md5(jiami + SDKConst.XiaoChouSdkkey);
        this.XCVGAMEH5SDK.pay(cpPayParams.useraccount, cpPayParams.itemname, cpPayParams.money, cpPayParams.attach, cpPayParams.serviceid, cpPayParams.role, sign);
    };
    /**
     * SDK分享
     */
    PlatformXcH5.prototype.SDKShowShare = function () {
        this.XCVGAMEH5SDK.share(GlobalModel.openID);
    };
    /**
     * SDK二维码关注
     */
    PlatformXcH5.prototype.SDKShowQRCode = function () {
        this.XCVGAMEH5SDK.guanzhu(GlobalModel.openID);
    };
    /**
     * SDK退出
     */
    PlatformXcH5.prototype.SDKExitNative = function () {
        this.XCVGAMEH5SDK.loginout(GlobalModel.openID);
    };
    return PlatformXcH5;
}(PlatformBase));
__reflect(PlatformXcH5.prototype, "PlatformXcH5");
var PlatformXJH5 = (function (_super) {
    __extends(PlatformXJH5, _super);
    function PlatformXJH5() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.XJGAME_SDK = window["XJGAME_SDK"];
        //一开始时的角色等级 用于上报有效用户
        _this.baseLeve = 0;
        return _this;
    }
    /**
     * 初始化SDK
     */
    PlatformXJH5.prototype.SDKInitNative = function () {
        var loginParams = {
            pay: {
                success: function () {
                    //支付成功回调
                },
                cancel: function () {
                    //支付失败回调
                },
            }
        };
        this.XJGAME_SDK.config(loginParams);
        GlobalModel.openID = GlobalModel.getUrlParamValue("user_identity");
        SDKManager.ins().NativeCallback(JSON.stringify({
            callType: "init"
        }));
    };
    /**
     * 是否需要登录
     */
    PlatformXJH5.prototype.SDKIsNeedLoginNative = function () {
        return false;
    };
    /**
     * SDK登陆验证参数
     */
    PlatformXJH5.prototype.GetSDKCheckAccountArgs = function () {
        var jsonObj = {
            pf: GlobalModel.pf,
            gameId: GlobalModel.gameId,
            channelId: GlobalModel.channelId,
            gameVersion: GlobalModel.gameVersion,
            shellext: GlobalModel.getUrlParamValue("shellext")
        };
        return JSON.stringify(jsonObj);
    };
    /**
     * SDK创建角色
     */
    PlatformXJH5.prototype.SDKCreateRoleNative = function (params) {
        this.setData(params, true);
    };
    /**
     * SDK进入游戏
     */
    PlatformXJH5.prototype.SDKEnterGameNative = function (params) {
        this.setData(params);
    };
    /**
     * SDK角色升级
     */
    PlatformXJH5.prototype.SDKUserUpgradeNative = function (params) {
        this.setData(params, false, true);
    };
    PlatformXJH5.prototype.setData = function (params, isCreate, isUpLv) {
        if (isCreate === void 0) { isCreate = false; }
        if (isUpLv === void 0) { isUpLv = false; }
        var obj = {};
        if (isCreate) {
            obj = {
                serverId: params.serverId,
                playerName: ActorControl.myName
            };
            this.XJGAME_SDK.reportGameInfo(obj);
        }
        else if (isUpLv) {
            obj = {
                serverId: params.serverId,
                serverName: params.srvname,
                roleId: ActorControl.actorID,
                rolePower: ActorControl.power,
                roleName: CommonFun.getJobName(params.job),
                professionId: params.job,
                nickName: GlobalModel.nickName,
                level: ActorControl.level,
                vip: vipControl.lv
            };
            //10级后再上报 只报一次
            if (ActorControl.level >= 10 && this.baseLeve < 10) {
                this.XJGAME_SDK.reportEvent({
                    type: 6,
                    data: {}
                });
                this.baseLeve = ActorControl.level;
            }
            this.XJGAME_SDK.userUpgrade(obj);
        }
        else {
            obj = {
                serverId: 1,
                newuser: 1,
                userinfo: {
                    serverId: params.serverId,
                    serverName: params.srvname,
                    roleId: ActorControl.actorID,
                    rolePower: ActorControl.power,
                    roleName: CommonFun.getJobName(params.job),
                    professionId: params.job,
                    nickName: GlobalModel.nickName,
                    level: ActorControl.level,
                    vip: vipControl.lv
                }
            };
            this.baseLeve = ActorControl.level;
            this.XJGAME_SDK.reportLoginInfo(obj);
        }
    };
    /**
     * SDK支付
     */
    PlatformXJH5.prototype.SDKPayNative = function (params) {
        var cpPayParams = {
            out_trade_no: params.order,
            product_id: params.itemid,
            total_fee: params.fee * 100,
            body: params.goodsname,
            detail: params.goodsname,
            attach: params.order
        };
        var resultStr = Md5Utils.obj_cntstr(cpPayParams);
        resultStr += SDKConst.XjAppKey;
        cpPayParams['sign'] = Sha1Utils.hex_sha1(resultStr);
        this.XJGAME_SDK.pay(cpPayParams);
    };
    /**
     * SDK登出
     */
    PlatformXJH5.prototype.SDKLogoutNative = function () {
    };
    return PlatformXJH5;
}(PlatformBase));
__reflect(PlatformXJH5.prototype, "PlatformXJH5");
var PlatformXYouH5 = (function (_super) {
    __extends(PlatformXYouH5, _super);
    function PlatformXYouH5() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.XYOUSDK = window["XYOU_SDK"];
        return _this;
    }
    /**
     * 初始化SDK
     */
    PlatformXYouH5.prototype.SDKInitNative = function () {
        this.XYOUSDK.config(SDKConst.XYouH5GameKey, function () {
            console.log("pay suc");
        }, function () {
            console.log("Share suc");
        }, function (data) {
            console.log('state：' + data.state); //state：0未关注，1已关注，2已取消关注
        });
        this.XYOUSDK.getUserInfo(function (data) {
            SDKManager.ins().NativeCallback(JSON.stringify({ callType: "init", data: data }));
        });
    };
    /**
     * 是否需要登录
     */
    PlatformXYouH5.prototype.SDKIsNeedLoginNative = function () {
        return false;
    };
    /**
     * SDK登陆验证参数
     */
    PlatformXYouH5.prototype.GetSDKCheckAccountArgs = function () {
        var jsonObj = {
            pf: GlobalModel.pf,
            gameId: GlobalModel.gameId,
            channelId: GlobalModel.channelId,
            gameVersion: GlobalModel.gameVersion,
            appId: GlobalModel.appid,
            nickname: GlobalModel.getUrlParamValue("nickname"),
            headimg: GlobalModel.getUrlParamValue("headimg"),
            gender: GlobalModel.getUrlParamValue("gender"),
            sign: GlobalModel.getUrlParamValue("sign")
        };
        return JSON.stringify(jsonObj);
    };
    /**
     * SDK创建角色
     */
    PlatformXYouH5.prototype.SDKCreateRoleNative = function (params) {
        this.setData(params, true);
    };
    /**
     * SDK进入游戏
     */
    PlatformXYouH5.prototype.SDKEnterGameNative = function (params) {
        this.setData(params);
    };
    /**
     * SDK角色升级
     */
    PlatformXYouH5.prototype.SDKUserUpgradeNative = function (params) {
        this.setData(params, false, true);
    };
    PlatformXYouH5.prototype.setData = function (params, isCreate, isUpLv) {
        if (isCreate === void 0) { isCreate = false; }
        if (isUpLv === void 0) { isUpLv = false; }
    };
    /**
     * SDK支付
     */
    PlatformXYouH5.prototype.SDKPayNative = function (params) {
        this.XYOUSDK.pay({
            cost: params.fee * 100,
            product_id: params.itemid,
            productName: params.goodsname,
            game_uid: ActorControl.actorID,
            game_orderno: params.order,
            app_ext1: params.order
        });
    };
    /**
     * SDK回调
     */
    PlatformXYouH5.prototype.nativeCallback = function (msg) {
        _super.prototype.nativeCallback.call(this, msg);
        var jsonObj = JSON.parse(msg);
        var callType = jsonObj['callType'];
        if (callType == 'init') {
            var data = jsonObj['data'];
            GlobalModel.openID = data.uid + "";
            GlobalModel.setUrlParamValue("nickname", data.nickname);
            GlobalModel.setUrlParamValue("headimg", encodeURIComponent(data.headimg));
            GlobalModel.setUrlParamValue("gender", data.gender);
            GlobalModel.setUrlParamValue("sign", data.sign);
        }
    };
    return PlatformXYouH5;
}(PlatformBase));
__reflect(PlatformXYouH5.prototype, "PlatformXYouH5");
/**
 * YiYou
 */
var PlatformYiYou = (function (_super) {
    __extends(PlatformYiYou, _super);
    function PlatformYiYou() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * SDK需要登陆
     */
    PlatformYiYou.prototype.SDKIsNeedLoginNative = function () {
        return true;
    };
    /**
     * SDK登陆验证参数
     */
    PlatformYiYou.prototype.GetSDKCheckAccountArgs = function () {
        var jsonObj = {
            pf: GlobalModel.pf,
            gameId: GlobalModel.gameId,
            channelId: GlobalModel.channelId,
            gameVersion: GlobalModel.gameVersion,
            appId: GlobalModel.appid,
            token: GlobalModel.getUrlParamValue("token")
        };
        console.log("YiYou loginParm:", JSON.stringify(jsonObj));
        return JSON.stringify(jsonObj);
    };
    /**
    * SDK创建角色
    */
    PlatformYiYou.prototype.SDKCreateRoleNative = function (params) {
        this.setData(params, true);
    };
    /**
     * SDK进入游戏
     */
    PlatformYiYou.prototype.SDKEnterGameNative = function (params) {
        this.setData(params);
    };
    /**
     * SDK角色升级
     */
    PlatformYiYou.prototype.SDKUserUpgradeNative = function (params) {
        this.setData(params, false, true);
    };
    PlatformYiYou.prototype.setData = function (params, isCreate, isUpLv) {
        if (isCreate === void 0) { isCreate = false; }
        if (isUpLv === void 0) { isUpLv = false; }
        var datatype = "1";
        if (isCreate) {
            datatype = "2";
        }
        if (isUpLv) {
            datatype = "3";
        }
        egret.ExternalInterface.call("SDKsetDataNative", JSON.stringify({
            serverId: params.serverId,
            serverName: params.serverName,
            gameRoleName: params.nickName,
            gameRoleID: ActorControl.actorID,
            gameUserBalance: ActorControl.yb,
            vipLevel: vipControl.lv,
            gameUserLevel: ActorControl.level,
            partyName: unionControl.guildName,
            roleCreateTime: GlobalModel.createAccountTime,
            partyId: unionControl.guildID,
            gameRoleGender: "",
            gameRolePower: ActorControl.power,
            partyRoleId: unionControl.guildID,
            partyRoleName: unionControl.guildName,
            professionId: params.job,
            profession: CommonFun.getJobName(params.job),
            friendlist: LangMgr.getValueByKey('persontNone'),
            isCreate: isCreate,
            isUpLv: isUpLv,
            rolelevelCtime: GlobalModel.createActorTime,
            rolelevelMtime: (Date.now() / 1000).toFixed(0)
        }));
    };
    /**
     * SDK支付
     */
    PlatformYiYou.prototype.SDKPayNative = function (params) {
        egret.ExternalInterface.call("SDKPayNative", JSON.stringify({
            serverName: params.serverName,
            gameRoleName: params.roleName,
            serverId: params.serverId,
            gameRoleID: ActorControl.actorID,
            gameUserBalance: ActorControl.yb,
            vipLevel: vipControl.lv,
            gameUserLevel: ActorControl.level,
            partyName: unionControl.guildName,
            goodsID: params.itemid,
            productName: params.goodsname,
            cpOrderID: params.order,
            count: params.amount,
            amount: params.fee,
            extrasParams: params.order,
            createAccountTime: GlobalModel.createAccountTime,
            createActorTime: GlobalModel.createActorTime
        }));
    };
    /**
     * SDK回调
     */
    PlatformYiYou.prototype.nativeCallback = function (msg) {
        msg = Base64.base64decode(msg);
        _super.prototype.nativeCallback.call(this, msg);
        var jsonObj = JSON.parse(msg);
        var callType = jsonObj['callType'];
        if (callType == 'init') {
            debug.log("SDK init suc");
        }
        else if (callType == 'login') {
            if (jsonObj['sdkcode'] == 0) {
                GlobalModel.openID = jsonObj['userId'] + "";
                GlobalModel.setUrlParamValue("token", jsonObj['token']);
                SceneMgr.ins().runScene(StartGameScene);
            }
            else {
                this.SDKLoginNative();
            }
        }
        else if (callType == 'logout') {
            if (jsonObj['sdkcode'] == 0) {
                window.location.reload();
            }
        }
    };
    return PlatformYiYou;
}(PlatformBase));
__reflect(PlatformYiYou.prototype, "PlatformYiYou");
/**
 * 易接
 */
var PlatformYj = (function (_super) {
    __extends(PlatformYj, _super);
    function PlatformYj() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * SDK需要登陆
     */
    PlatformYj.prototype.SDKIsNeedLoginNative = function () {
        return true;
    };
    /**
     * SDK登陆验证参数
     */
    PlatformYj.prototype.GetSDKCheckAccountArgs = function () {
        var jsonObj = {
            pf: GlobalModel.pf,
            gameId: GlobalModel.gameId,
            gameVersion: GlobalModel.gameVersion,
            appId: GlobalModel.appid,
            channelId: GlobalModel.channelId,
            token: GlobalModel.getUrlParamValue("token")
        };
        console.log("Yj loginParm:", JSON.stringify(jsonObj));
        return JSON.stringify(jsonObj);
    };
    /**
     * SDK创建角色
     */
    PlatformYj.prototype.SDKCreateRoleNative = function (params) {
        this.setData(params, true);
    };
    /**
     * SDK进入游戏
     */
    PlatformYj.prototype.SDKEnterGameNative = function (params) {
        this.setData(params);
    };
    /**
     * SDK角色升级
     */
    PlatformYj.prototype.SDKUserUpgradeNative = function (params) {
        this.setData(params, false, true);
    };
    PlatformYj.prototype.setData = function (params, isCreate, isUpLv) {
        if (isCreate === void 0) { isCreate = false; }
        if (isUpLv === void 0) { isUpLv = false; }
        var datatype = "enterServer";
        if (isCreate) {
            datatype = "createrole";
        }
        if (isUpLv) {
            datatype = "levelup";
        }
        egret.ExternalInterface.call("SDKsetDataNative", JSON.stringify({
            datatype: datatype,
            roleId: ActorControl.actorID,
            roleName: params.nickName,
            roleLevel: ActorControl.level,
            zoneId: params.serverId,
            zoneName: params.serverName,
            balance: ActorControl.yb,
            vip: vipControl.lv,
            partyName: unionControl.guildName,
            roleCTime: GlobalModel.createActorTime,
            roleLevelMTime: (Date.now() / 1000).toFixed(0)
        }));
        if (!isCreate && !isUpLv) {
            egret.ExternalInterface.call("SDKRoleDataNative", JSON.stringify({
                gameRoleID: ActorControl.actorID,
                gameRoleName: params.nickName,
                gameUserLevel: ActorControl.level,
                serverId: params.serverId,
                serverName: params.serverName,
            }));
        }
    };
    /**
     * SDK支付
     */
    PlatformYj.prototype.SDKPayNative = function (params) {
        egret.ExternalInterface.call("SDKPayNative", JSON.stringify({
            unitName: params.goodsname,
            unitPrice: params.fee * 100,
            count: params.amount,
            extrasParams: params.order
        }));
    };
    /**
     * SDK回调
     */
    PlatformYj.prototype.nativeCallback = function (msg) {
        msg = Base64.base64decode(msg);
        _super.prototype.nativeCallback.call(this, msg);
        var jsonObj = JSON.parse(msg);
        var callType = jsonObj['callType'];
        if (callType == 'init') {
            debug.log("SDK init ok");
        }
        else if (callType == 'login') {
            if (jsonObj['sdkcode'] == 0) {
                GlobalModel.appid = jsonObj['appId'];
                GlobalModel.setUrlParamValue("channelId", jsonObj['channelId']);
                GlobalModel.openID = jsonObj['userId'];
                GlobalModel.setUrlParamValue("token", encodeURIComponent(jsonObj['token']));
                SceneMgr.ins().runScene(StartGameScene);
            }
            else {
                this.SDKLoginNative();
            }
        }
        else if (callType == 'logout') {
            if (jsonObj['sdkcode'] == 0) {
                window.location.reload();
            }
        }
    };
    return PlatformYj;
}(PlatformBase));
__reflect(PlatformYj.prototype, "PlatformYj");
/**
 * 游趣
 */
var PlatformYouQuH5 = (function (_super) {
    __extends(PlatformYouQuH5, _super);
    function PlatformYouQuH5() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.H5And = window["h5And"];
        return _this;
    }
    /**
     * 初始化SDK
     */
    PlatformYouQuH5.prototype.SDKInitNative = function () {
        GlobalModel.openID = GlobalModel.getUrlParamValue("uid");
    };
    /**
     * SDK需要登陆
     */
    PlatformYouQuH5.prototype.SDKIsNeedLoginNative = function () {
        return false;
    };
    /**
     * SDK登陆验证参数
     */
    PlatformYouQuH5.prototype.GetSDKCheckAccountArgs = function () {
        var jsonObj = {
            pf: GlobalModel.pf,
            gameId: GlobalModel.gameId,
            channelId: GlobalModel.channelId,
            gameVersion: GlobalModel.gameVersion,
            appId: GlobalModel.appid,
            uname: GlobalModel.getUrlParamValue("uname"),
            os: GlobalModel.getUrlParamValue("os"),
            time: GlobalModel.getUrlParamValue("time"),
            switchUserBtn: GlobalModel.getUrlParamValue("switchUserBtn"),
            logotype: GlobalModel.getUrlParamValue("logotype"),
            logo_url: GlobalModel.getUrlParamValue("logo_url"),
            load_bg_type: GlobalModel.getUrlParamValue("load_bg_type"),
            load_bg_url: GlobalModel.getUrlParamValue("load_bg_url"),
            login_bg_type: GlobalModel.getUrlParamValue("uname"),
            login_bg_url: GlobalModel.getUrlParamValue("uname"),
            sign: GlobalModel.getUrlParamValue("sign")
        };
        console.log("YouQu loginParm:", JSON.stringify(jsonObj));
        return JSON.stringify(jsonObj);
    };
    /**
     * SDK创建角色
     */
    PlatformYouQuH5.prototype.SDKCreateRoleNative = function (params) {
        this.setData(params, true);
    };
    /**
     * SDK进入游戏
     */
    PlatformYouQuH5.prototype.SDKEnterGameNative = function (params) {
        this.setData(params);
    };
    /**
     * SDK角色升级
     */
    PlatformYouQuH5.prototype.SDKUserUpgradeNative = function (params) {
        this.setData(params, false, true);
    };
    PlatformYouQuH5.prototype.setData = function (params, isCreate, isUpLv) {
        if (isCreate === void 0) { isCreate = false; }
        if (isUpLv === void 0) { isUpLv = false; }
        var datatype = 3;
        if (isCreate) {
            datatype = 2;
        }
        if (isUpLv) {
            datatype = 4;
        }
        this.H5And.reportUserInfo(JSON.stringify({
            dataType: datatype,
            appid: GlobalModel.appid,
            serverID: params.serverId,
            serverName: params.serverName,
            userId: GlobalModel.openID,
            roleID: ActorControl.actorID,
            roleName: params.nickName,
            roleLevel: ActorControl.level,
            moneyNum: ActorControl.yb
        }));
    };
    /**
     * SDK支付
     */
    PlatformYouQuH5.prototype.SDKPayNative = function (params) {
        this.H5And.pay(JSON.stringify({
            buyNum: 1,
            serverId: params.serverId,
            serverName: params.serverName,
            roleId: ActorControl.actorID,
            roleName: params.roleName,
            roleLevel: ActorControl.level,
            vip: vipControl.lv,
            price: params.fee,
            productId: params.itemid,
            productName: params.goodsname,
            productDesc: params.goodsname,
            extension: params.order
        }));
    };
    return PlatformYouQuH5;
}(PlatformBase));
__reflect(PlatformYouQuH5.prototype, "PlatformYouQuH5");
/**
 * 游趣IOS
 */
var PlatformYouQuIOS = (function (_super) {
    __extends(PlatformYouQuIOS, _super);
    function PlatformYouQuIOS() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * SDK需要登陆
     */
    PlatformYouQuIOS.prototype.SDKIsNeedLoginNative = function () {
        return true;
    };
    /**
     * SDK登陆验证参数
     */
    PlatformYouQuIOS.prototype.GetSDKCheckAccountArgs = function () {
        var jsonObj = {
            pf: GlobalModel.pf,
            gameId: GlobalModel.gameId,
            channelId: GlobalModel.channelId,
            gameVersion: GlobalModel.gameVersion,
            appId: GlobalModel.appid,
            loginSign: GlobalModel.getUrlParamValue("loginSign")
        };
        console.log("loginParm:", JSON.stringify(jsonObj));
        return JSON.stringify(jsonObj);
    };
    /**
    * SDK创建角色
    */
    PlatformYouQuIOS.prototype.SDKCreateRoleNative = function (params) {
        this.setData(params, true);
    };
    /**
     * SDK进入游戏
     */
    PlatformYouQuIOS.prototype.SDKEnterGameNative = function (params) {
        this.setData(params);
    };
    /**
     * SDK角色升级
     */
    PlatformYouQuIOS.prototype.SDKUserUpgradeNative = function (params) {
        this.setData(params, false, true);
    };
    PlatformYouQuIOS.prototype.setData = function (params, isCreate, isUpLv) {
        if (isCreate === void 0) { isCreate = false; }
        if (isUpLv === void 0) { isUpLv = false; }
        var datatype = 3;
        if (isCreate) {
            datatype = 2;
        }
        if (isUpLv) {
            datatype = 4;
        }
        egret.ExternalInterface.call("SDKsetDataNative", JSON.stringify({
            gameRoleName: params.nickName,
            serverId: params.serverId,
            serverName: params.serverName,
            gameUserLevel: ActorControl.level,
            openID: GlobalModel.openID,
            gameRoleID: ActorControl.actorID,
            gold: ActorControl.gold,
            dataType: datatype //创建角色：2 进入游戏：3 等级提升：4
        }));
    };
    /**
     * SDK下单参数
     */
    PlatformYouQuIOS.prototype.GetMakeOrderSdkArgs = function (params) {
        return JSON.stringify({
            paytype: GlobalModel.isAuditState ? "ios" : "home"
        });
    };
    /**
     * SDK支付
     */
    PlatformYouQuIOS.prototype.SDKPayNative = function (params) {
        egret.ExternalInterface.call("SDKPayNative", JSON.stringify({
            cpOrderID: params.order,
            amount: params.fee,
            serverId: params.serverId,
            serverName: params.serverName,
            gameRoleName: params.roleName,
            gameRoleID: ActorControl.actorID,
            goodsID: this.GetChannelItemId(params.itemid),
            productName: params.goodsname //商品名称，必填
        }));
    };
    /**
     * 渠道计费点
     */
    PlatformYouQuIOS.prototype.GetChannelItemId = function (itemid) {
        //IOS内购
        if (GlobalModel.isAuditState) {
            itemid = SDKConst.IosProductIds[itemid];
        }
        return itemid;
    };
    /**
     * SDK回调
     */
    PlatformYouQuIOS.prototype.nativeCallback = function (msg) {
        msg = Base64.base64decode(msg);
        _super.prototype.nativeCallback.call(this, msg);
        var jsonObj = JSON.parse(msg);
        var callType = jsonObj['callType'];
        if (callType == 'init') {
            debug.log("SDK init suc");
        }
        else if (callType == 'login') {
            if (jsonObj['sdkcode'] == 0) {
                GlobalModel.openID = jsonObj['userId'];
                GlobalModel.setUrlParamValue("loginSign", jsonObj['loginSign']);
                SceneMgr.ins().runScene(StartGameScene);
            }
            else {
                this.SDKLoginNative();
            }
        }
        else if (callType == 'logout') {
            if (jsonObj['sdkcode'] == 0) {
                window.location.reload();
            }
        }
    };
    return PlatformYouQuIOS;
}(PlatformBase));
__reflect(PlatformYouQuIOS.prototype, "PlatformYouQuIOS");
var PlatformYxH5 = (function (_super) {
    __extends(PlatformYxH5, _super);
    function PlatformYxH5() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.YxSDK = window["yxsdk"];
        return _this;
    }
    /**
     * 初始化SDK
     */
    PlatformYxH5.prototype.SDKInitNative = function () {
        GlobalModel.openID = GlobalModel.getUrlParamValue("uid");
    };
    /**
     * 是否需要登录
     */
    PlatformYxH5.prototype.SDKIsNeedLoginNative = function () {
        return false;
    };
    /**
     * SDK登陆验证参数
     */
    PlatformYxH5.prototype.GetSDKCheckAccountArgs = function () {
        var jsonObj = {
            pf: GlobalModel.pf,
            gameId: GlobalModel.gameId,
            channelId: GlobalModel.channelId,
            gameVersion: GlobalModel.gameVersion,
            appId: GlobalModel.appid,
            uname: GlobalModel.getUrlParamValue("uname"),
            os: GlobalModel.getUrlParamValue("os"),
            time: GlobalModel.getUrlParamValue("time"),
            switchUserBtn: GlobalModel.getUrlParamValue("switchUserBtn"),
            logotype: GlobalModel.getUrlParamValue("logotype"),
            logo_url: GlobalModel.getUrlParamValue("logo_url"),
            load_bg_type: GlobalModel.getUrlParamValue("load_bg_type"),
            load_bg_url: GlobalModel.getUrlParamValue("load_bg_url"),
            login_bg_type: GlobalModel.getUrlParamValue("uname"),
            login_bg_url: GlobalModel.getUrlParamValue("uname"),
            sign: GlobalModel.getUrlParamValue("sign")
        };
        console.log("yx loginParm:", JSON.stringify(jsonObj));
        return JSON.stringify(jsonObj);
    };
    /**
     * SDK创建角色
     */
    PlatformYxH5.prototype.SDKCreateRoleNative = function (params) {
        this.setData(params, true, null, 2);
    };
    /**
     * SDK进入游戏
     */
    PlatformYxH5.prototype.SDKEnterGameNative = function (params) {
        this.setData(params, null, null, 3);
    };
    /**
     * SDK角色升级
     */
    PlatformYxH5.prototype.SDKUserUpgradeNative = function (params) {
        this.setData(params, false, true, 4);
    };
    /**
     * 上报数据类型
     * dataType 上报类型,1(选择服务器)，2(创建角色)，3(进入游戏)、4(等级提升)、5(退出游戏)
     */
    PlatformYxH5.prototype.setData = function (params, isCreate, isUpLv, dataType) {
        if (isCreate === void 0) { isCreate = false; }
        if (isUpLv === void 0) { isUpLv = false; }
        var roleInfo = {
            dataType: dataType,
            appid: GlobalModel.appid,
            serverID: params.serverId,
            serverName: params.serverName,
            userId: GlobalModel.openID,
            roleID: ActorControl.actorID,
            roleName: ActorControl.myName,
            roleLevel: ActorControl.level,
            moneyNum: ActorControl.yb,
        };
        var roleInfoJson = JSON.stringify(roleInfo);
        this.YxSDK.reportUserInfo(roleInfoJson);
        debug.log("YxH5 submit info", roleInfo);
    };
    /**
     * SDK支付
     */
    PlatformYxH5.prototype.SDKPayNative = function (params) {
        var orderInfo = {
            buyNum: 1,
            serverId: params.serverId + "",
            serverName: params.serverName,
            roleId: ActorControl.actorID,
            roleName: ActorControl.myName,
            roleLevel: ActorControl.level,
            vip: vipControl.lv,
            price: params.fee,
            productId: params.itemid,
            productName: params.goodsname,
            productDesc: params.goodsname,
            extension: params.order,
        };
        var orderInfoJson = JSON.stringify(orderInfo);
        this.YxSDK.pay(orderInfoJson);
    };
    return PlatformYxH5;
}(PlatformBase));
__reflect(PlatformYxH5.prototype, "PlatformYxH5");
/**
 * 应用宝
 */
var PlatformYyb = (function (_super) {
    __extends(PlatformYyb, _super);
    function PlatformYyb() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.loginComplete = false;
        return _this;
    }
    /**
     * SDK需要登陆
     */
    PlatformYyb.prototype.SDKIsNeedLoginNative = function () {
        return true;
    };
    /**
     * SDK登陆
     */
    PlatformYyb.prototype.SDKLoginNative = function (args) {
        if (args != undefined) {
            egret.ExternalInterface.call("SDKLoginNative", JSON.stringify(args));
        }
    };
    /**
     * SDK自定义登陆界面
     */
    PlatformYyb.prototype.SDKHasLoginScene = function () {
        return YYBGameScene;
    };
    /**
     * SDK登陆验证参数
     */
    PlatformYyb.prototype.GetSDKCheckAccountArgs = function () {
        var jsonObj = {
            pf: GlobalModel.pf,
            gameId: GlobalModel.gameId,
            channelId: GlobalModel.channelId,
            gameVersion: GlobalModel.gameVersion,
            appId: GlobalModel.appid,
            serverid: GlobalModel.srvid,
            platform: GlobalModel.getUrlParamValue("platform"),
            reg_channel: GlobalModel.getUrlParamValue("reg_channel"),
            user_type: GlobalModel.getUrlParamValue("user_type"),
            login_type: GlobalModel.getUrlParamValue("login_type"),
            yyb_pf: GlobalModel.getUrlParamValue("yyb_pf"),
            pf_key: GlobalModel.getUrlParamValue("pf_key"),
            access_token: GlobalModel.getUrlParamValue("access_token"),
            pay_token: GlobalModel.getUrlParamValue("pay_token"),
            refresh_token: GlobalModel.getUrlParamValue("refresh_token")
        };
        console.log("loginParm:", JSON.stringify(jsonObj));
        return JSON.stringify(jsonObj);
    };
    /**
     * SDK支付
     */
    PlatformYyb.prototype.SDKPayNative = function (params) {
        egret.ExternalInterface.call("SDKPayNative", JSON.stringify({
            serverName: params.serverName,
            gameRoleName: params.roleName,
            serverId: SDKConst.YYBZoneId + Number(params.serverId),
            gameRoleID: ActorControl.actorID,
            gameUserBalance: ActorControl.yb,
            vipLevel: vipControl.lv,
            gameUserLevel: ActorControl.level,
            partyName: unionControl.guildName,
            goodsID: params.itemid,
            productName: params.goodsname,
            cpOrderID: params.order,
            count: params.amount,
            amount: params.fee * SDKConst.YYBMoneyRate,
            extrasParams: params.order,
            createAccountTime: GlobalModel.createAccountTime,
            createActorTime: GlobalModel.createActorTime
        }));
    };
    /**
     * SDK回调
     */
    PlatformYyb.prototype.nativeCallback = function (msg) {
        msg = Base64.base64decode(msg);
        _super.prototype.nativeCallback.call(this, msg);
        var jsonObj = JSON.parse(msg);
        var callType = jsonObj['callType'];
        if (callType == 'init') {
            debug.log("SDK init suc");
            GlobalModel.setUrlParamValue("appver", jsonObj['appver']);
        }
        else if (callType == 'login') {
            if (jsonObj['sdkcode'] == 0) {
                GlobalModel.openID = jsonObj['open_id'];
                GlobalModel.setUrlParamValue("platform", jsonObj['platform']);
                GlobalModel.setUrlParamValue("reg_channel", jsonObj['reg_channel']);
                GlobalModel.setUrlParamValue("user_type", jsonObj['user_type']);
                GlobalModel.setUrlParamValue("login_type", jsonObj['login_type']);
                GlobalModel.setUrlParamValue("yyb_pf", jsonObj['pf']);
                GlobalModel.setUrlParamValue("pf_key", jsonObj['pf_key']);
                GlobalModel.setUrlParamValue("access_token", jsonObj['access_token']);
                GlobalModel.setUrlParamValue("pay_token", jsonObj['pay_token']);
                GlobalModel.setUrlParamValue("refresh_token", jsonObj['refresh_token']);
                if (!this.loginComplete) {
                    this.loginComplete = true;
                    SceneMgr.ins().runScene(StartGameScene);
                }
            }
            else if (jsonObj['sdkcode'] == -2) {
                debug.log("aoto login fail");
            }
            else {
                debug.log("login fail");
            }
        }
        else if (callType == 'refreshToken') {
            GlobalModel.setUrlParamValue("access_token", jsonObj['access_token']);
            GlobalModel.setUrlParamValue("pay_token", jsonObj['pay_token']);
            GlobalModel.setUrlParamValue("refresh_token", jsonObj['refresh_token']);
        }
        else if (callType == 'logout') {
            if (jsonObj['sdkcode'] == 0) {
                window.location.reload();
            }
        }
        else if (callType == 'switchAccount') {
            if (jsonObj['sdkcode'] == 0) {
                window.location.reload();
            }
        }
        else if (callType == 'pay') {
            if (jsonObj['sdkcode'] == 0) {
                var obj = {
                    orderid: jsonObj['ysdkExtInfo'],
                    platform: jsonObj['platform'],
                    ts: jsonObj['ts'] || Date.now(),
                    openid: GlobalModel.openID,
                    pf: GlobalModel.getUrlParamValue("yyb_pf"),
                    openkey: jsonObj['platform'] == 1 ? GlobalModel.getUrlParamValue("pay_token") : GlobalModel.getUrlParamValue("access_token"),
                    pfkey: GlobalModel.getUrlParamValue("pf_key"),
                    zoneid: SDKConst.YYBZoneId + Number(GlobalModel.srvid),
                    saveValue: jsonObj['realSaveNum'],
                    access_token: GlobalModel.getUrlParamValue("pay_token"),
                    pay_token: GlobalModel.getUrlParamValue("pay_token"),
                    refresh_token: GlobalModel.getUrlParamValue("pay_token")
                };
                var args = Md5Utils.obj_md5_args(obj, PHPConfig.VERIFY_KEY, true);
                console.log("PayCallback:", GlobalModel.sdkDomain + "/yyb/" + GlobalModel.gameId + "/sdkpaycallback", args);
                ReportYybPayData.getIns().reportUrl(GlobalModel.sdkDomain + "/yyb/" + GlobalModel.gameId + "/sdkpaycallback", args);
            }
        }
        else if (callType == "screenshots") {
            //截图功能
            var render = new egret.RenderTexture();
            render.drawToTexture(Main.ins().stage, new egret.Rectangle(window.innerWidth / 2, 0, window.innerWidth, window.innerHeight));
            var base64Str = render.toDataURL("image/png");
            egret.ExternalInterface.call("Screenshots", JSON.stringify({
                data: base64Str
            }));
        }
    };
    /**
     * 打开应用宝平台ICO特定的功能界面
     */
    PlatformYyb.prototype.SDKShowImmersiveIconNative = function (params) {
        egret.ExternalInterface.call("SDKShowImmersiveIcon", params);
    };
    /**
     * 显示切换账号
     */
    PlatformYyb.prototype.SDKShowLogout = function () {
        return true;
    };
    /**
     * 游戏内微信分享图片
     */
    PlatformYyb.prototype.SDKShowShare = function (params) {
        if (!params)
            return;
        var img = params[0]; //图片显示对象
        var mTargetScene = params[1]; //0：分享到微信好友 1：分享到朋友圈
        var base64 = CommonUtils.getImgBase64Data(img);
        var shareData = { base64Data: "" + base64, mTargetScene: mTargetScene };
        egret.ExternalInterface.call('SDKToAppShare', JSON.stringify(shareData));
    };
    return PlatformYyb;
}(PlatformBase));
__reflect(PlatformYyb.prototype, "PlatformYyb");
var ReportYybPayData = (function () {
    function ReportYybPayData() {
        this.isComplete = false;
        this.httpRequest = new egret.HttpRequest();
        this.httpRequestUrl = [];
    }
    ReportYybPayData.getIns = function () {
        this._ins = this._ins || new ReportYybPayData();
        return this._ins;
    };
    ReportYybPayData.prototype.reportUrl = function (url, params, method) {
        var vo = new HrInfo();
        vo.url = url;
        vo.params = params;
        vo.method = method;
        vo.sendCount = 3;
        this.httpRequestUrl.push(vo);
        this.sendReportUrl();
    };
    ReportYybPayData.prototype.sendReportUrl = function () {
        if (this.isComplete == false && this.httpRequestUrl.length > 0) {
            var url = this.httpRequestUrl[0].url;
            var params = this.httpRequestUrl[0].params;
            var method = this.httpRequestUrl[0].method;
            this.httpRequest.setRequestHeader("Content-Type", "application/x-www-form-urlencoded;charset=UTF-8");
            if (method == egret.HttpMethod.POST) {
                this.httpRequest.open(url, egret.HttpMethod.POST);
                this.httpRequest.send(params);
            }
            else {
                this.httpRequest.open(url + "?" + params, egret.HttpMethod.GET);
                this.httpRequest.send();
            }
            this.isComplete = true;
            this.httpRequest.addEventListener(egret.Event.COMPLETE, this.onGetComplete, this);
            this.httpRequest.addEventListener(egret.IOErrorEvent.IO_ERROR, this.onGetIOError, this);
        }
    };
    ReportYybPayData.prototype.onGetComplete = function (event) {
        console.log("state:", event.currentTarget.response);
        if (event.currentTarget.response == 1) {
            this.isComplete = false;
            this.httpRequestUrl.shift();
            this.sendReportUrl();
        }
        else {
            this.onGetIOError(null);
        }
    };
    ReportYybPayData.prototype.onGetIOError = function (event) {
        this.isComplete = false;
        this.httpRequestUrl[0].sendCount--;
        if (this.httpRequestUrl[0].sendCount > 0) {
            this.sendReportUrl();
        }
    };
    return ReportYybPayData;
}());
__reflect(ReportYybPayData.prototype, "ReportYybPayData");
var PlatformZjH5 = (function (_super) {
    __extends(PlatformZjH5, _super);
    function PlatformZjH5() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.SbPulSdk = window["SbPulSdk"];
        return _this;
    }
    /**
     * 初始化SDK
     */
    PlatformZjH5.prototype.SDKInitNative = function () {
        var loginParams = {
            qqesuid: GlobalModel.getUrlParamValue("qqesuid"),
            channelid: GlobalModel.getUrlParamValue("channelid"),
            channeluid: GlobalModel.getUrlParamValue("channeluid"),
            qqesnickname: GlobalModel.getUrlParamValue("qqesnickname"),
            qqesavatar: GlobalModel.getUrlParamValue("qqesavatar"),
            cpgameid: GlobalModel.getUrlParamValue("cpgameid"),
            ext: GlobalModel.GetSearchParamByName("ext"),
            qqestimestamp: GlobalModel.getUrlParamValue("qqestimestamp"),
            sign: GlobalModel.getUrlParamValue("sign")
        };
        this.SbPulSdk.init(loginParams, function (channelSdk) {
            GlobalModel.openID = GlobalModel.getUrlParamValue("qqesuid");
            SDKManager.ins().NativeCallback(JSON.stringify({ callType: "init" }));
        });
        this.GetUserLzInfo();
    };
    /**
     * 是否需要登录
     */
    PlatformZjH5.prototype.SDKIsNeedLoginNative = function () {
        return false;
    };
    /**
     * SDK登陆验证参数
     */
    PlatformZjH5.prototype.GetSDKCheckAccountArgs = function () {
        var jsonObj = {
            pf: GlobalModel.pf,
            gameId: GlobalModel.gameId,
            channelId: GlobalModel.channelId,
            gameVersion: GlobalModel.gameVersion,
            qqesuid: GlobalModel.getUrlParamValue("qqesuid"),
            channelid: GlobalModel.getUrlParamValue("channelid"),
            channeluid: GlobalModel.getUrlParamValue("channeluid"),
            qqesnickname: GlobalModel.getUrlParamValue("qqesnickname"),
            qqesavatar: GlobalModel.getUrlParamValue("qqesavatar"),
            cpgameid: GlobalModel.getUrlParamValue("cpgameid"),
            ext: GlobalModel.GetSearchParamByName("ext"),
            qqestimestamp: GlobalModel.getUrlParamValue("qqestimestamp"),
            sign: GlobalModel.getUrlParamValue("sign"),
            shellext: GlobalModel.getUrlParamValue("shellext")
        };
        return JSON.stringify(jsonObj);
    };
    /**
     * SDK创建角色
     */
    PlatformZjH5.prototype.SDKCreateRoleNative = function (params) {
        var roleInfo = {
            qqesuid: GlobalModel.getUrlParamValue("qqesuid"),
            channelid: GlobalModel.getUrlParamValue("channelid"),
            channeluid: GlobalModel.getUrlParamValue("channeluid"),
            serverId: params.serverId,
            serverName: params.serverName,
            roleName: CommonFun.getJobName(params.job),
            nickName: params.nickName,
            cpgameid: GlobalModel.getUrlParamValue("cpgameid") //cp游戏id
        };
        this.SbPulSdk.createRole(roleInfo);
    };
    /**
     * SDK进入游戏
     */
    PlatformZjH5.prototype.SDKEnterGameNative = function (params) {
        var roleInfo = {
            cpgameid: GlobalModel.getUrlParamValue("cpgameid"),
            qqesuid: GlobalModel.getUrlParamValue("qqesuid"),
            channelid: GlobalModel.getUrlParamValue("channelid"),
            channeluid: GlobalModel.getUrlParamValue("channeluid"),
            serverId: params.serverId,
            serverName: params.serverName,
            roleName: CommonFun.getJobName(params.job),
            nickName: params.nickName,
            level: params.zsLevel * 1000 + params.level,
            vip: params.vip //用户vip等级
        };
        this.SbPulSdk.beginGame(roleInfo);
    };
    /**
     * SDK角色升级
     */
    PlatformZjH5.prototype.SDKUserUpgradeNative = function (params) {
        var roleInfo = {
            cpgameid: GlobalModel.getUrlParamValue("cpgameid"),
            qqesuid: GlobalModel.getUrlParamValue("qqesuid"),
            channelid: GlobalModel.getUrlParamValue("channelid"),
            channeluid: GlobalModel.getUrlParamValue("channeluid"),
            serverId: params.serverId,
            serverName: params.serverName,
            roleName: CommonFun.getJobName(params.job),
            roleId: params.job,
            nickName: params.nickName,
            level: params.zsLevel * 1000 + params.level,
            vip: params.vip //用户vip等级
        };
        this.SbPulSdk.userUpgrade(roleInfo);
    };
    /**
     * SDK支付
     */
    PlatformZjH5.prototype.SDKPayNative = function (params) {
        var cpPayParams = {
            order: params.order,
            cpgameid: GlobalModel.getUrlParamValue("cpgameid"),
            qqesuid: GlobalModel.getUrlParamValue("qqesuid"),
            channelid: GlobalModel.getUrlParamValue("channelid"),
            channeluid: GlobalModel.getUrlParamValue("channeluid"),
            cpguid: GlobalModel.getUrlParamValue("guid"),
            goodsname: params.goodsname,
            fee: params.fee,
            serverID: params.serverId,
            serverName: params.serverName,
            roleName: params.roleName,
            roleId: ActorControl.actorID,
            ext: GlobalModel.GetSearchParamByName("ext"),
            timestamp: Date.now() //请求时间戳(用来防止重放攻击)
        };
        cpPayParams['sign'] = Md5Utils.obj_md5(cpPayParams, GlobalModel.getUrlParamValue("zjcode"), ["serverID", "serverName", "roleName", "roleId"]);
        this.SbPulSdk.pay(cpPayParams);
    };
    /**
     * SDK埋点
     */
    PlatformZjH5.prototype.SDKSetDataNative = function (params) {
        this.SbPulSdk.buryingPoint({
            roleName: params.roleName,
            nickName: params.nickName,
            serverId: params.serverId,
            level: params.level,
            pointId: params.pointId,
            pointName: params.pointName,
            roleId: ActorControl.actorID,
            serverName: params.serverName,
            vip: params.vip,
            cpgameid: params.cpgameid,
            qqesuid: params.qqesuid,
            channelid: params.channelid,
            channeluid: params.channeluid //渠道用户id
        });
    };
    /**
     * SDK登出
     */
    PlatformZjH5.prototype.SDKLogoutNative = function () {
        this.SbPulSdk.loginout(function () {
            debug.log("exit suc");
        });
    };
    /**
     * 调用开通QQ蓝钻
     */
    PlatformZjH5.prototype.SDKTapExecute = function () {
        var _this = this;
        if (!GlobalModel.IsQQHall)
            return;
        this.SbPulSdk.openGameVip(function () {
            console.log("close Win");
            _this.GetUserLzInfo();
        });
    };
    /**
     * 调用PHP后台获取玩家QQ蓝钻信息
     */
    PlatformZjH5.prototype.GetUserLzInfo = function () {
        if (!GlobalModel.IsQQHall)
            return;
        var extstr = GlobalModel.getUrlParamValue("ext");
        if (extstr == '')
            return;
        var ext = JSON.parse(extstr);
        var obj = {
            channeluid: GlobalModel.getUrlParamValue("channeluid"),
            pf: ext.pf,
            openkey: ext.openkey
        };
        var args = Md5Utils.obj_md5_args(obj);
        PHPConfig.requestPhpData(PHPConfig.SET_LANZHUAN_INFO, args, function (event) {
            var responseJson = JSON.parse(event.currentTarget.response);
            if (responseJson["ret"] != 0) {
                console.log("player info error 1!!!");
            }
        }, this, function (event) {
            console.log("player info error 2!!!");
        });
    };
    return PlatformZjH5;
}(PlatformBase));
__reflect(PlatformZjH5.prototype, "PlatformZjH5");
var PlatformZSH5 = (function (_super) {
    __extends(PlatformZSH5, _super);
    function PlatformZSH5() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.BZ_SDK = window["BZ_SDK"];
        return _this;
    }
    /**
     * 初始化SDK
     */
    PlatformZSH5.prototype.SDKInitNative = function () {
        // 初始化需要传的参数，参数由我方提供
        var params = {
            gid: 10021,
            sub_gid: 10076,
            opr_cid: 10001,
            adv_cid: 101,
            pkg_id: 0,
            sdk_ver: '1.0.0' // SDK版本
        };
        this.BZ_SDK.init(params, function (data, status) {
            // 初始化成功后，会调用此函数
            console.log('bzmessage:', data.msg, 'bzstatus:', status);
            SDKManager.ins().NativeCallback(JSON.stringify({
                callType: "init",
                sdkcode: 0,
                data: data
            }));
        });
    };
    /**
     * 是否需要登录
     */
    PlatformZSH5.prototype.SDKIsNeedLoginNative = function () {
        return true;
    };
    /**
     * SDK登陆验证参数
     */
    PlatformZSH5.prototype.GetSDKCheckAccountArgs = function () {
        var jsonObj = {
            pf: GlobalModel.pf,
            gameId: GlobalModel.gameId,
            channelId: GlobalModel.channelId,
            gameVersion: GlobalModel.gameVersion,
            appId: GlobalModel.appid,
            uid: GlobalModel.openID,
            token: GlobalModel.getUrlParamValue("token")
        };
        return JSON.stringify(jsonObj);
    };
    /**
     * 登录
     */
    PlatformZSH5.prototype.SDKLoginNative = function () {
    };
    /**
     * SDK创建角色
     */
    PlatformZSH5.prototype.SDKCreateRoleNative = function (params) {
        this.setData(params, true);
    };
    /**
     * SDK进入游戏
     */
    PlatformZSH5.prototype.SDKEnterGameNative = function (params) {
        this.setData(params);
    };
    /**
     * SDK角色升级
     */
    PlatformZSH5.prototype.SDKUserUpgradeNative = function (params) {
        this.setData(params, false, true);
    };
    PlatformZSH5.prototype.setData = function (params, isCreate, isUpLv) {
        if (isCreate === void 0) { isCreate = false; }
        if (isUpLv === void 0) { isUpLv = false; }
        // 角色上报需要传的参数
        var obj = {
            rtype: isCreate ? "create" : (isUpLv ? "lvup" : "login"),
            cp_server_id: params.serverId,
            cp_server_name: params.serverName,
            role_id: ActorControl.actorID,
            role_name: ActorControl.myName,
            level: ActorControl.level,
            vip_lv: vipControl.lv,
            gender: "",
            part_id: unionControl.guildID,
            part_name: unionControl.guildName,
            part_leader_id: '',
            part_leader_name: '',
            power: (ActorControl.power == 0 ? params.power : ActorControl.power),
            profession_id: params.job,
            profession_name: CommonFun.getJobName(params.job),
            gold: ActorControl.yb,
            coin: ActorControl.gold,
            create_ts: GlobalModel.createActorTime
        };
        this.BZ_SDK.reportLog(obj);
    };
    /**
     * SDK支付
     */
    PlatformZSH5.prototype.SDKPayNative = function (params) {
        // 支付需要的参数
        var obj = {
            product_id: params.itemid,
            product_name: params.goodsname,
            product_desc: params.goodsname,
            pay_money: params.fee,
            cp_order_id: params.order,
            cp_server_id: params.serverId,
            cp_server_name: params.serverName,
            role_id: ActorControl.actorID,
            role_name: ActorControl.myName,
            level: ActorControl.level,
            vip_lv: vipControl.lv,
            gender: "",
            gold: ActorControl.yb,
            coin: ActorControl.gold,
            ext: params.order
        };
        this.BZ_SDK.genOrder(obj);
    };
    /**
     * SDK登出
     */
    PlatformZSH5.prototype.SDKLogoutNative = function () {
        SDKManager.ins().NativeCallback(JSON.stringify({
            callType: "logout",
            sdkcode: 0,
        }));
    };
    /**
     * 显示切换账号
     */
    PlatformZSH5.prototype.SDKShowLogout = function () {
        return true;
    };
    /**
     * SDK回调
     */
    PlatformZSH5.prototype.nativeCallback = function (msg) {
        _super.prototype.nativeCallback.call(this, msg);
        var jsonObj = JSON.parse(msg);
        var callType = jsonObj['callType'];
        console.log("SDK callback:", JSON.stringify(jsonObj));
        if (callType == 'init') {
            if (jsonObj['sdkcode'] == 0) {
                // 确保初始化完成后再调用登录方法
                this.BZ_SDK.login(function (data, status) {
                    // 登录后，会调用此函数。成功会返回 {token: "", uname: "", uid: ""} 的对象
                    // 注：切换账号后，登录成功也会调用此函数
                    console.log('data:', data, 'status:', status);
                    SDKManager.ins().NativeCallback(JSON.stringify({
                        callType: "login",
                        sdkcode: 0,
                        data: data
                    }));
                });
            }
        }
        else if (callType == 'login') {
            if (jsonObj['sdkcode'] == 0) {
                var data = jsonObj['data'];
                GlobalModel.openID = data.uid + "";
                GlobalModel.setUrlParamValue("token", data.token);
                GlobalModel.setUrlParamValue("uname", data.uname);
                SceneMgr.ins().runScene(StartGameScene);
            }
            else {
                //失败就重新加载
                window.location.reload();
            }
        }
        else if (callType == 'logout') {
            if (jsonObj['sdkcode'] == 0) {
                // 切换账号后
                this.BZ_SDK.switchAccount();
                window.location.reload();
            }
        }
    };
    return PlatformZSH5;
}(PlatformBase));
__reflect(PlatformZSH5.prototype, "PlatformZSH5");
var PlatformZSWDH5 = (function (_super) {
    __extends(PlatformZSWDH5, _super);
    function PlatformZSWDH5() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.BZ_SDK = window["BZ_SDK"];
        return _this;
    }
    /**
     * 初始化SDK
     */
    PlatformZSWDH5.prototype.SDKInitNative = function () {
    };
    /**
     * 是否需要登录
     */
    PlatformZSWDH5.prototype.SDKIsNeedLoginNative = function () {
        return true;
    };
    /**
     * SDK登陆验证参数
     */
    PlatformZSWDH5.prototype.GetSDKCheckAccountArgs = function () {
        var jsonObj = {
            pf: GlobalModel.pf,
            gameId: GlobalModel.gameId,
            channelId: GlobalModel.channelId,
            gameVersion: GlobalModel.gameVersion,
            appId: GlobalModel.appid,
            uid: GlobalModel.openID,
            token: GlobalModel.getUrlParamValue("token")
        };
        return JSON.stringify(jsonObj);
    };
    /**
     * 登录
     */
    PlatformZSWDH5.prototype.SDKLoginNative = function () {
        var params = {
            gid: 10021,
            sub_gid: 10076,
            opr_cid: 10001,
            adv_cid: 101,
            pkg_id: 0,
            sdk_ver: '1.0.0' // SDK版本
        };
        this.BZ_SDK.init(params, function (data, status) {
            // 初始化成功后，会调用此函数
            console.log('bzmessage:', data.msg, 'bzstatus:', status);
            SDKManager.ins().NativeCallback(JSON.stringify({
                callType: "init",
                sdkcode: 0,
                data: data
            }));
        });
    };
    /**
     * SDK创建角色
     */
    PlatformZSWDH5.prototype.SDKCreateRoleNative = function (params) {
        this.setData(params, true);
    };
    /**
     * SDK进入游戏
     */
    PlatformZSWDH5.prototype.SDKEnterGameNative = function (params) {
        this.setData(params);
    };
    /**
     * SDK角色升级
     */
    PlatformZSWDH5.prototype.SDKUserUpgradeNative = function (params) {
        this.setData(params, false, true);
    };
    PlatformZSWDH5.prototype.setData = function (params, isCreate, isUpLv) {
        if (isCreate === void 0) { isCreate = false; }
        if (isUpLv === void 0) { isUpLv = false; }
        // 角色上报需要传的参数
        var obj = {
            rtype: isCreate ? "create" : (isUpLv ? "lvup" : "login"),
            cp_server_id: params.serverId,
            cp_server_name: params.serverName,
            role_id: ActorControl.actorID,
            role_name: ActorControl.myName,
            level: ActorControl.level,
            vip_lv: vipControl.lv,
            gender: "",
            part_id: unionControl.guildID,
            part_name: unionControl.guildName,
            part_leader_id: '',
            part_leader_name: '',
            power: (ActorControl.power == 0 ? params.power : ActorControl.power),
            profession_id: params.job,
            profession_name: CommonFun.getJobName(params.job),
            gold: ActorControl.yb,
            coin: ActorControl.gold,
            create_ts: GlobalModel.createActorTime
        };
        this.BZ_SDK.reportLog(obj);
    };
    /**
     * SDK支付
     */
    PlatformZSWDH5.prototype.SDKPayNative = function (params) {
        // 支付需要的参数
        var obj = {
            product_id: params.itemid,
            product_name: params.goodsname,
            product_desc: params.goodsname,
            pay_money: params.fee,
            cp_order_id: params.order,
            cp_server_id: params.serverId,
            cp_server_name: params.serverName,
            role_id: ActorControl.actorID,
            role_name: ActorControl.myName,
            level: ActorControl.level,
            vip_lv: vipControl.lv,
            gender: "",
            gold: ActorControl.yb,
            coin: ActorControl.gold,
            ext: params.order
        };
        this.BZ_SDK.genOrder(obj);
    };
    /**
     * SDK登出
     */
    PlatformZSWDH5.prototype.SDKLogoutNative = function () {
        SDKManager.ins().NativeCallback(JSON.stringify({
            callType: "logout",
            sdkcode: 0,
        }));
    };
    /**
     * 显示切换账号
     */
    PlatformZSWDH5.prototype.SDKShowLogout = function () {
        return true;
    };
    /**
     * SDK回调
     */
    PlatformZSWDH5.prototype.nativeCallback = function (msg) {
        _super.prototype.nativeCallback.call(this, msg);
        var jsonObj = JSON.parse(msg);
        var callType = jsonObj['callType'];
        console.log("SDK callback:", JSON.stringify(jsonObj));
        if (callType == 'init') {
            if (jsonObj['sdkcode'] == 0) {
                // 确保初始化完成后再调用登录方法
                this.BZ_SDK.login(function (data, status) {
                    // 登录后，会调用此函数。成功会返回 {token: "", uname: "", uid: ""} 的对象
                    // 注：切换账号后，登录成功也会调用此函数
                    console.log('data:', data, 'status:', status);
                    SDKManager.ins().NativeCallback(JSON.stringify({
                        callType: "login",
                        sdkcode: 0,
                        data: data
                    }));
                });
            }
        }
        else if (callType == 'login') {
            if (jsonObj['sdkcode'] == 0) {
                var data = jsonObj['data'];
                GlobalModel.openID = data.uid + "";
                GlobalModel.setUrlParamValue("token", data.token);
                GlobalModel.setUrlParamValue("uname", data.uname);
                SceneMgr.ins().runScene(StartGameScene);
            }
            else {
                //失败就重新加载
                window.location.reload();
            }
        }
        else if (callType == 'logout') {
            if (jsonObj['sdkcode'] == 0) {
                // 切换账号后
                this.BZ_SDK.switchAccount();
                window.location.reload();
            }
        }
    };
    return PlatformZSWDH5;
}(PlatformBase));
__reflect(PlatformZSWDH5.prototype, "PlatformZSWDH5");
var PlatformZwWxMini = (function (_super) {
    __extends(PlatformZwWxMini, _super);
    function PlatformZwWxMini() {
        var _this = _super.call(this) || this;
        _this.url = "http://gameluotuo.cn/index.php";
        _this.id = '411';
        _this.channel_id = '3e6659ff55d4be83900c2b4e4ed9e694';
        _this.token = 'cycjyx1604556993';
        _this.appId = 'wx7f1563abedfddbd2';
        _this.startTime = 0;
        _this.hasPopSub = false; //本次登录是否已经弹窗过订阅，防止用户没勾选订阅面板中的 总是保持以上选择时 wx.getSetting获取不到订阅状态 而反复弹出订阅窗口
        if (window["zwWxMiniSdkId"] != null) {
            _this.id = window["zwWxMiniSdkId"];
        }
        if (window["zwWxMiniSdkChannelId"] != null) {
            _this.channel_id = window["zwWxMiniSdkChannelId"];
        }
        if (window["zwWxMiniSdkToken"] != null) {
            _this.token = window["zwWxMiniSdkToken"];
        }
        if (window["zwWxMiniSdkAppId"] != null) {
            _this.appId = window["zwWxMiniSdkAppId"];
        }
        return _this;
    }
    PlatformZwWxMini.prototype.SDKMiniAuditVer = function () {
        if (window["zwWxMiniAuditVerStr"] != null) {
            return SDKConst[window["zwWxMiniAuditVerStr"]];
        }
        else {
            return SDKConst["ZwWxMiniCycjAuditVer"];
        }
    };
    PlatformZwWxMini.prototype.isShowMiniAccountJumpPortalIcon = function () {
        return true;
    };
    PlatformZwWxMini.prototype.miniAccountJumpPortalIconTap = function () {
        if (this.sdkBaseInfo) {
            this.jumpXcx(this.sdkBaseInfo.appid, this.sdkBaseInfo.path, "uid=" + GlobalModel.openID);
        }
    };
    /**显示超级会员 */
    PlatformZwWxMini.prototype.showSuperVip = function () {
        return true;
    };
    /**
     * 初始化SDK
     */
    PlatformZwWxMini.prototype.SDKInitNative = function () {
        window.wx.setKeepScreenOn({
            keepScreenOn: true
        });
        if (window["wxPlatform"] == "devtools") {
            if (!window["isMiniUseHttp"]) {
                this.url = this.url.replace("http:", "https:");
            }
        }
        else {
            if (window.location.protocol == "https:") {
                this.url = this.url.replace("http:", "https:");
            }
        }
        this.systemInfo = window.wx.getSystemInfoSync();
        console.log('systemInfo platform:', this.systemInfo.platform);
        console.log('systemInfo Model:', this.systemInfo.model);
        console.log('inviteInfo: ', SDKManager.ins().getInviterInfo());
        if (this.systemInfo.model.search('iPhone X') != -1 || this.systemInfo.model.search('iPhone XR') != -1 || this.systemInfo.model.search('iPhone XS Max') != -1 || this.systemInfo.model.search('iPhone 11') != -1 || this.systemInfo.model.search('iPhone 12') != -1) {
            DeviceUtils.IsBluntBangs = true;
        }
        this.getSkdBaseData();
        var self = this;
        window.wx.onShow(function (res) {
            if (self.startTime != 0 && egret.getTimer() - self.startTime > 5000) {
                self.startTime = 0;
                SocketConnection.ins().reLogin();
            }
        });
        window.wx.onHide(function () {
            self.startTime = egret.getTimer();
        });
        window.wx.showShareMenu({
            withShareTicket: true
        });
    };
    PlatformZwWxMini.prototype.getSkdBaseData = function () {
        var param = {
            token: this.token,
            id: this.id,
        };
        PHPConfig.requestPhpData(this.url, "g=Wap&m=Wxa&a=get_audit_status&" + Md5Utils.obj_cntstr(param), this.onGetSdkBaseInfo, this, function (event) {
            console.log("getSdkBaseData io error!!!");
        }, egret.HttpMethod.GET);
    };
    PlatformZwWxMini.prototype.onGetSdkBaseInfo = function (event) {
        try {
            var responseJson = JSON.parse(event.currentTarget.response);
            if (responseJson.status == 1001) {
                console.log('getSdkBaseData ok: ', responseJson);
                this.sdkBaseInfo = responseJson;
            }
            else {
                console.log('getSdkBaseData fail ' + responseJson.info);
            }
        }
        catch (e) {
            console.log('getSdkBaseData fail:', e);
        }
    };
    /**
     * SDK是否支持支付
     */
    PlatformZwWxMini.prototype.CheckSupportRecharge = function () {
        if (this.sdkBaseInfo) {
            if (this.sdkBaseInfo.data == "6001") {
                return true;
            }
            else if (this.sdkBaseInfo.data == "3003" && this.sdkBaseInfo.close_ios == "1") {
                if (this.systemInfo.platform.toLowerCase().search("ios") >= 0) {
                    window.wx.showModal({
                        content: LangMgr.getValueByKey("iosnonsupportpay"),
                    });
                    return false;
                }
                else {
                    return true;
                }
            }
            else if (this.sdkBaseInfo.data == "3003") {
                if (this.systemInfo.platform.toLowerCase().search("ios") >= 0) {
                    window.wx.showModal({
                        content: LangMgr.getValueByKey("iosnonsupportpay"),
                    });
                }
                return false;
            }
            else {
                return true;
            }
        }
        return true;
    };
    PlatformZwWxMini.prototype.isHideRechargeShow = function () {
        if (this.sdkBaseInfo) {
            if (this.sdkBaseInfo.data == "3003" && this.sdkBaseInfo.close_ios == "1") {
                if (this.systemInfo.platform.toLowerCase().search("ios") >= 0) {
                    return true;
                }
                else {
                    return false;
                }
            }
            else if (this.sdkBaseInfo.data == "3003") {
                return true;
            }
            else {
                return false;
            }
        }
        return false;
    };
    /**
     * 是否需要登录
     */
    PlatformZwWxMini.prototype.SDKIsNeedLoginNative = function () {
        return true;
    };
    PlatformZwWxMini.prototype.SDKLoginNative = function () {
        window.wx.login({
            success: function (res) {
                console.log("login OK:", res);
                SDKManager.ins().NativeCallback(JSON.stringify({
                    callType: "login",
                    sdkcode: 0,
                    data: res
                }));
            },
            fail: function (res) {
                console.log("login fail:", res);
                SDKManager.ins().NativeCallback(JSON.stringify({
                    callType: "login",
                    sdkcode: -1,
                    data: res
                }));
            }
        });
    };
    /**
     * SDK登陆验证参数
     */
    PlatformZwWxMini.prototype.GetSDKCheckAccountArgs = function () {
        var jsonObj = {
            pf: GlobalModel.pf,
            gameId: GlobalModel.gameId,
            channelId: GlobalModel.channelId,
            gameVersion: GlobalModel.gameVersion,
            shellext: GlobalModel.getUrlParamValue("shellext"),
        };
        console.log("check account args:", JSON.stringify(jsonObj));
        return JSON.stringify(jsonObj);
    };
    /**
     * SDK创建角色
     */
    PlatformZwWxMini.prototype.SDKCreateRoleNative = function (params) {
        this.setData(params, true);
    };
    /**
     * SDK进入游戏
     */
    PlatformZwWxMini.prototype.SDKEnterGameNative = function (params) {
        this.setData(params);
        this.subscribeMessage();
    };
    /**
     * SDK角色升级
     */
    PlatformZwWxMini.prototype.SDKUserUpgradeNative = function (params) {
        this.setData(params, false, true);
        this.subscribeMessage();
    };
    PlatformZwWxMini.prototype.setData = function (params, isCreate, isUpLv) {
        if (isCreate === void 0) { isCreate = false; }
        if (isUpLv === void 0) { isUpLv = false; }
        var roletype = "0";
        if (isCreate) {
            roletype = "1";
        }
        if (isUpLv) {
            roletype = "2";
        }
        //转生等级+等级
        var level = ActorControl.level;
        // if (reincarnateControl.lv > 0) {
        //     level += LangMgr.getValueByKey('numberRotation', reincarnateControl.lv);
        // }
        // level += LangMgr.getValueByKey('numberLevel', ActorControl.level);
        var data = {
            session_3rd: GlobalModel.getUrlParamValue("session_3rd"),
            channel_id: this.channel_id,
            area: GlobalModel.srvname || "",
            role_name: ActorControl.myName || "",
            new_role: roletype != "1" ? "0" : roletype,
            rank: level,
            money: ActorControl.yb,
        };
        console.log("Report info:" + Md5Utils.obj_cntstr(data));
        PHPConfig.requestPhpData(this.url, "g=Home&m=GameOauth&a=xyx_roles&" + Md5Utils.obj_cntstr(data), this.onGetComplete, this, this.onGetIOError, egret.HttpMethod.GET);
    };
    PlatformZwWxMini.prototype.onGetComplete = function (event) {
        try {
            var responseJson = JSON.parse(event.currentTarget.response);
            if (responseJson.status == 1001) {
                console.log('Report ok');
            }
            else {
                console.log('Report fail' + responseJson.info);
            }
        }
        catch (e) {
            console.log('Report fail', e);
        }
    };
    PlatformZwWxMini.prototype.onGetIOError = function (data) {
        console.log('Report Io fail', data);
    };
    /**
     * SDK支付
     */
    PlatformZwWxMini.prototype.SDKPayNative = function (params) {
        var data = {
            token: this.token,
            session_3rd: GlobalModel.getUrlParamValue("session_3rd"),
            orderid: params.order,
            channel_id: this.channel_id,
            price: params.fee,
            other: "",
            client: this.systemInfo.platform,
        };
        console.log("pay parm：" + Md5Utils.obj_cntstr(data));
        PHPConfig.requestPhpData(this.url, "g=Home&m=GameOauth&a=xyx_payinfo&" + Md5Utils.obj_cntstr(data), this.payOnComplete, this, this.payIOError, egret.HttpMethod.GET, egret.HttpResponseType.TEXT, data);
    };
    PlatformZwWxMini.prototype.payOnComplete = function (event, payData) {
        var self = this;
        try {
            var responseJson = JSON.parse(event.currentTarget.response);
            if (responseJson.status == 1001) {
                console.log('payInfo: ', responseJson);
                switch (responseJson.data['pay_type']) {
                    case "kf":
                        //客服会话版本库最低2.0.3,需要处理版本
                        if (this.compareVersion(this.systemInfo.SDKVersion, "2.0.3") < 0) {
                            window.wx.showModal({
                                content: LangMgr.getValueByKey("wxKfTip"),
                            });
                        }
                        else {
                            window.wx.openCustomerServiceConversation({
                                sessionFrom: responseJson.data["session_from"] ? responseJson.data["session_from"] : "",
                                showMessageCard: true,
                                sendMessageTitle: responseJson.data["message"],
                                sendMessageImg: responseJson.data["sendMessageImg"] ? responseJson.data["sendMessageImg"] : "https://kantuwan.cn/uploads/a/admin/3/3/1/4/5d0b2e00cfa13.jpg",
                            });
                        }
                        break;
                    case "xcx":
                        //小程序跳转版本库最低2.2.0,需要版本处理
                        if (this.compareVersion(this.systemInfo.SDKVersion, "2.2.0") < 0) {
                            window.wx.showModal({
                                content: LangMgr.getValueByKey("wxNavMiniTip"),
                            });
                        }
                        else {
                            this.jumpXcx(responseJson.data['appid'], responseJson.data['path'], "orderid=" + responseJson.data['orderid']);
                        }
                        break;
                    case "midashi":
                        if (responseJson.data["pay_status"] == 1) {
                            console.log("midashi pay success");
                        }
                        else if (responseJson.data["pay_status"] == 0) {
                            //余额不足，调起米大师充值
                            var mode = responseJson.data["mode"] ? responseJson.data["mode"] : "game";
                            var env = responseJson.data["env"] ? responseJson.data["env"] : 0;
                            var offerId = responseJson.data["offerId"];
                            var currencyType = responseJson.data["currencyType"] ? responseJson.data["currencyType"] : "CNY";
                            var buyQuantity = responseJson.data["buyQuantity"];
                            var zoneId = responseJson.data["zoneId"];
                            var platform = responseJson.data["platform"];
                            console.log("mode:", mode);
                            console.log("env:", env);
                            console.log("offerId:", offerId);
                            console.log("currencyType:", currencyType);
                            console.log("buyQuantity:", buyQuantity);
                            console.log("zoneId:", zoneId);
                            console.log("platform:", platform);
                            window.wx.requestMidasPayment({
                                mode: mode,
                                env: env,
                                offerId: offerId,
                                currencyType: currencyType,
                                buyQuantity: buyQuantity,
                                zoneId: zoneId,
                                platform: platform,
                                success: function (res) {
                                    //米大师支付成功，再次请求链接，直到米大师pay_status为1后停止。
                                    console.log("midashi payment success:", res);
                                    console.log("midashi payment success pay parm：" + Md5Utils.obj_cntstr(payData));
                                    PHPConfig.requestPhpData(self.url, "g=Home&m=GameOauth&a=xyx_payinfo&" + Md5Utils.obj_cntstr(payData), self.payOnComplete, self, self.payIOError, egret.HttpMethod.GET, egret.HttpResponseType.TEXT, payData);
                                },
                                fail: function (res) {
                                    console.log("midashi payment fail:", res);
                                }
                            });
                        }
                        break;
                }
            }
            else {
                console.log('payInfo fail:' + responseJson.info);
            }
        }
        catch (e) {
            console.log('payInfo exception:', e);
        }
    };
    PlatformZwWxMini.prototype.payIOError = function (data) {
        console.log('pay data error: ', data);
    };
    /**
     * 跳转小程序
     */
    PlatformZwWxMini.prototype.jumpXcx = function (appid, pathUrl, param) {
        window.wx.navigateToMiniProgram({
            appId: appid,
            envVersion: 'release',
            path: pathUrl + "?" + param,
            success: function (res) { },
        });
    };
    PlatformZwWxMini.prototype.shareXcx = function (title, imageUrl, desc) {
        window.wx.shareAppMessage({
            title: title,
            imageUrl: imageUrl,
            query: this.shareQuery ? this.shareQuery : "",
        });
        if (this.shareCallback && this.shareCallback instanceof Function) {
            this.shareCallback();
        }
    };
    /** 是否显示分享入口 */
    PlatformZwWxMini.prototype.isShowSharePortalIcon = function () {
        return true;
    };
    /**分享 */
    PlatformZwWxMini.prototype.SDKShowShare = function (param) {
        this.shareCallback = null;
        if (param && param instanceof Function) {
            this.shareCallback = param;
        }
        else {
            if (param && param.callback instanceof Function) {
                this.shareCallback = param.callback;
            }
            if (param && param.query) {
                this.shareQuery = param.query;
            }
        }
        var objs = {
            token: this.token,
            game_id: this.id,
            session_3rd: GlobalModel.getUrlParamValue("session_3rd")
        };
        PHPConfig.requestPhpData(this.url, "g=Wap&m=Wxaapi&a=game_share&" + Md5Utils.obj_cntstr(objs), this.shareComplete, this, function (event) {
            console.log("share io error!!!");
        });
    };
    PlatformZwWxMini.prototype.shareComplete = function (event) {
        try {
            var responseJson = JSON.parse(event.currentTarget.response);
            if (responseJson.status == 1001) {
                console.log('share ok');
                this.shareXcx(responseJson["info"]["title"], responseJson["info"]["imgUrl"], responseJson["info"]["desc"]);
            }
            else {
                console.log('share info get fail' + responseJson.info);
            }
        }
        catch (e) {
            console.log('share fail', e);
        }
    };
    PlatformZwWxMini.prototype.loginOnComplete = function (event) {
        try {
            var responseJson = JSON.parse(event.currentTarget.response);
            console.log('loginOnComplete responseJson', responseJson);
            GlobalModel.openID = responseJson["uid"];
            responseJson['shellext'] && GlobalModel.setUrlParamValue("shellext", responseJson['shellext']);
            responseJson["name"] && GlobalModel.setUrlParamValue("name", responseJson["name"]);
            responseJson["wecha_id"] && GlobalModel.setUrlParamValue("wecha_id", responseJson["wecha_id"]);
            responseJson["scene"] && GlobalModel.setUrlParamValue("scene", responseJson["scene"]);
            responseJson["session_3rd"] && GlobalModel.setUrlParamValue("session_3rd", responseJson["session_3rd"]);
            responseJson['pfid'] && GlobalModel.setUrlParamValue("pfid", responseJson['pfid']);
            responseJson['lzGameId'] && (GlobalModel.gameId = responseJson['lzGameId']);
            SceneMgr.ins().runScene(StartGameScene);
            var objs = {
                token: this.token,
                game_id: this.id,
                session_3rd: GlobalModel.getUrlParamValue("session_3rd")
            };
            PHPConfig.requestPhpData(this.url, "g=Wap&m=Wxaapi&a=game_share&" + Md5Utils.obj_cntstr(objs), function (event) {
                try {
                    var responseJson_1 = JSON.parse(event.currentTarget.response);
                    if (responseJson_1.status == 1001) {
                        console.log('init share ok:', responseJson_1.info);
                        //设置微信右上角分享信息
                        window.wx.onShareAppMessage(function () {
                            return {
                                title: responseJson_1["info"]["title"],
                                imageUrl: responseJson_1["info"]["imgUrl"],
                            };
                        });
                    }
                    else {
                        console.log('init share info get fail' + responseJson_1.info);
                    }
                }
                catch (e) {
                    console.log('init share fail', e);
                }
            }, this, function (event) {
                console.log("init share io error!!!");
            });
        }
        catch (e) {
            console.log('loginOnComplete fail', e);
        }
    };
    PlatformZwWxMini.prototype.loginIOError = function (error) {
        console.log('loginIOError', error);
    };
    /**
     * SDK回调
     */
    PlatformZwWxMini.prototype.nativeCallback = function (msg) {
        _super.prototype.nativeCallback.call(this, msg);
        var jsonObj = JSON.parse(msg);
        var callType = jsonObj['callType'];
        if (callType == 'init') {
            debug.log("SDK init ok");
        }
        else if (callType == 'login') {
            if (jsonObj['sdkcode'] == 0) {
                var opt = window.wx.getLaunchOptionsSync();
                var data = jsonObj['data'];
                var loginData = {
                    token: this.token,
                    channel_id: this.channel_id,
                    code: data.code,
                    scene: opt && opt.query && JSON.stringify(opt.query),
                };
                var args = Md5Utils.obj_md5_args(loginData);
                console.log("wx php args:" + args);
                console.log("wx php url：", GlobalModel.sdkDomain + "/" + GlobalModel.pf.toLowerCase() + "/" + GlobalModel.gameId + "/sdkurlcallback");
                PHPConfig.requestPhpData(GlobalModel.sdkDomain + "/" + GlobalModel.pf.toLowerCase() + "/" + GlobalModel.gameId + "/sdkurlcallback", args, this.loginOnComplete, this, this.loginIOError);
            }
            else {
                //登录失败重新登录
                this.SDKLoginNative();
            }
        }
    };
    PlatformZwWxMini.prototype.getStatusHeight = function () {
        if (this.systemInfo) {
            var yRate = 930 / this.systemInfo.windowHeight;
            return this.systemInfo.statusBarHeight * yRate;
        }
        else {
            return 0;
        }
    };
    PlatformZwWxMini.prototype.compareVersion = function (v1, v2) {
        v1 = v1.split('.');
        v2 = v2.split('.');
        var len = Math.max(v1.length, v2.length);
        while (v1.length < len) {
            v1.push('0');
        }
        while (v2.length < len) {
            v2.push('0');
        }
        for (var i = 0; i < len; i++) {
            var num1 = parseInt(v1[i]);
            var num2 = parseInt(v2[i]);
            if (num1 > num2) {
                return 1;
            }
            else if (num1 < num2) {
                return -1;
            }
        }
        return 0;
    };
    //角色10级时弹出订阅消息界面（在登录游戏和角色升级时调用，已订阅过任一消息就不再弹出）
    PlatformZwWxMini.prototype.subscribeMessage = function () {
        if (ActorControl.level >= 10) {
            var objs = {
                token: this.token,
            };
            PHPConfig.requestPhpData(this.url, "g=Wap&m=Mwxaapi&a=templatemsg&" + Md5Utils.obj_cntstr(objs), this.getSubscribeData, this, function (event) {
                console.log("get subscribeMessage fail");
            });
        }
        else {
            StageUtils.ins().getStage().removeEventListener(egret.TouchEvent.TOUCH_END, this.subscribeMessage, this);
        }
    };
    PlatformZwWxMini.prototype.getSubscribeData = function (event) {
        var self = this;
        try {
            var responseJson = JSON.parse(event.currentTarget.response);
            if (responseJson.status == 1001) {
                console.log('subscribedata: ', responseJson);
                var templateIdList_1 = [];
                for (var _i = 0, _a = responseJson.data; _i < _a.length; _i++) {
                    var oneData = _a[_i];
                    templateIdList_1.push(oneData.template_id);
                }
                window.wx.getSetting({
                    withSubscriptions: true,
                    success: function (res) {
                        var alreadySub = false;
                        console.log("user subscriptionsSetting:", res.subscriptionsSetting);
                        if (templateIdList_1) {
                            for (var _i = 0, templateIdList_2 = templateIdList_1; _i < templateIdList_2.length; _i++) {
                                var oneId = templateIdList_2[_i];
                                if (res.subscriptionsSetting.itemSettings) {
                                    if (res.subscriptionsSetting.itemSettings[oneId] == "accept") {
                                        alreadySub = true;
                                        break;
                                    }
                                }
                            }
                        }
                        //没有订阅过
                        if (!alreadySub) {
                            if (!self.wxsubFun) {
                                self.wxsubFun = function (e) {
                                    //打开了签到界面，点击了签到item,才弹出订阅
                                    if (!(e.target instanceof SignInItemRenderer)) {
                                        return;
                                    }
                                    //看看这个签到item的父亲是否是SignInPanel
                                    var isSignInPanel = false;
                                    var parent = e.target.parent;
                                    while (parent) {
                                        if (parent instanceof SignInPanel) {
                                            isSignInPanel = true;
                                            break;
                                        }
                                        parent = parent.parent;
                                    }
                                    if (!isSignInPanel) {
                                        return;
                                    }
                                    console.log("request wxsubFun:", templateIdList_1);
                                    //弹出订阅窗口(如果用户点了总是保持以上选择，不再询问，这个请求就不再弹订阅窗口了，会success回调然后没订阅任何东西)
                                    //window.wx.requestSubscribeMessage (这个是订阅是申请发送一次消息) 渠道自定义的那些消息
                                    //window.wx.requestSubscribeSystemMessage 系统订阅消息只需要订阅一次，永久有效(只支持排行榜 好友互动提醒)
                                    self.hasPopSub = true;
                                    window.wx.requestSubscribeMessage && window.wx.requestSubscribeMessage({
                                        tmplIds: templateIdList_1,
                                        success: function (res) {
                                            //订阅成功，移除订阅点击事件
                                            StageUtils.ins().getStage().removeEventListener(egret.TouchEvent.TOUCH_END, self.wxsubFun, self);
                                            //记录订阅成功的消息
                                            var successSubs = [];
                                            for (var key in res) {
                                                if (res[key] == "accept") {
                                                    successSubs.push(key);
                                                }
                                            }
                                            console.log("user successSubscribeMsg:", successSubs);
                                            if (successSubs.length >= 1) {
                                                //"只发送第一个订阅数据给平台"
                                                var objs = {
                                                    token: self.token,
                                                    template_id: successSubs[0],
                                                    appid: self.appId,
                                                    session_3rd: GlobalModel.getUrlParamValue("session_3rd")
                                                };
                                                console.log("send subscribeMsg to channel：", self.url + "?" + "g=Wap&m=Wxaapi&a=for_template_all&" + Md5Utils.obj_cntstr(objs));
                                                //把订阅成功的告诉平台
                                                PHPConfig.requestPhpData(self.url, "g=Wap&m=Wxaapi&a=for_template_all&" + Md5Utils.obj_cntstr(objs), function (event) {
                                                    try {
                                                        var responseJson_2 = JSON.parse(event.currentTarget.response);
                                                        console.log("send subscribeMsg Data: ", responseJson_2);
                                                        if (responseJson_2.errcode == 0) {
                                                            console.log("send subscribeMsg Success: ", responseJson_2);
                                                        }
                                                    }
                                                    catch (e) {
                                                        console.log('send subscribeMsg Fail', e);
                                                    }
                                                }, self, function (event) {
                                                    console.log("send subscribeMsg IO Fail");
                                                });
                                            }
                                        },
                                        fail: function (res) {
                                            console.log("wx subscribeMsg Fail:", res);
                                        }
                                    });
                                };
                            }
                            //订阅的微信api必须在点击事件touchend event中处理
                            if (!self.hasPopSub) {
                                self.hasPopSub = true;
                                StageUtils.ins().getStage().removeEventListener(egret.TouchEvent.TOUCH_END, self.wxsubFun, self);
                                StageUtils.ins().getStage().addEventListener(egret.TouchEvent.TOUCH_END, self.wxsubFun, self);
                            }
                        }
                        else {
                            console.log("already subscribeMsg aleast One");
                            StageUtils.ins().getStage().removeEventListener(egret.TouchEvent.TOUCH_END, self.wxsubFun, self);
                        }
                    }
                });
            }
            else {
                console.log('subscribedata no success');
            }
        }
        catch (e) {
            console.log('get subscribeData Fail', e);
        }
    };
    /** 邀请人数据 */
    PlatformZwWxMini.prototype.getInviterInfo = function () {
        var opt = window.wx.getLaunchOptionsSync();
        if (opt && opt.query && opt.query.inviterId && opt.query.inviterSid) {
            return {
                inviterId: Number(opt.query.inviterId),
                inviterSid: Number(opt.query.inviterSid),
            };
        }
        else {
            return null;
        }
    };
    return PlatformZwWxMini;
}(PlatformBase));
__reflect(PlatformZwWxMini.prototype, "PlatformZwWxMini");
var PlatformZwWXMiniH5 = (function (_super) {
    __extends(PlatformZwWXMiniH5, _super);
    function PlatformZwWXMiniH5() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.url = "https://gameluotuo.com/index.php";
        return _this;
    }
    PlatformZwWXMiniH5.prototype.SDKMiniAuditVer = function () {
        //return SDKConst["ZwWxMiniCycjAuditVer"];
        //h5版本之后每次更新都保持正式服。
        return 1;
    };
    /**
     * 初始化SDK
     */
    PlatformZwWXMiniH5.prototype.SDKInitNative = function () {
        GlobalModel.pf = "zwwxmini";
        GlobalModel.openID = GlobalModel.getUrlParamValue("uid");
    };
    /**
     * 是否需要登录
     */
    PlatformZwWXMiniH5.prototype.SDKIsNeedLoginNative = function () {
        return false;
    };
    /**显示超级会员 */
    PlatformZwWXMiniH5.prototype.showSuperVip = function () {
        return true;
    };
    /**
     * SDK登陆验证参数
     */
    PlatformZwWXMiniH5.prototype.GetSDKCheckAccountArgs = function () {
        var jsonObj = {
            pf: GlobalModel.pf,
            gameId: GlobalModel.gameId,
            channelId: GlobalModel.channelId,
            gameVersion: GlobalModel.gameVersion,
            shellext: GlobalModel.getUrlParamValue("shellext")
        };
        console.log("check account args:", JSON.stringify(jsonObj));
        return JSON.stringify(jsonObj);
    };
    /**
     * SDK创建角色
     */
    PlatformZwWXMiniH5.prototype.SDKCreateRoleNative = function (params) {
        this.setData(params, true);
    };
    /**
     * SDK进入游戏
     */
    PlatformZwWXMiniH5.prototype.SDKEnterGameNative = function (params) {
        this.setData(params);
    };
    /**
  * SDK角色升级
  */
    PlatformZwWXMiniH5.prototype.SDKUserUpgradeNative = function (params) {
        this.setData(params, false, true);
    };
    PlatformZwWXMiniH5.prototype.setData = function (params, isCreate, isUpLv) {
        if (isCreate === void 0) { isCreate = false; }
        if (isUpLv === void 0) { isUpLv = false; }
        var roletype = "0";
        if (isCreate) {
            roletype = "1";
        }
        if (isUpLv) {
            roletype = "2";
        }
        //转生等级+等级
        var level = ActorControl.level;
        // if (reincarnateControl.lv > 0) {
        //     level += LangMgr.getValueByKey('numberRotation', reincarnateControl.lv);
        // }
        // level += LangMgr.getValueByKey('numberLevel', ActorControl.level);
        var data = {
            userToken: GlobalModel.getUrlParamValue("userToken"),
            channel_id: GlobalModel.getUrlParamValue("channel_id"),
            area: GlobalModel.srvname || "",
            role_name: ActorControl.myName || "",
            new_role: roletype != "1" ? "0" : roletype,
            rank: level,
            money: ActorControl.yb,
        };
        var sign = this.getSign(data);
        data['sign'] = sign;
        var param = Md5Utils.obj_cntstr(data);
        console.log("Report info:" + param);
        PHPConfig.requestPhpData(this.url + "/Home/GameOauth/roles", param, this.onGetComplete, this, this.onGetIOError, egret.HttpMethod.GET);
    };
    PlatformZwWXMiniH5.prototype.onGetComplete = function (event) {
        try {
            var responseJson = JSON.parse(event.currentTarget.response);
            if (responseJson.status == "1001") {
                console.log('Report ok');
            }
            else {
                console.log('Report fail' + responseJson.info);
            }
        }
        catch (e) {
            console.log('Report fail exception:', e);
        }
    };
    PlatformZwWXMiniH5.prototype.onGetIOError = function (data) {
        console.log('Report io fail: ', data);
    };
    /**
     * SDK支付
     */
    PlatformZwWXMiniH5.prototype.SDKPayNative = function (params) {
        var data = {
            userToken: GlobalModel.getUrlParamValue("userToken"),
            channel_id: GlobalModel.getUrlParamValue("channel_id"),
            item_id: params.itemid,
            orderid: params.order,
            price: params.fee,
            other: "",
        };
        var sign = this.getSign(data);
        data['sign'] = sign;
        var param = Md5Utils.obj_cntstr(data);
        console.log("pay parm：" + param);
        PHPConfig.requestPhpData(this.url + "/Home/GameOauth/pay_info", param, this.payOnComplete, this, this.payIOError, egret.HttpMethod.GET);
    };
    PlatformZwWXMiniH5.prototype.payOnComplete = function (event) {
        try {
            var responseJson = JSON.parse(event.currentTarget.response);
            if (responseJson.status == "1001") {
                console.log('pay info get ok');
                window.parent.postMessage(responseJson.data, '*');
            }
            else {
                console.log('pay info get fail ' + responseJson.info);
            }
        }
        catch (e) {
            console.log('pay info fail exception: ', e);
        }
    };
    PlatformZwWXMiniH5.prototype.payIOError = function (data) {
        console.log('pay info io error: ', data);
    };
    /**
     * 获取加密
     */
    PlatformZwWXMiniH5.prototype.getSign = function (obj) {
        var sortStr = Md5Utils.obj_cntstr(obj);
        return EncryptMd5.hex_md5(sortStr + SDKConst["ZwWxMiniH5CycjAppSecret"]);
    };
    return PlatformZwWXMiniH5;
}(PlatformBase));
__reflect(PlatformZwWXMiniH5.prototype, "PlatformZwWXMiniH5");
var ReportData = (function () {
    function ReportData() {
        this.isComplete = false;
        this.httpRequest = new egret.HttpRequest();
        this.httpRequestUrl = [];
    }
    ReportData.getIns = function () {
        this._ins = this._ins || new ReportData();
        return this._ins;
    };
    /**
     * 上报用户玩过区
     */
    ReportData.prototype.reportPlayedServer = function () {
        var obj = {
            gameid: GlobalModel.gameId,
            account: GlobalModel.openID,
            channelId: GlobalModel.channelId,
            serverid: GlobalModel.srvid,
            pfid: GlobalModel.pfid,
            pf: GlobalModel.pf,
            time: Date.now()
        };
        var args = Md5Utils.obj_md5_args(obj, PHPConfig.VERIFY_KEY, true);
        this.reportUrl(PHPConfig.SET_USER_URL, args);
    };
    /**
     * 上报用户创角信息
     */
    ReportData.prototype.reportActorInfo = function () {
        var obj = {
            account: GlobalModel.openID,
            serverid: GlobalModel.srvid,
            time: Date.now(),
            pfid: GlobalModel.pfid,
            gameid: GlobalModel.gameId,
            channelId: GlobalModel.channelId,
            actorid: ActorControl.actorID,
            pf: GlobalModel.pf
        };
        var args = Md5Utils.obj_md5_args(obj, PHPConfig.VERIFY_KEY, true);
        this.reportUrl(PHPConfig.SET_ACTOR_INFO, args);
    };
    /**
     * 上报用户信息
     */
    ReportData.prototype.reportRoleInfo = function (params, enterGame, upLeve, create) {
        if (enterGame === void 0) { enterGame = false; }
        if (upLeve === void 0) { upLeve = false; }
        if (create === void 0) { create = false; }
        if (GlobalModel.pf == "Test")
            return;
        var obj = {
            pf: GlobalModel.pf,
            gameid: GlobalModel.gameId,
            account: GlobalModel.openID,
            serverid: GlobalModel.srvid,
            servername: GlobalModel.srvname,
            actorid: ActorControl.actorID,
            actorname: params.nickName || ActorControl.myName,
            power: (ActorControl.power == 0 ? params.power : ActorControl.power),
            level: ActorControl.level,
            viplevel: vipControl.lv,
            zslevel: reincarnateControl.lv,
            channelId: GlobalModel.channelId,
            roleCTime: GlobalModel.createActorTime,
            isuplevel: create ? "createRole" : (upLeve ? "levelUp" : "login"),
        };
        var args = Md5Utils.obj_md5_args(obj, PHPConfig.VERIFY_KEY, true, [], ["isuplevel"]);
        this.reportUrl(PHPConfig.SET_ROLE_INFO, args);
    };
    /**
     * 上报聊天信息
     * 1.世界
     * 2.帮会
     * 3.好友
     */
    ReportData.prototype.reportChatInfo = function (msgType, content, toActorId, toActorName, toChannel) {
        if (toActorId === void 0) { toActorId = 0; }
        if (toActorName === void 0) { toActorName = ""; }
        if (toChannel === void 0) { toChannel = ""; }
        var obj = {
            logdate: (GameServer.serverTime / 1000).toFixed(0),
            counter: "chat",
            pfromId: GlobalModel.gameId,
            fromServerId: GlobalModel.mainSrvid,
            fromActorId: ActorControl.actorID,
            fromActorName: ActorControl.myName,
            fromChannel: GlobalModel.pf,
            toServerId: GlobalModel.mainSrvid,
            toActorId: toActorId,
            toActorName: toActorName,
            toChannel: toChannel,
            msgType: msgType,
            content: content,
        };
        var args = Md5Utils.obj_md5_args(obj, PHPConfig.VERIFY_KEY, true);
        this.reportUrl(PHPConfig.SET_GM_REPORT, args, egret.HttpMethod.POST);
    };
    /**
     * 区间打点
     */
    ReportData.prototype.reportIntervalPoint = function (time, typeId) {
        if (GlobalModel.pf == "Test")
            return;
        var obj = {
            counter: 'accountDwellTime',
            sid: window['gameSig'],
            pfromId: GlobalModel.pfid,
            time: (time / 1000).toFixed(1),
            typeId: typeId,
            logdate: (Date.now() / 1000).toFixed(0)
        };
        if (GlobalModel.openID) {
            obj["account"] = GlobalModel.openID;
            obj["isNew"] = (GlobalModel.serverNumberPlyer <= 1 && GlobalModel.autoEnterGame == 1) ? 1 : 0;
        }
        var args = Md5Utils.obj_md5_args(obj, PHPConfig.VERIFY_KEY, true);
        this.reportUrl(PHPConfig.SET_GM_REPORT, args, egret.HttpMethod.POST);
    };
    /**
     * 上报特殊渠道
     */
    ReportData.prototype.reportChannelData = function (num, type) {
        if (GlobalModel.pf == "Test")
            return;
        var obj = {
            pf: GlobalModel.pf,
            gameid: GlobalModel.gameId,
            actorid: ActorControl.actorID,
            serverid: GlobalModel.srvid,
            time: Date.now(),
            uid: GlobalModel.openID,
            channelid: GlobalModel.channelId,
            //以上是必选
            serverName: GlobalModel.srvname,
            infoType: type,
            infoNum: num,
            gameRoleName: ActorControl.myName
        };
        var args = Md5Utils.obj_md5_args(obj, PHPConfig.VERIFY_KEY, true);
        this.reportUrl(PHPConfig.GET_CHANNEL_URL, args, egret.HttpMethod.POST);
    };
    /**
     * 请求微端下载奖励
     */
    ReportData.prototype.reportMicroclientReward = function () {
        var obj = {
            pfrom_id: GlobalModel.pfid,
            server_id: GlobalModel.mainSrvid,
            actorid: ActorControl.actorID,
            actorname: ActorControl.myName,
            counter: "wdrebate",
            channel: GlobalModel.channelId,
        };
        var args = Md5Utils.obj_md5_args(obj, PHPConfig.VERIFY_KEY, true);
        this.reportUrl(PHPConfig.SET_GM_REPORT, args, egret.HttpMethod.POST);
    };
    /**
     * 运营后台新功能，打点上报
     */
    ReportData.prototype.reportDoPoint = function (doPointType) {
        if (GlobalModel.pf == "Test")
            return;
        var obj = {
            logdate: (Date.now() / 1000).toFixed(0),
            counter: doPointType == 1 ? 'loadVersion' : 'loadRole',
            pfromId: GlobalModel.gameId,
        };
        var args = Md5Utils.obj_md5_args(obj, PHPConfig.VERIFY_KEY, true);
        this.reportUrl(PHPConfig.SET_GM_REPORT, args, egret.HttpMethod.POST);
    };
    /**
     * 前端错误打点
     */
    ReportData.prototype.reportClientErrorLog = function (type, desc) {
        if (GlobalModel.pf == "Test")
            return;
        if (!GlobalModel.openClientErrorLog)
            return;
        var obj = {
            pfromId: GlobalModel.pfid,
            serverId: GlobalModel.srvid,
            account: GlobalModel.openID,
            linkTime: (Date.now() / 1000).toFixed(0),
            desc: desc,
            type: type,
            counter: 'crossServerLogout'
        };
        var args = Md5Utils.obj_md5_args(obj, PHPConfig.VERIFY_KEY, true);
        this.reportUrl(PHPConfig.SET_GM_REPORT, args, egret.HttpMethod.POST);
    };
    /**
     * 登录打点
     */
    ReportData.prototype.reportDoPointLogin = function () {
        if (GlobalModel.pf == "Test")
            return;
        var obj = {
            counter: 'loadActorLogin',
            account: GlobalModel.openID,
            pfromId: GlobalModel.pfid,
            serverId: GlobalModel.srvid,
            actorId: ActorControl.actorID,
            loginTime: (Date.now() / 1000).toFixed(0)
        };
        var args = Md5Utils.obj_md5_args(obj, PHPConfig.VERIFY_KEY, true);
        this.reportUrl(PHPConfig.SET_GM_REPORT, args, egret.HttpMethod.POST);
    };
    ReportData.prototype.reportUrl = function (url, params, method) {
        var vo = new HrInfo();
        vo.url = url;
        vo.params = params;
        vo.method = method;
        vo.sendCount = 3;
        this.httpRequestUrl.push(vo);
        this.sendReportUrl();
    };
    ReportData.prototype.sendReportUrl = function () {
        if (this.isComplete == false && this.httpRequestUrl.length > 0) {
            var url = this.httpRequestUrl[0].url;
            var params = this.httpRequestUrl[0].params;
            var method = this.httpRequestUrl[0].method;
            this.httpRequest.setRequestHeader("Content-Type", "application/x-www-form-urlencoded;charset=UTF-8");
            if (method == egret.HttpMethod.POST) {
                this.httpRequest.open(url, egret.HttpMethod.POST);
                this.httpRequest.send(params);
            }
            else {
                this.httpRequest.open(url + "?" + params, egret.HttpMethod.GET);
                this.httpRequest.send();
            }
            this.isComplete = true;
            this.httpRequest.addEventListener(egret.Event.COMPLETE, this.onGetComplete, this);
            this.httpRequest.addEventListener(egret.IOErrorEvent.IO_ERROR, this.onGetIOError, this);
        }
    };
    ReportData.prototype.onGetComplete = function (event) {
        this.isComplete = false;
        this.httpRequestUrl.shift();
        this.sendReportUrl();
    };
    ReportData.prototype.onGetIOError = function (event) {
        this.isComplete = false;
        this.httpRequestUrl[0].sendCount--;
        if (this.httpRequestUrl[0].sendCount > 0) {
            this.sendReportUrl();
        }
    };
    return ReportData;
}());
__reflect(ReportData.prototype, "ReportData");
var HrInfo = (function () {
    function HrInfo() {
    }
    return HrInfo;
}());
__reflect(HrInfo.prototype, "HrInfo");
var SDKManager = (function (_super) {
    __extends(SDKManager, _super);
    function SDKManager() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**打点次数 只打一次 */
        _this.doPointTimes = 0;
        return _this;
    }
    SDKManager.ins = function () {
        return _super.ins.call(this);
    };
    /**
     * 初始化
     */
    SDKManager.prototype.Init = function () {
        var PlatformClass = egret.getDefinitionByName("Platform" + GlobalModel.pf);
        if (!PlatformClass) {
            alert("Unknown platform:" + GlobalModel.pf);
            return;
        }
        this.platform = new PlatformClass();
        debug.log("Platform:", this.platform, GlobalModel.pf);
        SDKManager.addNativeCallBack("callJSNativeFunc", this.platform.nativeCallback, this);
        SDKManager.addNativeCallBack("callChannelType", this.platform.nativeCallChannelType, this);
        SDKManager.addNativeCallBack("callAppVersion", this.platform.nativeCallAppVersion, this);
        this.SDKInitNative();
    };
    /**
     * 小游戏提审版本
     */
    SDKManager.prototype.SDKMiniAuditVer = function () {
        if (this.platform) {
            return this.platform.SDKMiniAuditVer();
        }
        return 0;
    };
    /**
     * 是否需要初始化
     */
    SDKManager.prototype.SDKIsNeedInit = function () {
        if (this.platform) {
            return this.platform.SDKIsNeedInit();
        }
        return false;
    };
    SDKManager.prototype.SDKInitComplete = function () {
        EventMgr.ins().dispatch(0 /* SDK_INIT_COMPLETE */);
    };
    /**
     * 注册监听
     */
    SDKManager.addNativeCallBack = function (funName, handler, thisObj) {
        egret.ExternalInterface.addCallback(funName, function (message) {
            handler.apply(thisObj, [message]);
        });
    };
    /**
     * 初始化SDK
     */
    SDKManager.prototype.SDKInitNative = function () {
        if (this.platform)
            this.platform.SDKInitNative();
    };
    /**
     * 是否需要登陆
     */
    SDKManager.prototype.SDKIsNeedLoginNative = function () {
        if (this.platform) {
            return this.platform.SDKIsNeedLoginNative();
        }
        return false;
    };
    /**
     * SDK自动登陆
     */
    SDKManager.prototype.SDKAutoLoginNative = function (args) {
        if (this.platform)
            this.platform.SDKAutoLoginNative(args);
    };
    /**
     * SDK登陆
     */
    SDKManager.prototype.SDKLoginNative = function (args) {
        if (this.platform)
            this.platform.SDKLoginNative(args);
    };
    /**
     * SDK自定义登陆界面
     */
    SDKManager.prototype.SDKHasLoginScene = function () {
        if (this.platform)
            return this.platform.SDKHasLoginScene();
    };
    /**
     * SDK登陆验证参数
     */
    SDKManager.prototype.GetSDKCheckAccountArgs = function () {
        if (this.platform)
            return this.platform.GetSDKCheckAccountArgs();
    };
    /**
     * SDK创建角色
     */
    SDKManager.prototype.SDKCreateRoleNative = function (params) {
        if (this.platform)
            this.platform.SDKCreateRoleNative(params);
        ReportData.getIns().reportRoleInfo(params, false, false, true);
    };
    /**
     * SDK进入游戏
     */
    SDKManager.prototype.SDKEnterGameNative = function (params) {
        if (this.platform)
            this.platform.SDKEnterGameNative(params);
        ReportData.getIns().reportRoleInfo(params, true);
        if (!this.doPointTimes) {
            ReportData.getIns().reportDoPointLogin();
            this.doPointTimes += 1;
        }
        if (GlobalModel.isMicroclient) {
            ReportData.getIns().reportMicroclientReward();
        }
    };
    /**
     * SDK角色升级
     */
    SDKManager.prototype.SDKUserUpgradeNative = function (params) {
        if (this.platform)
            this.platform.SDKUserUpgradeNative(params);
        ReportData.getIns().reportRoleInfo(params, false, true);
    };
    /**
     * SDK下单参数
     */
    SDKManager.prototype.GetMakeOrderSdkArgs = function (params) {
        if (this.platform) {
            return this.platform.GetMakeOrderSdkArgs(params);
        }
        return null;
    };
    /**
     * SDK是否支持支付
     */
    SDKManager.prototype.CheckSupportRecharge = function () {
        if (this.platform) {
            return this.platform.CheckSupportRecharge();
        }
        return true;
    };
    /**
     * SDK支付
     */
    SDKManager.prototype.SDKPayNative = function (params) {
        if (this.platform)
            this.platform.SDKPayNative(params);
    };
    /**
     * SDK埋点
     */
    SDKManager.prototype.SDKSetDataNative = function (params) {
        if (this.platform)
            this.platform.SDKSetDataNative(params);
    };
    /**
     * SDK登出
     */
    SDKManager.prototype.SDKLogoutNative = function () {
        if (this.platform)
            this.platform.SDKLogoutNative();
    };
    /**
     * SDK退出
     */
    SDKManager.prototype.SDKExitNative = function () {
        if (this.platform)
            this.platform.SDKExitNative();
    };
    /**
     * SDK分享
     */
    SDKManager.prototype.SDKShowShare = function (params) {
        if (this.platform)
            this.platform.SDKShowShare(params);
    };
    /**
     * SDK二维码关注
     */
    SDKManager.prototype.SDKShowQRCode = function () {
        if (this.platform)
            this.platform.SDKShowQRCode();
    };
    /**
     * facebook礼包
     */
    SDKManager.prototype.SDKStartForGift = function () {
        if (this.platform)
            this.platform.SDKStartForGift();
    };
    /**
     * 活动
     */
    SDKManager.prototype.SDKFaceStartGift = function () {
        if (this.platform)
            this.platform.SDKFaceStartGift();
    };
    /**
     * SDK回调
     */
    SDKManager.prototype.NativeCallback = function (msg) {
        if (this.platform)
            this.platform.nativeCallback(msg);
    };
    /**
     * 执行tap
     */
    SDKManager.prototype.SDKTapExecute = function () {
        if (this.platform)
            this.platform.SDKTapExecute();
    };
    /**
     * 打开平台ICO特定的功能界面
     */
    SDKManager.prototype.SDKShowImmersiveIconNative = function (params) {
        if (this.platform)
            this.platform.SDKShowImmersiveIconNative(params);
    };
    /**
     * 显示切换账号
     */
    SDKManager.prototype.SDKShowLogout = function () {
        if (this.platform) {
            return this.platform.SDKShowLogout();
        }
        return false;
    };
    /**
     * 显示超级vip
     */
    SDKManager.prototype.SDKShowSuperVip = function () {
        if (this.platform) {
            return this.platform.showSuperVip();
        }
        return false;
    };
    /**
     * 获取状态栏高度
     */
    SDKManager.prototype.getStatusHeight = function () {
        if (this.platform) {
            return this.platform.getStatusHeight();
        }
        return 0;
    };
    /**
     * 获取底部安全高度
     */
    SDKManager.prototype.getBottomSafeHeight = function () {
        if (this.platform) {
            return this.platform.getBottomSafeHeight();
        }
        return 0;
    };
    /**是否显示小游戏账号互通按钮 */
    SDKManager.prototype.isShowMiniAccountJumpPortalIcon = function () {
        if (this.platform) {
            return this.platform.isShowMiniAccountJumpPortalIcon();
        }
        return false;
    };
    /**小游戏账号互通按钮操作 */
    SDKManager.prototype.miniAccountJumpPortalIconTap = function () {
        if (this.platform) {
            this.platform.miniAccountJumpPortalIconTap();
        }
    };
    /** 是否不显示任何支付样式 */
    SDKManager.prototype.isHideRechargeShow = function () {
        if (this.platform) {
            return this.platform.isHideRechargeShow();
        }
        return false;
    };
    /** 是否显示分享入口 */
    SDKManager.prototype.isShowSharePortalIcon = function () {
        if (this.platform) {
            return this.platform.isShowSharePortalIcon();
        }
        return false;
    };
    SDKManager.prototype.powerChange = function () {
        if (this.platform) {
            return this.platform.powerChange();
        }
    };
    /** 邀请人数据 */
    SDKManager.prototype.getInviterInfo = function () {
        if (this.platform) {
            return this.platform.getInviterInfo();
        }
        return null;
    };
    return SDKManager;
}(SingleClass));
__reflect(SDKManager.prototype, "SDKManager");
var UnitFilterUtils = (function () {
    function UnitFilterUtils() {
    }
    UnitFilterUtils.getBuffFilter = function (filter) {
        if (filter == 1 /* hard */) {
            return FilterUtils.ARRAY_GRAY_FILTER;
        }
        else if (filter == 2 /* poison */) {
            return FilterUtils.ARRAY_GREEN_FILTER;
        }
        return null;
    };
    UnitFilterUtils.getUnitFilter = function (groupID) {
        var filter = 0 /* no */;
        if (this.isHard(groupID)) {
            filter = 1 /* hard */;
        }
        else if (this.isPoison(groupID)) {
            filter = 2 /* poison */;
        }
        return filter;
    };
    //石化
    UnitFilterUtils.isHard = function (groupID) {
        return groupID == 51001 || groupID == 150065;
    };
    //中毒
    UnitFilterUtils.isPoison = function (groupID) {
        return groupID == 23001 || groupID == 61001 || groupID == 150071;
    };
    return UnitFilterUtils;
}());
__reflect(UnitFilterUtils.prototype, "UnitFilterUtils");
/**
 * 掉落物
 */
var UnitItem = (function (_super) {
    __extends(UnitItem, _super);
    function UnitItem() {
        var _this = _super.call(this) || this;
        _this._effId = 0;
        _this.ignoreLeak = true;
        _this.touchEnabled = false;
        _this.touchChildren = false;
        _this._itemImg = new eui.Image;
        _this._itemImg.x = -17;
        _this._itemImg.y = -17;
        _this._itemImg.scaleX = _this._itemImg.scaleY = 0.6;
        _this.addChild(_this._itemImg);
        _this._roatImg = new eui.Image("point3");
        _this._roatImg.anchorOffsetX = 5;
        _this._roatImg.anchorOffsetY = 5;
        _this._roatImg.alpha = 0;
        _this.addChild(_this._roatImg);
        _this.addEventListener(egret.Event.REMOVED_FROM_STAGE, _this.removeRoatEffect, _this);
        return _this;
    }
    UnitItem.prototype.setData = function (item) {
        if (item.type) {
            this._itemImg.source = DataCenter.ins().ItemConfig[item.id].icon + "_png";
        }
        else {
            if (item.id == 1 /* TYPE_1 */) {
                this._itemImg.source = "icgoods117_png";
            }
            else if (item.id == 2 /* TYPE_2 */) {
                this._itemImg.source = "icgoods121_png";
            }
            else if (item.id == 4 /* TYPE_4 */) {
                this._itemImg.source = "200136_png";
            }
            else if (item.id == 9 /* TYPE_9 */) {
                this._itemImg.source = "500007_png";
            }
        }
        this._effId = item.dropEffId;
    };
    UnitItem.prototype.addRoatEffect = function () {
        this.removeRoatEffect();
        var tween = egret.Tween.get(this._roatImg, { loop: true });
        tween.to({ alpha: 1 }, 200).to({ rotation: 90 }, 1000).to({ alpha: 0 }, 200).wait(300);
    };
    UnitItem.prototype.removeRoatEffect = function () {
        this._roatImg.alpha = 0;
        this._roatImg.rotation = 0;
        egret.Tween.removeTweens(this._roatImg);
    };
    UnitItem.prototype.addEffect = function () {
        if (this._effId) {
            if (!this._itemMc) {
                this._itemMc = ObjectPool.pop("GameMovieClip");
            }
            if (!this._itemMc.parent) {
                this.addChild(this._itemMc);
            }
            var dropItemEffectConfig = DataCenter.ins().DropItemEffectConfig[this._effId];
            if (dropItemEffectConfig && dropItemEffectConfig.resource) {
                this._itemMc.playFile(PATH_EFF + dropItemEffectConfig.resource, -1);
            }
        }
    };
    UnitItem.prototype.removeEffect = function () {
        if (this._itemMc) {
            this._itemMc.destroy();
            this._itemMc = null;
        }
    };
    return UnitItem;
}(BaseLeakDisplay));
__reflect(UnitItem.prototype, "UnitItem");
/**
 * 掉落名
 */
var UnitItemName = (function (_super) {
    __extends(UnitItemName, _super);
    function UnitItemName() {
        var _this = _super.call(this) || this;
        _this.touchEnabled = false;
        _this.touchChildren = false;
        _this._nameTxt = new eui.Label;
        _this._nameTxt.stroke = 1;
        _this._nameTxt.strokeColor = ColorUtils.BLACK;
        _this._nameTxt.size = 14;
        _this._nameTxt.y = -25;
        _this._nameTxt.width = 120;
        _this._nameTxt.x = -60;
        _this._nameTxt.textAlign = egret.HorizontalAlign.CENTER;
        _this.addChild(_this._nameTxt);
        return _this;
    }
    UnitItemName.prototype.setData = function (item) {
        if (item.type) {
            if (item.id == 500007) {
                this._nameTxt.text = "" + item.count;
            }
            else {
                var itemName = DataCenter.ins().ItemConfig[item.id].name;
                if (item.count > 1) {
                    this._nameTxt.text = item.count + itemName;
                }
                else {
                    this._nameTxt.text = itemName;
                }
            }
            this._nameTxt.textColor = ItemUtils.getQualityColor(DataCenter.ins().ItemConfig[item.id]);
        }
        else {
            if (item.id == 1 /* TYPE_1 */) {
                this._nameTxt.text = "" + item.count;
                this._nameTxt.textColor = LangMgr.getColor("qualityColor0");
            }
            else if (item.id == 2 /* TYPE_2 */) {
                this._nameTxt.text = LangMgr.getValueByKey('charItemYB', item.count);
                this._nameTxt.textColor = LangMgr.getColor("qualityColor5");
            }
            else if (item.id == 4 /* TYPE_4 */) {
                this._nameTxt.text = LangMgr.getValueByKey('charItemStone', item.count);
                this._nameTxt.textColor = LangMgr.getColor("qualityColor2");
            }
            else if (item.id == 9 /* TYPE_9 */) {
                this._nameTxt.text = LangMgr.getValueByKey('charItemessence', item.count);
                this._nameTxt.textColor = LangMgr.getColor("qualityColor1");
            }
        }
    };
    return UnitItemName;
}(egret.DisplayObjectContainer));
__reflect(UnitItemName.prototype, "UnitItemName");
/**
 * 掉落物名
 */
var UnitItemNameMerge = (function (_super) {
    __extends(UnitItemNameMerge, _super);
    function UnitItemNameMerge() {
        var _this = _super.call(this) || this;
        _this.touchEnabled = false;
        _this.touchChildren = false;
        _this.item = new UnitItem();
        _this.itemName = new UnitItemName();
        return _this;
    }
    Object.defineProperty(UnitItemNameMerge.prototype, "infoModel", {
        get: function () {
            return this._infoModel;
        },
        set: function (model) {
            this._infoModel = model;
        },
        enumerable: true,
        configurable: true
    });
    UnitItemNameMerge.prototype.setData = function (item) {
        this.item.setData(item);
        this.itemName.setData(item);
        this.addEventListener(egret.Event.ADDED_TO_STAGE, this.onAdd, this);
    };
    UnitItemNameMerge.prototype.setItemParent = function (parent) {
        this._itemParent = parent;
        this.addEventListener(egret.Event.ADDED_TO_STAGE, this.onAdd, this);
        this._itemParent.addChild(this);
    };
    UnitItemNameMerge.prototype.addFloatEffect = function () {
        egret.Tween.removeTweens(this.item);
        var tween = egret.Tween.get(this.item);
        var posY = this.item.y;
        this.item.y -= 100;
        tween.to({ y: posY }, 500, egret.Ease.bounceOut);
    };
    UnitItemNameMerge.prototype.addRoatEffect = function () {
        this.item.addRoatEffect();
    };
    UnitItemNameMerge.prototype.removeRoatEffect = function () {
        this.item.removeRoatEffect();
    };
    UnitItemNameMerge.prototype.addEffect = function () {
        this.item.addEffect();
    };
    UnitItemNameMerge.prototype.removeEffect = function () {
        this.item.removeEffect();
    };
    UnitItemNameMerge.prototype.onAdd = function (e) {
        this.addEventListener(egret.Event.REMOVED_FROM_STAGE, this.onRemove, this);
        RecycleMgr.ins().reloadContainer(this.item);
        if (this._itemParent) {
            this._itemParent.addChild(this.item);
            this._itemParent.addChild(this.itemName);
        }
        else {
            DropControl.dropContainer.addChild(this.item);
            DropControl.dropNameContainer.addChild(this.itemName);
        }
    };
    UnitItemNameMerge.prototype.onRemove = function (e) {
        this.removeEventListener(egret.Event.REMOVED_FROM_STAGE, this.onRemove, this);
        if (this.item.parent) {
            this.item.parent.removeChild(this.item);
        }
        if (this.itemName.parent) {
            this.itemName.parent.removeChild(this.itemName);
        }
        this.removeRoatEffect();
        this.removeEffect();
    };
    Object.defineProperty(UnitItemNameMerge.prototype, "x", {
        get: function () {
            return egret.superGetter(UnitItemNameMerge, this, 'x');
        },
        set: function (_x) {
            egret.superSetter(UnitItemNameMerge, this, 'x', _x);
            this.itemName.x = _x;
            this.item.x = _x;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UnitItemNameMerge.prototype, "y", {
        get: function () {
            return egret.superGetter(UnitItemNameMerge, this, 'y');
        },
        set: function (_y) {
            egret.superSetter(UnitItemNameMerge, this, 'y', _y);
            this.itemName.y = _y;
            this.item.y = _y;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UnitItemNameMerge.prototype, "team", {
        get: function () {
            return this.infoModel.team;
        },
        enumerable: true,
        configurable: true
    });
    UnitItemNameMerge.prototype.reset = function () {
        this.item.scaleX = 1;
        this.item.scaleY = 1;
        this.itemName.scaleX = 1;
        this.itemName.scaleY = 1;
    };
    UnitItemNameMerge.prototype.destruct = function () {
        this.item.scaleX = 1;
        this.item.scaleY = 1;
        this.itemName.scaleX = 1;
        this.itemName.scaleY = 1;
        this._itemParent = null;
        this.removeEventListener(egret.Event.ADDED_TO_STAGE, this.onAdd, this);
    };
    return UnitItemNameMerge;
}(egret.DisplayObjectContainer));
__reflect(UnitItemNameMerge.prototype, "UnitItemNameMerge");
/**
 * 旷工
 */
var UnitMiner = (function (_super) {
    __extends(UnitMiner, _super);
    function UnitMiner() {
        var _this = _super.call(this) || this;
        _this.npcHead.currentState = _this.npcHead.states[1];
        return _this;
    }
    Object.defineProperty(UnitMiner.prototype, "infoModel", {
        get: function () {
            return this._infoModel;
        },
        set: function (model) {
            this._infoModel = model;
        },
        enumerable: true,
        configurable: true
    });
    UnitMiner.prototype.updateModel = function () {
        _super.prototype.updateModel.call(this);
        var config = DataCenter.ins().MineSourceConfig[this.infoModel.configID];
        this.npcHead.nameTxt.text = this.infoModel.name + LangMgr.getValueByKey('charMinerWorker');
        this.npcHead.nameTxt.textColor = config.color;
        this.updateTime();
        this.updateTitleState();
    };
    UnitMiner.prototype.updateTime = function () {
        var sec = Math.floor((this.infoModel.endTime - GameServer.serverTime) / 1000);
        if (sec >= 0) {
            this.npcHead.timeTxt.text = DateUtils.getFormatBySecond(sec, DateUtils.TIME_FORMAT_3);
        }
        else {
            mineControl.remove(this.infoModel.index);
        }
        this.playAction(UnitAction.ATTACK, function () { });
    };
    UnitMiner.prototype.updateTitleState = function () {
        this.npcHead.updateState(this.infoModel);
    };
    UnitMiner.prototype.destruct = function () {
        this.destroy();
        ObjectPool.push(this);
    };
    return UnitMiner;
}(UnitNpc));
__reflect(UnitMiner.prototype, "UnitMiner");
var UnitNpcHead = (function (_super) {
    __extends(UnitNpcHead, _super);
    function UnitNpcHead() {
        var _this = _super.call(this) || this;
        _this.states = ["none", "mine"];
        _this.skinName = "UnitNpcHeadSkin";
        _this.contentGroup.touchEnabled = false;
        _this.touchEnabled = false;
        return _this;
    }
    UnitNpcHead.prototype.updateModel = function (info) {
        var config = info.npcConfig;
        if (config && config.title) {
            this.titleGroup.visible = true;
        }
        else {
            this.titleGroup.visible = false;
        }
        this.titleImg.source = config ? config.title : "";
        this.icon.source = config ? config.headIcon : "";
    };
    UnitNpcHead.prototype.updateState = function (info) {
        if (info.isBeFight) {
            this.setState(1);
        }
        else if (mineControl.getIsCanAtk(info)) {
            this.setState(2);
        }
        else {
            this.setState(0);
        }
    };
    UnitNpcHead.prototype.setState = function (state) {
        if (state == 1) {
            this.workerState.source = "";
        }
        else if (state == 2) {
            this.workerState.source = "kuanggong_title";
        }
        else {
            this.workerState.source = "";
        }
        this.setEff(state);
    };
    UnitNpcHead.prototype.setEff = function (state) {
        if (state == 1) {
            var eff = this.getEff();
            eff.playFile(PATH_EFF + "fighting", -1);
            eff.x = this.stateGroup.width >> 1;
            eff.y = -20;
            this.stateGroup.addChild(eff);
        }
        else {
            if (this.eff) {
                DisplayUtils.removeFromParent(this.eff);
                this.eff.dispose();
            }
        }
    };
    UnitNpcHead.prototype.getEff = function () {
        if (!this.eff) {
            this.eff = new GameMovieClip();
        }
        return this.eff;
    };
    return UnitNpcHead;
}(eui.Component));
__reflect(UnitNpcHead.prototype, "UnitNpcHead");
/**
 * 人物
 */
var UnitRole = (function (_super) {
    __extends(UnitRole, _super);
    function UnitRole() {
        var _this = _super.call(this) || this;
        _this.ringMc = [];
        _this.zhanLingAttack = false;
        _this.touchEnabled = false;
        _this.touchChildren = false;
        _this.AI_STATE = 0 /* Stand */;
        _this.neigongBar = new eui.ProgressBar();
        _this.neigongBar.skinName = "bloodyelskin";
        _this.neigongBar.anchorOffsetY = -5;
        _this.neigongBar.labelDisplay.visible = false;
        _this.neigongBar.labelFunction = function () { return ''; };
        _this.titleCantainer.addChild(_this.neigongBar);
        _this.neigongBar.anchorOffsetX = Math.floor(_this.neigongBar.width >> 1);
        _this._nameTxt.textColor = LangMgr.getColor('color39');
        _this._nameGroup.visible = true;
        _this._lilianTitle = new eui.Image();
        _this._lilianTitle.scaleX = 0.5;
        _this._lilianTitle.scaleY = 0.5;
        _this._lilianTitle.bottom = -1;
        _this._nameGroup.addChild(_this._lilianTitle);
        return _this;
    }
    UnitRole.prototype.createTweenObj = function () {
        var self = this;
        this.dieTweenObj = {
            set alpha(al) {
                self.alpha = al;
            },
            get alpha() {
                return self.alpha;
            }
        };
        this.moveTweenObj = {
            set x(x) {
                self.x = x >> 0;
                self.moveCamera();
            },
            set y(y) {
                self.y = y >> 0;
                self.moveCamera();
            },
            get x() {
                return self.x;
            },
            get y() {
                return self.y;
            }
        };
    };
    UnitRole.prototype.setClothesFileName = function (resName, mcOrder) {
        if (mcOrder === void 0) { mcOrder = 1 /* BODY */; }
        var model = this.infoModel;
        if (mcOrder == 1 /* BODY */) {
            this.initBody(PATH_RENWU + resName + "_" + model.sex);
        }
        else {
            this.addMc(mcOrder, PATH_RENWU + resName + "_" + model.sex);
        }
    };
    UnitRole.prototype.setWeaponFileName = function (resName, sex) {
        if (sex === void 0) { sex = 0; }
        this.addMc(2 /* WEAPON */, PATH_WUQI + resName + "_" + sex);
    };
    UnitRole.prototype.setWing = function () {
        var model = this.infoModel;
        var hideWing = model.isMy ? ServerStorage.ins().getBitBool(ClientSetBit.hide_mine_wing) : ServerStorage.ins().getBitBool(ClientSetBit.hide_other_wing);
        if (hideWing) {
            this.removeMc(3 /* WING */);
        }
        else if (model.zhuangbei[2] > 0) {
            var res = DataCenter.ins().FashionIdConfig[model.zhuangbei[2]].res;
            this.setWingFileName(res);
        }
        else if (model.wingsData.openStatus && DataCenter.ins().FeatherLevelConfig[model.wingsData.lv]) {
            this.setWingFileName(DataCenter.ins().FeatherLevelConfig[model.wingsData.lv].appearance);
        }
    };
    UnitRole.prototype.setWingFileName = function (name) {
        this.addMc(3 /* WING */, PATH_CHIBANG + name);
    };
    UnitRole.prototype.setHeirloomFileName = function (name) {
        this.addMc(6 /* HEIR */, PATH_EFF + name);
    };
    UnitRole.prototype.setSoulFileName = function (name) {
        if (GlobalModel.mianUIState == "cq")
            this.addMc(7 /* SOUL */, PATH_WUQI + name);
    };
    //加载其他模型 如武器羽翼
    UnitRole.prototype.loadOther = function (mcType) {
        if (this.action == UnitAction.DIE) {
            if (mcType != 1 /* BODY */ && mcType != 2 /* WEAPON */) {
                var mc = this.getMc(mcType);
                if (mc)
                    mc.visible = false;
                return;
            }
        }
        else {
            var mc = this.getMc(mcType);
            if (mc)
                mc.visible = true;
        }
        if (mcType == 8 /* ZHANLING */ && (this.zhanLingAttack || this._state == UnitAction.ATTACK))
            return;
        _super.prototype.loadOther.call(this, mcType);
    };
    UnitRole.prototype.playBody = function (e) {
        _super.prototype.playBody.call(this, e);
        if (this.ringMc && this.ringMc.length > 0) {
            this.updateRingMC();
        }
    };
    UnitRole.prototype.getResDir = function (mcType) {
        var td = 2 * (this._dir - 4);
        if (td < 0)
            td = 0;
        var sceneDir = UnitModel.getSceneDir();
        if (sceneDir != 5) {
            sceneDir = UnitModel.getBodyDir();
        }
        if (GameServer.serverOpenDay < 7 || sceneDir == 5) {
            return this._dir - td;
        }
        var dir = this._dir - td;
        return dir < 2 ? 1 : 3;
    };
    /**
     * 更新数据显示
     */
    UnitRole.prototype.updateBlood = function (force) {
        var _this = this;
        if (force === void 0) { force = false; }
        _super.prototype.updateBlood.call(this, force);
        if (this._hpBar.value <= 0) {
            this.onDead(function () {
                _this.deadDelay();
            });
        }
    };
    UnitRole.prototype.parseModel = function () {
        var model = this.infoModel;
        this._hpBar.thumb["source"] = this.isMy ? "boolGreen_png" : "boolRed_png";
        this.updateShadow();
        this.setCharName(model.guildAndName);
        this.setLilian(model.lilianUrl);
        this.updateBlood(true);
        this.updateNeiGong();
        var canShow = false;
        if (canShow = appearanceControl.checkCanShow(model, 0 /* WEAPON */, 0 /* TYPE0 */)) {
            var effName = appearanceControl.getEquipEffName(model, 0 /* WEAPON */, 0 /* TYPE0 */);
            if (effName) {
                this.setWeaponFileName(effName, model.sex);
            }
        }
        else if (canShow = appearanceControl.checkCanShow(model, 0 /* WEAPON */, 1 /* TYPE1 */)) {
            var effName = appearanceControl.getEquipEffName(model, 0 /* WEAPON */, 1 /* TYPE1 */);
            if (effName) {
                var fashionSex = appearanceControl.getWeaponFashionSex(model);
                this.setWeaponFileName(effName, fashionSex);
            }
        }
        if (canShow = appearanceControl.checkCanShow(model, 0 /* WEAPON */, 4 /* TYPE4 */)) {
            var effName = appearanceControl.getEquipEffName(model, 0 /* WEAPON */, 4 /* TYPE4 */);
            if (effName) {
                if (model.heirloomDressId) {
                    var heirloomillusionConfig = DataCenter.ins().HeirloomillusionConfig[model.heirloomDressId];
                    this.setHeirloomFileName(heirloomillusionConfig.eff + "w");
                }
                else {
                    this.setHeirloomFileName(effName);
                }
            }
        }
        if (canShow = appearanceControl.checkCanShow(model, 2 /* CLOTHES */, 0 /* TYPE0 */)) {
            var effName = appearanceControl.getEquipEffName(model, 2 /* CLOTHES */, 0 /* TYPE0 */);
            if (effName) {
                this.setClothesFileName(effName);
            }
            else {
                this.setClothesFileName(RENWU_PREFIX + "000");
            }
        }
        else if (canShow = appearanceControl.checkCanShow(model, 2 /* CLOTHES */, 1 /* TYPE1 */)) {
            var effName = appearanceControl.getEquipEffName(model, 2 /* CLOTHES */, 1 /* TYPE1 */);
            if (effName) {
                this.setClothesFileName(effName);
            }
        }
        if (model.thirteenEquipLv) {
            var effName = appearanceControl.getEquipEffName(model, 0 /* WEAPON */, 5 /* TYPE5 */);
            if (effName) {
                this.setWeaponFileName(effName, model.sex);
            }
            effName = appearanceControl.getEquipEffName(model, 2 /* CLOTHES */, 5 /* TYPE5 */);
            if (effName) {
                this.setClothesFileName(effName, model.sex);
            }
        }
        //吞噬
        if (model.weaponViewType == 6 /* TYPE6 */ && model.weaponViewId) {
            var effName = appearanceControl.getEquipEffName(model, 0 /* WEAPON */, 6 /* TYPE6 */);
            if (effName) {
                this.setWeaponFileName(effName, model.sex);
            }
        }
        if (model.clothesViewType == 6 /* TYPE6 */ && model.clothesViewId) {
            var effName = appearanceControl.getEquipEffName(model, 2 /* CLOTHES */, 6 /* TYPE6 */);
            if (effName) {
                this.setClothesFileName(effName);
            }
        }
        this.setWing();
        this.updateTitle();
        this.updateNameColor();
    };
    UnitRole.prototype.updateNameColor = function () {
        var model = this.infoModel;
        if (model == undefined) {
            debug.log("Model is null!!!");
            return;
        }
        if (model.camp > 0 && campWarControl.isCampWar()) {
            this.setNameTxtColor(model.camp != campWarControl.camp ? 0xFF0000 : 0x00FF00);
        }
        else if (!this.isMy && model.camp > 0 && crossArenaControl.isKFArena) {
            this.setNameTxtColor(model.camp != crossArenaControl.myCampId ? 0xFF0000 : 0x99FF00);
        }
        else if (this.team == 2 /* WillEntity */) {
            this.setNameTxtColor(0xFFFF00);
        }
        else {
            this.setNameTxtColor(0xFFFFFF);
        }
    };
    UnitRole.prototype.setHeirloomSuitEff = function () {
        var model = this.infoModel;
        if (model != undefined && model.heirloom && !model.heirloomDressId) {
            var suitConfig = model.heirloom.getSuitConfig(model);
            if (suitConfig && suitConfig.weff) {
                this.setHeirloomFileName(suitConfig.weff);
            }
        }
    };
    UnitRole.prototype.addBuff = function (buff) {
        _super.prototype.addBuff.call(this, buff);
        var config = buff.effConfig;
        if (MapControl.copyId == 0) {
            switch (config.type) {
                //召唤
                case 5 /* Summon */:
                    var entityModel = void 0;
                    if (this.team == 0 /* My */) {
                        var tempData = artifactControl.getReviseBySkill(35001);
                        var gwSkills = godWeaponControl.getReviseBySkill(35001);
                        var gwSkill = void 0;
                        if (gwSkills)
                            gwSkill = gwSkills[0];
                        var taoistSummonerSkill = crazyDogControl.getLinkSkillReviseCfg(35001);
                        var monsterId = config.args.a;
                        if (tempData && tempData.args && tempData.args[0]) {
                            monsterId += tempData.args[0].vals[2];
                        }
                        if (gwSkill && gwSkill.args && gwSkill.args[0]) {
                            monsterId += gwSkill.args[0].vals[2];
                        }
                        if (taoistSummonerSkill) {
                            monsterId += taoistSummonerSkill.args[0].vals[2];
                        }
                        entityModel = copyControl.createModel(DataCenter.ins().MonstersConfig[monsterId]);
                        entityModel.x = this.x;
                        entityModel.y = this.y;
                        entityModel.masterHandle = this.infoModel.handle;
                        entityModel.setAtt(9 /* atMoveSpeed */, this.infoModel.getAtt(9 /* atMoveSpeed */));
                        var attValue = 0;
                        var baseValue = entityModel.getAtt(4 /* atAttack */);
                        if (tempData && tempData.args && tempData.args[0]) {
                            var times = tempData.args[0].vals[3] ? tempData.args[0].vals[3] : 1;
                            attValue += this.infoModel.getAtt(4 /* atAttack */) * times;
                        }
                        if (gwSkill && gwSkill.args && gwSkill.args[0]) {
                            var times = gwSkill.args[0].vals[3] ? gwSkill.args[0].vals[3] : 1;
                            attValue += this.infoModel.getAtt(4 /* atAttack */) * times;
                        }
                        entityModel.setAtt(4 /* atAttack */, (attValue >> 0) + baseValue);
                    }
                    else {
                        entityModel = copyControl.createModel(DataCenter.ins().MonstersConfig[config.args.a]);
                        entityModel.x = this.x;
                        entityModel.y = this.y;
                        entityModel.masterHandle = this.infoModel.handle;
                        entityModel.setAtt(9 /* atMoveSpeed */, this.infoModel.getAtt(9 /* atMoveSpeed */));
                    }
                    entityModel.isMy = entityModel.checkHandleIsMy(entityModel.masterHandle);
                    gameControl.createEntityByModel(entityModel, this.team);
                    break;
            }
        }
    };
    /**
     * 更新内功显示
     */
    UnitRole.prototype.updateNeiGong = function () {
        if (!this.infoModel) {
            return;
        }
        var maxValue = this.infoModel.getAtt(26 /* maxNeiGong */);
        this.neigongBar.visible = this.checkNeigongVisible();
        this.neigongBar.maximum = maxValue;
        this.neigongBar.value = this.infoModel.getAtt(25 /* cruNeiGong */);
        if (this.neigongBar.visible) {
            this.showName(this.neigongBar.visible);
            this.showBlood(this.neigongBar.visible);
        }
    };
    UnitRole.prototype.checkNeigongVisible = function () {
        var maxValue = this.infoModel.getAtt(26 /* maxNeiGong */);
        return maxValue != 0 && this._state != UnitAction.DIE;
    };
    /**
     * 更新称号
     */
    UnitRole.prototype.updateTitle = function () {
        var model = this.infoModel;
        var title = model.title;
        var hideTitle = model.isMy ? ServerStorage.ins().getBitBool(ClientSetBit.hide_mine_title) : ServerStorage.ins().getBitBool(ClientSetBit.hide_other_title);
        this.removeTitle();
        if (this.action != UnitAction.DIE && !hideTitle && this.getIsShowBody()) {
            var titleConf = DataCenter.ins().TitleConfig[title];
            if (model.canWearNewTitle && model.newTitle) {
                titleConf = DataCenter.ins().FreshManTitleConfig[model.newTitle];
            }
            if (titleConf) {
                if (titleConf.img) {
                    if (this._title == null) {
                        this._title = new eui.Image;
                        this._title.anchorOffsetX = 230 >> 1;
                        this._title.anchorOffsetY = 100;
                        this.titleCantainer.addChild(this._title);
                        this._title.addEventListener(egret.Event.COMPLETE, this.onTitleComplete, this);
                    }
                    this._title.source = titleConf.img;
                }
                else if (titleConf.eff) {
                    this.playTitleEff(titleConf.eff);
                    this.onTitleComplete();
                }
            }
            else if (model.isMy && model == heroControl.getSubRoleByIndex(0)) {
                this.showNewPlayerTitle();
            }
        }
    };
    UnitRole.prototype.removeHeadTitle = function () {
        if (this._headTitle) {
            this._headTitle.source = "";
        }
        if (this._headTitleMc) {
            this._headTitleMc.destroy();
            this._headTitleMc = null;
        }
    };
    UnitRole.prototype.onTitleComplete = function () {
        var offY = 20;
        var offHeadHeight = 9;
        var titleHeight = 0;
        if (this._headTitle && this._headTitle.source) {
            titleHeight = this._headTitle.height;
            offY += titleHeight;
            this._headTitle.anchorOffsetX = this._headTitle.width >> 1;
            this._headTitle.anchorOffsetY = offY + offHeadHeight;
        }
        if (this._title && this._title.source) {
            var offHeight = titleHeight ? 0.9 * this._title.height : this._title.height;
            offY += offHeight;
            this._title.anchorOffsetX = this._title.width >> 1;
            this._title.anchorOffsetY = offY;
        }
        else if (this._titleMc) {
            var offHeight = titleHeight ? 53 : 60;
            this._titleMc.anchorOffsetY = offY + offHeight;
        }
    };
    /**
     * 显示新手引导称号
     */
    UnitRole.prototype.showNewPlayerTitle = function () {
        var newp = DataCenter.ins().RoleTitleConfig[1];
        if (!newp)
            return;
        if (newp.openFun == 0)
            return;
        if (newp.openpf.indexOf(GlobalModel.pf) == -1)
            return;
        if (vipControl.lv >= newp.vip)
            return;
        if (ActorControl.level >= newp.level && reincarnateControl.lv >= newp.zsLevel)
            return;
        this.playTitleEff(newp.title);
    };
    /**
     * 播放称号动画
     */
    UnitRole.prototype.playTitleEff = function (effurl) {
        if (this._titleMc == null) {
            this._titleMc = ObjectPool.pop("GameMovieClip");
            this._titleMc.anchorOffsetX = 0;
            this._titleMc.anchorOffsetY = 80;
            this.titleCantainer.addChild(this._titleMc);
        }
        var eff = PATH_EFF + effurl;
        this.playFile(this._titleMc, eff);
    };
    UnitRole.prototype.updateRingMC = function () {
        for (var i in this.ringMc) {
            if (this.ringMc[i]) {
                //临时处理角色死亡后，不显示戒指的问题
                if (this.ringMc[i].parent == null) {
                    this.addChild(this.ringMc[i]);
                }
                this.ringMc[i].setEffectXY(this.dir);
            }
        }
    };
    UnitRole.prototype.setCharName = function (str) {
        _super.prototype.setCharName.call(this, str);
        this._lilianTitle.x = (this._nameGroup.width >> 1) + (this._nameTxt.width >> 1) - 6;
        this._nameGroup.visible = true;
    };
    UnitRole.prototype.setLilian = function (url) {
        this._lilianTitle.source = url;
    };
    Object.defineProperty(UnitRole.prototype, "infoModel", {
        get: function () {
            return this._infoModel;
        },
        set: function (model) {
            if (model) {
                this._infoModel = model;
            }
            else {
                debug.log("Model is null!!!");
            }
        },
        enumerable: true,
        configurable: true
    });
    UnitRole.prototype.autoAddBlood = function () {
        if (this.action == UnitAction.DIE) {
            egret.clearTimeout(this.timeID);
            return;
        }
        if (this.getRealHp() < this.infoModel.getAtt(2 /* atMaxHp */)) {
            var value = -this.infoModel.getAtt(18 /* atRegeneration */);
            //显示对象血条扣血
            this.hram(value);
            var curHp = this.infoModel.getAtt(0 /* atHp */) - value;
            var maxHp = this.infoModel.getAtt(2 /* atMaxHp */);
            this.infoModel.setAtt(0 /* atHp */, curHp > maxHp ? maxHp : curHp);
            //飘血
            gameControl.dispatchEntityHpChange(this, null, 1 /* TYPE1 */, value);
        }
        TimerMgr.ins().doTimer(1000, 1, this.autoAddBlood, this);
    };
    UnitRole.prototype.showNeigong = function (b) {
        this.neigongBar.visible = b && this.checkNeigongVisible();
    };
    //显示战灵
    UnitRole.prototype.showZhanling = function (id, lv, ishide) {
        if (!ashtarteControl.ZhanLingOpen())
            return false;
        var config = DataCenter.ins().AshtarteLevelConfig[0][lv];
        if (!config.talentLevel)
            return false;
        if (!ishide) {
            if (this.isMy) {
                if (ServerStorage.ins().getBitBool(ClientSetBit.hide_mine_zhanling)) {
                    return false;
                }
            }
            else if (ServerStorage.ins().getBitBool(ClientSetBit.hide_other_zhanling)) {
                return false;
            }
        }
        config = DataCenter.ins().AshtarteLevelConfig[id][lv];
        if (Assert(config, "ZhanLingLevel is null : id(" + id + "),lv(" + lv + ")")) {
            return false;
        }
        var fileName = config.appearance;
        this.addMc(8 /* ZHANLING */, PATH_GUAIWU + fileName);
        this.updateZhanLingOffset();
        TimerMgr.ins().remove(this.playZhanLingAttack, this);
        TimerMgr.ins().doTimer(200, 1, this.playZhanLingAttack, this);
        TimerMgr.ins().remove(this.hideAshtarte, this);
        TimerMgr.ins().doTimer(3000, 1, this.hideAshtarte, this);
        return true;
    };
    UnitRole.prototype.updateZhanLingOffset = function () {
        var mc = this.getMc(8 /* ZHANLING */);
        var anchorOffsets = DataCenter.ins().AshtarteConfig.anchorOffset;
        if (anchorOffsets) {
            var dir = this.dir == 0 || this.dir == 4 ? 0 : 1;
            var anchorOffset = anchorOffsets[dir] || [];
            mc.anchorOffsetX = anchorOffset[0] || 0;
            mc.anchorOffsetY = anchorOffset[1] || 0;
        }
    };
    UnitRole.prototype.playZhanLingAttack = function () {
        var _this = this;
        var mcType = 8 /* ZHANLING */;
        var mc = this.getMc(mcType);
        if (mc) {
            mc.scaleX = this._dir > 4 ? -1 : 1;
            var s = this.getFileName(mcType) + "_" + this.getResDir(mcType) + UnitAction.ATTACK;
            this.zhanLingAttack = true;
            mc.playFile(s, 1, function () {
                _this.zhanLingAttack = false;
                var src = _this.getFileName(mcType) + "_" + _this.getResDir(mcType) + UnitAction.STAND;
                mc.playFile(src, -1, null, false);
            }, false);
        }
    };
    //隐藏战灵
    UnitRole.prototype.hideAshtarte = function () {
        var _this = this;
        var mc = this.getMc(8 /* ZHANLING */);
        if (mc) {
            egret.Tween.get(mc).to({ alpha: 0 }, DataCenter.ins().AshtarteConfig.disappearTime || 1500).call(function () {
                _this.removeMc(8 /* ZHANLING */);
            });
        }
    };
    UnitRole.prototype.reset = function () {
        _super.prototype.reset.call(this);
        this.zhanLingAttack = false;
        this.AI_STATE = 0 /* Stand */;
    };
    UnitRole.prototype.destruct = function () {
        _super.prototype.destruct.call(this);
        this.AI_STATE = 0 /* Stand */;
        this._hpBar.visible = this._nameGroup.visible = true;
        this._nameTxt.textColor = LangMgr.getColor('color39');
        for (var i in this.ringMc) {
            if (this.ringMc[i]) {
                this.ringMc[i].reset();
                this.ringMc[i] = null;
                delete this.ringMc[i];
            }
        }
    };
    UnitRole.prototype.deadDelay = function () {
        this._hpBar.slideDuration = 0;
        this._hpBar.value = 0;
        this.neigongBar.slideDuration = 0;
        this.neigongBar.value = this.neigongBar.maximum;
        this.stopMove();
        this.removeHardStraight();
        this.removeAllBuff();
        this.hideAshtarte();
        this.neigongBar.visible = false;
        if (this._title)
            this._title.source = '';
        if (this._headTitle)
            this._headTitle.source = "";
        this._hpBar.visible = this._nameGroup.visible = false;
        this.atking = false;
        TimerMgr.ins().removeAll(this);
        var wingMc = this.getMc(3 /* WING */);
        if (wingMc) {
            wingMc.visible = false;
        }
        if (this.infoModel) {
            titleControl.refNewTitle(this.infoModel.masterHandle);
        }
        if (this.infoModel && this.infoModel.isMy) {
            gameControl.dispatchMoveCamera();
        }
    };
    Object.defineProperty(UnitRole.prototype, "nameVisible", {
        get: function () {
            return this._nameGroup.visible;
        },
        enumerable: true,
        configurable: true
    });
    UnitRole.prototype.showNameAndHp = function () {
        this._hpBar.visible = this._nameGroup.visible = true;
    };
    UnitRole.prototype.showBodyContainer = function () {
        if (this.isShowBody)
            return;
        _super.prototype.showBodyContainer.call(this);
        this.neigongBar.alpha = 1;
    };
    UnitRole.prototype.hideBodyContainer = function () {
        if (!this.isShowBody)
            return;
        _super.prototype.hideBodyContainer.call(this);
        this.neigongBar.alpha = 0;
    };
    UnitRole.prototype.moveCamera = function () {
        if (this.checkIsCamera()) {
            gameControl.dispatchMoveCamera();
            this.checkMove();
        }
    };
    UnitRole.prototype.checkMove = function () {
        if (toseongControl.isToseong) {
            var sefety = "sefety";
            var xy = {
                x: MapControl.point2Grip(this.x),
                y: MapControl.point2Grip(this.y)
            };
            if (!this[sefety] && MapControl.checkSafety(xy)) {
                tipsControl.showCenterTips(LangMgr.getValueByKey("charRoleEnterSafety"));
                this[sefety] = true;
            }
            else if (this[sefety] && !MapControl.checkSafety(xy)) {
                tipsControl.showCenterTips(LangMgr.getValueByKey("charRoleOutSafety"));
                this[sefety] = false;
            }
        }
    };
    /**
     * 是否在安全区域
     */
    UnitRole.prototype.isSafety = function () {
        var xy = { x: MapControl.point2Grip(this.x), y: MapControl.point2Grip(this.y) };
        return MapControl.checkSafety(xy);
    };
    /**
     * 死亡处理
     */
    UnitRole.prototype.onDead = function (callBack) {
        this.stopMove();
        this.removeTitle();
        this.playAction(UnitAction.DIE);
        if (callBack) {
            TimerMgr.ins().once(300, callBack, this);
        }
    };
    UnitRole.prototype.stopMove = function () {
        _super.prototype.stopMove.call(this);
        if (this.checkIsCamera()) {
            SoundUtils.ins().stopRun();
            gameControl.dispatchAdjustMapPos();
        }
    };
    UnitRole.prototype.checkIsCamera = function () {
        return lookControl.checkIsCamera(this);
    };
    UnitRole.prototype.hideBar = function () {
        this.neigongBar.visible = false;
        this._hpBar.visible = false;
    };
    UnitRole.prototype.updateShadow = function () {
        if (this.isMy && UnitHideMgr.ins().shadowMcOpen) {
            this.setShadowType(1 /* movie */);
            this.loadShadow();
        }
        else {
            this.setShadowType(0 /* image */);
        }
    };
    __decorate([
        callLater
    ], UnitRole.prototype, "moveCamera", null);
    return UnitRole;
}(UnitMonster));
__reflect(UnitRole.prototype, "UnitRole");
var UnitShadow = (function (_super) {
    __extends(UnitShadow, _super);
    function UnitShadow() {
        var _this = _super.call(this) || this;
        _this.lastType = -1;
        return _this;
    }
    UnitShadow.prototype.setType = function (type) {
        if (this.lastType != type) {
            this.reset();
            this.lastType = type;
            if (type == 0 /* image */) {
                this.shadowImg = new eui.Image(PATH_RES + "shadow.png");
                this.addChild(this.shadowImg);
                this.shadowImg.anchorOffsetX = 28;
                this.shadowImg.anchorOffsetY = 18;
            }
            else {
                this.shadowMc = ObjectPool.pop("GameMovieClip");
                this.addChild(this.shadowMc);
                this.shadowMc.filters = FilterUtils.shadowFilter;
                this.shadowMc.matrix = new egret.Matrix(1, 0, Math.tan(-20 / 180 * Math.PI), 0.5, 0, 0);
            }
        }
    };
    UnitShadow.prototype.playFile = function (name, playCount, scaleX) {
        if (playCount === void 0) { playCount = 1; }
        if (scaleX === void 0) { scaleX = 1; }
        if (this.lastType == 1 /* movie */ && name) {
            this.shadowMc.playFile(name, playCount, null, false);
            this.shadowMc.scaleX = scaleX;
        }
    };
    UnitShadow.prototype.reset = function () {
        if (this.lastType >= 0) {
            if (this.shadowImg) {
                DisplayUtils.removeFromParent(this.shadowImg);
                this.shadowImg = null;
            }
            if (this.shadowMc) {
                this.shadowMc.matrix = new egret.Matrix;
                this.shadowMc.destroy();
                this.shadowMc = null;
            }
            this.lastType = -1;
        }
    };
    UnitShadow.prototype.dispose = function () {
        this.reset();
        DisplayUtils.removeFromParent(this);
    };
    return UnitShadow;
}(egret.DisplayObjectContainer));
__reflect(UnitShadow.prototype, "UnitShadow");
var UnitStatue = (function (_super) {
    __extends(UnitStatue, _super);
    function UnitStatue(title, name, body) {
        var _this = _super.call(this) || this;
        _this.title = new GameMovieClip;
        _this.title.playFile(PATH_EFF + title, -1);
        _this.addChild(_this.title);
        _this.roleName = new eui.Label();
        _this.roleName.size = 14;
        _this.roleName.strokeColor = 0;
        _this.roleName.stroke = 1;
        _this.roleName.lineSpacing = 2;
        _this.roleName.textAlign = egret.HorizontalAlign.CENTER;
        _this.roleName.textFlow = TextUtils.generateTextFlow1("" + name);
        _this.roleName.x = -_this.roleName.width >> 1;
        _this.addChild(_this.roleName);
        _this.model = new eui.Image();
        _this.model.source = body + "_png";
        _this.addChild(_this.model);
        _this.model.once(egret.Event.COMPLETE, function () {
            _this.model.x = -_this.model.width >> 1;
            _this.model.y = -_this.model.height;
            _this.roleName.y = _this.model.y - 20;
            _this.title.y = _this.roleName.y - 50;
        }, _this);
        return _this;
    }
    Object.defineProperty(UnitStatue.prototype, "weight", {
        get: function () {
            return this.y;
        },
        enumerable: true,
        configurable: true
    });
    return UnitStatue;
}(egret.DisplayObjectContainer));
__reflect(UnitStatue.prototype, "UnitStatue");
/**
 * 传送点
 */
var UnitTransfer = (function (_super) {
    __extends(UnitTransfer, _super);
    function UnitTransfer() {
        var _this = _super.call(this) || this;
        _this.hasDir = [];
        _this.touchEnabled = true;
        _this.transferName = new UnitTransferHead();
        _this.transferName.anchorOffsetX = 40;
        _this.transferName.anchorOffsetY = 21;
        _this.titleCantainer.addChild(_this.transferName);
        _this.titleCantainer.anchorOffsetY = 80;
        return _this;
    }
    Object.defineProperty(UnitTransfer.prototype, "infoModel", {
        get: function () {
            return this._infoModel;
        },
        set: function (model) {
            this._infoModel = model;
        },
        enumerable: true,
        configurable: true
    });
    UnitTransfer.prototype.updateModel = function () {
        this.x = this.infoModel.x;
        this.y = this.infoModel.y;
        this.transferName.updateModel(this.infoModel);
        this.addMc(1 /* BODY */, this.infoModel.avatarFileName);
    };
    return UnitTransfer;
}(UnitEffect));
__reflect(UnitTransfer.prototype, "UnitTransfer");
var UnitTransferHead = (function (_super) {
    __extends(UnitTransferHead, _super);
    function UnitTransferHead() {
        var _this = _super.call(this) || this;
        _this.skinName = "UnitTransferHeadSkin";
        return _this;
    }
    UnitTransferHead.prototype.updateModel = function (info) {
        if (info.index) {
            this.visible = true;
            this.num.text = info.index + "";
        }
        else {
            this.visible = false;
        }
    };
    return UnitTransferHead;
}(eui.Component));
__reflect(UnitTransferHead.prototype, "UnitTransferHead");
var UnitHideMgr = (function (_super) {
    __extends(UnitHideMgr, _super);
    function UnitHideMgr() {
        var _this = _super.call(this) || this;
        //当前场景是否开启隐藏功能
        _this.isOpen = false;
        //是否显示人物模型
        _this.isShow = false;
        //当前显示人物模型的masterHandle
        _this.showHandles = [];
        _this.showNum = 3;
        _this.storageKey = "hide_fbtype_";
        //上次攻击的目标
        _this.lastAtkHandle = 0;
        _this.lastFbID = 0;
        _this.stageMsHandle = {};
        _this.stageRoleNum = 0;
        _this.maxStageRoleNum = 10;
        _this.ignoreMaxNum = 3;
        _this.shadowMcOpen = false;
        _this.addCustomEvent(356 /* REMOVE_ENTITY */, _this.onRemoveEntity);
        _this.addCustomEvent(364 /* ATK_TARGET */, _this.onChangeTarget);
        _this.addCustomEvent(305 /* BOSS_REMAIN_TIME */, _this.onRoleDie);
        _this.addCustomEvent(103 /* TOSEONG_REMAIN_TIME */, _this.onRoleDie);
        _this.addCustomEvent(333 /* DEVILDOM_REVIVE */, _this.onRoleDie);
        _this.addCustomEvent(327 /* CROSS_BOSS_SELF_REVIVE */, _this.onRoleDie);
        _this.addCustomEvent(5 /* FRAME_RATE_LEVEL */, _this.onLvChange);
        _this.shadowMcOpen = DeviceUtils.isWebgl;
        _this.enIns = UnitMgr.ins();
        return _this;
    }
    UnitHideMgr.ins = function () {
        return _super.ins.call(this);
    };
    UnitHideMgr.prototype.changeScene = function () {
        if (this.lastFbID != MapControl.copyId) {
            this.lastFbID = MapControl.copyId;
            this.isOpen = this.getIsOpen();
            this.showHandles.length = 0;
            this.lastAtkHandle = 0;
            this.stageMsHandle = {};
            this.stageRoleNum = 0;
            if (this.isOpen) {
                this.isShow = !ClientStorage.ins().getBool(this.storageKey + MapControl.copyType);
                this.maxStageRoleNum = this.getMaxStageNum();
                UIMgr.ins().open("ShieldView");
            }
            else {
                UIMgr.ins().close("ShieldView");
            }
        }
    };
    UnitHideMgr.prototype.onCreateEntity = function (model) {
        if (this.isOpen) {
            if (model.isMy || model.type != 1 /* ROLE */ && model.type != 4 /* LADDERPLAYER */ || this.updateShowHandles(model.masterHandle, true)) {
                this.sendHandlesToServer();
                if (this.checkCanToStage(model)) {
                    this.addToStageList(model);
                }
            }
        }
    };
    UnitHideMgr.prototype.setShowState = function (isShow, ignoreStorage) {
        this.isShow = isShow && this.stageRoleNum <= this.ignoreMaxNum;
        this.showOrHideEntitys(this.isShow);
        this.sendHandlesToServer();
        if (!ignoreStorage) {
            ClientStorage.ins().setBool(this.storageKey + MapControl.copyType, !isShow);
        }
    };
    UnitHideMgr.prototype.checkIsShowBody = function (handle) {
        if (!this.isOpen)
            return true;
        if (!this.isShow)
            return false;
        var masterHandle = this.enIns.getRootMasterHandle(handle);
        return masterHandle ? this.showHandles.indexOf(masterHandle) >= 0 : true;
    };
    UnitHideMgr.prototype.onRemoveEntity = function (_a) {
        var handle = _a[0], entity = _a[1];
        if (this.isOpen) {
            var infoModel = entity.infoModel;
            if (!entity.isMy && entity instanceof UnitRole && infoModel.masterHandle) {
                if (this.updateShowHandles(infoModel.masterHandle, false)) {
                    this.sendHandlesToServer();
                    this.searchNewHandle();
                }
            }
            if (this.removeFromStageList(infoModel)) {
                this.searchRoleAddToStage();
            }
        }
    };
    UnitHideMgr.prototype.updateShowHandles = function (masterHandle, isAdd) {
        if (isAdd && this.showHandles.length >= this.showNum)
            return false;
        var index = this.showHandles.indexOf(masterHandle);
        if (isAdd) {
            if (index == -1) {
                this.showHandles.push(masterHandle);
                return true;
            }
        }
        else {
            if (index >= 0) {
                this.showHandles.splice(index, 1);
                return true;
            }
        }
        return false;
    };
    UnitHideMgr.prototype.onChangeTarget = function () {
        if (!this.isOpen)
            return;
        if (gameControl.currAttackHandle == this.lastAtkHandle)
            return;
        var ms = gameControl.currAttackHandle;
        var old = this.lastAtkHandle;
        this.lastAtkHandle = ms;
        //如果已经屏蔽了所有人
        if (!this.isShow) {
            if (old)
                this.hideEntity(old);
            if (ms)
                this.showEntity(ms);
            this.sendHandlesToServer();
        }
        if (!ms)
            return;
        if (this.showHandles.indexOf(ms) >= 0)
            return;
        if (this.showHandles.length >= this.showNum) {
            var masterHandle = this.showHandles.shift();
            this.hideEntity(masterHandle);
        }
        this.showHandles.push(ms);
        this.showEntity(ms);
        if (!this.checkIsInStageList(ms)) {
            this.addRoleToStage(ms);
            this.searchRoleRomoveFromStage();
        }
        this.sendHandlesToServer();
    };
    UnitHideMgr.prototype.onRoleDie = function () {
        if (!this.isOpen)
            return;
        var old = this.lastAtkHandle;
        this.lastAtkHandle = 0;
        //如果已经屏蔽了所有人
        if (!this.isShow) {
            if (old) {
                this.hideEntity(old);
                this.sendHandlesToServer();
            }
        }
    };
    UnitHideMgr.prototype.searchNewHandle = function () {
        var entityList = this.enIns.getAllEntity();
        for (var i in entityList) {
            var info = entityList[i].infoModel;
            if (info && !info.isMy && info.type == 1 /* ROLE */ && this.checkCanToStage(info)) {
                if (this.updateShowHandles(info.masterHandle, true)) {
                    this.showEntity(info.masterHandle);
                    break;
                }
            }
        }
    };
    UnitHideMgr.prototype.showOrHideEntitys = function (isShow) {
        var msList = this.showHandles;
        for (var _i = 0, msList_1 = msList; _i < msList_1.length; _i++) {
            var ms = msList_1[_i];
            isShow ? this.showEntity(ms) : this.hideEntity(ms);
        }
    };
    UnitHideMgr.prototype.showEntity = function (masterHandle) {
        var list = this.enIns.getEntityRelationHandle(masterHandle);
        for (var _i = 0, list_2 = list; _i < list_2.length; _i++) {
            var char = list_2[_i];
            char.showBodyContainer();
            char.updateModel();
        }
    };
    UnitHideMgr.prototype.hideEntity = function (masterHandle) {
        var list = this.enIns.getEntityRelationHandle(masterHandle);
        for (var _i = 0, list_3 = list; _i < list_3.length; _i++) {
            var char = list_3[_i];
            char.hideBodyContainer();
        }
    };
    UnitHideMgr.prototype.sendHandlesToServer = function () {
        var msList = this.isShow ? this.showHandles : (this.lastAtkHandle ? [this.lastAtkHandle] : []);
        gameControl.upGetOtherAttr(msList);
    };
    UnitHideMgr.prototype.getIsOpen = function () {
        return !!DataCenter.ins().ScenesConfig[MapControl.mapID].hideBodyEff;
    };
    UnitHideMgr.prototype.getMaxStageNum = function () {
        return DataCenter.ins().ScenesConfig[MapControl.mapID].maxShowNum || 10;
    };
    UnitHideMgr.prototype.onLvChange = function (lv) {
        if (this.shadowMcOpen && lv > 1 /* B */) {
            this.shadowMcOpen = false;
            var entitys = this.enIns.getEntityByIsMy(true);
            for (var i = 0; i < entitys.length; i++) {
                var entity = entitys[i];
                if (entity instanceof UnitRole) {
                    entity.updateShadow();
                }
            }
        }
    };
    UnitHideMgr.prototype.showOrHideAllEntitys = function (isShow) {
        var entitys = this.enIns.getAllEntity();
        for (var key in entitys) {
            var entity = entitys[key];
            if (entity && entity.infoModel) {
                if (isShow) {
                    entity.showBodyContainer();
                    entity.showTitleCantainer();
                    entity.showShadowCantainer();
                }
                else {
                    entity.hideBodyContainer();
                    entity.hideTitleCantainer();
                    entity.hideShadowCantainer();
                }
            }
        }
    };
    UnitHideMgr.prototype.checkIsInStageList = function (handle) {
        return !!this.stageMsHandle[handle];
    };
    UnitHideMgr.prototype.checkCanToStage = function (infoModel) {
        if (this.stageRoleNum < this.maxStageRoleNum) {
            return true;
        }
        var handle = this.enIns.getRootMasterHandle(infoModel.masterHandle);
        return this.checkIsInStageList(handle);
    };
    UnitHideMgr.prototype.addRoleToStage = function (handle) {
        var entitys = this.enIns.getEntityRelationHandle(handle);
        for (var i = 0; i < entitys.length; i++) {
            var entity = entitys[i];
            if (entity instanceof UnitRole) {
                this.addToStageList(entity.infoModel);
            }
            gameControl.addEntity(entity);
        }
    };
    UnitHideMgr.prototype.removeRoleFromStage = function (handle) {
        var entitys = this.enIns.getEntityRelationHandle(handle);
        for (var i = 0; i < entitys.length; i++) {
            var entity = entitys[i];
            if (entity instanceof UnitRole) {
                this.removeFromStageList(entity.infoModel);
            }
            DisplayUtils.removeFromParent(entity);
        }
    };
    UnitHideMgr.prototype.addToStageList = function (infoModel) {
        if (!infoModel || !infoModel.masterHandle) {
            return false;
        }
        var masterHandle = this.enIns.getRootMasterHandle(infoModel.masterHandle);
        var handles = this.stageMsHandle[masterHandle];
        if (handles) {
            if (handles.indexOf(infoModel.handle) < 0) {
                handles.push(infoModel.handle);
            }
            return false;
        }
        else {
            this.stageMsHandle[masterHandle] = [infoModel.handle];
            this.stageRoleNum += 1;
            this.setShowState(!ClientStorage.ins().getBool(this.storageKey + MapControl.copyType), true);
            return true;
        }
    };
    UnitHideMgr.prototype.removeFromStageList = function (infoModel) {
        if (!infoModel || !infoModel.masterHandle) {
            return false;
        }
        var masterHandle = this.enIns.getRootMasterHandle(infoModel.masterHandle);
        var handles = this.stageMsHandle[masterHandle];
        if (handles) {
            var index = handles.indexOf(infoModel.handle);
            if (index >= 0) {
                handles.splice(index, 1);
            }
            if (0 == handles.length) {
                delete this.stageMsHandle[masterHandle];
                this.stageRoleNum -= 1;
                this.setShowState(!ClientStorage.ins().getBool(this.storageKey + MapControl.copyType), true);
                return true;
            }
        }
        return false;
    };
    UnitHideMgr.prototype.searchRoleAddToStage = function () {
        var entitys = this.enIns.getAllEntity();
        for (var key in entitys) {
            var entity = entitys[key];
            if (!entity.parent && entity instanceof UnitMonster) {
                var infoModel = entity.infoModel;
                if (infoModel && infoModel.masterHandle) {
                    var masterHandle = this.enIns.getRootMasterHandle(infoModel.masterHandle);
                    if (this.checkCanToStage(infoModel)) {
                        this.addRoleToStage(masterHandle);
                    }
                }
            }
        }
    };
    UnitHideMgr.prototype.searchRoleRomoveFromStage = function () {
        if (!(this.stageRoleNum <= this.maxStageRoleNum)) {
            for (var key in this.stageMsHandle) {
                var handle = +key;
                if (this.showHandles.indexOf(handle) < 0) {
                    this.removeRoleFromStage(handle);
                    break;
                }
            }
        }
    };
    UnitHideMgr.prototype.showAllEntity = function (handle) {
        var entitys = this.enIns.getEntityRelationHandle(handle);
        for (var i = 0; i < entitys.length; i++) {
            var entity = entitys[i];
            entity.showBodyContainer();
            entity.showTitleCantainer();
        }
    };
    UnitHideMgr.prototype.hideAllEntity = function (handle) {
        var entitys = this.enIns.getEntityRelationHandle(handle);
        for (var i = 0; i < entitys.length; i++) {
            var entity = entitys[i];
            entity.hideBodyContainer();
            entity.hideTitleCantainer();
        }
    };
    __decorate([
        callDelay(200)
    ], UnitHideMgr.prototype, "sendHandlesToServer", null);
    __decorate([
        callDelay(200)
    ], UnitHideMgr.prototype, "searchRoleAddToStage", null);
    return UnitHideMgr;
}(BaseSystem));
__reflect(UnitHideMgr.prototype, "UnitHideMgr");
var UnitMgr = (function (_super) {
    __extends(UnitMgr, _super);
    function UnitMgr() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.actorList = {};
        _this.masterList = {};
        _this.entityList = {};
        _this.transferList = {};
        _this.mineList = {};
        _this.distances = [];
        _this.listCount = [];
        return _this;
    }
    UnitMgr.ins = function () {
        return _super.ins.call(this);
    };
    UnitMgr.prototype.getAllEntity = function () {
        return this.entityList;
    };
    UnitMgr.prototype.resetRole = function () {
        var len = heroControl.subRolesLen;
        for (var i = 0; i < len; i++) {
            var model = heroControl.getSubRoleByIndex(i);
            model.name = ActorControl.myName;
            if (!this.getEntityByHandle(model.handle)) {
                model.setPos(DropControl.tempDropPoint.x * MapControl.CELL_SIZE, DropControl.tempDropPoint.y * MapControl.CELL_SIZE);
                model.setAtt(0 /* atHp */, model.getAtt(2 /* atMaxHp */));
                model.setAtt(1 /* atMp */, model.getAtt(3 /* atMaxMp */));
                gameControl.createEntityByModel(model, 0 /* My */);
            }
            else {
                var char = this.getEntityByHandle(model.handle);
                char.infoModel.setAtt(0 /* atHp */, model.getAtt(2 /* atMaxHp */));
                char.infoModel.setAtt(1 /* atMp */, model.getAtt(3 /* atMaxMp */));
                char.updateBlood(true);
            }
        }
    };
    UnitMgr.prototype.addList = function (char) {
        if (!char.infoModel.handle)
            char.infoModel.handle = char.hashCode;
        if (this.entityList[char.infoModel.handle] == char) {
            return;
        }
        this.entityList[char.infoModel.handle] = char;
        if (char.infoModel.masterHandle) {
            var msth = char.infoModel.masterHandle;
            if (!this.masterList[msth])
                this.masterList[msth] = [];
            this.masterList[msth].push(char);
        }
        if (char.infoModel.type == 102 /* MINE */) {
            this.mineList[char.infoModel.index] = char;
        }
        var count = this.listCount[char.team] || 0;
        this.listCount[char.team] = ++count;
    };
    UnitMgr.prototype.addTransfer = function (char) {
        this.transferList[char.infoModel.configID] = char;
        SkillEffPlayDisplay.bottomLayer.addChild(char);
    };
    UnitMgr.prototype.removeTransferById = function (configID) {
        var char = this.transferList[configID];
        if (char) {
            delete this.transferList[configID];
            DisplayUtils.removeFromParent(char);
        }
    };
    UnitMgr.prototype.getTransferById = function (configID) {
        return this.transferList[configID];
    };
    //获取矿工
    UnitMgr.prototype.getMineByIndex = function (index) {
        return this.mineList[index];
    };
    //移除矿工
    UnitMgr.prototype.removeMineByIndex = function (index) {
        var char = this.mineList[index];
        if (char) {
            delete this.mineList[index];
            if (char.infoModel) {
                this.removeByHandle(char.infoModel.handle);
            }
        }
    };
    UnitMgr.prototype.createEntity = function (model, param) {
        switch (model.type) {
            case 1 /* ROLE */:
            case 4 /* LADDERPLAYER */: {
                var roleModel = model;
                if (param && param[0] != null) {
                    roleModel.team = param[0];
                }
                else {
                    if (model.masterHandle && model.masterHandle == ActorControl.handle)
                        roleModel.team = 0 /* My */;
                    else
                        roleModel.team = 2 /* WillEntity */;
                }
                var role = ObjectPool.pop('UnitRole');
                role.reset();
                if (roleModel.masterHandle == ActorControl.handle) {
                    var role_2 = heroControl.getSubRoleByIndex(roleModel.configID);
                    if (role_2) {
                        role_2.mergeOtherAttr(roleModel);
                        roleModel = role_2.mergeData(roleModel);
                        roleModel.attributeData = role_2.attributeData;
                        roleModel.attributeExData = role_2.attributeExData;
                    }
                }
                role.infoModel = roleModel;
                role.x = roleModel.x;
                role.y = roleModel.y;
                this.addList(role);
                if (MapControl.sceneInHook()) {
                    HookControl.ins().add(role);
                }
                var isShowBody = true;
                //隐藏
                if (roleModel.team != 0 /* My */) {
                    if (!UnitShowMgr.ins().checkShowHandle(roleModel.masterHandle)) {
                        role.hideBodyContainer();
                        role.updateModel();
                        return null;
                    }
                    if (!UnitHideMgr.ins().checkCanToStage(roleModel)) {
                        role.hideBodyContainer();
                        role.updateModel();
                        return null;
                    }
                    isShowBody = UnitHideMgr.ins().checkIsShowBody(roleModel.masterHandle);
                }
                isShowBody ? role.showBodyContainer() : role.hideBodyContainer();
                role.updateModel();
                titleControl.refNewTitle(role.infoModel.masterHandle);
                return role;
            }
            case 2 /* MONSTER */:
            case 5 /* COLLECTIONMONST */: {
                if (param && param[0] != null) {
                    model.team = param[0];
                }
                else {
                    if (model.masterHandle && model.masterHandle != 0) {
                        if (model.isMy)
                            model.team = 0 /* My */;
                        else
                            model.team = 2 /* WillEntity */;
                    }
                    else
                        model.team = 1 /* Monster */;
                }
                //取对象池里的缓存
                var monster = ObjectPool.pop("UnitMonster");
                //重置缓存
                monster.reset();
                //设置model数据
                monster.infoModel = model;
                monster.x = model.x;
                monster.y = model.y;
                this.addList(monster);
                if (MapControl.sceneInHook()) {
                    HookControl.ins().add(monster);
                }
                var isShowBody = true;
                //假如主人已经屏蔽，则宠物也屏蔽
                if (monster.team != 0 /* My */ && model.masterHandle) {
                    var rootMasterHandle = this.getRootMasterHandle(model.masterHandle);
                    var masters = this.getMasterList(rootMasterHandle);
                    if (masters) {
                        for (var _i = 0, masters_1 = masters; _i < masters_1.length; _i++) {
                            var master = masters_1[_i];
                            if (monster != master && !master.parent) {
                                monster.hideBodyContainer();
                                monster.updateModel();
                                return null;
                            }
                        }
                    }
                    if (model.team == 2 /* WillEntity */) {
                        isShowBody = UnitHideMgr.ins().checkIsShowBody(model.masterHandle);
                    }
                }
                isShowBody ? monster.showBodyContainer() : monster.hideBodyContainer();
                monster.updateModel();
                return monster;
            }
            case 6 /* DROPITEM */: {
                var unitItemNameMerge = ObjectPool.pop("UnitItemNameMerge");
                unitItemNameMerge.setData(model.itemData);
                unitItemNameMerge.x = model.x;
                unitItemNameMerge.y = model.y;
                unitItemNameMerge.infoModel = model;
                this.addList(unitItemNameMerge);
                unitItemNameMerge.addRoatEffect();
                unitItemNameMerge.addFloatEffect();
                unitItemNameMerge.addEffect();
                return unitItemNameMerge;
            }
            case 101 /* TRANSFER */: {
                var transfer = ObjectPool.pop("UnitTransfer");
                transfer.infoModel = model;
                this.addTransfer(transfer);
                transfer.updateModel();
                return transfer;
            }
            case 100 /* CNPC */: {
                var npc = ObjectPool.pop("UnitNpc");
                npc.infoModel = model;
                this.addList(npc);
                npc.updateModel();
                return npc;
            }
            case 102 /* MINE */: {
                var miner = ObjectPool.pop("UnitMiner");
                miner.infoModel = model;
                this.addList(miner);
                miner.updateModel();
                return miner;
            }
        }
        return null;
    };
    UnitMgr.prototype.removeAll = function () {
        for (var i in this.entityList) {
            this.removeByHandle(i);
        }
        for (var i in this.transferList) {
            this.removeTransferById(i);
        }
        confrontFightControl.stop();
        this.entityList = {};
        this.masterList = {};
        this.transferList = {};
        this.actorList = {};
        this.listCount = [];
    };
    UnitMgr.prototype.hideOtherEntity = function (b) {
        this.isHideOther = b;
        for (var i in this.entityList) {
            if (this.entityList[i].team != 2 /* WillEntity */)
                continue;
            if (b)
                DisplayUtils.removeFromParent(this.entityList[i]);
            else
                gameControl.addEntity(this.entityList[i]);
        }
    };
    //获取handle方的所有实体 包括角色与召唤兽
    UnitMgr.prototype.getEntityRelationHandle = function (handle) {
        var masterHandle = this.getRootMasterHandle(handle);
        var masters = this.getMasterList(masterHandle); //3个角色
        var list = [].concat(masters || []);
        for (var _i = 0, list_4 = list; _i < list_4.length; _i++) {
            var char = list_4[_i];
            var model = char.infoModel;
            if (!model)
                continue;
            if (model.job == 3 /* DaoShi */) {
                var l = this.getMasterList(model.handle); //道士召唤兽
                if (l) {
                    list = list.concat(l);
                }
                break;
            }
        }
        return list;
    };
    UnitMgr.prototype.removeByHandle = function (handle, removeDisplay, expEffect) {
        if (removeDisplay === void 0) { removeDisplay = true; }
        if (expEffect === void 0) { expEffect = false; }
        var entity = this.entityList[handle];
        if (!entity)
            return;
        var isRole = (entity instanceof UnitRole);
        var msth = entity.infoModel.masterHandle;
        if (msth) {
            var arr = this.masterList[msth];
            for (var i = 0; arr && i < arr.length; i++) {
                if (arr[i] == entity) {
                    arr.splice(i, 1);
                    break;
                }
            }
            if (arr && arr.length == 0)
                delete this.masterList[msth];
        }
        delete this.entityList[handle];
        for (var i in this.entityList) {
            if (this.entityList[i].infoModel.masterHandle && this.entityList[i].infoModel.masterHandle == handle) {
                this.removeByHandle(this.entityList[i].infoModel.handle);
            }
        }
        var count = this.listCount[entity.team] || 0;
        this.listCount[entity.team] = --count;
        if (entity instanceof UnitMonster) {
            entity.stopMove();
            entity.removeAllFilters();
        }
        egret.Tween.removeTweens(entity);
        if (removeDisplay) {
            DisplayUtils.removeFromParent(entity);
            if (entity instanceof UnitMonster && !(entity instanceof UnitRole)) {
                entity.destroy();
            }
        }
        HookControl.ins().remove(entity);
        DropControl.tempDropPoint.x = Math.floor(entity.x / MapControl.CELL_SIZE);
        DropControl.tempDropPoint.y = Math.floor(entity.y / MapControl.CELL_SIZE);
        if ((MapControl.sceneInHook() || MapControl.copyType == 16 /* EXP */) && entity.infoModel.type == 2 /* MONSTER */ && expEffect) {
            gameControl.dispatchExpMc(entity);
        }
        if (entity.infoModel.type == 102 /* MINE */) {
            delete this.mineList[entity.infoModel.index];
            entity.destruct();
        }
        return entity;
    };
    UnitMgr.prototype.getEntityByHandle = function (handle) {
        return this.entityList[handle];
    };
    UnitMgr.prototype.getMasterList = function (masterHandle) {
        return this.masterList[masterHandle];
    };
    /**
     * 获取最顶层的ActorHandle
     */
    UnitMgr.prototype.getRootMasterHandle = function (handle) {
        var target = this.getEntityByHandle(handle);
        if (target && target.infoModel && target.infoModel.masterHandle > 0 && target.infoModel.masterHandle != handle) {
            return this.getRootMasterHandle(target.infoModel.masterHandle);
        }
        else {
            return handle;
        }
    };
    UnitMgr.prototype.getMainRole = function (index) {
        return this.getEntityByHandle(heroControl.getSubRoleByIndex(index).handle);
    };
    UnitMgr.prototype.getJobMainRole = function (index) {
        var role;
        var i = 0;
        for (var key in heroControl.jobDic) {
            if (i == index) {
                role = heroControl.jobDic[key];
                break;
            }
            i++;
        }
        return this.getEntityByHandle(role.handle);
    };
    UnitMgr.prototype.getMainRoleByJob = function (job) {
        for (var key in heroControl.jobDic) {
            if (+key == job) {
                return this.getEntityByHandle(heroControl.jobDic[key].handle);
            }
        }
        return null;
    };
    UnitMgr.prototype.getNoDieRoleIndex = function () {
        var len = heroControl.subRolesLen;
        var role;
        for (var k = 0; k < len; k++) {
            role = this.getJobMainRole(k);
            if (role && role.getHP() > 0 && role.visible)
                return k;
        }
        return -1;
    };
    UnitMgr.prototype.getNoDieRole = function () {
        var len = heroControl.subRolesLen;
        var role;
        for (var k = 0; k < len; k++) {
            role = this.getJobMainRole(k);
            if (role && role.getHP() > 0 && role.visible) {
                return role;
            }
        }
        return null;
    };
    UnitMgr.prototype.getMyOtherRolePos = function () {
        var selfMaster = this.getNoDieRole();
        var mylist = this.getEntityByTeam(0 /* My */);
        var poxIndex = 0;
        var pos = {};
        for (var i in mylist) {
            var selfTarget = mylist[i];
            if (selfTarget == selfMaster) {
                continue;
            }
            var count = mylist.length;
            var dirs = [1, -1];
            if (count == 2) {
                dirs = [0];
            }
            var p = DirUtils.getGridByDir(selfMaster.dir + (dirs[poxIndex] || 0), MapControl.CELL_SIZE);
            poxIndex += 1;
            pos[selfTarget.infoModel.handle] = { x: selfMaster.x + p.x, y: selfMaster.y + p.y };
        }
        pos[selfMaster.infoModel.handle] = { x: selfMaster.x, y: selfMaster.y };
        return pos;
    };
    UnitMgr.prototype.sortSubRole = function (a, b) {
        return SortUtils.sortAscByKey(a.infoModel.job, b.infoModel.job);
    };
    UnitMgr.prototype.getTeamCount = function (team) {
        if (confrontControl.isEncounter()) {
            return HookControl.ins().getTeamCount(team, [this.isRole]);
        }
        return this.listCount[team] || 0;
    };
    UnitMgr.prototype.checkCount = function (target, range, count, sameTeam) {
        if (count === void 0) { count = 1; }
        if (sameTeam === void 0) { sameTeam = false; }
        var total = 0;
        for (var i in this.entityList) {
            var element = this.entityList[i];
            if (((!sameTeam && element.team != target.team) || (sameTeam && element.team == target.team)) &&
                MathUtils.getDistanceX2ByObject(target, element) <= Math.pow(range * MapControl.CELL_SIZE, 2)) {
                total++;
                if (total >= count)
                    break;
            }
        }
        return total >= count;
    };
    UnitMgr.prototype.checkCanAddBlood = function (t) {
        var isCan = false;
        for (var j in this.entityList) {
            if (this.entityList[j].team == t && this.entityList[j].isCanAddBlood) {
                isCan = true;
            }
        }
        return isCan;
    };
    UnitMgr.prototype.getNoDieEntityBymasterhHandle = function (masterHandle) {
        for (var handle in this.entityList) {
            if (this.entityList[handle].infoModel &&
                this.entityList[handle].infoModel.masterHandle &&
                this.entityList[handle].infoModel.masterHandle == masterHandle &&
                this.entityList[handle].infoModel.type != 2 /* MONSTER */) {
                return this.entityList[handle];
            }
        }
        return null;
    };
    UnitMgr.prototype.getEntityBymasterhHandle = function (masterHandle) {
        for (var handle in this.entityList) {
            var infoModel = this.entityList[handle].infoModel;
            if (infoModel && infoModel.masterHandle == masterHandle && infoModel.type != 2 /* MONSTER */) {
                return this.entityList[handle];
            }
        }
        return null;
    };
    UnitMgr.prototype.getEntitysBymasterhHandle = function (handle, type) {
        if (type === void 0) { type = -1; }
        var list = [];
        for (var i in this.entityList) {
            if (list.length >= 3)
                return list;
            if (this.entityList[i].infoModel &&
                this.entityList[i].infoModel.masterHandle &&
                this.entityList[i].infoModel.masterHandle == handle) {
                if (type == -1 || type == this.entityList[i].infoModel.type)
                    list.push(this.entityList[i]);
            }
        }
        return list;
    };
    UnitMgr.prototype.getEntityByTeam = function (team) {
        if (team === void 0) { team = 0 /* My */; }
        var list = [];
        for (var i in this.entityList) {
            if (this.entityList[i].infoModel && this.entityList[i].infoModel.team == team) {
                list.push(this.entityList[i]);
            }
        }
        return list;
    };
    UnitMgr.prototype.getEntityByMonsterId = function (monsterId) {
        var list = [];
        for (var i in this.entityList) {
            if (this.entityList[i].infoModel && this.entityList[i].infoModel.configID == monsterId) {
                list.push(this.entityList[i]);
            }
        }
        return list;
    };
    UnitMgr.prototype.getEntityByIsMy = function (isMy) {
        var entitys = [];
        for (var i in this.entityList) {
            if (this.entityList[i].infoModel instanceof RoleModel && this.entityList[i].infoModel.isMy == isMy) {
                entitys.push(this.entityList[i]);
            }
        }
        return entitys;
    };
    UnitMgr.prototype.updateRoleWingState = function (isMy) {
        var entitys = this.getEntityByIsMy(isMy);
        for (var i = 0; i < entitys.length; i++) {
            var entity = entitys[i];
            entity.setWing();
        }
    };
    UnitMgr.prototype.updateRoleTitleState = function (isMy) {
        var entitys = this.getEntityByIsMy(isMy);
        for (var i = 0; i < entitys.length; i++) {
            var entity = entitys[i];
            entity.updateTitle();
        }
    };
    UnitMgr.prototype.updateName = function (isMy) {
        var entitys = this.getEntityByIsMy(isMy);
        for (var i = 0; i < entitys.length; i++) {
            var entity = entitys[i];
            entity.setCharName(entity.infoModel.guildAndName);
            entity.updateNameColor();
        }
    };
    /**
     * 通过伤害范围ID获取怪物列表
     * @param selfTarget
     * @param target
     * @param maxNum
     * @param areaId
     */
    UnitMgr.prototype.screeningTargetByMap = function (selfTarget, target, maxNum, areaId) {
        var areaConfig;
        if (Assert(areaConfig, "SkillCastRangeConf no such areaId:" + areaId)) {
            return this.screeningTargetByPos(selfTarget, false, maxNum, Number.MAX_VALUE);
        }
        var position = MapControl.getTargetIndex(selfTarget, target, areaConfig.width, areaConfig.height);
        var hId = areaConfig.range[position];
        var hAreaConfig;
        if (!hAreaConfig) {
            return this.screeningTargetByPos(selfTarget, false, maxNum, Number.MAX_VALUE);
        }
        var points = [];
        for (var i = 0; i < hAreaConfig.range.length; i++) {
            var point = MapControl.getPoint(hAreaConfig.range[i], hAreaConfig.width, hAreaConfig.height);
            points.push(point);
        }
        points.push(new egret.Point(0, 0));
        var list = MapControl.getIncludeElement(selfTarget, points, this.entityList);
        return this.screeningTargetByPos(selfTarget, false, maxNum, Number.MAX_VALUE, list);
    };
    UnitMgr.prototype.screeningTargetByPos = function (selfTarget, sameTeam, maxNum, range, list) {
        if (sameTeam === void 0) { sameTeam = false; }
        if (maxNum === void 0) { maxNum = 0; }
        if (range === void 0) { range = Number.MAX_VALUE; }
        if (list === void 0) { list = this.entityList; }
        var disFun = MathUtils.getDistanceX2ByObject;
        var range2 = range;
        if (range != Number.MAX_VALUE) {
            //索敌范围的平方
            range2 = (range * MapControl.CELL_SIZE) * (range * MapControl.CELL_SIZE);
        }
        this.distances.length = 0;
        var tempValue;
        for (var i in list) {
            var element = list[i];
            if (sameTeam && element.team != selfTarget.team)
                continue;
            if (!sameTeam && element.team == selfTarget.team)
                continue;
            //不打假人
            if (selfTarget.team == 0 /* My */ && element.team == 5 /* Faker */)
                continue;
            if (selfTarget.team == 5 /* Faker */ && element.team != 1 /* Monster */ && element.team != 5 /* Faker */)
                continue;
            //是怪物，而且是召唤怪，不做目标
            if (!(element instanceof UnitRole) && element.team != 1 /* Monster */ && element.team != 3 /* WillBoss */)
                continue;
            if (element.AI_STATE == 3 /* Die */)
                continue;
            if (confrontControl.isEncounter()) {
                if (0 /* My */ == selfTarget.team) {
                    if (2 /* WillEntity */ == element.team && !sameTeam) {
                        if (!confrontControl.checkIsEncounter(confrontFightControl.encounterIndex, element.infoModel))
                            continue;
                    }
                    else if (0 /* My */ == element.team && sameTeam) {
                        //治愈术之类的自己队伍加buff的技能
                    }
                    else {
                        continue;
                    }
                }
                else if (2 /* WillEntity */ == selfTarget.team) {
                    if (sameTeam && 2 /* WillEntity */ == element.team) {
                        //自己队伍加buff
                    }
                    else if (!sameTeam && confrontFightControl.willEntityFightTeam == element.team) {
                        //遭遇战的角色只能打玩家的子角色
                    }
                    else {
                        continue;
                    }
                }
            }
            tempValue = disFun(selfTarget, element);
            if (tempValue > range2)
                continue;
            this.distances.push({
                priority: tempValue,
                target: element
            });
        }
        this.distances.sort(this.sortFunc);
        var tempArr = [];
        var len = 0;
        if (maxNum)
            len = Math.min(this.distances.length, maxNum);
        else
            len = this.distances.length;
        for (var j = 0; j < len; j++) {
            tempArr[j] = this.distances[j].target;
        }
        return tempArr;
    };
    UnitMgr.prototype.sortFunc = function (a, b) {
        if (a.priority > b.priority)
            return 1;
        if (a.priority < b.priority)
            return -1;
        return 0;
    };
    UnitMgr.prototype.getActorByAcotorID = function (acotorId) {
        if (!this.actorList) {
            return null;
        }
        for (var key in this.actorList) {
            var actor = this.actorList[key];
            if (actor.configID == acotorId) {
                return actor;
            }
        }
        return null;
    };
    UnitMgr.prototype.getNpcByConfigID = function (configID) {
        if (!this.entityList) {
            return null;
        }
        for (var key in this.entityList) {
            var entity = this.entityList[key];
            if (entity && entity.infoModel && entity.infoModel.type == 100 /* CNPC */ && entity.infoModel.configID == configID) {
                return entity;
            }
        }
        return null;
    };
    UnitMgr.prototype.isRole = function (entity) {
        return entity && entity.infoModel ? entity.infoModel.type == 1 /* ROLE */ || entity.infoModel.type == 0 /* ACTOR */ || entity.infoModel.type == 4 /* LADDERPLAYER */ : false;
    };
    UnitMgr.prototype.isMonster = function (entity) {
        return entity && entity.infoModel ? entity.infoModel.type == 2 /* MONSTER */ || entity.infoModel.type == 5 /* COLLECTIONMONST */ : false;
    };
    UnitMgr.prototype.isMiner = function (entity) {
        return entity && entity.infoModel ? entity.infoModel.type == 102 /* MINE */ : false;
    };
    UnitMgr.prototype.isNpc = function (entity) {
        return entity && entity.infoModel ? entity.infoModel.type == 100 /* CNPC */ : false;
    };
    UnitMgr.prototype.createNpc = function (data) {
        var npcModel = new NpcModel;
        npcModel.configID = data.id;
        npcModel.x = data.x * MapControl.CELL_SIZE + (MapControl.CELL_SIZE >> 1) + (data.offX ? data.offX : 0);
        npcModel.y = data.y * MapControl.CELL_SIZE + (MapControl.CELL_SIZE >> 1) + (data.offY ? data.offY : 0);
        npcModel.dir = data.d;
        return gameControl.createEntityByModel(npcModel);
    };
    UnitMgr.prototype.getMasterSpeed = function (infoModel) {
        if (infoModel.masterHandle) {
            var masterHandle = this.getRootMasterHandle(infoModel.masterHandle);
            if (masterHandle) {
                var masters = this.getMasterList(masterHandle);
                if (masters && masters.length) {
                    var len = masters.length;
                    var speeds = [];
                    for (var i = 0; len > i; i++) {
                        var master = masters[i];
                        if (master && master instanceof UnitRole && master.getHP() > 0 && master.visible) {
                            speeds[master.infoModel['job']] = master.infoModel.getAtt(9 /* atMoveSpeed */);
                        }
                    }
                    len = speeds.length;
                    for (var i = 1; len > i; i++) {
                        var speed = speeds[i];
                        if (undefined != speed) {
                            if (infoModel.type == 1 /* ROLE */) {
                                return speed;
                            }
                            if (infoModel.masterHandle == masterHandle) {
                                return speed;
                            }
                            var entity = this.getEntityByHandle(infoModel.masterHandle);
                            if (entity) {
                                return Math.min(speed, entity.infoModel.getAtt(9 /* atMoveSpeed */));
                            }
                            break;
                        }
                    }
                }
            }
        }
        return infoModel.getAtt(9 /* atMoveSpeed */);
    };
    UnitMgr.CHAR_DEFAULT_HEIGHT = 118;
    UnitMgr.CHAR_DEFAULT_TYPEFACE = 110;
    return UnitMgr;
}(SingleClass));
__reflect(UnitMgr.prototype, "UnitMgr");
var UnitShowMgr = (function (_super) {
    __extends(UnitShowMgr, _super);
    function UnitShowMgr() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.MAX_SHOW_NUM = 3;
        _this.MAX_EFFECT_NUM = 3;
        _this.isOpen = false;
        return _this;
    }
    UnitShowMgr.ins = function () {
        return _super.ins.call(this);
    };
    UnitShowMgr.prototype.changeScene = function () {
        this.isOpen = !UnitHideMgr.ins().isOpen && MapControl.copyType != 40 /* KF_ARENA */ && !MapControl.sceneInHook();
        if (MapControl.copyType == 19 /* NEW_WORLD_BOSS */) {
            this.MAX_SHOW_NUM = 5;
        }
        else {
            this.MAX_SHOW_NUM = 3;
        }
        if (GameServer._hefuCount < 1) {
            this.MAX_SHOW_NUM = 10;
        }
        else {
            this.MAX_SHOW_NUM = 5;
        }
        if (GameServer.kfServerIDSmall) {
            this.MAX_SHOW_NUM = 3;
        }
    };
    //屏蔽我屏幕外的玩家
    UnitShowMgr.prototype.hideFurtherOtherRole = function () {
        if (this.countShowNum() < this.MAX_SHOW_NUM) {
            return;
        }
        var role = UnitMgr.ins().getNoDieRole();
        if (!role)
            return;
        var dis = 0;
        var handle;
        var maxDis = StageUtils.ins().getHeight() >> 1;
        var maxDis2 = maxDis * maxDis;
        var entityList = UnitMgr.ins().getAllEntity();
        for (var i in entityList) {
            var entity = entityList[i];
            if (entity.parent && entity.infoModel && entity.team != 0 /* My */ && entity.infoModel.type == 1 /* ROLE */) {
                var d = MathUtils.getDistanceX2ByObject(role, entity);
                if (d > maxDis2) {
                    handle = entity.infoModel.handle;
                    break;
                }
                else if (d > dis) {
                    dis = d;
                    handle = entity.infoModel.handle;
                }
            }
        }
        this.hideByHandle(handle);
    };
    UnitShowMgr.prototype.showNearSomeOne = function () {
        if (!this.isOpen)
            return;
        if (this.countShowNum() >= this.MAX_SHOW_NUM) {
            return;
        }
        var role = UnitMgr.ins().getNoDieRole();
        if (!role)
            return;
        var dis = Number.MAX_VALUE;
        var handle;
        var maxDis = StageUtils.ins().getWidth() >> 1;
        var maxDis2 = maxDis * maxDis;
        var entityList = UnitMgr.ins().getAllEntity();
        for (var i in entityList) {
            var entity = entityList[i];
            if (!entity.parent && entity.infoModel && entity.team != 0 /* My */ && entity.infoModel.type == 1 /* ROLE */) {
                var d = MathUtils.getDistanceX2ByObject(role, entity);
                if (d < maxDis2) {
                    handle = entity.infoModel.handle;
                    break;
                }
                else if (d < dis) {
                    dis = d;
                    handle = entity.infoModel.handle;
                }
            }
        }
        this.showByHandle(handle);
    };
    //显示隐藏的列表
    UnitShowMgr.prototype.showHideSomeOne = function (handle) {
        if (this.isOpen && handle) {
            var entitys = UnitMgr.ins().getEntityRelationHandle(handle);
            if (entitys && entitys.length != 0) {
                this.hideFurtherOtherRole();
                this.showByHandle(handle);
            }
        }
    };
    UnitShowMgr.prototype.hideByHandle = function (handle) {
        if (gameControl.currAttackHandle == handle || this.countShowNum() < this.MAX_SHOW_NUM) {
            return;
        }
        var list = UnitMgr.ins().getEntityRelationHandle(handle);
        for (var _i = 0, list_5 = list; _i < list_5.length; _i++) {
            var char = list_5[_i];
            DisplayUtils.removeFromParent(char);
            char.hideBodyContainer();
        }
    };
    UnitShowMgr.prototype.showByHandle = function (handle) {
        if (!this.isOpen)
            return;
        if (this.countShowNum() >= this.MAX_SHOW_NUM) {
            return;
        }
        var list = UnitMgr.ins().getEntityRelationHandle(handle);
        for (var _i = 0, list_6 = list; _i < list_6.length; _i++) {
            var char = list_6[_i];
            gameControl.addEntity(char);
            char.showBodyContainer();
        }
    };
    //是否显示技能效果
    UnitShowMgr.prototype.checkShowSkillEffect = function () {
        if (this.isOpen) {
            if (this.countShowNum() < this.MAX_EFFECT_NUM) {
                return true;
            }
            return false;
        }
        return true;
    };
    UnitShowMgr.prototype.checkShowHandle = function (handle) {
        if (!this.isOpen)
            return true;
        var ins = UnitMgr.ins();
        var masterHandle = ins.getRootMasterHandle(handle);
        if (!masterHandle)
            return true;
        if (this.countShowNum() >= this.MAX_SHOW_NUM) {
            if (ins.masterList[masterHandle] && ins.masterList[masterHandle].length && ins.masterList[masterHandle][0].parent) {
                return true;
            }
            return false;
        }
        return true;
    };
    UnitShowMgr.prototype.countShowNum = function () {
        var showNum = 0;
        if (!this.isOpen) {
            return 0;
        }
        var masterList = UnitMgr.ins().masterList;
        for (var k in masterList) {
            var masters = masterList[k];
            if (masters && masters.length) {
                //只有是已添加到舞台的非我方玩家才算
                if (masters[0].parent && masters[0].team != 0 /* My */ && masters[0].infoModel && masters[0].infoModel.type == 1 /* ROLE */) {
                    showNum += 1;
                }
            }
        }
        return showNum;
    };
    return UnitShowMgr;
}(SingleClass));
__reflect(UnitShowMgr.prototype, "UnitShowMgr");
var BuffModel = (function () {
    function BuffModel() {
        /** 倍率 */
        this.multRate = 1;
        this.isLift = false;
    }
    BuffModel.prototype.dispose = function () {
        this.source = null;
        this.hostsHandle = null;
        this.multRate = 1;
        this.isLift = false;
    };
    BuffModel.createBuff = function (id, selfTarget, args) {
        var config = DataCenter.ins().SkillsEffectsConfig[id];
        Assert(config, LangMgr.getValueByKey('entityEmpty', id));
        var effValue = HookControl.ins().skillEffValue(selfTarget, config, args);
        var addTime = args ? args.time || 0 : 0;
        return BuffModel.createBaseBuff(id, selfTarget, effValue, config.duration + addTime);
    };
    BuffModel.createBaseBuff = function (id, selfTarget, value, duration) {
        var config = DataCenter.ins().SkillsEffectsConfig[id];
        Assert(config, LangMgr.getValueByKey('entityEmpty', id));
        var buff = ObjectPool.pop("BuffModel");
        buff.effConfig = config;
        buff.value = value;
        buff.addTime = egret.getTimer();
        buff.endTime = buff.addTime + (duration ? duration : config.duration);
        buff.count = ((duration ? duration : config.duration) / config.interval) >> 0;
        buff.step = 0;
        buff.source = selfTarget;
        if (config.type == 7 /* HostAddAttributes */) {
            if (buff.hostsHandle == null) {
                buff.hostsHandle = [];
            }
            var mh = UnitMgr.ins().getRootMasterHandle(selfTarget.infoModel.handle);
            if (buff.hostsHandle.indexOf(mh) < 0) {
                buff.hostsHandle.push(mh);
            }
        }
        return buff;
    };
    BuffModel.isMaBi = function (group) {
        var effectsConfig = this.getBuffCfgByGroupId(group);
        return effectsConfig ? this.isCanotHit(effectsConfig) && effectsConfig.effID == 1 /* MB */ : false;
    };
    BuffModel.hasReMabi = function (target) {
        var buffList = target.buffList;
        for (var key in buffList) {
            var buff = buffList[key];
            if (buff.reCanotHit()) {
                return true;
            }
        }
        return false;
    };
    BuffModel.hasMabi = function (target) {
        var state = false;
        if (MapControl.sceneInHook()) {
            state = true;
        }
        else {
            var serverEffList = target.serverEffList;
            for (var key in serverEffList) {
                var serverEff = serverEffList[key];
                if (serverEff.type == 1 /* StatusType_Stun */) {
                    state = true;
                    break;
                }
            }
        }
        if (state) {
            for (var key in target.buffList) {
                var buff = target.buffList[key];
                if (buff.effConfig && this.isCanotHit(buff.effConfig) && buff.effConfig.effID == 1 /* MB */) {
                    return true;
                }
            }
        }
        return false;
    };
    BuffModel.hasReFronzen = function (target) {
        var buffList = target.buffList;
        for (var key in buffList) {
            var buff = buffList[key];
            if (buff.reFronzen()) {
                return true;
            }
        }
        return false;
    };
    BuffModel.getBuffCfgByGroupId = function (group) {
        for (var key in DataCenter.ins().SkillsEffectsConfig) {
            var effectsConfig = DataCenter.ins().SkillsEffectsConfig[key];
            if (effectsConfig.group == group) {
                return effectsConfig;
            }
        }
        return null;
    };
    /**
     * 是否可以执行buff效果
     */
    BuffModel.prototype.isExecute = function () {
        return egret.getTimer() - this.addTime > this.step * this.effConfig.interval;
    };
    /**
     * 是否可以移除buff
     */
    BuffModel.prototype.canRemove = function () {
        return this.effConfig.type != 5 /* Summon */ && egret.getTimer() >= this.endTime;
    };
    BuffModel.prototype.isCanotHit = function () {
        return this.effConfig.type == 4 /* AdditionalState */ && this.effConfig.args.i == 1 /* StatusType_Stun */;
    };
    BuffModel.isCanotHit = function (effConfig) {
        return effConfig.type == 4 /* AdditionalState */ && effConfig.args && effConfig.args.i == 1 /* StatusType_Stun */;
    };
    BuffModel.prototype.reCanotHit = function () {
        return this.effConfig.type == 4 /* AdditionalState */ && this.effConfig.args && this.effConfig.args.i == 8 /* StatusType_ResStun */;
    };
    BuffModel.prototype.isFronzen = function () {
        return this.effConfig.type == 4 /* AdditionalState */ && this.effConfig.args && this.effConfig.args.i == 9 /* StatusType_Frozen */;
    };
    BuffModel.prototype.reFronzen = function () {
        return this.effConfig.type == 4 /* AdditionalState */ && this.effConfig.args && this.effConfig.args.i == 12 /* StatusType_SkillLimit */;
    };
    BuffModel.prototype.isExtHurmK = function () {
        return this.effConfig.type == 4 /* AdditionalState */ && this.effConfig.args && this.effConfig.args.i == 11 /* StatusType_ActExDam */;
    };
    return BuffModel;
}());
__reflect(BuffModel.prototype, "BuffModel");
var ItemModel = (function (_super) {
    __extends(ItemModel, _super);
    function ItemModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ItemModel.prototype.initItemData = function (datas) {
        this.itemData = new RewardVo();
        this.itemData.init(datas);
    };
    return ItemModel;
}(UnitModel));
__reflect(ItemModel.prototype, "ItemModel");
/**
 * 旷工
 */
var MineModel = (function (_super) {
    __extends(MineModel, _super);
    function MineModel() {
        var _this = _super.call(this) || this;
        _this.type = 102 /* MINE */;
        return _this;
    }
    Object.defineProperty(MineModel.prototype, "npcConfig", {
        get: function () {
            var conf = DataCenter.ins().MineSourceConfig[this.configID];
            return DataCenter.ins().NpcBaseConfig[conf.npcId];
        },
        enumerable: true,
        configurable: true
    });
    MineModel.prototype.init = function (datas) {
        this.index = datas[0];
        this.actorID = datas[1];
        this.name = datas[2];
        this.power = datas[3];
        this.guildName = datas[4];
        this.configID = datas[5];
        this.startTime = DateUtils.formatMiniDateTime(datas[6]);
        this.endTime = DateUtils.formatMiniDateTime(datas[7]);
        this.isBeFight = datas[8];
        this.beFightActorID = [];
        for (var i = 0; i < datas[9].length; i++) {
            this.beFightActorID[i] = datas[9][i];
        }
        this.sceceId = mineControl.index;
    };
    Object.defineProperty(MineModel.prototype, "isBeMeRob", {
        get: function () {
            return this.beFightActorID.indexOf(ActorControl.actorID) >= 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MineModel.prototype, "isBeMeFight", {
        get: function () {
            return mineControl.checkMineIsFight(this.endTime, this.index);
        },
        enumerable: true,
        configurable: true
    });
    MineModel.prototype.setBeMeFight = function () {
        mineControl.setMineIsFight(this);
    };
    Object.defineProperty(MineModel.prototype, "isBeRobOver", {
        get: function () {
            return this.beFightActorID.length >= DataCenter.ins().MineConfig.maxBeRobCount;
        },
        enumerable: true,
        configurable: true
    });
    return MineModel;
}(NpcModel));
__reflect(MineModel.prototype, "MineModel");
var RoleModel = (function (_super) {
    __extends(RoleModel, _super);
    function RoleModel() {
        var _this = _super.call(this) || this;
        /** 雷霆淬炼 */
        _this.thunderForgeVos = [];
        /** 雷霆套装 */
        _this.thunderSuitVos = [];
        /**战纹数据 */
        _this.runeDatas = [];
        /**羽翼数据 */
        _this.wingSkillData = [];
        /** 历练 */
        _this.lilianLv = 0;
        /**麻痹戒指1是,0否 -_- */
        _this._mbRing = 0;
        /**护声戒指1是,0否*/
        _this.hsRing = 0;
        /**法阵ID */
        _this.deCirShowID = 0;
        /**星辰数据 */
        _this.starSunVos = [];
        /**霸主装备 */
        _this.thirteenEquipLv = 0;
        /**官职等级 */
        _this.guanZhiLv = 0;
        _this.type = 1 /* ROLE */;
        return _this;
    }
    /**
     * 通过属性名获取属性类型
     */
    RoleModel.getAttrTypeByName = function (attrName) {
        return AttributeData.translate[attrName];
    };
    /**
     * 通过职业类型获取职业名
     */
    RoleModel.getJobNameByJob = function (type) {
        return LangMgr.getValueByKey("job" + (type + 1));
    };
    RoleModel.getHejiEquipNameByType = function (type) {
        return LangMgr.getValueByKey("roleBG" + (type + 1));
    };
    RoleModel.getEquipNameByType = function (type) {
        return LangMgr.getValueByKey("equipPosName" + type);
    };
    RoleModel.getWingEquipNameByType = function (type) {
        return LangMgr.getValueByKey("roleEquipWing" + (type + 1));
    };
    /**
     * 强化等级
     */
    RoleModel.getIntensifyTotalLvByType = function (type) {
        var sumlevel = 0;
        var len = heroControl.subRolesLen;
        for (var i = 0; i < len; i++) {
            var eqdata = heroControl.getSubRoleByIndex(i).equipsData;
            for (var j = 0; j < GameConst.FORGE_MAX; j++) {
                switch (type) {
                    case 0 /* INTENSIFY */:
                        sumlevel += eqdata[j].strengthen;
                        break;
                    case 1 /* REFINE */:
                        sumlevel += eqdata[j].gem;
                        break;
                    case 2 /* FORGE */:
                        sumlevel += eqdata[j].zhuling;
                        break;
                }
            }
        }
        return sumlevel;
    };
    /**
     * 神装总转身数据
     * @param index 装备索引
     * @param packageID
     */
    RoleModel.getAllZSLevel = function () {
        var sumlevel = 0;
        var len = heroControl.subRolesLen;
        for (var r = 0; r < len; r++) {
            var eqdata = heroControl.getSubRoleByIndex(r).equipsData;
            for (var i = 0; i < GameConst.FORGE_MAX; i++) {
                var configID = eqdata[i].item.configID;
                var curItemData = DataCenter.ins().ItemConfig[configID];
                //神装4 传奇5
                if (curItemData && ItemUtils.getQuality(curItemData) == 4 && curItemData.zsLevel) {
                    sumlevel += curItemData.zsLevel;
                }
            }
        }
        return sumlevel;
    };
    RoleModel.prototype.init = function (datas) {
        var startIndex = 0;
        var endIndex = 0;
        this.title = datas[startIndex];
        startIndex++;
        this.index = datas[startIndex];
        startIndex++;
        this.job = datas[startIndex];
        startIndex++;
        this.sex = datas[startIndex];
        startIndex++;
        this.power = datas[startIndex];
        startIndex++;
        this.skillsData = [];
        for (var i = 0; i < datas[startIndex].length; i++) {
            this.skillsData.push(SkillVo.getSkillByJob(this.job, i + 1, datas[startIndex][i]));
        }
        startIndex++;
        this.equipsData = [];
        var equip;
        for (var i = 0; i < datas[startIndex].length; i++) {
            equip = new EquipVo();
            equip.init(datas[startIndex][i]);
            this.equipsData.push(equip);
        }
        startIndex++;
        this.exRingsData = [];
        for (var i = 0; i < datas[startIndex].length; i++) {
            this.exRingsData.push(datas[startIndex][i]);
        }
        startIndex++;
        endIndex = startIndex + ByteConst.FeatherVos.length;
        this.wingsData = new FeatherVo;
        this.wingsData.init(datas.slice(startIndex, endIndex));
        startIndex = endIndex;
        endIndex = startIndex + ByteConst.MeridiansVos.length;
        this.jingMaiData = new MeridiansVo;
        this.jingMaiData.init(datas.slice(startIndex, endIndex));
        startIndex = endIndex;
        endIndex = startIndex + ByteConst.DragonSoulDataVos.length;
        this.loongSoulData = new DragonSoulDataVo();
        this.loongSoulData.init(datas.slice(startIndex, endIndex));
        startIndex = endIndex;
        this.initRune(datas[startIndex]);
        startIndex++;
        this.initHeirloom(datas[startIndex]);
        startIndex++;
        this.initWeapons(datas[startIndex]);
        startIndex++;
        this.initNewStrengthen(datas[startIndex], datas[startIndex + 1]);
        startIndex += 2;
        this.initMasterEquip(datas[startIndex]);
        startIndex++;
        this.initAtt(datas[startIndex]);
        startIndex++;
        this.initExAtt(datas[startIndex]);
        startIndex++;
        this.deCirShowID = datas[startIndex];
        startIndex++;
        this.initJadeData(datas[startIndex]);
        startIndex++;
        endIndex = startIndex + ByteConst.FashionIds.length;
        this.initZhuangbei(datas.slice(startIndex, endIndex));
        this.setWingSkill();
        startIndex = endIndex;
        this.initLegendEquipForge(datas[startIndex]);
        startIndex++;
        this.initEnhance(datas[startIndex]);
        startIndex++;
        this.thirteenEquipLv = datas[startIndex];
        startIndex++;
        this.heirloomDressId = datas[startIndex];
        startIndex++;
        this.guanZhiLv = datas[startIndex];
        startIndex++;
        this.weaponViewType = datas[startIndex];
        startIndex++;
        this.weaponViewId = datas[startIndex];
        startIndex++;
        this.clothesViewType = datas[startIndex];
        startIndex++;
        this.clothesViewId = datas[startIndex];
    };
    /**
     * 战纹
     */
    RoleModel.prototype.initRune = function (datas) {
        var data = null;
        this.runeDatas = [];
        for (var i = 0; i < datas.length; i++) {
            data = new ItemData();
            data.init(datas[i]);
            this.runeDatas.push(data);
        }
    };
    /**
     * 传世
     */
    RoleModel.prototype.initHeirloom = function (datas) {
        if (!this.heirloom) {
            this.heirloom = new HeirloomVo();
        }
        this.heirloom.init(datas);
    };
    /**
     * 兵魂
     */
    RoleModel.prototype.initWeapons = function (weaponsId) {
        if (!this.weapons) {
            this.weapons = new WeaponsSoulDataVo();
        }
        this.weapons.weaponsId = weaponsId;
    };
    /**
     * 雷霆
     */
    RoleModel.prototype.initNewStrengthen = function (datas, suitDatas) {
        thunderControl.init(this, datas);
        thunderControl.initThunder(this, suitDatas);
    };
    /**
     * 主宰
     */
    RoleModel.prototype.initMasterEquip = function (datas) {
        if (!this.masterEquips) {
            this.masterEquips = [];
        }
        for (var i = 0; i < datas.length; i++) {
            var masterEquip = this.masterEquips[i];
            if (!masterEquip) {
                masterEquip = new ItemData;
                this.masterEquips[i] = masterEquip;
            }
            masterEquip.init(datas[i]);
        }
    };
    /**
     * 属性
     */
    RoleModel.prototype.initAtt = function (datas, showTip) {
        if (showTip === void 0) { showTip = false; }
        _super.prototype.initAtt.call(this, datas, showTip);
    };
    /**
     * 扩展属性
     */
    RoleModel.prototype.initExAtt = function (datas) {
        for (var i = 0; i < datas.length; i++) {
            this.attributeExData[i] = datas[i];
        }
    };
    /**
     * 玉佩
     */
    RoleModel.prototype.initJadeData = function (lv) {
        if (!this.jadeData) {
            this.jadeData = new JadeDataNewVo();
        }
        this.jadeData.initOther(lv);
    };
    /**
     * 装扮
     */
    RoleModel.prototype.initZhuangbei = function (datas) {
        this.zhuangbei = [];
        for (var i = 0; i < datas.length; i++) {
            this.zhuangbei.push(datas[i]);
        }
    };
    /**
     * 羽翼技能
     */
    RoleModel.prototype.setWingSkill = function () {
        this.wingSkillData = [];
        for (var j = 0; j < this.wingsData.lv + 1; j++) {
            var tData = DataCenter.ins().FeatherLevelConfig[j];
            if (tData && tData.pasSkillId) {
                this.wingSkillData.push(tData.pasSkillId);
            }
        }
    };
    /**
     * 神话
     */
    RoleModel.prototype.initLegendEquipForge = function (datas) {
        this.mythForgeVo = this.mythForgeVo || new MythForgeVo;
        this.mythForgeVo.roleId = this.index;
        this.mythForgeVo.init(datas);
    };
    /**
     * 星辰
     */
    RoleModel.prototype.initEnhance = function (datas) {
        starSunControl.init(this, datas);
    };
    RoleModel.prototype.intOtherRole = function (datas) {
        this.initAtt(datas[0]);
        this.initExAtt(datas[1]);
        this._name = datas[2];
        this._servId = datas[3];
        this.job = datas[4];
        this.sex = datas[5];
        this._lv = datas[6];
        this.equipsData = [];
        //身体
        this.equipsData[2] = new EquipVo;
        this.equipsData[2].item = new ItemData;
        this.equipsData[2].item.configID = datas[7];
        //武器
        this.equipsData[0] = new EquipVo;
        this.equipsData[0].item = new ItemData;
        this.equipsData[0].item.configID = datas[8];
        this.wingsData = new FeatherVo;
        this.wingsData.lv = datas[9];
        this.wingsData.openStatus = datas[10];
        //称号
        this.title = datas[11];
        //公会id
        this.guildID = datas[12];
        //公会名
        this.guildName = datas[13];
        this.initZhuangbei(datas.slice(14, 17));
        //历练等级
        this.lilianLv = datas[17];
        //兵魂id
        this.weaponsId = datas[18];
        //传世装备
        this.initHeirloom(datas[19]);
        //阵营id
        this.camp = datas[20];
        this.weaponViewType = datas[21];
        this.weaponViewId = datas[22];
        this.clothesViewType = datas[23];
        this.clothesViewId = datas[23];
    };
    Object.defineProperty(RoleModel.prototype, "mbRing", {
        get: function () {
            return this._mbRing;
        },
        set: function (value) {
            this._mbRing = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 通过锻造类型获取等级最小的装备索引
     * @param type 0 强化 1 铸造 2 精炼
     */
    RoleModel.prototype.getMinEquipIndexByType = function (type) {
        var index = 0;
        var min = Number.MAX_VALUE;
        var lv = 0;
        var num = IntensifyConst.FORGE_EQUIP.length;
        for (var n = 0; n < num; ++n) {
            var i = IntensifyConst.FORGE_EQUIP[n];
            switch (type) {
                case 0 /* INTENSIFY */:
                    lv = this.equipsData[i].strengthen;
                    break;
                case 1 /* REFINE */:
                    lv = this.equipsData[i].gem;
                    var openConfig = DataCenter.ins().IntensifyOpenConfig[i];
                    if (ActorControl.level < openConfig.openLv)
                        continue;
                    break;
                case 2 /* FORGE */:
                    lv = this.equipsData[i].zhuling;
                    break;
            }
            if (min > lv) {
                min = lv;
                index = i;
            }
        }
        return index;
    };
    /**
     * 通过锻造类型获取装备总等级
     * @param type 0 强化 1 宝石 2 注灵
     */
    RoleModel.prototype.getEquipForgeTotalLv = function (type) {
        var totalLv = 0;
        var n = IntensifyConst.FORGE_EQUIP.length;
        while (n--) {
            var i = IntensifyConst.FORGE_EQUIP[n];
            switch (type) {
                case 0 /* INTENSIFY */:
                    totalLv += this.getEquipByIndex(i).strengthen;
                    break;
                case 1 /* REFINE */:
                    totalLv += this.getEquipByIndex(i).gem;
                    break;
                case 2 /* FORGE */:
                    totalLv += this.getEquipByIndex(i).zhuling;
                    break;
            }
        }
        return totalLv;
    };
    RoleModel.prototype.getEquipForgeLv = function (solt, type) {
        var lv = 0;
        switch (type) {
            case 0 /* INTENSIFY */:
                lv += this.getEquipByIndex(solt).strengthen;
                break;
            case 1 /* REFINE */:
                lv += this.getEquipByIndex(solt).gem;
                break;
            case 2 /* FORGE */:
                lv += this.getEquipByIndex(solt).zhuling;
                break;
        }
        return lv;
    };
    RoleModel.prototype.getAllHeirloomPower = function () {
        var total = 0;
        for (var i = 0; i < 8; i++)
            total += this.getHeirloomSlotPower(i);
        return total;
    };
    RoleModel.prototype.getHeirloomSlotPower = function (solt) {
        var info = this.heirloom.getInfoBySolt(solt);
        var power = BackpackControl.getAttrPower(info.attr) || 0;
        var add_attr = info.attr_add;
        var forgePower = 0;
        var equipData = this.getEquipByIndex(solt);
        if (equipData.item.itemConfig) {
            forgePower += equipData.item.point;
            for (var i = 0; i < 3; i++) {
                var lv = this.getEquipForgeLv(solt, i);
                var config = intensifyControl.getForgeConfigByPos(solt, lv, i);
                forgePower += BackpackControl.getAttrPower(config.attr) || 0;
            }
        }
        var totalPower = power + Math.floor(forgePower * (add_attr / 100));
        return totalPower;
    };
    RoleModel.prototype.getCurSkillIDs = function () {
        var data = [];
        for (var i = 0; i < this.skillsData.length; i++) {
            data.push(this.skillsData[i].lv1ConfigID);
        }
        return data;
    };
    RoleModel.prototype.mergeData = function (data) {
        this.masterHandle = data.masterHandle;
        this.handle = data.handle;
        this.type = data.type;
        this.x = data.x;
        this.y = data.y;
        this.attributeData = data.attributeData;
        this.attributeExData = data.attributeExData;
        this.team = data.team;
        this.lilianLv = data.lilianLv;
        this.name = data.name;
        this.guildID = data.guildID;
        this.guildName = data.guildName;
        this.isMy = data.isMy;
        this.title = data.title;
        if (data instanceof RoleModel) {
            this.warLevel = data.warLevel;
            this.mbRing = data.mbRing;
            this.hsRing = data.hsRing;
        }
        return this;
    };
    RoleModel.prototype.mergeOtherAttr = function (data) {
        var otherAttrTypes = UnitModel.OtherAttrType;
        for (var i = 0; i < otherAttrTypes.length; i++) {
            var otherAttrType = otherAttrTypes[i];
            this.setAtt(otherAttrType, data.getAtt(otherAttrType));
        }
    };
    /**
     * 根据装备位置获取该装备数据
     * @param subType 装备子类型
     */
    RoleModel.prototype.getEquipDataByPos = function (pos) {
        if (this.equipsData && this.equipsData[pos]) {
            return this.equipsData[pos];
        }
        return null;
    };
    /**
     * 锻造总战斗力
     */
    RoleModel.prototype.getForgeTotalPower = function (type) {
        var totalPower = 0;
        var n = IntensifyConst.FORGE_EQUIP.length;
        while (n--) {
            var i = IntensifyConst.FORGE_EQUIP[n];
            var lv = void 0;
            switch (type) {
                case 0 /* INTENSIFY */:
                    lv = this.equipsData[i].strengthen;
                    break;
                case 2 /* FORGE */:
                    lv = this.equipsData[i].zhuling;
                    break;
                case 1 /* REFINE */:
                    lv = this.equipsData[i].gem;
                    break;
            }
            if (lv > 0) {
                var forgeConfig = intensifyControl.getForgeConfigByPos(i, lv, type);
                totalPower += Math.floor(BackpackControl.getAttrPower(forgeConfig.attr));
            }
        }
        return totalPower;
    };
    /**
     * 兵魂战斗力
     * @param 兵魂id(有值则返回指定兵魂战斗力)
     */
    RoleModel.prototype.getWeaponTotalPower = function (id) {
        var totalPower = 0;
        var attr = [];
        if (id > 0) {
            var wsconfig = DataCenter.ins().WeaponSoulConfig[id];
            for (var i = 0; i < wsconfig.actcond.length; i++) {
                var slot = wsconfig.actcond[i];
                var winfo = this.weapons.getSlotByInfo(slot);
                if (winfo) {
                    for (var j = 0; j < winfo.attr.length; j++) {
                        var at = new AttributeData;
                        at.type = winfo.attr[j].type;
                        at.value = winfo.attr[j].value;
                        attr.push(at);
                    }
                }
            }
        }
        else {
            var infodata = this.weapons.getInfoData();
            for (var k in infodata) {
                var wsinfo = infodata[k];
                for (var w in wsinfo) {
                    var info = wsinfo[w];
                    if (info && info.level) {
                        for (var j = 0; j < info.attr.length; j++) {
                            var at = new AttributeData;
                            var tmp = info.attr[j];
                            at.type = tmp.type;
                            at.value = tmp.value;
                            attr.push(at);
                        }
                    }
                }
            }
        }
        var index = this.weapons.flexibleCount ? this.weapons.flexibleCount - 1 : 0;
        var config = DataCenter.ins().WeaponSoulItemAttrConfig[index];
        if (attr.length && config) {
            for (var i = 0; i < config.attr.length; i++) {
                var isHave = false;
                for (var j = 0; j < attr.length; j++) {
                    if (attr[j].type == config.attr[i].type) {
                        isHave = true;
                        attr[j].value += config.attr[i].value;
                        break;
                    }
                }
                if (!isHave) {
                    var at = new AttributeData;
                    var tmp = config.attr[i];
                    at.type = tmp.type;
                    at.value = tmp.value;
                    attr.push(at);
                }
            }
        }
        totalPower += Math.floor(BackpackControl.getAttrPower(attr));
        return totalPower;
    };
    Object.defineProperty(RoleModel.prototype, "name", {
        get: function () {
            return this._name;
        },
        set: function (str) {
            this._name = str;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 获取带服务器ID的名字
     */
    RoleModel.prototype.getNameWithServer2 = function () {
        return this._servId && crossFieldControl.isCross ? this.name + ("\nS" + this._servId) : this.name;
    };
    Object.defineProperty(RoleModel.prototype, "guildAndName", {
        get: function () {
            var nameStr = this.getNameWithServer();
            var specailColor = this.camp > 0 && campWarControl.isCampWar() ? (this.camp != campWarControl.camp ? "#FF0000" : "#00FF00") : null;
            var str = this.guildID == 0 || this.guildID == undefined ? nameStr : "<font color='" + (specailColor ? specailColor : this.guildID == unionWarControl.getModel().winGuildInfo.guildId ? "#ffb243" : this.guildID == unionControl.guildID ? "#5add70" : "#2CC2F8") + "}'>" + this.guildName + "</font>" + "\n" + this.name;
            if (this.lilianLv > 0) {
                var config = DataCenter.ins().ExperienceKingLevelConfig[this.lilianLv];
                if (config.type > 1) {
                    var type = Math.min(config.type, 8);
                    var color = LangMgr.getValueByKey("experienceKingColor" + type);
                    str += " <font color=" + (specailColor ? specailColor : color) + ">[" + config.trainName + "]</font>";
                }
            }
            return str;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RoleModel.prototype, "lilianUrl", {
        get: function () {
            return '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RoleModel.prototype, "lv", {
        get: function () {
            return this._lv;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 根据索引获取装备
     */
    RoleModel.prototype.getEquipByIndex = function (index) {
        return this.equipsData[index];
    };
    /**
     * 是否隐藏兵魂特效
     */
    RoleModel.prototype.hideWeapons = function () {
        var id = this.getEquipByIndex(0).item.configID;
        if (ItemUtils.getQuality(DataCenter.ins().ItemConfig[id]) == 5) {
            return true;
        }
        else if (this.zhuangbei[1] > 0) {
            return (DataCenter.ins().EquipConfig[id] && DataCenter.ins().EquipConfig[id].noWSoulEff >= 1)
                || DataCenter.ins().FashionConfig.effOpen.indexOf(this.zhuangbei[1]) != -1;
        }
        return false;
    };
    /**
     * 获取装备数量
     */
    RoleModel.prototype.getEquipLen = function () {
        return this.equipsData.length;
    };
    /**
     * 根据索引获取特殊戒指数据
     */
    RoleModel.prototype.getExRingsData = function (index) {
        return this.exRingsData[index];
    };
    /**
     * 根据所以设置特殊戒指数据
     */
    RoleModel.prototype.setExRingsData = function (index, value) {
        this.exRingsData[index] = value;
    };
    RoleModel.isAllDie = function (isMaster) {
        var list = UnitMgr.ins().getMasterList(isMaster ? isMaster.masterHandle : ActorControl.handle);
        if (!list || list.length == 0) {
            return true;
        }
        var totalHp = 0;
        for (var i = list.length, n = 0; i > n; n++) {
            var entity = list[n];
            var hp = entity.infoModel.getAtt(0 /* atHp */) || 0;
            totalHp += hp;
        }
        return totalHp <= 0;
    };
    return RoleModel;
}(UnitModel));
__reflect(RoleModel.prototype, "RoleModel");
/**
 * 传送点
 */
var TransferModel = (function (_super) {
    __extends(TransferModel, _super);
    function TransferModel() {
        var _this = _super.call(this) || this;
        _this.type = 101 /* TRANSFER */;
        return _this;
    }
    Object.defineProperty(TransferModel.prototype, "avatarFileName", {
        get: function () {
            return PATH_EFF + "movestand";
        },
        enumerable: true,
        configurable: true
    });
    return TransferModel;
}(NpcModel));
__reflect(TransferModel.prototype, "TransferModel");
